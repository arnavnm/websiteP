{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DetectProtectiveEquipmentRequest, DetectProtectiveEquipmentResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1DetectProtectiveEquipmentCommand, serializeAws_json1_1DetectProtectiveEquipmentCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Detects Personal Protective Equipment (PPE) worn by people detected in an image. Amazon Rekognition can detect the\n *          following types of PPE.</p>\n *          <ul>\n *             <li>\n *                <p>Face cover</p>\n *             </li>\n *             <li>\n *                <p>Hand cover</p>\n *             </li>\n *             <li>\n *                <p>Head cover</p>\n *             </li>\n *          </ul>\n *\n *          <p>You pass the input image as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket.\n *          The image must be either a PNG or JPG formatted file. </p>\n *\n *          <p>\n *             <code>DetectProtectiveEquipment</code> detects PPE worn by up to 15 persons detected in an image.</p>\n *          <p>For each person detected in the image the API returns an array of body parts (face, head, left-hand, right-hand).\n *          For each body part, an array of detected items of PPE is returned, including an indicator of whether or not the PPE\n *          covers the body part. The API returns the confidence it has in each detection\n *          (person, PPE, body part and body part coverage). It also returns a bounding box (<a>BoundingBox</a>) for each detected\n *          person and each detected item of PPE. </p>\n *          <p>You can optionally request a summary of detected PPE items with the <code>SummarizationAttributes</code> input parameter.\n *          The summary provides the following information. </p>\n *          <ul>\n *             <li>\n *                <p>The persons detected as wearing all of the types of PPE that you specify.</p>\n *             </li>\n *             <li>\n *                <p>The persons detected as not wearing all of the types PPE that you specify.</p>\n *             </li>\n *             <li>\n *                <p>The persons detected where PPE adornment could not be determined. </p>\n *             </li>\n *          </ul>\n *          <p>This is a stateless API operation. That is, the operation does not persist any data.</p>\n *\n *          <p>This operation requires permissions to perform the <code>rekognition:DetectProtectiveEquipment</code> action. </p>\n */\n\nvar DetectProtectiveEquipmentCommand =\n/** @class */\nfunction (_super) {\n  __extends(DetectProtectiveEquipmentCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function DetectProtectiveEquipmentCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  DetectProtectiveEquipmentCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"DetectProtectiveEquipmentCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: DetectProtectiveEquipmentRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DetectProtectiveEquipmentResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  DetectProtectiveEquipmentCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1DetectProtectiveEquipmentCommand(input, context);\n  };\n\n  DetectProtectiveEquipmentCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1DetectProtectiveEquipmentCommand(output, context);\n  };\n\n  return DetectProtectiveEquipmentCommand;\n}($Command);\n\nexport { DetectProtectiveEquipmentCommand };","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,gCAAT,EAA2CC,iCAA3C,QAAoF,oBAApF;AACA,SAASC,sDAAT,EAAiEC,oDAAjE,QAA8H,0BAA9H;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,gCAAgC;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACpET,SAAS,CAACQ,gCAAD,EAAmCC,MAAnC,CAAT,CADoE,CAEpE;EACA;;;EACA,SAASD,gCAAT,CAA0CE,KAA1C,EAAiD;IAC7C,IAAIC,KAAK,GACT;IACAF,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;IAGAD,KAAK,CAACD,KAAN,GAAcA,KAAd;IACA,OAAOC,KAAP,CAL6C,CAM7C;EACH;EACD;AACJ;AACA;;;EACIH,gCAAgC,CAACK,SAAjC,CAA2CC,iBAA3C,GAA+D,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;IAC1G,KAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,IAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;IACA,IAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;IACA,IAAIC,UAAU,GAAG,mBAAjB;IACA,IAAIC,WAAW,GAAG,kCAAlB;IACA,IAAIC,uBAAuB,GAAG;MAC1BH,MAAM,EAAEA,MADkB;MAE1BC,UAAU,EAAEA,UAFc;MAG1BC,WAAW,EAAEA,WAHa;MAI1BE,uBAAuB,EAAE3B,gCAAgC,CAAC4B,kBAJhC;MAK1BC,wBAAwB,EAAE5B,iCAAiC,CAAC2B;IALlC,CAA9B;IAOA,IAAIE,cAAc,GAAGf,aAAa,CAACe,cAAnC;IACA,OAAOT,KAAK,CAACU,OAAN,CAAc,UAAUC,OAAV,EAAmB;MACpC,OAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuChB,OAAO,IAAI,EAAlD,CAAP;IACH,CAFM,EAEJU,uBAFI,CAAP;EAGH,CAjBD;;EAkBAnB,gCAAgC,CAACK,SAAjC,CAA2CO,SAA3C,GAAuD,UAAUV,KAAV,EAAiByB,OAAjB,EAA0B;IAC7E,OAAO/B,oDAAoD,CAACM,KAAD,EAAQyB,OAAR,CAA3D;EACH,CAFD;;EAGA3B,gCAAgC,CAACK,SAAjC,CAA2CQ,WAA3C,GAAyD,UAAUe,MAAV,EAAkBD,OAAlB,EAA2B;IAChF,OAAOhC,sDAAsD,CAACiC,MAAD,EAASD,OAAT,CAA7D;EACH,CAFD;;EAGA,OAAO3B,gCAAP;AACH,CAxCqD,CAwCpDD,QAxCoD,CAAtD;;AAyCA,SAASC,gCAAT","names":["DetectProtectiveEquipmentRequest","DetectProtectiveEquipmentResponse","deserializeAws_json1_1DetectProtectiveEquipmentCommand","serializeAws_json1_1DetectProtectiveEquipmentCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","DetectProtectiveEquipmentCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/client-rekognition/commands/DetectProtectiveEquipmentCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { DetectProtectiveEquipmentRequest, DetectProtectiveEquipmentResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1DetectProtectiveEquipmentCommand,\n  serializeAws_json1_1DetectProtectiveEquipmentCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type DetectProtectiveEquipmentCommandInput = DetectProtectiveEquipmentRequest;\nexport type DetectProtectiveEquipmentCommandOutput = DetectProtectiveEquipmentResponse & __MetadataBearer;\n\n/**\n * <p>Detects Personal Protective Equipment (PPE) worn by people detected in an image. Amazon Rekognition can detect the\n *          following types of PPE.</p>\n *          <ul>\n *             <li>\n *                <p>Face cover</p>\n *             </li>\n *             <li>\n *                <p>Hand cover</p>\n *             </li>\n *             <li>\n *                <p>Head cover</p>\n *             </li>\n *          </ul>\n *\n *          <p>You pass the input image as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket.\n *          The image must be either a PNG or JPG formatted file. </p>\n *\n *          <p>\n *             <code>DetectProtectiveEquipment</code> detects PPE worn by up to 15 persons detected in an image.</p>\n *          <p>For each person detected in the image the API returns an array of body parts (face, head, left-hand, right-hand).\n *          For each body part, an array of detected items of PPE is returned, including an indicator of whether or not the PPE\n *          covers the body part. The API returns the confidence it has in each detection\n *          (person, PPE, body part and body part coverage). It also returns a bounding box (<a>BoundingBox</a>) for each detected\n *          person and each detected item of PPE. </p>\n *          <p>You can optionally request a summary of detected PPE items with the <code>SummarizationAttributes</code> input parameter.\n *          The summary provides the following information. </p>\n *          <ul>\n *             <li>\n *                <p>The persons detected as wearing all of the types of PPE that you specify.</p>\n *             </li>\n *             <li>\n *                <p>The persons detected as not wearing all of the types PPE that you specify.</p>\n *             </li>\n *             <li>\n *                <p>The persons detected where PPE adornment could not be determined. </p>\n *             </li>\n *          </ul>\n *          <p>This is a stateless API operation. That is, the operation does not persist any data.</p>\n *\n *          <p>This operation requires permissions to perform the <code>rekognition:DetectProtectiveEquipment</code> action. </p>\n */\nexport class DetectProtectiveEquipmentCommand extends $Command<\n  DetectProtectiveEquipmentCommandInput,\n  DetectProtectiveEquipmentCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: DetectProtectiveEquipmentCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<DetectProtectiveEquipmentCommandInput, DetectProtectiveEquipmentCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"DetectProtectiveEquipmentCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: DetectProtectiveEquipmentRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: DetectProtectiveEquipmentResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: DetectProtectiveEquipmentCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1DetectProtectiveEquipmentCommand(input, context);\n  }\n\n  private deserialize(\n    output: __HttpResponse,\n    context: __SerdeContext\n  ): Promise<DetectProtectiveEquipmentCommandOutput> {\n    return deserializeAws_json1_1DetectProtectiveEquipmentCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}