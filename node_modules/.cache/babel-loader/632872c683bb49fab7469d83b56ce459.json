{"ast":null,"code":"import { __values } from \"tslib\";\nimport { ProviderError } from \"./ProviderError\";\n/**\n * Compose a single credential provider function from multiple credential\n * providers. The first provider in the argument list will always be invoked;\n * subsequent providers in the list will be invoked in the order in which the\n * were received if the preceding provider did not successfully resolve.\n *\n * If no providers were received or no provider resolves successfully, the\n * returned promise will be rejected.\n */\n\nexport function chain() {\n  var providers = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    providers[_i] = arguments[_i];\n  }\n\n  return function () {\n    var e_1, _a;\n\n    var promise = Promise.reject(new ProviderError(\"No providers in chain\"));\n\n    var _loop_1 = function (provider) {\n      promise = promise.catch(function (err) {\n        if (err === null || err === void 0 ? void 0 : err.tryNextLink) {\n          return provider();\n        }\n\n        throw err;\n      });\n    };\n\n    try {\n      for (var providers_1 = __values(providers), providers_1_1 = providers_1.next(); !providers_1_1.done; providers_1_1 = providers_1.next()) {\n        var provider = providers_1_1.value;\n\n        _loop_1(provider);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (providers_1_1 && !providers_1_1.done && (_a = providers_1.return)) _a.call(providers_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return promise;\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,KAAT,GAAiB;EACpB,IAAIC,SAAS,GAAG,EAAhB;;EACA,KAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;IAC1CD,SAAS,CAACC,EAAD,CAAT,GAAgBC,SAAS,CAACD,EAAD,CAAzB;EACH;;EACD,OAAO,YAAY;IACf,IAAIG,GAAJ,EAASC,EAAT;;IACA,IAAIC,OAAO,GAAGC,OAAO,CAACC,MAAR,CAAe,IAAIV,aAAJ,CAAkB,uBAAlB,CAAf,CAAd;;IACA,IAAIW,OAAO,GAAG,UAAUC,QAAV,EAAoB;MAC9BJ,OAAO,GAAGA,OAAO,CAACK,KAAR,CAAc,UAAUC,GAAV,EAAe;QACnC,IAAIA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiC,KAAK,CAAtC,GAA0CA,GAAG,CAACC,WAAlD,EAA+D;UAC3D,OAAOH,QAAQ,EAAf;QACH;;QACD,MAAME,GAAN;MACH,CALS,CAAV;IAMH,CAPD;;IAQA,IAAI;MACA,KAAK,IAAIE,WAAW,GAAGjB,QAAQ,CAACG,SAAD,CAA1B,EAAuCe,aAAa,GAAGD,WAAW,CAACE,IAAZ,EAA5D,EAAgF,CAACD,aAAa,CAACE,IAA/F,EAAqGF,aAAa,GAAGD,WAAW,CAACE,IAAZ,EAArH,EAAyI;QACrI,IAAIN,QAAQ,GAAGK,aAAa,CAACG,KAA7B;;QACAT,OAAO,CAACC,QAAD,CAAP;MACH;IACJ,CALD,CAMA,OAAOS,KAAP,EAAc;MAAEf,GAAG,GAAG;QAAEgB,KAAK,EAAED;MAAT,CAAN;IAAyB,CANzC,SAOQ;MACJ,IAAI;QACA,IAAIJ,aAAa,IAAI,CAACA,aAAa,CAACE,IAAhC,KAAyCZ,EAAE,GAAGS,WAAW,CAACO,MAA1D,CAAJ,EAAuEhB,EAAE,CAACiB,IAAH,CAAQR,WAAR;MAC1E,CAFD,SAGQ;QAAE,IAAIV,GAAJ,EAAS,MAAMA,GAAG,CAACgB,KAAV;MAAkB;IACxC;;IACD,OAAOd,OAAP;EACH,CAzBD;AA0BH","names":["ProviderError","chain","providers","promise","Promise","reject","provider","catch","err","tryNextLink","providers_1_1"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-sdk/property-provider/src/chain.ts"],"sourcesContent":["import { Provider } from \"@aws-sdk/types\";\n\nimport { ProviderError } from \"./ProviderError\";\n\n/**\n * Compose a single credential provider function from multiple credential\n * providers. The first provider in the argument list will always be invoked;\n * subsequent providers in the list will be invoked in the order in which the\n * were received if the preceding provider did not successfully resolve.\n *\n * If no providers were received or no provider resolves successfully, the\n * returned promise will be rejected.\n */\nexport function chain<T>(...providers: Array<Provider<T>>): Provider<T> {\n  return () => {\n    let promise: Promise<T> = Promise.reject(new ProviderError(\"No providers in chain\"));\n    for (const provider of providers) {\n      promise = promise.catch((err: any) => {\n        if (err?.tryNextLink) {\n          return provider();\n        }\n\n        throw err;\n      });\n    }\n\n    return promise;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}