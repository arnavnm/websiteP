{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport API, { GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport Cache from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ProcessName } from '../../types';\nimport { buildSubscriptionGraphQLOperation, getAuthorizationRules, getModelAuthModes, getUserGroupsFromToken, TransformerMutationType, getTokenForCustomAuth } from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate, USER_AGENT_SUFFIX_DATASTORE } from '../../util';\nimport { getSubscriptionErrorType } from './errorMaps';\nvar logger = new Logger('DataStore');\nexport var CONTROL_MSG;\n\n(function (CONTROL_MSG) {\n  CONTROL_MSG[\"CONNECTED\"] = \"CONNECTED\";\n})(CONTROL_MSG || (CONTROL_MSG = {}));\n\nexport var USER_CREDENTIALS;\n\n(function (USER_CREDENTIALS) {\n  USER_CREDENTIALS[USER_CREDENTIALS[\"none\"] = 0] = \"none\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"unauth\"] = 1] = \"unauth\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"auth\"] = 2] = \"auth\";\n})(USER_CREDENTIALS || (USER_CREDENTIALS = {}));\n\nvar SubscriptionProcessor =\n/** @class */\nfunction () {\n  function SubscriptionProcessor(schema, syncPredicates, amplifyConfig, authModeStrategy, errorHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    if (amplifyContext === void 0) {\n      amplifyContext = {\n        Auth: Auth,\n        API: API,\n        Cache: Cache\n      };\n    }\n\n    this.schema = schema;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.buffer = [];\n  }\n\n  SubscriptionProcessor.prototype.buildSubscription = function (namespace, model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload, authMode) {\n    var aws_appsync_authenticationType = this.amplifyConfig.aws_appsync_authenticationType;\n\n    var _a = this.getAuthorizationInfo(model, userCredentials, aws_appsync_authenticationType, cognitoTokenPayload, oidcTokenPayload, authMode) || {},\n        isOwner = _a.isOwner,\n        ownerField = _a.ownerField,\n        ownerValue = _a.ownerValue;\n\n    var _b = __read(buildSubscriptionGraphQLOperation(namespace, model, transformerMutationType, isOwner, ownerField), 3),\n        opType = _b[0],\n        opName = _b[1],\n        query = _b[2];\n\n    return {\n      authMode: authMode,\n      opType: opType,\n      opName: opName,\n      query: query,\n      isOwner: isOwner,\n      ownerField: ownerField,\n      ownerValue: ownerValue\n    };\n  };\n\n  SubscriptionProcessor.prototype.getAuthorizationInfo = function (model, userCredentials, defaultAuthType, cognitoTokenPayload, oidcTokenPayload, authMode) {\n    if (cognitoTokenPayload === void 0) {\n      cognitoTokenPayload = {};\n    }\n\n    if (oidcTokenPayload === void 0) {\n      oidcTokenPayload = {};\n    }\n\n    var rules = getAuthorizationRules(model); // Return null if user doesn't have proper credentials for private API with IAM auth\n\n    var iamPrivateAuth = authMode === GRAPHQL_AUTH_MODE.AWS_IAM && rules.find(function (rule) {\n      return rule.authStrategy === 'private' && rule.provider === 'iam';\n    });\n\n    if (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n      return null;\n    } // Group auth should take precedence over owner auth, so we are checking\n    // if rule(s) have group authorization as well as if either the Cognito or\n    // OIDC token has a groupClaim. If so, we are returning auth info before\n    // any further owner-based auth checks.\n\n\n    var groupAuthRules = rules.filter(function (rule) {\n      return rule.authStrategy === 'groups' && ['userPools', 'oidc'].includes(rule.provider);\n    });\n    var validGroup = (authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS || authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) && groupAuthRules.find(function (groupAuthRule) {\n      // validate token against groupClaim\n      var cognitoUserGroups = getUserGroupsFromToken(cognitoTokenPayload, groupAuthRule);\n      var oidcUserGroups = getUserGroupsFromToken(oidcTokenPayload, groupAuthRule);\n      return __spread(cognitoUserGroups, oidcUserGroups).find(function (userGroup) {\n        return groupAuthRule.groups.find(function (group) {\n          return group === userGroup;\n        });\n      });\n    });\n\n    if (validGroup) {\n      return {\n        authMode: authMode,\n        isOwner: false\n      };\n    } // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the Cognito token via the\n    // identityClaim from the auth rule.\n\n\n    var cognitoOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'userPools';\n    }) : [];\n    var ownerAuthInfo;\n    cognitoOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    } // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the OIDC token via the\n    // identityClaim from the auth rule.\n\n\n    var oidcOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'oidc';\n    }) : [];\n    oidcOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    } // Fallback: return authMode or default auth type\n\n\n    return {\n      authMode: authMode || defaultAuthType,\n      isOwner: false\n    };\n  };\n\n  SubscriptionProcessor.prototype.hubQueryCompletionListener = function (completed, capsule) {\n    var event = capsule.payload.event;\n\n    if (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n      completed();\n    }\n  };\n\n  SubscriptionProcessor.prototype.start = function () {\n    var _this = this;\n\n    var ctlObservable = new Observable(function (observer) {\n      var promises = []; // Creating subs for each model/operation combo so they can be unsubscribed\n      // independently, since the auth retry behavior is asynchronous.\n\n      var subscriptions = {};\n      var cognitoTokenPayload, oidcTokenPayload;\n      var userCredentials = USER_CREDENTIALS.none;\n\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var credentials, err_1, session, err_2, _a, aws_cognito_region, AuthConfig, token, federatedInfo, currentUser, payload, err_3;\n\n          var _this = this;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                _b.trys.push([0, 2,, 3]);\n\n                return [4\n                /*yield*/\n                , this.amplifyContext.Auth.currentCredentials()];\n\n              case 1:\n                credentials = _b.sent();\n                userCredentials = credentials.authenticated ? USER_CREDENTIALS.auth : USER_CREDENTIALS.unauth;\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                err_1 = _b.sent();\n                return [3\n                /*break*/\n                , 3];\n\n              case 3:\n                _b.trys.push([3, 5,, 6]);\n\n                return [4\n                /*yield*/\n                , this.amplifyContext.Auth.currentSession()];\n\n              case 4:\n                session = _b.sent();\n                cognitoTokenPayload = session.getIdToken().decodePayload();\n                return [3\n                /*break*/\n                , 6];\n\n              case 5:\n                err_2 = _b.sent();\n                return [3\n                /*break*/\n                , 6];\n\n              case 6:\n                _b.trys.push([6, 11,, 12]);\n\n                _a = this.amplifyConfig, aws_cognito_region = _a.aws_cognito_region, AuthConfig = _a.Auth;\n\n                if (!aws_cognito_region || AuthConfig && !AuthConfig.region) {\n                  throw 'Auth is not configured';\n                }\n\n                token = void 0;\n                return [4\n                /*yield*/\n                , this.amplifyContext.Cache.getItem('federatedInfo')];\n\n              case 7:\n                federatedInfo = _b.sent();\n                if (!federatedInfo) return [3\n                /*break*/\n                , 8];\n                token = federatedInfo.token;\n                return [3\n                /*break*/\n                , 10];\n\n              case 8:\n                return [4\n                /*yield*/\n                , this.amplifyContext.Auth.currentAuthenticatedUser()];\n\n              case 9:\n                currentUser = _b.sent();\n\n                if (currentUser) {\n                  token = currentUser.token;\n                }\n\n                _b.label = 10;\n\n              case 10:\n                if (token) {\n                  payload = token.split('.')[1];\n                  oidcTokenPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf8'));\n                }\n\n                return [3\n                /*break*/\n                , 12];\n\n              case 11:\n                err_3 = _b.sent();\n                logger.debug('error getting OIDC JWT', err_3);\n                return [3\n                /*break*/\n                , 12];\n\n              case 12:\n                Object.values(this.schema.namespaces).forEach(function (namespace) {\n                  Object.values(namespace.models).filter(function (_a) {\n                    var syncable = _a.syncable;\n                    return syncable;\n                  }).forEach(function (modelDefinition) {\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var modelAuthModes, readAuthModes, operations, operationAuthModeAttempts, authModeRetry;\n\n                      var _a, _b, _c;\n\n                      var _this = this;\n\n                      return __generator(this, function (_d) {\n                        switch (_d.label) {\n                          case 0:\n                            return [4\n                            /*yield*/\n                            , getModelAuthModes({\n                              authModeStrategy: this.authModeStrategy,\n                              defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n                              modelName: modelDefinition.name,\n                              schema: this.schema\n                            })];\n\n                          case 1:\n                            modelAuthModes = _d.sent();\n                            readAuthModes = modelAuthModes.READ;\n                            subscriptions = __assign(__assign({}, subscriptions), (_a = {}, _a[modelDefinition.name] = (_b = {}, _b[TransformerMutationType.CREATE] = [], _b[TransformerMutationType.UPDATE] = [], _b[TransformerMutationType.DELETE] = [], _b), _a));\n                            operations = [TransformerMutationType.CREATE, TransformerMutationType.UPDATE, TransformerMutationType.DELETE];\n                            operationAuthModeAttempts = (_c = {}, _c[TransformerMutationType.CREATE] = 0, _c[TransformerMutationType.UPDATE] = 0, _c[TransformerMutationType.DELETE] = 0, _c);\n\n                            authModeRetry = function (operation) {\n                              return __awaiter(_this, void 0, void 0, function () {\n                                var _a, transformerMutationType, opName, query, isOwner, ownerField, ownerValue, authMode, authToken, variables, userAgentSuffix, queryObservable, subscriptionReadyCallback;\n\n                                var _this = this;\n\n                                return __generator(this, function (_b) {\n                                  switch (_b.label) {\n                                    case 0:\n                                      _a = this.buildSubscription(namespace, modelDefinition, operation, userCredentials, cognitoTokenPayload, oidcTokenPayload, readAuthModes[operationAuthModeAttempts[operation]]), transformerMutationType = _a.opType, opName = _a.opName, query = _a.query, isOwner = _a.isOwner, ownerField = _a.ownerField, ownerValue = _a.ownerValue, authMode = _a.authMode;\n                                      return [4\n                                      /*yield*/\n                                      , getTokenForCustomAuth(authMode, this.amplifyConfig)];\n\n                                    case 1:\n                                      authToken = _b.sent();\n                                      variables = {};\n\n                                      if (isOwner) {\n                                        if (!ownerValue) {\n                                          observer.error('Owner field required, sign in is needed in order to perform this operation');\n                                          return [2\n                                          /*return*/\n                                          ];\n                                        }\n\n                                        variables[ownerField] = ownerValue;\n                                      }\n\n                                      logger.debug(\"Attempting \" + operation + \" subscription with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                      userAgentSuffix = USER_AGENT_SUFFIX_DATASTORE;\n                                      queryObservable = this.amplifyContext.API.graphql(__assign(__assign({\n                                        query: query,\n                                        variables: variables\n                                      }, {\n                                        authMode: authMode\n                                      }), {\n                                        authToken: authToken,\n                                        userAgentSuffix: userAgentSuffix\n                                      }));\n                                      subscriptions[modelDefinition.name][transformerMutationType].push(queryObservable.map(function (_a) {\n                                        var value = _a.value;\n                                        return value;\n                                      }).subscribe({\n                                        next: function (_a) {\n                                          var data = _a.data,\n                                              errors = _a.errors;\n\n                                          if (Array.isArray(errors) && errors.length > 0) {\n                                            var messages = errors.map(function (_a) {\n                                              var message = _a.message;\n                                              return message;\n                                            });\n                                            logger.warn(\"Skipping incoming subscription. Messages: \" + messages.join('\\n'));\n\n                                            _this.drainBuffer();\n\n                                            return;\n                                          }\n\n                                          var predicatesGroup = ModelPredicateCreator.getPredicates(_this.syncPredicates.get(modelDefinition), false);\n                                          var _b = data,\n                                              _c = opName,\n                                              record = _b[_c]; // checking incoming subscription against syncPredicate.\n                                          // once AppSync implements filters on subscriptions, we'll be\n                                          // able to set these when establishing the subscription instead.\n                                          // Until then, we'll need to filter inbound\n\n                                          if (_this.passesPredicateValidation(record, predicatesGroup)) {\n                                            _this.pushToBuffer(transformerMutationType, modelDefinition, record);\n                                          }\n\n                                          _this.drainBuffer();\n                                        },\n                                        error: function (subscriptionError) {\n                                          return __awaiter(_this, void 0, void 0, function () {\n                                            var _a, _b, _c, _d, message, e_1;\n\n                                            return __generator(this, function (_e) {\n                                              switch (_e.label) {\n                                                case 0:\n                                                  _a = subscriptionError.error, _b = __read((_a === void 0 ? {\n                                                    errors: []\n                                                  } : _a).errors, 1), _c = _b[0], _d = (_c === void 0 ? {} : _c).message, message = _d === void 0 ? '' : _d;\n\n                                                  if (message.includes(PUBSUB_CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR) || message.includes(PUBSUB_CONTROL_MSG.CONNECTION_FAILED)) {\n                                                    // Unsubscribe and clear subscription array for model/operation\n                                                    subscriptions[modelDefinition.name][transformerMutationType].forEach(function (subscription) {\n                                                      return subscription.unsubscribe();\n                                                    });\n                                                    subscriptions[modelDefinition.name][transformerMutationType] = [];\n                                                    operationAuthModeAttempts[operation]++;\n\n                                                    if (operationAuthModeAttempts[operation] >= readAuthModes.length) {\n                                                      // last auth mode retry. Continue with error\n                                                      logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1]);\n                                                    } else {\n                                                      // retry with different auth mode. Do not trigger\n                                                      // observer error or error handler\n                                                      logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1] + \". Retrying with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                                      authModeRetry(operation);\n                                                      return [2\n                                                      /*return*/\n                                                      ];\n                                                    }\n                                                  }\n\n                                                  logger.warn('subscriptionError', message);\n                                                  _e.label = 1;\n\n                                                case 1:\n                                                  _e.trys.push([1, 3,, 4]);\n\n                                                  return [4\n                                                  /*yield*/\n                                                  , this.errorHandler({\n                                                    recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                                    localModel: null,\n                                                    message: message,\n                                                    model: modelDefinition.name,\n                                                    operation: operation,\n                                                    errorType: getSubscriptionErrorType(subscriptionError),\n                                                    process: ProcessName.subscribe,\n                                                    remoteModel: null,\n                                                    cause: subscriptionError\n                                                  })];\n\n                                                case 2:\n                                                  _e.sent();\n\n                                                  return [3\n                                                  /*break*/\n                                                  , 4];\n\n                                                case 3:\n                                                  e_1 = _e.sent();\n                                                  logger.error('Subscription error handler failed with:', e_1);\n                                                  return [3\n                                                  /*break*/\n                                                  , 4];\n\n                                                case 4:\n                                                  if (typeof subscriptionReadyCallback === 'function') {\n                                                    subscriptionReadyCallback();\n                                                  }\n\n                                                  if (message.includes('\"errorType\":\"Unauthorized\"') || message.includes('\"errorType\":\"OperationDisabled\"')) {\n                                                    return [2\n                                                    /*return*/\n                                                    ];\n                                                  }\n\n                                                  observer.error(message);\n                                                  return [2\n                                                  /*return*/\n                                                  ];\n                                              }\n                                            });\n                                          });\n                                        }\n                                      }));\n                                      promises.push(function () {\n                                        return __awaiter(_this, void 0, void 0, function () {\n                                          var boundFunction;\n\n                                          var _this = this;\n\n                                          return __generator(this, function (_a) {\n                                            switch (_a.label) {\n                                              case 0:\n                                                return [4\n                                                /*yield*/\n                                                , new Promise(function (res) {\n                                                  subscriptionReadyCallback = res;\n                                                  boundFunction = _this.hubQueryCompletionListener.bind(_this, res);\n                                                  Hub.listen('api', boundFunction);\n                                                })];\n\n                                              case 1:\n                                                _a.sent();\n\n                                                Hub.remove('api', boundFunction);\n                                                return [2\n                                                /*return*/\n                                                ];\n                                            }\n                                          });\n                                        });\n                                      }());\n                                      return [2\n                                      /*return*/\n                                      ];\n                                  }\n                                });\n                              });\n                            };\n\n                            operations.forEach(function (op) {\n                              return authModeRetry(op);\n                            });\n                            return [2\n                            /*return*/\n                            ];\n                        }\n                      });\n                    });\n                  });\n                });\n                Promise.all(promises).then(function () {\n                  return observer.next(CONTROL_MSG.CONNECTED);\n                });\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        Object.keys(subscriptions).forEach(function (modelName) {\n          subscriptions[modelName][TransformerMutationType.CREATE].forEach(function (subscription) {\n            return subscription.unsubscribe();\n          });\n          subscriptions[modelName][TransformerMutationType.UPDATE].forEach(function (subscription) {\n            return subscription.unsubscribe();\n          });\n          subscriptions[modelName][TransformerMutationType.DELETE].forEach(function (subscription) {\n            return subscription.unsubscribe();\n          });\n        });\n      };\n    });\n    var dataObservable = new Observable(function (observer) {\n      _this.dataObserver = observer;\n\n      _this.drainBuffer();\n\n      return function () {\n        _this.dataObserver = null;\n      };\n    });\n    return [ctlObservable, dataObservable];\n  };\n\n  SubscriptionProcessor.prototype.passesPredicateValidation = function (record, predicatesGroup) {\n    if (!predicatesGroup) {\n      return true;\n    }\n\n    var predicates = predicatesGroup.predicates,\n        type = predicatesGroup.type;\n    return validatePredicate(record, type, predicates);\n  };\n\n  SubscriptionProcessor.prototype.pushToBuffer = function (transformerMutationType, modelDefinition, data) {\n    this.buffer.push([transformerMutationType, modelDefinition, data]);\n  };\n\n  SubscriptionProcessor.prototype.drainBuffer = function () {\n    var _this = this;\n\n    if (this.dataObserver) {\n      this.buffer.forEach(function (data) {\n        return _this.dataObserver.next(data);\n      });\n      this.buffer = [];\n    }\n  };\n\n  return SubscriptionProcessor;\n}();\n\nexport { SubscriptionProcessor };","map":{"version":3,"mappings":"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","names":["API","GRAPHQL_AUTH_MODE","Auth","Cache","ConsoleLogger","Logger","Hub","CONTROL_MSG","PUBSUB_CONTROL_MSG","Observable","ProcessName","buildSubscriptionGraphQLOperation","getAuthorizationRules","getModelAuthModes","getUserGroupsFromToken","TransformerMutationType","getTokenForCustomAuth","ModelPredicateCreator","validatePredicate","USER_AGENT_SUFFIX_DATASTORE","getSubscriptionErrorType","logger","USER_CREDENTIALS","schema","syncPredicates","amplifyConfig","authModeStrategy","errorHandler","amplifyContext","WeakMap","SubscriptionProcessor","namespace","model","transformerMutationType","userCredentials","cognitoTokenPayload","oidcTokenPayload","authMode","isOwner","ownerField","ownerValue","opType","opName","query","defaultAuthType","rules","iamPrivateAuth","AWS_IAM","find","authStrategy","rule","provider","unauth","groupAuthRules","filter","includes","validGroup","AMAZON_COGNITO_USER_POOLS","OPENID_CONNECT","cognitoUserGroups","groupAuthRule","oidcUserGroups","__spread","groups","userGroup","cognitoOwnerAuthRules","ownerAuthInfo","forEach","ownerAuthRule","identityClaim","areSubscriptionsPublic","oidcOwnerAuthRules","completed","capsule","event","SUBSCRIPTION_ACK","ctlObservable","promises","subscriptions","none","currentCredentials","credentials","_b","authenticated","auth","currentSession","session","getIdToken","decodePayload","_a","aws_cognito_region","AuthConfig","region","token","getItem","federatedInfo","currentAuthenticatedUser","currentUser","payload","split","JSON","parse","Buffer","from","toString","debug","err_3","Object","values","namespaces","models","syncable","modelDefinition","defaultAuthMode","aws_appsync_authenticationType","modelName","name","modelAuthModes","_d","readAuthModes","READ","CREATE","UPDATE","DELETE","operations","operationAuthModeAttempts","_c","authModeRetry","operation","buildSubscription","authToken","variables","observer","error","userAgentSuffix","queryObservable","graphql","__assign","push","map","value","subscribe","next","data","errors","Array","isArray","length","messages","message","warn","join","_this","drainBuffer","predicatesGroup","getPredicates","get","passesPredicateValidation","record","pushToBuffer","subscriptionError","REALTIME_SUBSCRIPTION_INIT_ERROR","CONNECTION_FAILED","unsubscribe","recoverySuggestion","localModel","errorType","process","remoteModel","cause","_e","e_1","subscriptionReadyCallback","Promise","res","boundFunction","hubQueryCompletionListener","bind","listen","remove","op","all","then","CONNECTED","keys","dataObservable","dataObserver","type","predicates","buffer"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-amplify/datastore/src/sync/processors/subscription.ts"],"sourcesContent":["import API, { GraphQLResult, GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport Cache from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, Hub, HubCapsule } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport {\n\tInternalSchema,\n\tPersistentModel,\n\tSchemaModel,\n\tSchemaNamespace,\n\tPredicatesGroup,\n\tModelPredicate,\n\tAuthModeStrategy,\n\tErrorHandler,\n\tProcessName,\n\tAmplifyContext,\n} from '../../types';\nimport {\n\tbuildSubscriptionGraphQLOperation,\n\tgetAuthorizationRules,\n\tgetModelAuthModes,\n\tgetUserGroupsFromToken,\n\tTransformerMutationType,\n\tgetTokenForCustomAuth,\n} from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate, USER_AGENT_SUFFIX_DATASTORE } from '../../util';\nimport { getSubscriptionErrorType } from './errorMaps';\n\nconst logger = new Logger('DataStore');\n\nexport enum CONTROL_MSG {\n\tCONNECTED = 'CONNECTED',\n}\n\nexport enum USER_CREDENTIALS {\n\t'none',\n\t'unauth',\n\t'auth',\n}\n\ntype AuthorizationInfo = {\n\tauthMode: GRAPHQL_AUTH_MODE;\n\tisOwner: boolean;\n\townerField?: string;\n\townerValue?: string;\n};\n\nclass SubscriptionProcessor {\n\tprivate readonly typeQuery = new WeakMap<\n\t\tSchemaModel,\n\t\t[TransformerMutationType, string, string][]\n\t>();\n\tprivate buffer: [TransformerMutationType, SchemaModel, PersistentModel][] =\n\t\t[];\n\tprivate dataObserver: ZenObservable.Observer<any>;\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly syncPredicates: WeakMap<SchemaModel, ModelPredicate<any>>,\n\t\tprivate readonly amplifyConfig: Record<string, any> = {},\n\t\tprivate readonly authModeStrategy: AuthModeStrategy,\n\t\tprivate readonly errorHandler: ErrorHandler,\n\t\tprivate readonly amplifyContext: AmplifyContext = { Auth, API, Cache }\n\t) {}\n\n\tprivate buildSubscription(\n\t\tnamespace: SchemaNamespace,\n\t\tmodel: SchemaModel,\n\t\ttransformerMutationType: TransformerMutationType,\n\t\tuserCredentials: USER_CREDENTIALS,\n\t\tcognitoTokenPayload: { [field: string]: any } | undefined,\n\t\toidcTokenPayload: { [field: string]: any } | undefined,\n\t\tauthMode: GRAPHQL_AUTH_MODE\n\t): {\n\t\topType: TransformerMutationType;\n\t\topName: string;\n\t\tquery: string;\n\t\tauthMode: GRAPHQL_AUTH_MODE;\n\t\tisOwner: boolean;\n\t\townerField?: string;\n\t\townerValue?: string;\n\t} {\n\t\tconst { aws_appsync_authenticationType } = this.amplifyConfig;\n\t\tconst { isOwner, ownerField, ownerValue } =\n\t\t\tthis.getAuthorizationInfo(\n\t\t\t\tmodel,\n\t\t\t\tuserCredentials,\n\t\t\t\taws_appsync_authenticationType,\n\t\t\t\tcognitoTokenPayload,\n\t\t\t\toidcTokenPayload,\n\t\t\t\tauthMode\n\t\t\t) || {};\n\n\t\tconst [opType, opName, query] = buildSubscriptionGraphQLOperation(\n\t\t\tnamespace,\n\t\t\tmodel,\n\t\t\ttransformerMutationType,\n\t\t\tisOwner,\n\t\t\townerField\n\t\t);\n\t\treturn { authMode, opType, opName, query, isOwner, ownerField, ownerValue };\n\t}\n\n\tprivate getAuthorizationInfo(\n\t\tmodel: SchemaModel,\n\t\tuserCredentials: USER_CREDENTIALS,\n\t\tdefaultAuthType: GRAPHQL_AUTH_MODE,\n\t\tcognitoTokenPayload: { [field: string]: any } = {},\n\t\toidcTokenPayload: { [field: string]: any } = {},\n\t\tauthMode: GRAPHQL_AUTH_MODE\n\t): AuthorizationInfo {\n\t\tconst rules = getAuthorizationRules(model);\n\n\t\t// Return null if user doesn't have proper credentials for private API with IAM auth\n\t\tconst iamPrivateAuth =\n\t\t\tauthMode === GRAPHQL_AUTH_MODE.AWS_IAM &&\n\t\t\trules.find(\n\t\t\t\trule => rule.authStrategy === 'private' && rule.provider === 'iam'\n\t\t\t);\n\n\t\tif (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Group auth should take precedence over owner auth, so we are checking\n\t\t// if rule(s) have group authorization as well as if either the Cognito or\n\t\t// OIDC token has a groupClaim. If so, we are returning auth info before\n\t\t// any further owner-based auth checks.\n\t\tconst groupAuthRules = rules.filter(\n\t\t\trule =>\n\t\t\t\trule.authStrategy === 'groups' &&\n\t\t\t\t['userPools', 'oidc'].includes(rule.provider)\n\t\t);\n\n\t\tconst validGroup =\n\t\t\t(authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ||\n\t\t\t\tauthMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) &&\n\t\t\tgroupAuthRules.find(groupAuthRule => {\n\t\t\t\t// validate token against groupClaim\n\t\t\t\tconst cognitoUserGroups = getUserGroupsFromToken(\n\t\t\t\t\tcognitoTokenPayload,\n\t\t\t\t\tgroupAuthRule\n\t\t\t\t);\n\t\t\t\tconst oidcUserGroups = getUserGroupsFromToken(\n\t\t\t\t\toidcTokenPayload,\n\t\t\t\t\tgroupAuthRule\n\t\t\t\t);\n\n\t\t\t\treturn [...cognitoUserGroups, ...oidcUserGroups].find(userGroup => {\n\t\t\t\t\treturn groupAuthRule.groups.find(group => group === userGroup);\n\t\t\t\t});\n\t\t\t});\n\n\t\tif (validGroup) {\n\t\t\treturn {\n\t\t\t\tauthMode,\n\t\t\t\tisOwner: false,\n\t\t\t};\n\t\t}\n\n\t\t// Owner auth needs additional values to be returned in order to create the subscription with\n\t\t// the correct parameters so we are getting the owner value from the Cognito token via the\n\t\t// identityClaim from the auth rule.\n\t\tconst cognitoOwnerAuthRules =\n\t\t\tauthMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS\n\t\t\t\t? rules.filter(\n\t\t\t\t\t\trule =>\n\t\t\t\t\t\t\trule.authStrategy === 'owner' && rule.provider === 'userPools'\n\t\t\t\t  )\n\t\t\t\t: [];\n\n\t\tlet ownerAuthInfo: AuthorizationInfo;\n\t\tcognitoOwnerAuthRules.forEach(ownerAuthRule => {\n\t\t\tconst ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n\n\t\t\tif (ownerValue) {\n\t\t\t\townerAuthInfo = {\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n\t\t\t\t\tisOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n\t\t\t\t\townerField: ownerAuthRule.ownerField,\n\t\t\t\t\townerValue,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tif (ownerAuthInfo) {\n\t\t\treturn ownerAuthInfo;\n\t\t}\n\n\t\t// Owner auth needs additional values to be returned in order to create the subscription with\n\t\t// the correct parameters so we are getting the owner value from the OIDC token via the\n\t\t// identityClaim from the auth rule.\n\t\tconst oidcOwnerAuthRules =\n\t\t\tauthMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT\n\t\t\t\t? rules.filter(\n\t\t\t\t\t\trule => rule.authStrategy === 'owner' && rule.provider === 'oidc'\n\t\t\t\t  )\n\t\t\t\t: [];\n\n\t\toidcOwnerAuthRules.forEach(ownerAuthRule => {\n\t\t\tconst ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n\n\t\t\tif (ownerValue) {\n\t\t\t\townerAuthInfo = {\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n\t\t\t\t\tisOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n\t\t\t\t\townerField: ownerAuthRule.ownerField,\n\t\t\t\t\townerValue,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tif (ownerAuthInfo) {\n\t\t\treturn ownerAuthInfo;\n\t\t}\n\n\t\t// Fallback: return authMode or default auth type\n\t\treturn {\n\t\t\tauthMode: authMode || defaultAuthType,\n\t\t\tisOwner: false,\n\t\t};\n\t}\n\n\tprivate hubQueryCompletionListener(completed: Function, capsule: HubCapsule) {\n\t\tconst {\n\t\t\tpayload: { event },\n\t\t} = capsule;\n\n\t\tif (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n\t\t\tcompleted();\n\t\t}\n\t}\n\n\tstart(): [\n\t\tObservable<CONTROL_MSG>,\n\t\tObservable<[TransformerMutationType, SchemaModel, PersistentModel]>\n\t] {\n\t\tconst ctlObservable = new Observable<CONTROL_MSG>(observer => {\n\t\t\tconst promises: Promise<void>[] = [];\n\n\t\t\t// Creating subs for each model/operation combo so they can be unsubscribed\n\t\t\t// independently, since the auth retry behavior is asynchronous.\n\t\t\tlet subscriptions: {\n\t\t\t\t[modelName: string]: {\n\t\t\t\t\t[TransformerMutationType.CREATE]: ZenObservable.Subscription[];\n\t\t\t\t\t[TransformerMutationType.UPDATE]: ZenObservable.Subscription[];\n\t\t\t\t\t[TransformerMutationType.DELETE]: ZenObservable.Subscription[];\n\t\t\t\t};\n\t\t\t} = {};\n\t\t\tlet cognitoTokenPayload: { [field: string]: any },\n\t\t\t\toidcTokenPayload: { [field: string]: any };\n\t\t\tlet userCredentials = USER_CREDENTIALS.none;\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\t// retrieving current AWS Credentials\n\t\t\t\t\tconst credentials =\n\t\t\t\t\t\tawait this.amplifyContext.Auth.currentCredentials();\n\t\t\t\t\tuserCredentials = credentials.authenticated\n\t\t\t\t\t\t? USER_CREDENTIALS.auth\n\t\t\t\t\t\t: USER_CREDENTIALS.unauth;\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// best effort to get AWS credentials\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// retrieving current token info from Cognito UserPools\n\t\t\t\t\tconst session = await this.amplifyContext.Auth.currentSession();\n\t\t\t\t\tcognitoTokenPayload = session.getIdToken().decodePayload();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// best effort to get jwt from Cognito\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// Checking for the Cognito region in config to see if Auth is configured\n\t\t\t\t\t// before attempting to get federated token. We're using the Cognito region\n\t\t\t\t\t// because it will be there regardless of user/identity pool being present.\n\t\t\t\t\tconst { aws_cognito_region, Auth: AuthConfig } = this.amplifyConfig;\n\t\t\t\t\tif (!aws_cognito_region || (AuthConfig && !AuthConfig.region)) {\n\t\t\t\t\t\tthrow 'Auth is not configured';\n\t\t\t\t\t}\n\n\t\t\t\t\tlet token;\n\t\t\t\t\t// backwards compatibility\n\t\t\t\t\tconst federatedInfo = await this.amplifyContext.Cache.getItem(\n\t\t\t\t\t\t'federatedInfo'\n\t\t\t\t\t);\n\t\t\t\t\tif (federatedInfo) {\n\t\t\t\t\t\ttoken = federatedInfo.token;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst currentUser =\n\t\t\t\t\t\t\tawait this.amplifyContext.Auth.currentAuthenticatedUser();\n\t\t\t\t\t\tif (currentUser) {\n\t\t\t\t\t\t\ttoken = currentUser.token;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (token) {\n\t\t\t\t\t\tconst payload = token.split('.')[1];\n\t\t\t\t\t\toidcTokenPayload = JSON.parse(\n\t\t\t\t\t\t\tBuffer.from(payload, 'base64').toString('utf8')\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug('error getting OIDC JWT', err);\n\t\t\t\t\t// best effort to get oidc jwt\n\t\t\t\t}\n\n\t\t\t\tObject.values(this.schema.namespaces).forEach(namespace => {\n\t\t\t\t\tObject.values(namespace.models)\n\t\t\t\t\t\t.filter(({ syncable }) => syncable)\n\t\t\t\t\t\t.forEach(async modelDefinition => {\n\t\t\t\t\t\t\tconst modelAuthModes = await getModelAuthModes({\n\t\t\t\t\t\t\t\tauthModeStrategy: this.authModeStrategy,\n\t\t\t\t\t\t\t\tdefaultAuthMode:\n\t\t\t\t\t\t\t\t\tthis.amplifyConfig.aws_appsync_authenticationType,\n\t\t\t\t\t\t\t\tmodelName: modelDefinition.name,\n\t\t\t\t\t\t\t\tschema: this.schema,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// subscriptions are created only based on the READ auth mode(s)\n\t\t\t\t\t\t\tconst readAuthModes = modelAuthModes.READ;\n\n\t\t\t\t\t\t\tsubscriptions = {\n\t\t\t\t\t\t\t\t...subscriptions,\n\t\t\t\t\t\t\t\t[modelDefinition.name]: {\n\t\t\t\t\t\t\t\t\t[TransformerMutationType.CREATE]: [],\n\t\t\t\t\t\t\t\t\t[TransformerMutationType.UPDATE]: [],\n\t\t\t\t\t\t\t\t\t[TransformerMutationType.DELETE]: [],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tconst operations = [\n\t\t\t\t\t\t\t\tTransformerMutationType.CREATE,\n\t\t\t\t\t\t\t\tTransformerMutationType.UPDATE,\n\t\t\t\t\t\t\t\tTransformerMutationType.DELETE,\n\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\tconst operationAuthModeAttempts = {\n\t\t\t\t\t\t\t\t[TransformerMutationType.CREATE]: 0,\n\t\t\t\t\t\t\t\t[TransformerMutationType.UPDATE]: 0,\n\t\t\t\t\t\t\t\t[TransformerMutationType.DELETE]: 0,\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Retry failed subscriptions with next auth mode (if available)\n\t\t\t\t\t\t\tconst authModeRetry = async operation => {\n\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\topType: transformerMutationType,\n\t\t\t\t\t\t\t\t\topName,\n\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\tisOwner,\n\t\t\t\t\t\t\t\t\townerField,\n\t\t\t\t\t\t\t\t\townerValue,\n\t\t\t\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\t\t\t} = this.buildSubscription(\n\t\t\t\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\tuserCredentials,\n\t\t\t\t\t\t\t\t\tcognitoTokenPayload,\n\t\t\t\t\t\t\t\t\toidcTokenPayload,\n\t\t\t\t\t\t\t\t\treadAuthModes[operationAuthModeAttempts[operation]]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tconst authToken = await getTokenForCustomAuth(\n\t\t\t\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\t\t\t\tthis.amplifyConfig\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tconst variables = {};\n\n\t\t\t\t\t\t\t\tif (isOwner) {\n\t\t\t\t\t\t\t\t\tif (!ownerValue) {\n\t\t\t\t\t\t\t\t\t\tobserver.error(\n\t\t\t\t\t\t\t\t\t\t\t'Owner field required, sign in is needed in order to perform this operation'\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvariables[ownerField] = ownerValue;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t`Attempting ${operation} subscription with authMode: ${\n\t\t\t\t\t\t\t\t\t\treadAuthModes[operationAuthModeAttempts[operation]]\n\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tconst userAgentSuffix = USER_AGENT_SUFFIX_DATASTORE;\n\n\t\t\t\t\t\t\t\tconst queryObservable = <\n\t\t\t\t\t\t\t\t\tObservable<{\n\t\t\t\t\t\t\t\t\t\tvalue: GraphQLResult<Record<string, PersistentModel>>;\n\t\t\t\t\t\t\t\t\t}>\n\n\t\t\t\t\t\t\t\t>(<unknown>this.amplifyContext.API.graphql({ query, variables, ...{ authMode }, authToken, userAgentSuffix }));\n\n\t\t\t\t\t\t\t\tlet subscriptionReadyCallback: () => void;\n\n\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t].push(\n\t\t\t\t\t\t\t\t\tqueryObservable\n\t\t\t\t\t\t\t\t\t\t.map(({ value }) => {\n\t\t\t\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\t\t\t\tnext: ({ data, errors }) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (Array.isArray(errors) && errors.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst messages = (<\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: string;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}[]\n\t\t\t\t\t\t\t\t\t\t\t\t\t>errors).map(({ message }) => message);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`Skipping incoming subscription. Messages: ${messages.join(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'\\n'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.drainBuffer();\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tconst predicatesGroup =\n\t\t\t\t\t\t\t\t\t\t\t\t\tModelPredicateCreator.getPredicates(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.syncPredicates.get(modelDefinition),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\tconst { [opName]: record } = data;\n\n\t\t\t\t\t\t\t\t\t\t\t\t// checking incoming subscription against syncPredicate.\n\t\t\t\t\t\t\t\t\t\t\t\t// once AppSync implements filters on subscriptions, we'll be\n\t\t\t\t\t\t\t\t\t\t\t\t// able to set these when establishing the subscription instead.\n\t\t\t\t\t\t\t\t\t\t\t\t// Until then, we'll need to filter inbound\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.passesPredicateValidation(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trecord,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpredicatesGroup\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.pushToBuffer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trecord\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tthis.drainBuffer();\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\terror: async subscriptionError => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\t\t\t\t\terror: { errors: [{ message = '' } = {}] } = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\terrors: [],\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t} = subscriptionError;\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tPUBSUB_CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR\n\t\t\t\t\t\t\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes(PUBSUB_CONTROL_MSG.CONNECTION_FAILED)\n\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Unsubscribe and clear subscription array for model/operation\n\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t\t\t\t\t\t].forEach(subscription => subscription.unsubscribe());\n\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t\t\t\t\t\t] = [];\n\n\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation]++;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation] >=\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes.length\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// last auth mode retry. Continue with error\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`${operation} subscription failed with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation] - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// retry with different auth mode. Do not trigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// observer error or error handler\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`${operation} subscription failed with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation] - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}. Retrying with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthModeRetry(operation);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tlogger.warn('subscriptionError', message);\n\n\t\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.errorHandler({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trecoverySuggestion:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocalModel: null,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel: modelDefinition.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\terrorType:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetSubscriptionErrorType(subscriptionError),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprocess: ProcessName.subscribe,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoteModel: null,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcause: subscriptionError,\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Subscription error handler failed with:',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\te\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (typeof subscriptionReadyCallback === 'function') {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptionReadyCallback();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes('\"errorType\":\"Unauthorized\"') ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes('\"errorType\":\"OperationDisabled\"')\n\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tobserver.error(message);\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tpromises.push(\n\t\t\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\t\t\tlet boundFunction: any;\n\n\t\t\t\t\t\t\t\t\t\tawait new Promise(res => {\n\t\t\t\t\t\t\t\t\t\t\tsubscriptionReadyCallback = res;\n\t\t\t\t\t\t\t\t\t\t\tboundFunction = this.hubQueryCompletionListener.bind(\n\t\t\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\t\t\tres\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tHub.listen('api', boundFunction);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\tHub.remove('api', boundFunction);\n\t\t\t\t\t\t\t\t\t})()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\toperations.forEach(op => authModeRetry(op));\n\t\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tPromise.all(promises).then(() => observer.next(CONTROL_MSG.CONNECTED));\n\t\t\t})();\n\n\t\t\treturn () => {\n\t\t\t\tObject.keys(subscriptions).forEach(modelName => {\n\t\t\t\t\tsubscriptions[modelName][TransformerMutationType.CREATE].forEach(\n\t\t\t\t\t\tsubscription => subscription.unsubscribe()\n\t\t\t\t\t);\n\t\t\t\t\tsubscriptions[modelName][TransformerMutationType.UPDATE].forEach(\n\t\t\t\t\t\tsubscription => subscription.unsubscribe()\n\t\t\t\t\t);\n\t\t\t\t\tsubscriptions[modelName][TransformerMutationType.DELETE].forEach(\n\t\t\t\t\t\tsubscription => subscription.unsubscribe()\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\n\t\tconst dataObservable = new Observable<\n\t\t\t[TransformerMutationType, SchemaModel, PersistentModel]\n\t\t>(observer => {\n\t\t\tthis.dataObserver = observer;\n\t\t\tthis.drainBuffer();\n\n\t\t\treturn () => {\n\t\t\t\tthis.dataObserver = null;\n\t\t\t};\n\t\t});\n\n\t\treturn [ctlObservable, dataObservable];\n\t}\n\n\tprivate passesPredicateValidation(\n\t\trecord: PersistentModel,\n\t\tpredicatesGroup: PredicatesGroup<any>\n\t): boolean {\n\t\tif (!predicatesGroup) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst { predicates, type } = predicatesGroup;\n\n\t\treturn validatePredicate(record, type, predicates);\n\t}\n\n\tprivate pushToBuffer(\n\t\ttransformerMutationType: TransformerMutationType,\n\t\tmodelDefinition: SchemaModel,\n\t\tdata: PersistentModel\n\t) {\n\t\tthis.buffer.push([transformerMutationType, modelDefinition, data]);\n\t}\n\n\tprivate drainBuffer() {\n\t\tif (this.dataObserver) {\n\t\t\tthis.buffer.forEach(data => this.dataObserver.next(data));\n\t\t\tthis.buffer = [];\n\t\t}\n\t}\n}\n\nexport { SubscriptionProcessor };\n"]},"metadata":{},"sourceType":"module"}