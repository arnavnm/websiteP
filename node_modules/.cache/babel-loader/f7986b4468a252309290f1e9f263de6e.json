{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n};\n\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Predictions');\n\nvar PredictionsClass =\n/** @class */\nfunction () {\n  /**\n   * Initialize Predictions with AWS configurations\n   * @param {PredictionsOptions} options - Configuration object for Predictions\n   */\n  function PredictionsClass(options) {\n    this._options = options;\n    this._convertPluggables = [];\n    this._identifyPluggables = [];\n    this._interpretPluggables = [];\n  }\n\n  PredictionsClass.prototype.getModuleName = function () {\n    return 'Predictions';\n  };\n  /**\n   * add plugin/pluggable into Predictions category\n   * @param {Object} pluggable - an instance of the plugin/pluggable\n   **/\n\n\n  PredictionsClass.prototype.addPluggable = function (pluggable) {\n    if (this.getPluggable(pluggable.getProviderName())) {\n      throw new Error(\"Pluggable with name \" + pluggable.getProviderName() + \" has already been added.\");\n    }\n\n    var pluggableAdded = false;\n\n    if (this.implementsConvertPluggable(pluggable)) {\n      this._convertPluggables.push(pluggable);\n\n      pluggableAdded = true;\n    }\n\n    if (this.implementsIdentifyPluggable(pluggable)) {\n      this._identifyPluggables.push(pluggable);\n\n      pluggableAdded = true;\n    }\n\n    if (this.implementsInterpretPluggable(pluggable)) {\n      this._interpretPluggables.push(pluggable);\n\n      pluggableAdded = true;\n    }\n\n    if (pluggableAdded) {\n      this.configurePluggable(pluggable);\n    }\n  };\n  /**\n   * Get the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  PredictionsClass.prototype.getPluggable = function (providerName) {\n    var pluggable = this.getAllProviders().find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n\n    if (pluggable === undefined) {\n      logger.debug('No plugin found with providerName=>', providerName);\n      return null;\n    } else return pluggable;\n  };\n  /**\n   * Remove the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  PredictionsClass.prototype.removePluggable = function (providerName) {\n    this._convertPluggables = this._convertPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    this._identifyPluggables = this._identifyPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    this._interpretPluggables = this._interpretPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    return;\n  };\n  /**\n   * To make both top level providers and category level providers work with same interface and configuration\n   * this method duplicates Predictions config into parent level config (for top level provider) and\n   * category level config (such as convert, identify etc) and pass both to each provider.\n   */\n\n\n  PredictionsClass.prototype.configure = function (options) {\n    var _this = this;\n\n    var predictionsConfig = options ? options.predictions || options : {};\n    predictionsConfig = __assign(__assign({}, predictionsConfig), options);\n    this._options = Object.assign({}, this._options, predictionsConfig);\n    logger.debug('configure Predictions', this._options);\n    this.getAllProviders().forEach(function (pluggable) {\n      return _this.configurePluggable(pluggable);\n    });\n  };\n\n  PredictionsClass.prototype.interpret = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._interpretPluggables, options);\n    return pluggableToExecute.interpret(input);\n  };\n\n  PredictionsClass.prototype.convert = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._convertPluggables, options);\n    return pluggableToExecute.convert(input);\n  };\n\n  PredictionsClass.prototype.identify = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._identifyPluggables, options);\n    return pluggableToExecute.identify(input);\n  }; // tslint:disable-next-line: max-line-length\n\n\n  PredictionsClass.prototype.getPluggableToExecute = function (pluggables, providerOptions) {\n    // Give preference to provider name first since it is more specific to this call, even if\n    // there is only one provider configured to error out if the name provided is not the one matched.\n    if (providerOptions && providerOptions.providerName) {\n      return __spread(pluggables).find(function (pluggable) {\n        return pluggable.getProviderName() === providerOptions.providerName;\n      });\n    } else {\n      if (pluggables.length === 1) {\n        return pluggables[0];\n      } else {\n        throw new Error('More than one or no providers are configured, ' + 'Either specify a provider name or configure exactly one provider');\n      }\n    }\n  };\n\n  PredictionsClass.prototype.getAllProviders = function () {\n    return __spread(this._convertPluggables, this._identifyPluggables, this._interpretPluggables);\n  };\n\n  PredictionsClass.prototype.configurePluggable = function (pluggable) {\n    var categoryConfig = Object.assign({}, this._options['predictions'], // Parent predictions config for the top level provider\n    this._options[pluggable.getCategory().toLowerCase()] // Actual category level config\n    );\n    pluggable.configure(categoryConfig);\n  };\n\n  PredictionsClass.prototype.implementsConvertPluggable = function (obj) {\n    return obj && typeof obj.convert === 'function';\n  };\n\n  PredictionsClass.prototype.implementsIdentifyPluggable = function (obj) {\n    return obj && typeof obj.identify === 'function';\n  };\n\n  PredictionsClass.prototype.implementsInterpretPluggable = function (obj) {\n    return obj && typeof obj.interpret === 'function';\n  };\n\n  return PredictionsClass;\n}();\n\nexport { PredictionsClass };\nexport var Predictions = new PredictionsClass({});\nAmplify.register(Predictions);","map":{"version":3,"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;IACpC,KAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;MACA,KAAK,IAAII,CAAT,IAAcL,CAAd;QAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;MADJ;IAEH;;IACD,OAAON,CAAP;EACH,CAPD;;EAQA,OAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,IAAIO,MAAM,GAAI,QAAQ,KAAKA,MAAd,IAAyB,UAAUC,CAAV,EAAaT,CAAb,EAAgB;EAClD,IAAIU,CAAC,GAAG,OAAOC,MAAP,KAAkB,UAAlB,IAAgCF,CAAC,CAACE,MAAM,CAACC,QAAR,CAAzC;EACA,IAAI,CAACF,CAAL,EAAQ,OAAOD,CAAP;EACR,IAAIV,CAAC,GAAGW,CAAC,CAACJ,IAAF,CAAOG,CAAP,CAAR;EAAA,IAAmBI,CAAnB;EAAA,IAAsBC,EAAE,GAAG,EAA3B;EAAA,IAA+BC,CAA/B;;EACA,IAAI;IACA,OAAO,CAACf,CAAC,KAAK,KAAK,CAAX,IAAgBA,CAAC,KAAK,CAAvB,KAA6B,CAAC,CAACa,CAAC,GAAGd,CAAC,CAACiB,IAAF,EAAL,EAAeC,IAApD;MAA0DH,EAAE,CAACI,IAAH,CAAQL,CAAC,CAACM,KAAV;IAA1D;EACH,CAFD,CAGA,OAAOC,KAAP,EAAc;IAAEL,CAAC,GAAG;MAAEK,KAAK,EAAEA;IAAT,CAAJ;EAAuB,CAHvC,SAIQ;IACJ,IAAI;MACA,IAAIP,CAAC,IAAI,CAACA,CAAC,CAACI,IAAR,KAAiBP,CAAC,GAAGX,CAAC,CAAC,QAAD,CAAtB,CAAJ,EAAuCW,CAAC,CAACJ,IAAF,CAAOP,CAAP;IAC1C,CAFD,SAGQ;MAAE,IAAIgB,CAAJ,EAAO,MAAMA,CAAC,CAACK,KAAR;IAAgB;EACpC;;EACD,OAAON,EAAP;AACH,CAfD;;AAgBA,IAAIO,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;EAClD,KAAK,IAAIP,EAAE,GAAG,EAAT,EAAaf,CAAC,GAAG,CAAtB,EAAyBA,CAAC,GAAGE,SAAS,CAACC,MAAvC,EAA+CH,CAAC,EAAhD;IAAoDe,EAAE,GAAGA,EAAE,CAACQ,MAAH,CAAUd,MAAM,CAACP,SAAS,CAACF,CAAD,CAAV,CAAhB,CAAL;EAApD;;EACA,OAAOe,EAAP;AACH,CAHD;;AAIA,SAASS,OAAT,EAAkBC,aAAa,IAAIC,MAAnC,QAAiD,mBAAjD;AACA,IAAIC,MAAM,GAAG,IAAID,MAAJ,CAAW,aAAX,CAAb;;AACA,IAAIE,gBAAgB;AAAG;AAAe,YAAY;EAC9C;AACJ;AACA;AACA;EACI,SAASA,gBAAT,CAA0BC,OAA1B,EAAmC;IAC/B,KAAKC,QAAL,GAAgBD,OAAhB;IACA,KAAKE,kBAAL,GAA0B,EAA1B;IACA,KAAKC,mBAAL,GAA2B,EAA3B;IACA,KAAKC,oBAAL,GAA4B,EAA5B;EACH;;EACDL,gBAAgB,CAACvB,SAAjB,CAA2B6B,aAA3B,GAA2C,YAAY;IACnD,OAAO,aAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;;;EACIN,gBAAgB,CAACvB,SAAjB,CAA2B8B,YAA3B,GAA0C,UAAUC,SAAV,EAAqB;IAC3D,IAAI,KAAKC,YAAL,CAAkBD,SAAS,CAACE,eAAV,EAAlB,CAAJ,EAAoD;MAChD,MAAM,IAAIC,KAAJ,CAAU,yBAAyBH,SAAS,CAACE,eAAV,EAAzB,GAAuD,0BAAjE,CAAN;IACH;;IACD,IAAIE,cAAc,GAAG,KAArB;;IACA,IAAI,KAAKC,0BAAL,CAAgCL,SAAhC,CAAJ,EAAgD;MAC5C,KAAKL,kBAAL,CAAwBZ,IAAxB,CAA6BiB,SAA7B;;MACAI,cAAc,GAAG,IAAjB;IACH;;IACD,IAAI,KAAKE,2BAAL,CAAiCN,SAAjC,CAAJ,EAAiD;MAC7C,KAAKJ,mBAAL,CAAyBb,IAAzB,CAA8BiB,SAA9B;;MACAI,cAAc,GAAG,IAAjB;IACH;;IACD,IAAI,KAAKG,4BAAL,CAAkCP,SAAlC,CAAJ,EAAkD;MAC9C,KAAKH,oBAAL,CAA0Bd,IAA1B,CAA+BiB,SAA/B;;MACAI,cAAc,GAAG,IAAjB;IACH;;IACD,IAAIA,cAAJ,EAAoB;MAChB,KAAKI,kBAAL,CAAwBR,SAAxB;IACH;EACJ,CApBD;EAqBA;AACJ;AACA;AACA;;;EACIR,gBAAgB,CAACvB,SAAjB,CAA2BgC,YAA3B,GAA0C,UAAUQ,YAAV,EAAwB;IAC9D,IAAIT,SAAS,GAAG,KAAKU,eAAL,GAAuBC,IAAvB,CAA4B,UAAUX,SAAV,EAAqB;MAAE,OAAOA,SAAS,CAACE,eAAV,OAAgCO,YAAvC;IAAsD,CAAzG,CAAhB;;IACA,IAAIT,SAAS,KAAKY,SAAlB,EAA6B;MACzBrB,MAAM,CAACsB,KAAP,CAAa,qCAAb,EAAoDJ,YAApD;MACA,OAAO,IAAP;IACH,CAHD,MAKI,OAAOT,SAAP;EACP,CARD;EASA;AACJ;AACA;AACA;;;EACIR,gBAAgB,CAACvB,SAAjB,CAA2B6C,eAA3B,GAA6C,UAAUL,YAAV,EAAwB;IACjE,KAAKd,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBoB,MAAxB,CAA+B,UAAUf,SAAV,EAAqB;MAAE,OAAOA,SAAS,CAACE,eAAV,OAAgCO,YAAvC;IAAsD,CAA5G,CAA1B;IACA,KAAKb,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBmB,MAAzB,CAAgC,UAAUf,SAAV,EAAqB;MAAE,OAAOA,SAAS,CAACE,eAAV,OAAgCO,YAAvC;IAAsD,CAA7G,CAA3B;IACA,KAAKZ,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BkB,MAA1B,CAAiC,UAAUf,SAAV,EAAqB;MAAE,OAAOA,SAAS,CAACE,eAAV,OAAgCO,YAAvC;IAAsD,CAA9G,CAA5B;IACA;EACH,CALD;EAMA;AACJ;AACA;AACA;AACA;;;EACIjB,gBAAgB,CAACvB,SAAjB,CAA2B+C,SAA3B,GAAuC,UAAUvB,OAAV,EAAmB;IACtD,IAAIwB,KAAK,GAAG,IAAZ;;IACA,IAAIC,iBAAiB,GAAGzB,OAAO,GAAGA,OAAO,CAAC0B,WAAR,IAAuB1B,OAA1B,GAAoC,EAAnE;IACAyB,iBAAiB,GAAG3D,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK2D,iBAAL,CAAT,EAAkCzB,OAAlC,CAA5B;IACA,KAAKC,QAAL,GAAgBlC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKiC,QAAvB,EAAiCwB,iBAAjC,CAAhB;IACA3B,MAAM,CAACsB,KAAP,CAAa,uBAAb,EAAsC,KAAKnB,QAA3C;IACA,KAAKgB,eAAL,GAAuBU,OAAvB,CAA+B,UAAUpB,SAAV,EAAqB;MAChD,OAAOiB,KAAK,CAACT,kBAAN,CAAyBR,SAAzB,CAAP;IACH,CAFD;EAGH,CATD;;EAUAR,gBAAgB,CAACvB,SAAjB,CAA2BoD,SAA3B,GAAuC,UAAUC,KAAV,EAAiB7B,OAAjB,EAA0B;IAC7D,IAAI8B,kBAAkB,GAAG,KAAKC,qBAAL,CAA2B,KAAK3B,oBAAhC,EAAsDJ,OAAtD,CAAzB;IACA,OAAO8B,kBAAkB,CAACF,SAAnB,CAA6BC,KAA7B,CAAP;EACH,CAHD;;EAIA9B,gBAAgB,CAACvB,SAAjB,CAA2BwD,OAA3B,GAAqC,UAAUH,KAAV,EAAiB7B,OAAjB,EAA0B;IAC3D,IAAI8B,kBAAkB,GAAG,KAAKC,qBAAL,CAA2B,KAAK7B,kBAAhC,EAAoDF,OAApD,CAAzB;IACA,OAAO8B,kBAAkB,CAACE,OAAnB,CAA2BH,KAA3B,CAAP;EACH,CAHD;;EAIA9B,gBAAgB,CAACvB,SAAjB,CAA2ByD,QAA3B,GAAsC,UAAUJ,KAAV,EAAiB7B,OAAjB,EAA0B;IAC5D,IAAI8B,kBAAkB,GAAG,KAAKC,qBAAL,CAA2B,KAAK5B,mBAAhC,EAAqDH,OAArD,CAAzB;IACA,OAAO8B,kBAAkB,CAACG,QAAnB,CAA4BJ,KAA5B,CAAP;EACH,CAHD,CArF8C,CAyF9C;;;EACA9B,gBAAgB,CAACvB,SAAjB,CAA2BuD,qBAA3B,GAAmD,UAAUG,UAAV,EAAsBC,eAAtB,EAAuC;IACtF;IACA;IACA,IAAIA,eAAe,IAAIA,eAAe,CAACnB,YAAvC,EAAqD;MACjD,OAAOvB,QAAQ,CAACyC,UAAD,CAAR,CAAqBhB,IAArB,CAA0B,UAAUX,SAAV,EAAqB;QAClD,OAAOA,SAAS,CAACE,eAAV,OAAgC0B,eAAe,CAACnB,YAAvD;MACH,CAFM,CAAP;IAGH,CAJD,MAKK;MACD,IAAIkB,UAAU,CAAC5D,MAAX,KAAsB,CAA1B,EAA6B;QACzB,OAAO4D,UAAU,CAAC,CAAD,CAAjB;MACH,CAFD,MAGK;QACD,MAAM,IAAIxB,KAAJ,CAAU,mDACZ,kEADE,CAAN;MAEH;IACJ;EACJ,CAjBD;;EAkBAX,gBAAgB,CAACvB,SAAjB,CAA2ByC,eAA3B,GAA6C,YAAY;IACrD,OAAOxB,QAAQ,CAAC,KAAKS,kBAAN,EAA0B,KAAKC,mBAA/B,EAAoD,KAAKC,oBAAzD,CAAf;EACH,CAFD;;EAGAL,gBAAgB,CAACvB,SAAjB,CAA2BuC,kBAA3B,GAAgD,UAAUR,SAAV,EAAqB;IACjE,IAAI6B,cAAc,GAAGrE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKiC,QAAL,CAAc,aAAd,CAAlB,EAAgD;IACrE,KAAKA,QAAL,CAAcM,SAAS,CAAC8B,WAAV,GAAwBC,WAAxB,EAAd,CADqB,CACgC;IADhC,CAArB;IAGA/B,SAAS,CAACgB,SAAV,CAAoBa,cAApB;EACH,CALD;;EAMArC,gBAAgB,CAACvB,SAAjB,CAA2BoC,0BAA3B,GAAwD,UAAU2B,GAAV,EAAe;IACnE,OAAOA,GAAG,IAAI,OAAOA,GAAG,CAACP,OAAX,KAAuB,UAArC;EACH,CAFD;;EAGAjC,gBAAgB,CAACvB,SAAjB,CAA2BqC,2BAA3B,GAAyD,UAAU0B,GAAV,EAAe;IACpE,OAAOA,GAAG,IAAI,OAAOA,GAAG,CAACN,QAAX,KAAwB,UAAtC;EACH,CAFD;;EAGAlC,gBAAgB,CAACvB,SAAjB,CAA2BsC,4BAA3B,GAA0D,UAAUyB,GAAV,EAAe;IACrE,OAAOA,GAAG,IAAI,OAAOA,GAAG,CAACX,SAAX,KAAyB,UAAvC;EACH,CAFD;;EAGA,OAAO7B,gBAAP;AACH,CA/HqC,EAAtC;;AAgIA,SAASA,gBAAT;AACA,OAAO,IAAIyC,WAAW,GAAG,IAAIzC,gBAAJ,CAAqB,EAArB,CAAlB;AACPJ,OAAO,CAAC8C,QAAR,CAAiBD,WAAjB","names":["Amplify","ConsoleLogger","Logger","logger","options","_options","_convertPluggables","_identifyPluggables","_interpretPluggables","PredictionsClass","pluggable","getPluggable","getProviderName","Error","pluggableAdded","implementsConvertPluggable","push","implementsIdentifyPluggable","implementsInterpretPluggable","configurePluggable","providerName","getAllProviders","find","undefined","debug","filter","predictionsConfig","predictions","Object","assign","forEach","input","pluggableToExecute","getPluggableToExecute","interpret","convert","identify","pluggables","providerOptions","__spread","length","categoryConfig","getCategory","toLowerCase","configure","obj","Predictions","register"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/predictions/src/Predictions.ts"],"sourcesContent":["import {\n\tPredictionsOptions,\n\tTranslateTextInput,\n\tTranslateTextOutput,\n\tTextToSpeechInput,\n\tProviderOptions,\n\tTextToSpeechOutput,\n\tSpeechToTextInput,\n\tSpeechToTextOutput,\n\tIdentifyTextInput,\n\tIdentifyTextOutput,\n\tIdentifyLabelsOutput,\n\tIdentifyLabelsInput,\n\tIdentifyEntitiesInput,\n\tIdentifyEntitiesOutput,\n\tInterpretTextOutput,\n\tInterpretTextInput,\n} from './types';\nimport {\n\tAbstractConvertPredictionsProvider,\n\tAbstractIdentifyPredictionsProvider,\n\tAbstractInterpretPredictionsProvider,\n\tAbstractPredictionsProvider,\n} from './types/Providers';\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\n\nconst logger = new Logger('Predictions');\n\nexport class PredictionsClass {\n\tprivate _options: PredictionsOptions;\n\n\tprivate _convertPluggables: AbstractConvertPredictionsProvider[];\n\tprivate _identifyPluggables: AbstractIdentifyPredictionsProvider[];\n\tprivate _interpretPluggables: AbstractInterpretPredictionsProvider[];\n\n\t/**\n\t * Initialize Predictions with AWS configurations\n\t * @param {PredictionsOptions} options - Configuration object for Predictions\n\t */\n\tconstructor(options: PredictionsOptions) {\n\t\tthis._options = options;\n\t\tthis._convertPluggables = [];\n\t\tthis._identifyPluggables = [];\n\t\tthis._interpretPluggables = [];\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Predictions';\n\t}\n\n\t/**\n\t * add plugin/pluggable into Predictions category\n\t * @param {Object} pluggable - an instance of the plugin/pluggable\n\t **/\n\tpublic addPluggable(pluggable: AbstractPredictionsProvider) {\n\t\tif (this.getPluggable(pluggable.getProviderName())) {\n\t\t\tthrow new Error(\n\t\t\t\t`Pluggable with name ${pluggable.getProviderName()} has already been added.`\n\t\t\t);\n\t\t}\n\t\tlet pluggableAdded: boolean = false;\n\t\tif (this.implementsConvertPluggable(pluggable)) {\n\t\t\tthis._convertPluggables.push(pluggable);\n\t\t\tpluggableAdded = true;\n\t\t}\n\t\tif (this.implementsIdentifyPluggable(pluggable)) {\n\t\t\tthis._identifyPluggables.push(pluggable);\n\t\t\tpluggableAdded = true;\n\t\t}\n\t\tif (this.implementsInterpretPluggable(pluggable)) {\n\t\t\tthis._interpretPluggables.push(pluggable);\n\t\t\tpluggableAdded = true;\n\t\t}\n\t\tif (pluggableAdded) {\n\t\t\tthis.configurePluggable(pluggable);\n\t\t}\n\t}\n\n\t/**\n\t * Get the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic getPluggable(providerName: string): AbstractPredictionsProvider {\n\t\tconst pluggable = this.getAllProviders().find(\n\t\t\tpluggable => pluggable.getProviderName() === providerName\n\t\t);\n\t\tif (pluggable === undefined) {\n\t\t\tlogger.debug('No plugin found with providerName=>', providerName);\n\t\t\treturn null;\n\t\t} else return pluggable;\n\t}\n\n\t/**\n\t * Remove the plugin object\n\t * @param providerName - the name of the plugin\n\t */\n\tpublic removePluggable(providerName: string) {\n\t\tthis._convertPluggables = this._convertPluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t\tthis._identifyPluggables = this._identifyPluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t\tthis._interpretPluggables = this._interpretPluggables.filter(\n\t\t\tpluggable => pluggable.getProviderName() !== providerName\n\t\t);\n\t\treturn;\n\t}\n\n\t/**\n\t * To make both top level providers and category level providers work with same interface and configuration\n\t * this method duplicates Predictions config into parent level config (for top level provider) and\n\t * category level config (such as convert, identify etc) and pass both to each provider.\n\t */\n\tconfigure(options: PredictionsOptions) {\n\t\tlet predictionsConfig = options ? options.predictions || options : {};\n\t\tpredictionsConfig = { ...predictionsConfig, ...options };\n\t\tthis._options = Object.assign({}, this._options, predictionsConfig);\n\t\tlogger.debug('configure Predictions', this._options);\n\t\tthis.getAllProviders().forEach(pluggable =>\n\t\t\tthis.configurePluggable(pluggable)\n\t\t);\n\t}\n\n\tpublic interpret(\n\t\tinput: InterpretTextInput,\n\t\toptions?: ProviderOptions\n\t): Promise<InterpretTextOutput>;\n\tpublic interpret(\n\t\tinput: InterpretTextInput,\n\t\toptions?: ProviderOptions\n\t): Promise<InterpretTextOutput> {\n\t\tconst pluggableToExecute = this.getPluggableToExecute(\n\t\t\tthis._interpretPluggables,\n\t\t\toptions\n\t\t);\n\t\treturn pluggableToExecute.interpret(input);\n\t}\n\n\tpublic convert(\n\t\tinput: TranslateTextInput,\n\t\toptions?: ProviderOptions\n\t): Promise<TranslateTextOutput>;\n\tpublic convert(\n\t\tinput: TextToSpeechInput,\n\t\toptions?: ProviderOptions\n\t): Promise<TextToSpeechOutput>;\n\tpublic convert(\n\t\tinput: SpeechToTextInput,\n\t\toptions?: ProviderOptions\n\t): Promise<SpeechToTextOutput>;\n\tpublic convert(\n\t\tinput: TranslateTextInput | TextToSpeechInput | SpeechToTextInput,\n\t\toptions?: ProviderOptions\n\t): Promise<TranslateTextOutput | TextToSpeechOutput | SpeechToTextOutput> {\n\t\tconst pluggableToExecute = this.getPluggableToExecute(\n\t\t\tthis._convertPluggables,\n\t\t\toptions\n\t\t);\n\t\treturn pluggableToExecute.convert(input);\n\t}\n\n\tpublic identify(\n\t\tinput: IdentifyTextInput,\n\t\toptions?: ProviderOptions\n\t): Promise<IdentifyTextOutput>;\n\tpublic identify(\n\t\tinput: IdentifyLabelsInput,\n\t\toptions?: ProviderOptions\n\t): Promise<IdentifyLabelsOutput>;\n\tpublic identify(\n\t\tinput: IdentifyEntitiesInput,\n\t\toptions?: ProviderOptions\n\t): Promise<IdentifyEntitiesOutput>;\n\tpublic identify(\n\t\tinput: IdentifyTextInput | IdentifyLabelsInput | IdentifyEntitiesInput,\n\t\toptions: ProviderOptions\n\t): Promise<\n\t\tIdentifyTextOutput | IdentifyLabelsOutput | IdentifyEntitiesOutput\n\t> {\n\t\tconst pluggableToExecute = this.getPluggableToExecute(\n\t\t\tthis._identifyPluggables,\n\t\t\toptions\n\t\t);\n\t\treturn pluggableToExecute.identify(input);\n\t}\n\n\t// tslint:disable-next-line: max-line-length\n\tprivate getPluggableToExecute<T extends AbstractPredictionsProvider>(\n\t\tpluggables: T[],\n\t\tproviderOptions: ProviderOptions\n\t): T {\n\t\t// Give preference to provider name first since it is more specific to this call, even if\n\t\t// there is only one provider configured to error out if the name provided is not the one matched.\n\t\tif (providerOptions && providerOptions.providerName) {\n\t\t\treturn [...pluggables].find(\n\t\t\t\tpluggable =>\n\t\t\t\t\tpluggable.getProviderName() === providerOptions.providerName\n\t\t\t);\n\t\t} else {\n\t\t\tif (pluggables.length === 1) {\n\t\t\t\treturn pluggables[0];\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'More than one or no providers are configured, ' +\n\t\t\t\t\t\t'Either specify a provider name or configure exactly one provider'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getAllProviders() {\n\t\treturn [\n\t\t\t...this._convertPluggables,\n\t\t\t...this._identifyPluggables,\n\t\t\t...this._interpretPluggables,\n\t\t];\n\t}\n\n\tprivate configurePluggable(pluggable: AbstractPredictionsProvider) {\n\t\tconst categoryConfig = Object.assign(\n\t\t\t{},\n\t\t\tthis._options['predictions'], // Parent predictions config for the top level provider\n\t\t\tthis._options[pluggable.getCategory().toLowerCase()] // Actual category level config\n\t\t);\n\t\tpluggable.configure(categoryConfig);\n\t}\n\n\tprivate implementsConvertPluggable(\n\t\tobj: any\n\t): obj is AbstractConvertPredictionsProvider {\n\t\treturn obj && typeof obj.convert === 'function';\n\t}\n\n\tprivate implementsIdentifyPluggable(\n\t\tobj: any\n\t): obj is AbstractIdentifyPredictionsProvider {\n\t\treturn obj && typeof obj.identify === 'function';\n\t}\n\n\tprivate implementsInterpretPluggable(\n\t\tobj: any\n\t): obj is AbstractInterpretPredictionsProvider {\n\t\treturn obj && typeof obj.interpret === 'function';\n\t}\n}\n\nexport const Predictions = new PredictionsClass({});\nAmplify.register(Predictions);\n"]},"metadata":{},"sourceType":"module"}