{"ast":null,"code":"import { __awaiter, __generator, __values } from \"tslib\";\nimport { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\n/**\n * @internal\n */\n\nexport function getPayloadHash(_a, hashConstructor) {\n  var headers = _a.headers,\n      body = _a.body;\n  return __awaiter(this, void 0, void 0, function () {\n    var _b, _c, headerName, hashCtor, _d;\n\n    var e_1, _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          try {\n            for (_b = __values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n              headerName = _c.value;\n\n              if (headerName.toLowerCase() === SHA256_HEADER) {\n                return [2\n                /*return*/\n                , headers[headerName]];\n              }\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (_c && !_c.done && (_e = _b.return)) _e.call(_b);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n\n          if (!(body == undefined)) return [3\n          /*break*/\n          , 1];\n          return [2\n          /*return*/\n          , \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"];\n\n        case 1:\n          if (!(typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body))) return [3\n          /*break*/\n          , 3];\n          hashCtor = new hashConstructor();\n          hashCtor.update(body);\n          _d = toHex;\n          return [4\n          /*yield*/\n          , hashCtor.digest()];\n\n        case 2:\n          return [2\n          /*return*/\n          , _d.apply(void 0, [_f.sent()])];\n\n        case 3:\n          // As any defined body that is not a string or binary data is a stream, this\n          // body is unsignable. Attempt to send the request with an unsigned payload,\n          // which may or may not be accepted by the service.\n          return [2\n          /*return*/\n          , UNSIGNED_PAYLOAD];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,WAApB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,aAAhD;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,EAAxB,EAA4BC,eAA5B,EAA6C;EAChD,IAAIC,OAAO,GAAGF,EAAE,CAACE,OAAjB;EAAA,IAA0BC,IAAI,GAAGH,EAAE,CAACG,IAApC;EACA,OAAOX,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;IAC/C,IAAIY,EAAJ,EAAQC,EAAR,EAAYC,UAAZ,EAAwBC,QAAxB,EAAkCC,EAAlC;;IACA,IAAIC,GAAJ,EAASC,EAAT;;IACA,OAAOjB,WAAW,CAAC,IAAD,EAAO,UAAUkB,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACC,KAAX;QACI,KAAK,CAAL;UACI,IAAI;YACA,KAAKR,EAAE,GAAGV,QAAQ,CAACmB,MAAM,CAACC,IAAP,CAAYZ,OAAZ,CAAD,CAAb,EAAqCG,EAAE,GAAGD,EAAE,CAACW,IAAH,EAA/C,EAA0D,CAACV,EAAE,CAACW,IAA9D,EAAoEX,EAAE,GAAGD,EAAE,CAACW,IAAH,EAAzE,EAAoF;cAChFT,UAAU,GAAGD,EAAE,CAACY,KAAhB;;cACA,IAAIX,UAAU,CAACY,WAAX,OAA6BrB,aAAjC,EAAgD;gBAC5C,OAAO,CAAC;gBAAE;gBAAH,EAAeK,OAAO,CAACI,UAAD,CAAtB,CAAP;cACH;YACJ;UACJ,CAPD,CAQA,OAAOa,KAAP,EAAc;YAAEV,GAAG,GAAG;cAAEW,KAAK,EAAED;YAAT,CAAN;UAAyB,CARzC,SASQ;YACJ,IAAI;cACA,IAAId,EAAE,IAAI,CAACA,EAAE,CAACW,IAAV,KAAmBN,EAAE,GAAGN,EAAE,CAACiB,MAA3B,CAAJ,EAAwCX,EAAE,CAACY,IAAH,CAAQlB,EAAR;YAC3C,CAFD,SAGQ;cAAE,IAAIK,GAAJ,EAAS,MAAMA,GAAG,CAACW,KAAV;YAAkB;UACxC;;UACD,IAAI,EAAEjB,IAAI,IAAIoB,SAAV,CAAJ,EAA0B,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;UAC1B,OAAO,CAAC;UAAE;UAAH,EAAe,kEAAf,CAAP;;QACJ,KAAK,CAAL;UACI,IAAI,EAAE,OAAOpB,IAAP,KAAgB,QAAhB,IAA4BqB,WAAW,CAACC,MAAZ,CAAmBtB,IAAnB,CAA5B,IAAwDR,aAAa,CAACQ,IAAD,CAAvE,CAAJ,EAAoF,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;UACpFI,QAAQ,GAAG,IAAIN,eAAJ,EAAX;UACAM,QAAQ,CAACmB,MAAT,CAAgBvB,IAAhB;UACAK,EAAE,GAAGZ,KAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcW,QAAQ,CAACoB,MAAT,EAAd,CAAP;;QACJ,KAAK,CAAL;UAAQ,OAAO,CAAC;UAAE;UAAH,EAAenB,EAAE,CAACoB,KAAH,CAAS,KAAK,CAAd,EAAiB,CAACjB,EAAE,CAACkB,IAAH,EAAD,CAAjB,CAAf,CAAP;;QACR,KAAK,CAAL;UACA;UACA;UACA;UACA,OAAO,CAAC;UAAE;UAAH,EAAe/B,gBAAf,CAAP;MA9BJ;IAgCH,CAjCiB,CAAlB;EAkCH,CArCe,CAAhB;AAsCH","names":["isArrayBuffer","toHex","SHA256_HEADER","UNSIGNED_PAYLOAD","getPayloadHash","_a","hashConstructor","headers","body","_b","keys","_c","headerName","toLowerCase","undefined","ArrayBuffer","isView","hashCtor","update","_d","digest","_f"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-sdk/signature-v4/src/getPayloadHash.ts"],"sourcesContent":["import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { HashConstructor, HttpRequest } from \"@aws-sdk/types\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\n\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\n\n/**\n * @internal\n */\nexport async function getPayloadHash(\n  { headers, body }: HttpRequest,\n  hashConstructor: HashConstructor\n): Promise<string> {\n  for (const headerName of Object.keys(headers)) {\n    if (headerName.toLowerCase() === SHA256_HEADER) {\n      return headers[headerName];\n    }\n  }\n\n  if (body == undefined) {\n    return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n  } else if (typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {\n    const hashCtor = new hashConstructor();\n    hashCtor.update(body);\n    return toHex(await hashCtor.digest());\n  }\n\n  // As any defined body that is not a string or binary data is a stream, this\n  // body is unsignable. Attempt to send the request with an unsigned payload,\n  // which may or may not be accepted by the service.\n  return UNSIGNED_PAYLOAD;\n}\n"]},"metadata":{},"sourceType":"module"}