{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport Observable from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { ReachabilityMonitor } from './datastoreReachability';\nvar logger = new Logger('DataStore');\nvar RECONNECTING_IN = 5000; // 5s this may be configurable in the future\n\nvar DataStoreConnectivity =\n/** @class */\nfunction () {\n  function DataStoreConnectivity() {\n    this.connectionStatus = {\n      online: false\n    };\n  }\n\n  DataStoreConnectivity.prototype.status = function () {\n    var _this = this;\n\n    if (this.observer) {\n      throw new Error('Subscriber already exists');\n    }\n\n    return new Observable(function (observer) {\n      _this.observer = observer; // Will be used to forward socket connection changes, enhancing Reachability\n\n      _this.subscription = ReachabilityMonitor.subscribe(function (_a) {\n        var online = _a.online;\n        _this.connectionStatus.online = online;\n\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n\n\n        observer.next(observerResult);\n      });\n      return function () {\n        clearTimeout(_this.timeout);\n\n        _this.unsubscribe();\n      };\n    });\n  };\n\n  DataStoreConnectivity.prototype.unsubscribe = function () {\n    if (this.subscription) {\n      clearTimeout(this.timeout);\n      this.subscription.unsubscribe();\n    }\n  };\n\n  DataStoreConnectivity.prototype.socketDisconnected = function () {\n    var _this = this;\n\n    if (this.observer && typeof this.observer.next === 'function') {\n      this.observer.next({\n        online: false\n      }); // Notify network issue from the socket\n\n      this.timeout = setTimeout(function () {\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n\n\n        _this.observer.next(observerResult);\n      }, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n    }\n  };\n\n  return DataStoreConnectivity;\n}();\n\nexport default DataStoreConnectivity;","map":{"version":3,"mappings":"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","names":["Observable","ConsoleLogger","Logger","ReachabilityMonitor","logger","RECONNECTING_IN","connectionStatus","online","DataStoreConnectivity","observer","Error","_this","subscription","subscribe","_a","observerResult","next","clearTimeout","timeout","unsubscribe","setTimeout"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-amplify/datastore/src/sync/datastoreConnectivity.ts"],"sourcesContent":["import Observable, { ZenObservable } from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { ReachabilityMonitor } from './datastoreReachability';\n\nconst logger = new Logger('DataStore');\n\nconst RECONNECTING_IN = 5000; // 5s this may be configurable in the future\n\ntype ConnectionStatus = {\n\t// Might add other params in the future\n\tonline: boolean;\n};\n\nexport default class DataStoreConnectivity {\n\tprivate connectionStatus: ConnectionStatus;\n\tprivate observer: ZenObservable.SubscriptionObserver<ConnectionStatus>;\n\tprivate subscription: ZenObservable.Subscription;\n\tprivate timeout: ReturnType<typeof setTimeout>;\n\tconstructor() {\n\t\tthis.connectionStatus = {\n\t\t\tonline: false,\n\t\t};\n\t}\n\n\tstatus(): Observable<ConnectionStatus> {\n\t\tif (this.observer) {\n\t\t\tthrow new Error('Subscriber already exists');\n\t\t}\n\t\treturn new Observable(observer => {\n\t\t\tthis.observer = observer;\n\t\t\t// Will be used to forward socket connection changes, enhancing Reachability\n\n\t\t\tthis.subscription = ReachabilityMonitor.subscribe(({ online }) => {\n\t\t\t\tthis.connectionStatus.online = online;\n\n\t\t\t\tconst observerResult = { ...this.connectionStatus }; // copyOf status\n\n\t\t\t\tobserver.next(observerResult);\n\t\t\t});\n\n\t\t\treturn () => {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tthis.unsubscribe();\n\t\t\t};\n\t\t});\n\t}\n\n\tunsubscribe() {\n\t\tif (this.subscription) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.subscription.unsubscribe();\n\t\t}\n\t}\n\n\tsocketDisconnected() {\n\t\tif (this.observer && typeof this.observer.next === 'function') {\n\t\t\tthis.observer.next({ online: false }); // Notify network issue from the socket\n\n\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\tconst observerResult = { ...this.connectionStatus }; // copyOf status\n\t\t\t\tthis.observer.next(observerResult);\n\t\t\t}, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}