{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HeadBucketCommand } from \"../commands/HeadBucketCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nvar checkState = function (client, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var result, exception_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , client.send(new HeadBucketCommand(input))];\n\n        case 1:\n          result = _a.sent();\n          return [2\n          /*return*/\n          , {\n            state: WaiterState.SUCCESS\n          }];\n\n        case 2:\n          exception_1 = _a.sent();\n          return [3\n          /*break*/\n          , 3];\n\n        case 3:\n          return [2\n          /*return*/\n          , {\n            state: WaiterState.RETRY\n          }];\n      }\n    });\n  });\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to HeadBucketCommand for polling.\n */\n\n\nexport var waitForBucketExists = function (params, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n      serviceDefaults = {\n        minDelay: 5,\n        maxDelay: 120\n      };\n      return [2\n      /*return*/\n      , createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n  });\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,sBAA1C;;AACA,IAAIC,UAAU,GAAG,UAAUC,MAAV,EAAkBC,KAAlB,EAAyB;EAAE,OAAOP,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAC7F,IAAIQ,MAAJ,EAAYC,WAAZ;IACA,OAAOR,WAAW,CAAC,IAAD,EAAO,UAAUS,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACC,KAAX;QACI,KAAK,CAAL;UACID,EAAE,CAACE,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;UACA,OAAO,CAAC;UAAE;UAAH,EAAcP,MAAM,CAACQ,IAAP,CAAY,IAAIZ,iBAAJ,CAAsBK,KAAtB,CAAZ,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIC,MAAM,GAAGE,EAAE,CAACK,IAAH,EAAT;UACA,OAAO,CAAC;UAAE;UAAH,EAAe;YAAEC,KAAK,EAAEb,WAAW,CAACc;UAArB,CAAf,CAAP;;QACJ,KAAK,CAAL;UACIR,WAAW,GAAGC,EAAE,CAACK,IAAH,EAAd;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UAAQ,OAAO,CAAC;UAAE;UAAH,EAAe;YAAEC,KAAK,EAAEb,WAAW,CAACe;UAArB,CAAf,CAAP;MAVZ;IAYH,CAbiB,CAAlB;EAcH,CAhB2D,CAAhB;AAgBvC,CAhBL;AAiBA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIC,mBAAmB,GAAG,UAAUC,MAAV,EAAkBb,KAAlB,EAAyB;EAAE,OAAOP,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAC7G,IAAIqB,eAAJ;IACA,OAAOpB,WAAW,CAAC,IAAD,EAAO,UAAUS,EAAV,EAAc;MACnCW,eAAe,GAAG;QAAEC,QAAQ,EAAE,CAAZ;QAAeC,QAAQ,EAAE;MAAzB,CAAlB;MACA,OAAO,CAAC;MAAE;MAAH,EAAenB,YAAY,CAACL,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKsB,eAAL,CAAT,EAAgCD,MAAhC,CAAT,EAAkDb,KAAlD,EAAyDF,UAAzD,CAA3B,CAAP;IACH,CAHiB,CAAlB;EAIH,CAN2E,CAAhB;AAMvD,CANE","names":["HeadBucketCommand","WaiterState","createWaiter","checkState","client","input","send","result","_a","state","SUCCESS","RETRY","waitForBucketExists","params","serviceDefaults","minDelay","maxDelay"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/client-s3/waiters/waitForBucketExists.ts"],"sourcesContent":["import { S3Client } from \"../S3Client\";\nimport { HeadBucketCommand, HeadBucketCommandInput } from \"../commands/HeadBucketCommand\";\nimport { WaiterConfiguration, WaiterResult, WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nconst checkState = async (client: S3Client, input: HeadBucketCommandInput): Promise<WaiterResult> => {\n  try {\n    let result: any = await client.send(new HeadBucketCommand(input));\n    return { state: WaiterState.SUCCESS };\n  } catch (exception) {}\n  return { state: WaiterState.RETRY };\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to HeadBucketCommand for polling.\n */\nexport const waitForBucketExists = async (\n  params: WaiterConfiguration<S3Client>,\n  input: HeadBucketCommandInput\n): Promise<WaiterResult> => {\n  const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n  return createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\n"]},"metadata":{},"sourceType":"module"}