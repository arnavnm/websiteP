{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { UploadPartCommand, CompleteMultipartUploadCommand, AbortMultipartUploadCommand, ListPartsCommand, CreateMultipartUploadCommand, ListObjectsV2Command } from '@aws-sdk/client-s3';\nimport axios from 'axios';\nimport { Logger } from '@aws-amplify/core';\nimport { byteLength, isFile } from '../common/StorageUtils';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nimport { SET_CONTENT_LENGTH_HEADER, UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nvar logger = new Logger('AWSS3UploadTask');\nexport var AWSS3UploadTaskState;\n\n(function (AWSS3UploadTaskState) {\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"INIT\"] = 0] = \"INIT\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"IN_PROGRESS\"] = 1] = \"IN_PROGRESS\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"PAUSED\"] = 2] = \"PAUSED\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"CANCELLED\"] = 3] = \"CANCELLED\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"COMPLETED\"] = 4] = \"COMPLETED\";\n})(AWSS3UploadTaskState || (AWSS3UploadTaskState = {}));\n\nexport var TaskEvents;\n\n(function (TaskEvents) {\n  TaskEvents[\"CANCEL\"] = \"cancel\";\n  TaskEvents[\"UPLOAD_COMPLETE\"] = \"uploadComplete\";\n  TaskEvents[\"UPLOAD_PROGRESS\"] = \"uploadPartProgress\";\n  TaskEvents[\"ERROR\"] = \"error\";\n})(TaskEvents || (TaskEvents = {})); // maximum number of parts per upload request according the S3 spec,\n// see: https://docs.aws.amazon.com/AmazonS3/latest/userguide/qfacts.html\n\n\nvar MAX_PARTS = 10000; // 5MB in bytes\n\nvar PART_SIZE = 5 * 1024 * 1024;\nvar DEFAULT_QUEUE_SIZE = 4;\n\nfunction comparePartNumber(a, b) {\n  return a.PartNumber - b.PartNumber;\n}\n\nvar AWSS3UploadTask =\n/** @class */\nfunction () {\n  function AWSS3UploadTask(_a) {\n    var s3Client = _a.s3Client,\n        file = _a.file,\n        emitter = _a.emitter,\n        storage = _a.storage,\n        params = _a.params,\n        level = _a.level,\n        prefixPromise = _a.prefixPromise;\n    this.partSize = PART_SIZE;\n    this.queueSize = DEFAULT_QUEUE_SIZE;\n    this.inProgress = [];\n    this.completedParts = [];\n    this.queued = [];\n    this.bytesUploaded = 0;\n    this.totalBytes = 0;\n    this.state = AWSS3UploadTaskState.INIT;\n    this.prefixPromise = prefixPromise;\n    this.s3client = s3Client;\n    this.s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n    this.storage = storage;\n    this.storageSync = Promise.resolve();\n\n    if (typeof this.storage['sync'] === 'function') {\n      this.storageSync = this.storage['sync']();\n    }\n\n    this.params = params;\n    this.file = file;\n    this.totalBytes = this.file.size;\n    this.bytesUploaded = 0;\n    this.emitter = emitter;\n    this.queued = [];\n    this.fileId = this._getFileId(level);\n\n    this._validateParams(); // event emitter will re-throw an error if an event emits an error unless there's a listener, attaching a no-op\n    // function to it unless user adds their own onError callback\n\n\n    this.emitter.on(TaskEvents.ERROR, function () {});\n  }\n\n  Object.defineProperty(AWSS3UploadTask.prototype, \"percent\", {\n    get: function () {\n      return this.bytesUploaded / this.totalBytes * 100;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AWSS3UploadTask.prototype, \"isInProgress\", {\n    get: function () {\n      return this.state === AWSS3UploadTaskState.IN_PROGRESS;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AWSS3UploadTask.prototype._listSingleFile = function (_a) {\n    var key = _a.key,\n        bucket = _a.bucket;\n    return __awaiter(this, void 0, void 0, function () {\n      var listObjectRes, _b, Contents, prefix, obj;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.s3client.send(new ListObjectsV2Command({\n              Bucket: bucket,\n              Prefix: key\n            }))];\n\n          case 1:\n            listObjectRes = _c.sent();\n            _b = listObjectRes.Contents, Contents = _b === void 0 ? [] : _b;\n            return [4\n            /*yield*/\n            , this.prefixPromise];\n\n          case 2:\n            prefix = _c.sent();\n            obj = Contents.find(function (o) {\n              return o.Key === \"\" + prefix + key;\n            });\n            return [2\n            /*return*/\n            , obj];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._getFileId = function (level) {\n    // We should check if it's a File first because File is also instance of a Blob\n    if (isFile(this.file)) {\n      return [this.file.name, this.file.lastModified, this.file.size, this.file.type, this.params.Bucket, level, this.params.Key].join('-');\n    } else {\n      return [this.file.size, this.file.type, this.params.Bucket, level, this.params.Key].join('-');\n    }\n  };\n\n  AWSS3UploadTask.prototype._findCachedUploadParts = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests, cachedUploadFileData, listPartsOutput;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._listCachedUploadTasks()];\n\n          case 1:\n            uploadRequests = _a.sent();\n\n            if (Object.keys(uploadRequests).length === 0 || !Object.prototype.hasOwnProperty.call(uploadRequests, this.fileId)) {\n              return [2\n              /*return*/\n              , {\n                parts: [],\n                uploadId: null\n              }];\n            }\n\n            cachedUploadFileData = uploadRequests[this.fileId];\n            cachedUploadFileData.lastTouched = Date.now();\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [4\n            /*yield*/\n            , this.s3client.send(new ListPartsCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: cachedUploadFileData.uploadId\n            }))];\n\n          case 2:\n            listPartsOutput = _a.sent();\n            return [2\n            /*return*/\n            , {\n              parts: listPartsOutput.Parts || [],\n              uploadId: cachedUploadFileData.uploadId\n            }];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._emitEvent = function (event, payload) {\n    this.emitter.emit(event, payload);\n  };\n\n  AWSS3UploadTask.prototype._validateParams = function () {\n    if (this.file.size / this.partSize > MAX_PARTS) {\n      throw new Error(\"Too many parts. Number of parts is \" + this.file.size / this.partSize + \", maximum is \" + MAX_PARTS + \".\");\n    }\n  };\n\n  AWSS3UploadTask.prototype._listCachedUploadTasks = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var tasks;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.storageSync];\n\n          case 1:\n            _a.sent();\n\n            tasks = this.storage.getItem(UPLOADS_STORAGE_KEY) || '{}';\n            return [2\n            /*return*/\n            , JSON.parse(tasks)];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._cache = function (fileMetadata) {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._listCachedUploadTasks()];\n\n          case 1:\n            uploadRequests = _a.sent();\n            uploadRequests[this.fileId] = fileMetadata;\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._isCached = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = (_a = Object.prototype.hasOwnProperty).call;\n            return [4\n            /*yield*/\n            , this._listCachedUploadTasks()];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.apply(_a, [_c.sent(), this.fileId])];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._removeFromCache = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._listCachedUploadTasks()];\n\n          case 1:\n            uploadRequests = _a.sent();\n            delete uploadRequests[this.fileId];\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._onPartUploadCompletion = function (_a) {\n    var eTag = _a.eTag,\n        partNumber = _a.partNumber,\n        chunk = _a.chunk;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        this.completedParts.push({\n          ETag: eTag,\n          PartNumber: partNumber\n        });\n        this.bytesUploaded += byteLength(chunk);\n\n        this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n          loaded: this.bytesUploaded,\n          total: this.totalBytes\n        }); // Remove the completed item from the inProgress array\n\n\n        this.inProgress = this.inProgress.filter(function (job) {\n          return job.uploadPartInput.PartNumber !== partNumber;\n        });\n        if (this.queued.length && this.state !== AWSS3UploadTaskState.PAUSED) this._startNextPart();\n        if (this._isDone()) this._completeUpload();\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._completeUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.s3client.send(new CompleteMultipartUploadCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: this.uploadId,\n              MultipartUpload: {\n                // Parts are not always completed in order, we need to manually sort them\n                Parts: this.completedParts.sort(comparePartNumber)\n              }\n            }))];\n\n          case 1:\n            _a.sent();\n\n            this._verifyFileSize();\n\n            this._emitEvent(TaskEvents.UPLOAD_COMPLETE, {\n              key: this.params.Bucket + \"/\" + this.params.Key\n            });\n\n            this._removeFromCache();\n\n            this.state = AWSS3UploadTaskState.COMPLETED;\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            err_1 = _a.sent();\n            logger.error('error completing upload', err_1);\n\n            this._emitEvent(TaskEvents.ERROR, err_1);\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._makeUploadPartRequest = function (input, cancelTokenSource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.s3client.send(new UploadPartCommand(input), {\n              cancelTokenSource: cancelTokenSource\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [4\n            /*yield*/\n            , this._onPartUploadCompletion({\n              eTag: res.ETag,\n              partNumber: input.PartNumber,\n              chunk: input.Body\n            })];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_2 = _a.sent();\n\n            if (this.state === AWSS3UploadTaskState.PAUSED) {\n              logger.log('upload paused');\n            } else if (this.state === AWSS3UploadTaskState.CANCELLED) {\n              logger.log('upload aborted');\n            } else {\n              logger.error('error starting next part of upload: ', err_2);\n            } // axios' cancel will also throw an error, however we don't need to emit an event in that case as it's an\n            // expected behavior\n\n\n            if (!axios.isCancel(err_2) && err_2.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE) {\n              this._emitEvent(TaskEvents.ERROR, err_2);\n\n              this.pause();\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._startNextPart = function () {\n    if (this.queued.length > 0 && this.state !== AWSS3UploadTaskState.PAUSED) {\n      var cancelTokenSource = axios.CancelToken.source();\n      var nextPart = this.queued.shift();\n      this.inProgress.push({\n        uploadPartInput: nextPart,\n        s3Request: this._makeUploadPartRequest(nextPart, cancelTokenSource),\n        cancel: cancelTokenSource.cancel\n      });\n    }\n  };\n  /**\n   * Verify on S3 side that the file size matches the one on the client side.\n   *\n   * @async\n   * @throws throws an error if the file size does not match between local copy of the file and the file on s3.\n   */\n\n\n  AWSS3UploadTask.prototype._verifyFileSize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var obj, valid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._listSingleFile({\n              key: this.params.Key,\n              bucket: this.params.Bucket\n            })];\n\n          case 1:\n            obj = _a.sent();\n            valid = Boolean(obj && obj.Size === this.file.size);\n\n            if (!valid) {\n              throw new Error('File size does not match between local file and file on s3');\n            }\n\n            return [2\n            /*return*/\n            , valid];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._isDone = function () {\n    return !this.queued.length && !this.inProgress.length && this.bytesUploaded === this.totalBytes;\n  };\n\n  AWSS3UploadTask.prototype._createParts = function () {\n    var size = this.file.size;\n    var parts = [];\n\n    for (var bodyStart = 0; bodyStart < size;) {\n      var bodyEnd = Math.min(bodyStart + this.partSize, size);\n      parts.push({\n        Body: this.file.slice(bodyStart, bodyEnd),\n        Key: this.params.Key,\n        Bucket: this.params.Bucket,\n        PartNumber: parts.length + 1,\n        UploadId: this.uploadId\n      });\n      bodyStart += this.partSize;\n    }\n\n    return parts;\n  };\n\n  AWSS3UploadTask.prototype._initCachedUploadParts = function (cachedParts) {\n    this.bytesUploaded += cachedParts.reduce(function (acc, part) {\n      return acc + part.Size;\n    }, 0); // Find the set of part numbers that have already been uploaded\n\n    var uploadedPartNumSet = new Set(cachedParts.map(function (part) {\n      return part.PartNumber;\n    }));\n    this.queued = this.queued.filter(function (part) {\n      return !uploadedPartNumSet.has(part.PartNumber);\n    });\n    this.completedParts = cachedParts.map(function (part) {\n      return {\n        PartNumber: part.PartNumber,\n        ETag: part.ETag\n      };\n    });\n\n    this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytes\n    });\n  };\n\n  AWSS3UploadTask.prototype._initMultipartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.s3client.send(new CreateMultipartUploadCommand(this.params))];\n\n          case 1:\n            res = _a.sent();\n\n            this._cache({\n              uploadId: res.UploadId,\n              lastTouched: Date.now(),\n              bucket: this.params.Bucket,\n              key: this.params.Key,\n              fileName: this.file instanceof File ? this.file.name : ''\n            });\n\n            return [2\n            /*return*/\n            , res.UploadId];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._initializeUploadTask = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, parts, uploadId, uploadId, err_3;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.state = AWSS3UploadTaskState.IN_PROGRESS;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , this._isCached()];\n\n          case 2:\n            if (!_b.sent()) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this._findCachedUploadParts()];\n\n          case 3:\n            _a = _b.sent(), parts = _a.parts, uploadId = _a.uploadId;\n            this.uploadId = uploadId;\n            this.queued = this._createParts();\n\n            this._initCachedUploadParts(parts);\n\n            this._startUpload();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 4:\n            if (!!this.uploadId) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this._initMultipartUpload()];\n\n          case 5:\n            uploadId = _b.sent();\n            this.uploadId = uploadId;\n            this.queued = this._createParts();\n\n            this._startUpload();\n\n            _b.label = 6;\n\n          case 6:\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            err_3 = _b.sent();\n\n            if (!axios.isCancel(err_3)) {\n              logger.error('Error initializing the upload task', err_3);\n            }\n\n            return [3\n            /*break*/\n            , 8];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype.resume = function () {\n    if (this.state === AWSS3UploadTaskState.CANCELLED) {\n      logger.warn('This task has already been cancelled');\n    } else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n      logger.warn('This task has already been completed');\n    } else if (this.state === AWSS3UploadTaskState.IN_PROGRESS) {\n      logger.warn('Upload task already in progress'); // first time running resume, find any cached parts on s3 or start a new multipart upload request before\n      // starting the upload\n    } else if (!this.uploadId) {\n      this._initializeUploadTask();\n    } else {\n      this._startUpload();\n    }\n  };\n\n  AWSS3UploadTask.prototype._startUpload = function () {\n    this.state = AWSS3UploadTaskState.IN_PROGRESS;\n\n    for (var i = 0; i < this.queueSize; i++) {\n      this._startNextPart();\n    }\n  };\n\n  AWSS3UploadTask.prototype._cancel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.state === AWSS3UploadTaskState.CANCELLED)) return [3\n            /*break*/\n            , 1];\n            logger.warn('This task has already been cancelled');\n            return [2\n            /*return*/\n            , false];\n\n          case 1:\n            if (!(this.state === AWSS3UploadTaskState.COMPLETED)) return [3\n            /*break*/\n            , 2];\n            logger.warn('This task has already been completed');\n            return [2\n            /*return*/\n            , false];\n\n          case 2:\n            this.pause();\n            this.queued = [];\n            this.completedParts = [];\n            this.bytesUploaded = 0;\n            this.state = AWSS3UploadTaskState.CANCELLED;\n            _a.label = 3;\n\n          case 3:\n            _a.trys.push([3, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , this.s3client.send(new AbortMultipartUploadCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: this.uploadId\n            }))];\n\n          case 4:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this._removeFromCache()];\n\n          case 5:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , true];\n\n          case 6:\n            err_4 = _a.sent();\n            logger.error('Error cancelling upload task', err_4);\n            return [2\n            /*return*/\n            , false];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * pause this particular upload task\n   **/\n\n\n  AWSS3UploadTask.prototype.pause = function () {\n    var _a;\n\n    if (this.state === AWSS3UploadTaskState.CANCELLED) {\n      logger.warn('This task has already been cancelled');\n    } else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n      logger.warn('This task has already been completed');\n    } else if (this.state === AWSS3UploadTaskState.PAUSED) {\n      logger.warn('This task is already paused');\n    }\n\n    this.state = AWSS3UploadTaskState.PAUSED; // Use axios cancel token to abort the part request immediately\n    // Add the inProgress parts back to pending\n\n    var removedInProgressReq = this.inProgress.splice(0, this.inProgress.length);\n    removedInProgressReq.forEach(function (req) {\n      req.cancel(AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE);\n    }); // Put all removed in progress parts back into the queue\n\n    (_a = this.queued).unshift.apply(_a, __spread(removedInProgressReq.map(function (req) {\n      return req.uploadPartInput;\n    })));\n  };\n\n  return AWSS3UploadTask;\n}();\n\nexport { AWSS3UploadTask };","map":{"version":3,"mappings":"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","names":["UploadPartCommand","CompleteMultipartUploadCommand","AbortMultipartUploadCommand","ListPartsCommand","CreateMultipartUploadCommand","ListObjectsV2Command","axios","Logger","byteLength","isFile","AWSS3ProviderUploadErrorStrings","SET_CONTENT_LENGTH_HEADER","UPLOADS_STORAGE_KEY","logger","AWSS3UploadTaskState","TaskEvents","MAX_PARTS","PART_SIZE","DEFAULT_QUEUE_SIZE","comparePartNumber","a","b","PartNumber","_a","s3Client","file","emitter","storage","params","level","prefixPromise","INIT","s3client","middlewareStack","remove","storageSync","Promise","resolve","totalBytes","size","bytesUploaded","queued","fileId","_getFileId","_validateParams","on","ERROR","Object","AWSS3UploadTask","state","IN_PROGRESS","key","bucket","send","Bucket","Prefix","listObjectRes","_c","_b","prefix","obj","Contents","find","Key","name","lastModified","type","join","_listCachedUploadTasks","uploadRequests","keys","length","prototype","hasOwnProperty","call","parts","uploadId","cachedUploadFileData","lastTouched","Date","now","setItem","JSON","stringify","UploadId","listPartsOutput","Parts","event","payload","emit","partSize","Error","tasks","getItem","parse","fileMetadata","eTag","partNumber","chunk","completedParts","push","ETag","_emitEvent","UPLOAD_PROGRESS","loaded","total","inProgress","filter","uploadPartInput","PAUSED","_startNextPart","_isDone","_completeUpload","MultipartUpload","sort","_verifyFileSize","UPLOAD_COMPLETE","_removeFromCache","COMPLETED","error","err_1","input","cancelTokenSource","res","_onPartUploadCompletion","Body","log","CANCELLED","err_2","isCancel","message","UPLOAD_PAUSED_MESSAGE","pause","CancelToken","source","nextPart","shift","s3Request","_makeUploadPartRequest","cancel","_listSingleFile","valid","Boolean","Size","bodyStart","bodyEnd","Math","min","slice","cachedParts","reduce","acc","part","uploadedPartNumSet","Set","map","has","_cache","fileName","File","_isCached","_findCachedUploadParts","_createParts","_initCachedUploadParts","_startUpload","_initMultipartUpload","err_3","warn","_initializeUploadTask","i","queueSize","err_4","removedInProgressReq","splice","forEach","req","unshift","apply","__spread"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-amplify/storage/src/providers/AWSS3UploadTask.ts"],"sourcesContent":["import {\n\tUploadPartCommandInput,\n\tCompletedPart,\n\tS3Client,\n\tUploadPartCommand,\n\tCompleteMultipartUploadCommand,\n\tPart,\n\tAbortMultipartUploadCommand,\n\tListPartsCommand,\n\tCreateMultipartUploadCommand,\n\tPutObjectCommandInput,\n\tListObjectsV2Command,\n} from '@aws-sdk/client-s3';\nimport * as events from 'events';\nimport axios, { Canceler, CancelTokenSource } from 'axios';\nimport { HttpHandlerOptions } from '@aws-sdk/types';\nimport { Logger } from '@aws-amplify/core';\nimport { UploadTask } from '../types/Provider';\nimport { byteLength, isFile } from '../common/StorageUtils';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nimport {\n\tSET_CONTENT_LENGTH_HEADER,\n\tUPLOADS_STORAGE_KEY,\n} from '../common/StorageConstants';\nimport { StorageAccessLevel } from '..';\n\nconst logger = new Logger('AWSS3UploadTask');\nexport enum AWSS3UploadTaskState {\n\tINIT,\n\tIN_PROGRESS,\n\tPAUSED,\n\tCANCELLED,\n\tCOMPLETED,\n}\n\nexport enum TaskEvents {\n\tCANCEL = 'cancel',\n\tUPLOAD_COMPLETE = 'uploadComplete',\n\tUPLOAD_PROGRESS = 'uploadPartProgress',\n\tERROR = 'error',\n}\n\nexport interface AWSS3UploadTaskParams {\n\ts3Client: S3Client;\n\tfile: Blob;\n\tstorage: Storage;\n\tlevel: StorageAccessLevel;\n\tparams: PutObjectCommandInput;\n\tprefixPromise: Promise<string>;\n\temitter?: events.EventEmitter;\n}\n\nexport interface InProgressRequest {\n\tuploadPartInput: UploadPartCommandInput;\n\ts3Request: Promise<any>;\n\tcancel: Canceler;\n}\n\nexport interface UploadTaskCompleteEvent {\n\tkey: string;\n}\n\nexport interface UploadTaskProgressEvent {\n\t/**\n\t * bytes that has been sent to S3 so far\n\t */\n\tloaded: number;\n\t/**\n\t * total bytes that needs to be sent to S3\n\t */\n\ttotal: number;\n}\n\nexport interface FileMetadata {\n\tbucket: string;\n\tfileName: string;\n\tkey: string;\n\t// Unix timestamp in ms\n\tlastTouched: number;\n\tuploadId: string;\n}\n\n// maximum number of parts per upload request according the S3 spec,\n// see: https://docs.aws.amazon.com/AmazonS3/latest/userguide/qfacts.html\nconst MAX_PARTS = 10000;\n// 5MB in bytes\nconst PART_SIZE = 5 * 1024 * 1024;\nconst DEFAULT_QUEUE_SIZE = 4;\n\nfunction comparePartNumber(a: CompletedPart, b: CompletedPart) {\n\treturn a.PartNumber - b.PartNumber;\n}\n\nexport class AWSS3UploadTask implements UploadTask {\n\tprivate readonly emitter: events.EventEmitter;\n\tprivate readonly file: Blob;\n\tprivate readonly partSize: number = PART_SIZE;\n\tprivate readonly queueSize = DEFAULT_QUEUE_SIZE;\n\tprivate readonly s3client: S3Client;\n\tprivate readonly storage: Storage;\n\tprivate readonly storageSync: Promise<any>;\n\tprivate readonly fileId: string;\n\tprivate readonly params: PutObjectCommandInput;\n\tprivate readonly prefixPromise: Promise<string>;\n\tprivate inProgress: InProgressRequest[] = [];\n\tprivate completedParts: CompletedPart[] = [];\n\tprivate queued: UploadPartCommandInput[] = [];\n\tprivate bytesUploaded: number = 0;\n\tprivate totalBytes: number = 0;\n\tprivate uploadId: string;\n\n\tpublic state: AWSS3UploadTaskState = AWSS3UploadTaskState.INIT;\n\n\tconstructor({\n\t\ts3Client,\n\t\tfile,\n\t\temitter,\n\t\tstorage,\n\t\tparams,\n\t\tlevel,\n\t\tprefixPromise,\n\t}: AWSS3UploadTaskParams) {\n\t\tthis.prefixPromise = prefixPromise;\n\t\tthis.s3client = s3Client;\n\t\tthis.s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n\t\tthis.storage = storage;\n\t\tthis.storageSync = Promise.resolve();\n\t\tif (typeof this.storage['sync'] === 'function') {\n\t\t\tthis.storageSync = this.storage['sync']();\n\t\t}\n\t\tthis.params = params;\n\t\tthis.file = file;\n\t\tthis.totalBytes = this.file.size;\n\t\tthis.bytesUploaded = 0;\n\t\tthis.emitter = emitter;\n\t\tthis.queued = [];\n\t\tthis.fileId = this._getFileId(level);\n\t\tthis._validateParams();\n\t\t// event emitter will re-throw an error if an event emits an error unless there's a listener, attaching a no-op\n\t\t// function to it unless user adds their own onError callback\n\t\tthis.emitter.on(TaskEvents.ERROR, () => {});\n\t}\n\n\tget percent() {\n\t\treturn (this.bytesUploaded / this.totalBytes) * 100;\n\t}\n\n\tget isInProgress() {\n\t\treturn this.state === AWSS3UploadTaskState.IN_PROGRESS;\n\t}\n\n\tprivate async _listSingleFile({\n\t\tkey,\n\t\tbucket,\n\t}: {\n\t\tkey: string;\n\t\tbucket: string;\n\t}) {\n\t\tconst listObjectRes = await this.s3client.send(\n\t\t\tnew ListObjectsV2Command({\n\t\t\t\tBucket: bucket,\n\t\t\t\tPrefix: key,\n\t\t\t})\n\t\t);\n\t\tconst { Contents = [] } = listObjectRes;\n\t\tconst prefix = await this.prefixPromise;\n\t\tconst obj = Contents.find(o => o.Key === `${prefix}${key}`);\n\t\treturn obj;\n\t}\n\n\tprivate _getFileId(level: StorageAccessLevel): string {\n\t\t// We should check if it's a File first because File is also instance of a Blob\n\t\tif (isFile(this.file)) {\n\t\t\treturn [\n\t\t\t\tthis.file.name,\n\t\t\t\tthis.file.lastModified,\n\t\t\t\tthis.file.size,\n\t\t\t\tthis.file.type,\n\t\t\t\tthis.params.Bucket,\n\t\t\t\tlevel,\n\t\t\t\tthis.params.Key,\n\t\t\t].join('-');\n\t\t} else {\n\t\t\treturn [\n\t\t\t\tthis.file.size,\n\t\t\t\tthis.file.type,\n\t\t\t\tthis.params.Bucket,\n\t\t\t\tlevel,\n\t\t\t\tthis.params.Key,\n\t\t\t].join('-');\n\t\t}\n\t}\n\n\tprivate async _findCachedUploadParts(): Promise<{\n\t\tparts: Part[];\n\t\tuploadId: string;\n\t}> {\n\t\tconst uploadRequests = await this._listCachedUploadTasks();\n\n\t\tif (\n\t\t\tObject.keys(uploadRequests).length === 0 ||\n\t\t\t!Object.prototype.hasOwnProperty.call(uploadRequests, this.fileId)\n\t\t) {\n\t\t\treturn { parts: [], uploadId: null };\n\t\t}\n\n\t\tconst cachedUploadFileData = uploadRequests[this.fileId];\n\t\tcachedUploadFileData.lastTouched = Date.now();\n\t\tthis.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n\n\t\tconst listPartsOutput = await this.s3client.send(\n\t\t\tnew ListPartsCommand({\n\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\tKey: this.params.Key,\n\t\t\t\tUploadId: cachedUploadFileData.uploadId,\n\t\t\t})\n\t\t);\n\n\t\treturn {\n\t\t\tparts: listPartsOutput.Parts || [],\n\t\t\tuploadId: cachedUploadFileData.uploadId,\n\t\t};\n\t}\n\n\tprivate _emitEvent<T = any>(event: string, payload: T) {\n\t\tthis.emitter.emit(event, payload);\n\t}\n\n\tprivate _validateParams() {\n\t\tif (this.file.size / this.partSize > MAX_PARTS) {\n\t\t\tthrow new Error(\n\t\t\t\t`Too many parts. Number of parts is ${this.file.size /\n\t\t\t\t\tthis.partSize}, maximum is ${MAX_PARTS}.`\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async _listCachedUploadTasks(): Promise<\n\t\tRecord<string, FileMetadata>\n\t> {\n\t\tawait this.storageSync;\n\t\tconst tasks = this.storage.getItem(UPLOADS_STORAGE_KEY) || '{}';\n\t\treturn JSON.parse(tasks);\n\t}\n\n\tprivate async _cache(fileMetadata: FileMetadata): Promise<void> {\n\t\tconst uploadRequests = await this._listCachedUploadTasks();\n\t\tuploadRequests[this.fileId] = fileMetadata;\n\t\tthis.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n\t}\n\n\tprivate async _isCached(): Promise<boolean> {\n\t\treturn Object.prototype.hasOwnProperty.call(\n\t\t\tawait this._listCachedUploadTasks(),\n\t\t\tthis.fileId\n\t\t);\n\t}\n\n\tprivate async _removeFromCache(): Promise<void> {\n\t\tconst uploadRequests = await this._listCachedUploadTasks();\n\t\tdelete uploadRequests[this.fileId];\n\t\tthis.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n\t}\n\n\tprivate async _onPartUploadCompletion({\n\t\teTag,\n\t\tpartNumber,\n\t\tchunk,\n\t}: {\n\t\teTag: string;\n\t\tpartNumber: number;\n\t\tchunk: UploadPartCommandInput['Body'];\n\t}) {\n\t\tthis.completedParts.push({\n\t\t\tETag: eTag,\n\t\t\tPartNumber: partNumber,\n\t\t});\n\t\tthis.bytesUploaded += byteLength(chunk);\n\t\tthis._emitEvent<UploadTaskProgressEvent>(TaskEvents.UPLOAD_PROGRESS, {\n\t\t\tloaded: this.bytesUploaded,\n\t\t\ttotal: this.totalBytes,\n\t\t});\n\t\t// Remove the completed item from the inProgress array\n\t\tthis.inProgress = this.inProgress.filter(\n\t\t\tjob => job.uploadPartInput.PartNumber !== partNumber\n\t\t);\n\t\tif (this.queued.length && this.state !== AWSS3UploadTaskState.PAUSED)\n\t\t\tthis._startNextPart();\n\t\tif (this._isDone()) this._completeUpload();\n\t}\n\n\tprivate async _completeUpload() {\n\t\ttry {\n\t\t\tawait this.s3client.send(\n\t\t\t\tnew CompleteMultipartUploadCommand({\n\t\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\t\tKey: this.params.Key,\n\t\t\t\t\tUploadId: this.uploadId,\n\t\t\t\t\tMultipartUpload: {\n\t\t\t\t\t\t// Parts are not always completed in order, we need to manually sort them\n\t\t\t\t\t\tParts: this.completedParts.sort(comparePartNumber),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t);\n\t\t\tthis._verifyFileSize();\n\t\t\tthis._emitEvent<UploadTaskCompleteEvent>(TaskEvents.UPLOAD_COMPLETE, {\n\t\t\t\tkey: `${this.params.Bucket}/${this.params.Key}`,\n\t\t\t});\n\t\t\tthis._removeFromCache();\n\t\t\tthis.state = AWSS3UploadTaskState.COMPLETED;\n\t\t} catch (err) {\n\t\t\tlogger.error('error completing upload', err);\n\t\t\tthis._emitEvent(TaskEvents.ERROR, err);\n\t\t}\n\t}\n\n\tprivate async _makeUploadPartRequest(\n\t\tinput: UploadPartCommandInput,\n\t\tcancelTokenSource: CancelTokenSource\n\t) {\n\t\ttry {\n\t\t\tconst res = await this.s3client.send(new UploadPartCommand(input), {\n\t\t\t\tcancelTokenSource,\n\t\t\t} as HttpHandlerOptions);\n\t\t\tawait this._onPartUploadCompletion({\n\t\t\t\teTag: res.ETag,\n\t\t\t\tpartNumber: input.PartNumber,\n\t\t\t\tchunk: input.Body,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tif (this.state === AWSS3UploadTaskState.PAUSED) {\n\t\t\t\tlogger.log('upload paused');\n\t\t\t} else if (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\t\tlogger.log('upload aborted');\n\t\t\t} else {\n\t\t\t\tlogger.error('error starting next part of upload: ', err);\n\t\t\t}\n\t\t\t// axios' cancel will also throw an error, however we don't need to emit an event in that case as it's an\n\t\t\t// expected behavior\n\t\t\tif (\n\t\t\t\t!axios.isCancel(err) &&\n\t\t\t\terr.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE\n\t\t\t) {\n\t\t\t\tthis._emitEvent(TaskEvents.ERROR, err);\n\t\t\t\tthis.pause();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _startNextPart() {\n\t\tif (this.queued.length > 0 && this.state !== AWSS3UploadTaskState.PAUSED) {\n\t\t\tconst cancelTokenSource = axios.CancelToken.source();\n\t\t\tconst nextPart = this.queued.shift();\n\t\t\tthis.inProgress.push({\n\t\t\t\tuploadPartInput: nextPart,\n\t\t\t\ts3Request: this._makeUploadPartRequest(nextPart, cancelTokenSource),\n\t\t\t\tcancel: cancelTokenSource.cancel,\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Verify on S3 side that the file size matches the one on the client side.\n\t *\n\t * @async\n\t * @throws throws an error if the file size does not match between local copy of the file and the file on s3.\n\t */\n\tprivate async _verifyFileSize() {\n\t\tconst obj = await this._listSingleFile({\n\t\t\tkey: this.params.Key,\n\t\t\tbucket: this.params.Bucket,\n\t\t});\n\t\tconst valid = Boolean(obj && obj.Size === this.file.size);\n\t\tif (!valid) {\n\t\t\tthrow new Error(\n\t\t\t\t'File size does not match between local file and file on s3'\n\t\t\t);\n\t\t}\n\t\treturn valid;\n\t}\n\n\tprivate _isDone() {\n\t\treturn (\n\t\t\t!this.queued.length &&\n\t\t\t!this.inProgress.length &&\n\t\t\tthis.bytesUploaded === this.totalBytes\n\t\t);\n\t}\n\n\tprivate _createParts() {\n\t\tconst size = this.file.size;\n\t\tconst parts: UploadPartCommandInput[] = [];\n\t\tfor (let bodyStart = 0; bodyStart < size; ) {\n\t\t\tconst bodyEnd = Math.min(bodyStart + this.partSize, size);\n\t\t\tparts.push({\n\t\t\t\tBody: this.file.slice(bodyStart, bodyEnd),\n\t\t\t\tKey: this.params.Key,\n\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\tPartNumber: parts.length + 1,\n\t\t\t\tUploadId: this.uploadId,\n\t\t\t});\n\t\t\tbodyStart += this.partSize;\n\t\t}\n\t\treturn parts;\n\t}\n\n\tprivate _initCachedUploadParts(cachedParts: Part[]) {\n\t\tthis.bytesUploaded += cachedParts.reduce((acc, part) => acc + part.Size, 0);\n\t\t// Find the set of part numbers that have already been uploaded\n\t\tconst uploadedPartNumSet = new Set(\n\t\t\tcachedParts.map(part => part.PartNumber)\n\t\t);\n\t\tthis.queued = this.queued.filter(\n\t\t\tpart => !uploadedPartNumSet.has(part.PartNumber)\n\t\t);\n\t\tthis.completedParts = cachedParts.map(part => ({\n\t\t\tPartNumber: part.PartNumber,\n\t\t\tETag: part.ETag,\n\t\t}));\n\t\tthis._emitEvent<UploadTaskProgressEvent>(TaskEvents.UPLOAD_PROGRESS, {\n\t\t\tloaded: this.bytesUploaded,\n\t\t\ttotal: this.totalBytes,\n\t\t});\n\t}\n\n\tprivate async _initMultipartUpload() {\n\t\tconst res = await this.s3client.send(\n\t\t\tnew CreateMultipartUploadCommand(this.params)\n\t\t);\n\t\tthis._cache({\n\t\t\tuploadId: res.UploadId,\n\t\t\tlastTouched: Date.now(),\n\t\t\tbucket: this.params.Bucket,\n\t\t\tkey: this.params.Key,\n\t\t\tfileName: this.file instanceof File ? this.file.name : '',\n\t\t});\n\t\treturn res.UploadId;\n\t}\n\n\tprivate async _initializeUploadTask() {\n\t\tthis.state = AWSS3UploadTaskState.IN_PROGRESS;\n\t\ttry {\n\t\t\tif (await this._isCached()) {\n\t\t\t\tconst { parts, uploadId } = await this._findCachedUploadParts();\n\t\t\t\tthis.uploadId = uploadId;\n\t\t\t\tthis.queued = this._createParts();\n\t\t\t\tthis._initCachedUploadParts(parts);\n\t\t\t\tthis._startUpload();\n\t\t\t} else {\n\t\t\t\tif (!this.uploadId) {\n\t\t\t\t\tconst uploadId = await this._initMultipartUpload();\n\t\t\t\t\tthis.uploadId = uploadId;\n\t\t\t\t\tthis.queued = this._createParts();\n\t\t\t\t\tthis._startUpload();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (!axios.isCancel(err)) {\n\t\t\t\tlogger.error('Error initializing the upload task', err);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic resume(): void {\n\t\tif (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\tlogger.warn('This task has already been cancelled');\n\t\t} else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n\t\t\tlogger.warn('This task has already been completed');\n\t\t} else if (this.state === AWSS3UploadTaskState.IN_PROGRESS) {\n\t\t\tlogger.warn('Upload task already in progress');\n\t\t\t// first time running resume, find any cached parts on s3 or start a new multipart upload request before\n\t\t\t// starting the upload\n\t\t} else if (!this.uploadId) {\n\t\t\tthis._initializeUploadTask();\n\t\t} else {\n\t\t\tthis._startUpload();\n\t\t}\n\t}\n\n\tprivate _startUpload() {\n\t\tthis.state = AWSS3UploadTaskState.IN_PROGRESS;\n\t\tfor (let i = 0; i < this.queueSize; i++) {\n\t\t\tthis._startNextPart();\n\t\t}\n\t}\n\n\tasync _cancel(): Promise<boolean> {\n\t\tif (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\tlogger.warn('This task has already been cancelled');\n\t\t\treturn false;\n\t\t} else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n\t\t\tlogger.warn('This task has already been completed');\n\t\t\treturn false;\n\t\t} else {\n\t\t\tthis.pause();\n\t\t\tthis.queued = [];\n\t\t\tthis.completedParts = [];\n\t\t\tthis.bytesUploaded = 0;\n\t\t\tthis.state = AWSS3UploadTaskState.CANCELLED;\n\t\t\ttry {\n\t\t\t\tawait this.s3client.send(\n\t\t\t\t\tnew AbortMultipartUploadCommand({\n\t\t\t\t\t\tBucket: this.params.Bucket,\n\t\t\t\t\t\tKey: this.params.Key,\n\t\t\t\t\t\tUploadId: this.uploadId,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tawait this._removeFromCache();\n\t\t\t\treturn true;\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error('Error cancelling upload task', err);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * pause this particular upload task\n\t **/\n\tpublic pause(): void {\n\t\tif (this.state === AWSS3UploadTaskState.CANCELLED) {\n\t\t\tlogger.warn('This task has already been cancelled');\n\t\t} else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n\t\t\tlogger.warn('This task has already been completed');\n\t\t} else if (this.state === AWSS3UploadTaskState.PAUSED) {\n\t\t\tlogger.warn('This task is already paused');\n\t\t}\n\t\tthis.state = AWSS3UploadTaskState.PAUSED;\n\t\t// Use axios cancel token to abort the part request immediately\n\t\t// Add the inProgress parts back to pending\n\t\tconst removedInProgressReq = this.inProgress.splice(\n\t\t\t0,\n\t\t\tthis.inProgress.length\n\t\t);\n\t\tremovedInProgressReq.forEach(req => {\n\t\t\treq.cancel(AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE);\n\t\t});\n\t\t// Put all removed in progress parts back into the queue\n\t\tthis.queued.unshift(\n\t\t\t...removedInProgressReq.map(req => req.uploadPartInput)\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}