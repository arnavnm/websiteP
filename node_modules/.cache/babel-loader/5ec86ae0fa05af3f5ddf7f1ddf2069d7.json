{"ast":null,"code":"import _objectSpread from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"children\"];\nimport { composeRefs as e } from \"@radix-ui/react-compose-refs\";\nimport * as t from \"react\";\nimport r from \"@babel/runtime/helpers/esm/extends\";\nexport var Slot = /*#__PURE__*/t.forwardRef(function (e, o) {\n  var a = e.children,\n      s = _objectWithoutProperties(e, _excluded);\n\n  return t.Children.toArray(a).some(l) ? /*#__PURE__*/t.createElement(t.Fragment, null, t.Children.map(a, function (e) {\n    return l(e) ? /*#__PURE__*/t.createElement(n, r({}, s, {\n      ref: o\n    }), e.props.children) : e;\n  })) : /*#__PURE__*/t.createElement(n, r({}, s, {\n    ref: o\n  }), a);\n});\nSlot.displayName = \"Slot\";\nvar n = /*#__PURE__*/t.forwardRef(function (r, n) {\n  var l = r.children,\n      a = _objectWithoutProperties(r, _excluded2);\n  /*#__PURE__*/\n\n\n  return t.isValidElement(l) ? /*#__PURE__*/t.cloneElement(l, _objectSpread(_objectSpread({}, o(a, l.props)), {}, {\n    ref: e(n, l.ref)\n  })) : t.Children.count(l) > 1 ? t.Children.only(null) : null;\n});\nn.displayName = \"SlotClone\";\nexport var Slottable = function Slottable(_ref) {\n  var e = _ref.children;\n  return /*#__PURE__*/t.createElement(t.Fragment, null, e);\n};\n\nfunction l(e) {\n  /*#__PURE__*/\n  return t.isValidElement(e) && e.type === Slottable;\n}\n\nfunction o(e, t) {\n  var r = _objectSpread({}, t);\n\n  var _loop = function _loop(_n) {\n    var l = e[_n],\n        o = t[_n];\n    /^on[A-Z]/.test(_n) ? r[_n] = function () {\n      null == o || o.apply(void 0, arguments), null == l || l.apply(void 0, arguments);\n    } : \"style\" === _n ? r[_n] = _objectSpread(_objectSpread({}, l), o) : \"className\" === _n && (r[_n] = [l, o].filter(Boolean).join(\" \"));\n  };\n\n  for (var _n in t) {\n    _loop(_n);\n  }\n\n  return _objectSpread(_objectSpread({}, e), r);\n}\n\nexport var Root = Slot;","map":{"version":3,"mappings":"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","names":["Slot","React","forwardRef","props","forwardedRef","children","slotProps","Children","toArray","some","isSlottable","_react","map","child","$d34e8c328cb3dd19ab7a2f6eafa6ad$var$SlotClone","_babelRuntimeHelpersEsmExtends","ref","displayName","SlotClone","isValidElement","cloneElement","mergeProps","composeRefs","count","only","Slottable","type","childProps","overrideProps","propName","slotPropValue","childPropValue","test","args","filter","Boolean","join","Root"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@radix-ui/react-slot/dist/packages/react/slot/src/Slot.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children?: React.ReactNode;\n}\n\nconst Slot = React.forwardRef<HTMLElement, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.Children.toArray(children).some(isSlottable)) {\n    return (\n      <>\n        {React.Children.map(children, (child) => {\n          return isSlottable(child) ? (\n            <SlotClone {...slotProps} ref={forwardedRef}>\n              {child.props.children}\n            </SlotClone>\n          ) : (\n            child\n          );\n        })}\n      </>\n    );\n  }\n\n  return (\n    <SlotClone {...slotProps} ref={forwardedRef}>\n      {children}\n    </SlotClone>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotCloneProps {\n  children: React.ReactNode;\n}\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n\n  if (React.isValidElement(children)) {\n    return React.cloneElement(children, {\n      ...mergeProps(slotProps, children.props),\n      ref: composeRefs(forwardedRef, (children as any).ref),\n    });\n  }\n\n  return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return <>{children}</>;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction isSlottable(child: React.ReactNode): child is React.ReactElement {\n  return React.isValidElement(child) && child.type === Slottable;\n}\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n\n    const isHandler = /^on[A-Z]/.test(propName);\n    // if it's a handler, modify the override by composing the base handler\n    if (isHandler) {\n      overrideProps[propName] = (...args: unknown[]) => {\n        childPropValue?.(...args);\n        slotPropValue?.(...args);\n      };\n    }\n    // if it's `style`, we merge them\n    else if (propName === 'style') {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    } else if (propName === 'className') {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\nexport type { SlotProps };\n"]},"metadata":{},"sourceType":"module"}