{"ast":null,"code":"import { __read } from \"tslib\";\n/**\n * Validate whether a string is an ARN.\n */\n\nexport var validate = function validate(str) {\n  return typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6;\n};\n/**\n * Parse an ARN string into structure with partition, service, region, accountId and resource values\n */\n\nexport var parse = function parse(arn) {\n  var segments = arn.split(\":\");\n  if (segments.length < 6 || segments[0] !== \"arn\") throw new Error(\"Malformed ARN\");\n\n  var _a = __read(segments),\n      //Skip \"arn\" literal\n  partition = _a[1],\n      service = _a[2],\n      region = _a[3],\n      accountId = _a[4],\n      resource = _a.slice(5);\n\n  return {\n    partition: partition,\n    service: service,\n    region: region,\n    accountId: accountId,\n    resource: resource.join(\":\")\n  };\n};\n/**\n * Build an ARN with service, partition, region, accountId, and resources strings\n */\n\nexport var build = function build(arnObject) {\n  var _a = arnObject.partition,\n      partition = _a === void 0 ? \"aws\" : _a,\n      service = arnObject.service,\n      region = arnObject.region,\n      accountId = arnObject.accountId,\n      resource = arnObject.resource;\n\n  if ([service, region, accountId, resource].some(function (segment) {\n    return typeof segment !== \"string\";\n  })) {\n    throw new Error(\"Input ARN object is invalid\");\n  }\n\n  return \"arn:\" + partition + \":\" + service + \":\" + region + \":\" + accountId + \":\" + resource;\n};","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA;AACA;AACA;;AACA,OAAO,IAAIC,QAAQ,GAAG,SAAXA,QAAW,CAAUC,GAAV,EAAe;EACjC,OAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACC,OAAJ,CAAY,MAAZ,MAAwB,CAAnD,IAAwDD,GAAG,CAACE,KAAJ,CAAU,GAAV,EAAeC,MAAf,IAAyB,CAAxF;AACH,CAFM;AAGP;AACA;AACA;;AACA,OAAO,IAAIC,KAAK,GAAG,SAARA,KAAQ,CAAUC,GAAV,EAAe;EAC9B,IAAIC,QAAQ,GAAGD,GAAG,CAACH,KAAJ,CAAU,GAAV,CAAf;EACA,IAAII,QAAQ,CAACH,MAAT,GAAkB,CAAlB,IAAuBG,QAAQ,CAAC,CAAD,CAAR,KAAgB,KAA3C,EACI,MAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;;EACJ,IAAIC,EAAE,GAAGV,MAAM,CAACQ,QAAD,CAAf;EAAA,IACA;EACAG,SAAS,GAAGD,EAAE,CAAC,CAAD,CAFd;EAAA,IAEmBE,OAAO,GAAGF,EAAE,CAAC,CAAD,CAF/B;EAAA,IAEoCG,MAAM,GAAGH,EAAE,CAAC,CAAD,CAF/C;EAAA,IAEoDI,SAAS,GAAGJ,EAAE,CAAC,CAAD,CAFlE;EAAA,IAEuEK,QAAQ,GAAGL,EAAE,CAACM,KAAH,CAAS,CAAT,CAFlF;;EAGA,OAAO;IACHL,SAAS,EAAEA,SADR;IAEHC,OAAO,EAAEA,OAFN;IAGHC,MAAM,EAAEA,MAHL;IAIHC,SAAS,EAAEA,SAJR;IAKHC,QAAQ,EAAEA,QAAQ,CAACE,IAAT,CAAc,GAAd;EALP,CAAP;AAOH,CAdM;AAeP;AACA;AACA;;AACA,OAAO,IAAIC,KAAK,GAAG,SAARA,KAAQ,CAAUC,SAAV,EAAqB;EACpC,IAAIT,EAAE,GAAGS,SAAS,CAACR,SAAnB;EAAA,IAA8BA,SAAS,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAAlE;EAAA,IAAsEE,OAAO,GAAGO,SAAS,CAACP,OAA1F;EAAA,IAAmGC,MAAM,GAAGM,SAAS,CAACN,MAAtH;EAAA,IAA8HC,SAAS,GAAGK,SAAS,CAACL,SAApJ;EAAA,IAA+JC,QAAQ,GAAGI,SAAS,CAACJ,QAApL;;EACA,IAAI,CAACH,OAAD,EAAUC,MAAV,EAAkBC,SAAlB,EAA6BC,QAA7B,EAAuCK,IAAvC,CAA4C,UAAUC,OAAV,EAAmB;IAAE,OAAO,OAAOA,OAAP,KAAmB,QAA1B;EAAqC,CAAtG,CAAJ,EAA6G;IACzG,MAAM,IAAIZ,KAAJ,CAAU,6BAAV,CAAN;EACH;;EACD,OAAO,SAASE,SAAT,GAAqB,GAArB,GAA2BC,OAA3B,GAAqC,GAArC,GAA2CC,MAA3C,GAAoD,GAApD,GAA0DC,SAA1D,GAAsE,GAAtE,GAA4EC,QAAnF;AACH,CANM","names":["validate","str","indexOf","split","length","parse","arn","segments","Error","partition","service","region","accountId","resource","join","build","arnObject","_a","some","segment"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/util-arn-parser/src/index.ts"],"sourcesContent":["export interface ARN {\n  partition: string;\n  service: string;\n  region: string;\n  accountId: string;\n  resource: string;\n}\n/**\n * Validate whether a string is an ARN.\n */\nexport const validate = (str: any): boolean =>\n  typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6;\n\n/**\n * Parse an ARN string into structure with partition, service, region, accountId and resource values\n */\nexport const parse = (arn: string): ARN => {\n  const segments = arn.split(\":\");\n  if (segments.length < 6 || segments[0] !== \"arn\") throw new Error(\"Malformed ARN\");\n  const [\n    ,\n    //Skip \"arn\" literal\n    partition,\n    service,\n    region,\n    accountId,\n    ...resource\n  ] = segments;\n\n  return {\n    partition,\n    service,\n    region,\n    accountId,\n    resource: resource.join(\":\"),\n  };\n};\n\ntype buildOptions = Omit<ARN, \"partition\"> & { partition?: string };\n\n/**\n * Build an ARN with service, partition, region, accountId, and resources strings\n */\nexport const build = (arnObject: buildOptions): string => {\n  const { partition = \"aws\", service, region, accountId, resource } = arnObject;\n  if ([service, region, accountId, resource].some((segment) => typeof segment !== \"string\")) {\n    throw new Error(\"Input ARN object is invalid\");\n  }\n  return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;\n};\n"]},"metadata":{},"sourceType":"module"}