{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { DescribeStreamCommand } from \"../commands/DescribeStreamCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nvar checkState = function (client, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var result_1, returnComparator, exception_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , client.send(new DescribeStreamCommand(input))];\n\n        case 1:\n          result_1 = _a.sent();\n\n          try {\n            returnComparator = function () {\n              return result_1.StreamDescription.StreamStatus;\n            };\n\n            if (returnComparator() === \"ACTIVE\") {\n              return [2\n              /*return*/\n              , {\n                state: WaiterState.SUCCESS\n              }];\n            }\n          } catch (e) {}\n\n          return [3\n          /*break*/\n          , 3];\n\n        case 2:\n          exception_1 = _a.sent();\n          return [3\n          /*break*/\n          , 3];\n\n        case 3:\n          return [2\n          /*return*/\n          , {\n            state: WaiterState.RETRY\n          }];\n      }\n    });\n  });\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeStreamCommand for polling.\n */\n\n\nexport var waitForStreamExists = function (params, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n      serviceDefaults = {\n        minDelay: 10,\n        maxDelay: 120\n      };\n      return [2\n      /*return*/\n      , createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n  });\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,qBAAT,QAAsC,mCAAtC;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,sBAA1C;;AACA,IAAIC,UAAU,GAAG,UAAUC,MAAV,EAAkBC,KAAlB,EAAyB;EAAE,OAAOP,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAC7F,IAAIQ,QAAJ,EAAcC,gBAAd,EAAgCC,WAAhC;IACA,OAAOT,WAAW,CAAC,IAAD,EAAO,UAAUU,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACC,KAAX;QACI,KAAK,CAAL;UACID,EAAE,CAACE,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;UACA,OAAO,CAAC;UAAE;UAAH,EAAcR,MAAM,CAACS,IAAP,CAAY,IAAIb,qBAAJ,CAA0BK,KAA1B,CAAZ,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIC,QAAQ,GAAGG,EAAE,CAACK,IAAH,EAAX;;UACA,IAAI;YACAP,gBAAgB,GAAG,YAAY;cAC3B,OAAOD,QAAQ,CAACS,iBAAT,CAA2BC,YAAlC;YACH,CAFD;;YAGA,IAAIT,gBAAgB,OAAO,QAA3B,EAAqC;cACjC,OAAO,CAAC;cAAE;cAAH,EAAe;gBAAEU,KAAK,EAAEhB,WAAW,CAACiB;cAArB,CAAf,CAAP;YACH;UACJ,CAPD,CAQA,OAAOC,CAAP,EAAU,CAAG;;UACb,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIX,WAAW,GAAGC,EAAE,CAACK,IAAH,EAAd;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UAAQ,OAAO,CAAC;UAAE;UAAH,EAAe;YAAEG,KAAK,EAAEhB,WAAW,CAACmB;UAArB,CAAf,CAAP;MAnBZ;IAqBH,CAtBiB,CAAlB;EAuBH,CAzB2D,CAAhB;AAyBvC,CAzBL;AA0BA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIC,mBAAmB,GAAG,UAAUC,MAAV,EAAkBjB,KAAlB,EAAyB;EAAE,OAAOP,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAC7G,IAAIyB,eAAJ;IACA,OAAOxB,WAAW,CAAC,IAAD,EAAO,UAAUU,EAAV,EAAc;MACnCc,eAAe,GAAG;QAAEC,QAAQ,EAAE,EAAZ;QAAgBC,QAAQ,EAAE;MAA1B,CAAlB;MACA,OAAO,CAAC;MAAE;MAAH,EAAevB,YAAY,CAACL,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK0B,eAAL,CAAT,EAAgCD,MAAhC,CAAT,EAAkDjB,KAAlD,EAAyDF,UAAzD,CAA3B,CAAP;IACH,CAHiB,CAAlB;EAIH,CAN2E,CAAhB;AAMvD,CANE","names":["DescribeStreamCommand","WaiterState","createWaiter","checkState","client","input","send","result_1","_a","returnComparator","StreamDescription","StreamStatus","state","SUCCESS","e","RETRY","waitForStreamExists","params","serviceDefaults","minDelay","maxDelay"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/client-kinesis/waiters/waitForStreamExists.ts"],"sourcesContent":["import { KinesisClient } from \"../KinesisClient\";\nimport { DescribeStreamCommand, DescribeStreamCommandInput } from \"../commands/DescribeStreamCommand\";\nimport { WaiterConfiguration, WaiterResult, WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nconst checkState = async (client: KinesisClient, input: DescribeStreamCommandInput): Promise<WaiterResult> => {\n  try {\n    let result: any = await client.send(new DescribeStreamCommand(input));\n    try {\n      let returnComparator = () => {\n        return result.StreamDescription.StreamStatus;\n      };\n      if (returnComparator() === \"ACTIVE\") {\n        return { state: WaiterState.SUCCESS };\n      }\n    } catch (e) {}\n  } catch (exception) {}\n  return { state: WaiterState.RETRY };\n};\n/**\n *\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeStreamCommand for polling.\n */\nexport const waitForStreamExists = async (\n  params: WaiterConfiguration<KinesisClient>,\n  input: DescribeStreamCommandInput\n): Promise<WaiterResult> => {\n  const serviceDefaults = { minDelay: 10, maxDelay: 120 };\n  return createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\n"]},"metadata":{},"sourceType":"module"}