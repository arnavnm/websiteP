{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread, __values } from \"tslib\";\nimport { DescribeProjectVersionsCommand } from \"../commands/DescribeProjectVersionsCommand\";\nimport { WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nvar checkState = function (client, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var result_1, returnComparator, allStringEq_5, _a, _b, element_4, returnComparator, _c, _d, anyStringEq_4, exception_1;\n\n    var e_1, _e, e_2, _f;\n\n    return __generator(this, function (_g) {\n      switch (_g.label) {\n        case 0:\n          _g.trys.push([0, 2,, 3]);\n\n          return [4\n          /*yield*/\n          , client.send(new DescribeProjectVersionsCommand(input))];\n\n        case 1:\n          result_1 = _g.sent();\n\n          try {\n            returnComparator = function () {\n              var flat_1 = [].concat.apply([], __spread(result_1.ProjectVersionDescriptions));\n              var projection_3 = flat_1.map(function (element_2) {\n                return element_2.Status;\n              });\n              return projection_3;\n            };\n\n            allStringEq_5 = returnComparator().length > 0;\n\n            try {\n              for (_a = __values(returnComparator()), _b = _a.next(); !_b.done; _b = _a.next()) {\n                element_4 = _b.value;\n                allStringEq_5 = allStringEq_5 && element_4 == \"RUNNING\";\n              }\n            } catch (e_1_1) {\n              e_1 = {\n                error: e_1_1\n              };\n            } finally {\n              try {\n                if (_b && !_b.done && (_e = _a.return)) _e.call(_a);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n            }\n\n            if (allStringEq_5) {\n              return [2\n              /*return*/\n              , {\n                state: WaiterState.SUCCESS\n              }];\n            }\n          } catch (e) {}\n\n          try {\n            returnComparator = function () {\n              var flat_1 = [].concat.apply([], __spread(result_1.ProjectVersionDescriptions));\n              var projection_3 = flat_1.map(function (element_2) {\n                return element_2.Status;\n              });\n              return projection_3;\n            };\n\n            try {\n              for (_c = __values(returnComparator()), _d = _c.next(); !_d.done; _d = _c.next()) {\n                anyStringEq_4 = _d.value;\n\n                if (anyStringEq_4 == \"FAILED\") {\n                  return [2\n                  /*return*/\n                  , {\n                    state: WaiterState.FAILURE\n                  }];\n                }\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (_d && !_d.done && (_f = _c.return)) _f.call(_c);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n          } catch (e) {}\n\n          return [3\n          /*break*/\n          , 3];\n\n        case 2:\n          exception_1 = _g.sent();\n          return [3\n          /*break*/\n          , 3];\n\n        case 3:\n          return [2\n          /*return*/\n          , {\n            state: WaiterState.RETRY\n          }];\n      }\n    });\n  });\n};\n/**\n * Wait until the ProjectVersion is running.\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeProjectVersionsCommand for polling.\n */\n\n\nexport var waitForProjectVersionRunning = function (params, input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var serviceDefaults;\n    return __generator(this, function (_a) {\n      serviceDefaults = {\n        minDelay: 30,\n        maxDelay: 120\n      };\n      return [2\n      /*return*/\n      , createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];\n    });\n  });\n};","map":{"version":3,"mappings":"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","names":["DescribeProjectVersionsCommand","WaiterState","createWaiter","checkState","client","input","send","result_1","_g","returnComparator","flat_1","concat","apply","__spread","ProjectVersionDescriptions","projection_3","map","element_2","Status","allStringEq_5","length","_a","_b","element_4","state","SUCCESS","e","_c","_d","anyStringEq_4","FAILURE","RETRY","waitForProjectVersionRunning","params","serviceDefaults","minDelay","maxDelay"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/client-rekognition/waiters/waitForProjectVersionRunning.ts"],"sourcesContent":["import { RekognitionClient } from \"../RekognitionClient\";\nimport {\n  DescribeProjectVersionsCommand,\n  DescribeProjectVersionsCommandInput,\n} from \"../commands/DescribeProjectVersionsCommand\";\nimport { WaiterConfiguration, WaiterResult, WaiterState, createWaiter } from \"@aws-sdk/util-waiter\";\n\nconst checkState = async (\n  client: RekognitionClient,\n  input: DescribeProjectVersionsCommandInput\n): Promise<WaiterResult> => {\n  try {\n    let result: any = await client.send(new DescribeProjectVersionsCommand(input));\n    try {\n      let returnComparator = () => {\n        let flat_1: any[] = [].concat(...result.ProjectVersionDescriptions);\n        let projection_3 = flat_1.map((element_2: any) => {\n          return element_2.Status;\n        });\n        return projection_3;\n      };\n      let allStringEq_5 = returnComparator().length > 0;\n      for (let element_4 of returnComparator()) {\n        allStringEq_5 = allStringEq_5 && element_4 == \"RUNNING\";\n      }\n      if (allStringEq_5) {\n        return { state: WaiterState.SUCCESS };\n      }\n    } catch (e) {}\n    try {\n      let returnComparator = () => {\n        let flat_1: any[] = [].concat(...result.ProjectVersionDescriptions);\n        let projection_3 = flat_1.map((element_2: any) => {\n          return element_2.Status;\n        });\n        return projection_3;\n      };\n      for (let anyStringEq_4 of returnComparator()) {\n        if (anyStringEq_4 == \"FAILED\") {\n          return { state: WaiterState.FAILURE };\n        }\n      }\n    } catch (e) {}\n  } catch (exception) {}\n  return { state: WaiterState.RETRY };\n};\n/**\n * Wait until the ProjectVersion is running.\n *  @param params : Waiter configuration options.\n *  @param input : the input to DescribeProjectVersionsCommand for polling.\n */\nexport const waitForProjectVersionRunning = async (\n  params: WaiterConfiguration<RekognitionClient>,\n  input: DescribeProjectVersionsCommandInput\n): Promise<WaiterResult> => {\n  const serviceDefaults = { minDelay: 30, maxDelay: 120 };\n  return createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\n"]},"metadata":{},"sourceType":"module"}