{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar constants_1 = require(\"./constants\");\n\nvar RawSha256_1 = require(\"./RawSha256\");\n\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\n\nvar Sha256 =\n/** @class */\nfunction () {\n  function Sha256(secret) {\n    this.hash = new RawSha256_1.RawSha256();\n\n    if (secret) {\n      this.outer = new RawSha256_1.RawSha256();\n      var inner = bufferFromSecret(secret);\n      var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n      outer.set(inner);\n\n      for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n\n      this.hash.update(inner);\n      this.outer.update(outer); // overwrite the copied key in memory\n\n      for (var i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n\n  Sha256.prototype.update = function (toHash) {\n    if (isEmptyData(toHash) || this.error) {\n      return;\n    }\n\n    try {\n      this.hash.update(convertToBuffer(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  };\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n\n\n  Sha256.prototype.digestSync = function () {\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n\n      return this.outer.digest();\n    }\n\n    return this.hash.digest();\n  };\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n\n\n  Sha256.prototype.digest = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.digestSync()];\n      });\n    });\n  };\n\n  return Sha256;\n}();\n\nexports.Sha256 = Sha256;\n\nfunction bufferFromSecret(secret) {\n  var input = convertToBuffer(secret);\n\n  if (input.byteLength > constants_1.BLOCK_SIZE) {\n    var bufferHash = new RawSha256_1.RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n\n  var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}\n\nfunction isEmptyData(data) {\n  if (typeof data === \"string\") {\n    return data.length === 0;\n  }\n\n  return data.byteLength === 0;\n}\n\nfunction convertToBuffer(data) {\n  if (typeof data === \"string\") {\n    return util_utf8_browser_1.fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n\n  return new Uint8Array(data);\n}","map":{"version":3,"mappings":"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","names":["secret","RawSha256_1","outer","inner","bufferFromSecret","Uint8Array","constants_1","set","i","hash","update","byteLength","Sha256","toHash","isEmptyData","error","convertToBuffer","e","finished","digest","digestSync","exports","input","bufferHash","buffer","data","length","util_utf8_browser_1","ArrayBuffer","isView","byteOffset","BYTES_PER_ELEMENT"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-crypto/sha256-js/src/jsSha256.ts"],"sourcesContent":["import { BLOCK_SIZE } from \"./constants\";\nimport { RawSha256 } from \"./RawSha256\";\nimport { Hash, SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8-browser\";\n\nexport class Sha256 implements Hash {\n  private readonly hash = new RawSha256();\n  private readonly outer?: RawSha256;\n  private error: any;\n\n  constructor(secret?: SourceData) {\n    if (secret) {\n      this.outer = new RawSha256();\n      const inner = bufferFromSecret(secret);\n      const outer = new Uint8Array(BLOCK_SIZE);\n      outer.set(inner);\n\n      for (let i = 0; i < BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n\n      this.hash.update(inner);\n      this.outer.update(outer);\n\n      // overwrite the copied key in memory\n      for (let i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash) || this.error) {\n      return;\n    }\n\n    try {\n      this.hash.update(convertToBuffer(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  }\n\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n  digestSync(): Uint8Array {\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n\n      return this.outer.digest();\n    }\n\n    return this.hash.digest();\n  }\n\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n  async digest(): Promise<Uint8Array> {\n    return this.digestSync();\n  }\n}\n\nfunction bufferFromSecret(secret: SourceData): Uint8Array {\n  let input = convertToBuffer(secret);\n\n  if (input.byteLength > BLOCK_SIZE) {\n    const bufferHash = new RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n\n  const buffer = new Uint8Array(BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}\n\nfunction isEmptyData(data: SourceData): boolean {\n  if (typeof data === \"string\") {\n    return data.length === 0;\n  }\n\n  return data.byteLength === 0;\n}\n\nfunction convertToBuffer(data: SourceData): Uint8Array {\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n"]},"metadata":{},"sourceType":"script"}