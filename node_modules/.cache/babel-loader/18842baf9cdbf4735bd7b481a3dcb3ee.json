{"ast":null,"code":"import { Crc32 } from \"@aws-crypto/crc32\";\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\n/**\n * A marshaller that can convert binary-packed event stream messages into\n * JavaScript objects and back again into their binary format.\n */\n\nvar EventStreamMarshaller =\n/** @class */\nfunction () {\n  function EventStreamMarshaller(toUtf8, fromUtf8) {\n    this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n  }\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message.\n   */\n\n\n  EventStreamMarshaller.prototype.marshall = function (_a) {\n    var rawHeaders = _a.headers,\n        body = _a.body;\n    var headers = this.headerMarshaller.format(rawHeaders);\n    var length = headers.byteLength + body.byteLength + 16;\n    var out = new Uint8Array(length);\n    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    var checksum = new Crc32(); // Format message\n\n    view.setUint32(0, length, false);\n    view.setUint32(4, headers.byteLength, false);\n    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n    out.set(headers, 12);\n    out.set(body, headers.byteLength + 12); // Write trailing message checksum\n\n    view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n    return out;\n  };\n  /**\n   * Convert a binary event stream message into a JavaScript object with an\n   * opaque, binary body and tagged, parsed headers.\n   */\n\n\n  EventStreamMarshaller.prototype.unmarshall = function (message) {\n    var _a = splitMessage(message),\n        headers = _a.headers,\n        body = _a.body;\n\n    return {\n      headers: this.headerMarshaller.parse(headers),\n      body: body\n    };\n  };\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message header.\n   */\n\n\n  EventStreamMarshaller.prototype.formatHeaders = function (rawHeaders) {\n    return this.headerMarshaller.format(rawHeaders);\n  };\n\n  return EventStreamMarshaller;\n}();\n\nexport { EventStreamMarshaller };","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,mBAAtB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA;AACA;AACA;AACA;;AACA,IAAIC,qBAAqB;AAAG;AAAe,YAAY;EACnD,SAASA,qBAAT,CAA+BC,MAA/B,EAAuCC,QAAvC,EAAiD;IAC7C,KAAKC,gBAAL,GAAwB,IAAIL,gBAAJ,CAAqBG,MAArB,EAA6BC,QAA7B,CAAxB;EACH;EACD;AACJ;AACA;AACA;;;EACIF,qBAAqB,CAACI,SAAtB,CAAgCC,QAAhC,GAA2C,UAAUC,EAAV,EAAc;IACrD,IAAIC,UAAU,GAAGD,EAAE,CAACE,OAApB;IAAA,IAA6BC,IAAI,GAAGH,EAAE,CAACG,IAAvC;IACA,IAAID,OAAO,GAAG,KAAKL,gBAAL,CAAsBO,MAAtB,CAA6BH,UAA7B,CAAd;IACA,IAAII,MAAM,GAAGH,OAAO,CAACI,UAAR,GAAqBH,IAAI,CAACG,UAA1B,GAAuC,EAApD;IACA,IAAIC,GAAG,GAAG,IAAIC,UAAJ,CAAeH,MAAf,CAAV;IACA,IAAII,IAAI,GAAG,IAAIC,QAAJ,CAAaH,GAAG,CAACI,MAAjB,EAAyBJ,GAAG,CAACK,UAA7B,EAAyCL,GAAG,CAACD,UAA7C,CAAX;IACA,IAAIO,QAAQ,GAAG,IAAItB,KAAJ,EAAf,CANqD,CAOrD;;IACAkB,IAAI,CAACK,SAAL,CAAe,CAAf,EAAkBT,MAAlB,EAA0B,KAA1B;IACAI,IAAI,CAACK,SAAL,CAAe,CAAf,EAAkBZ,OAAO,CAACI,UAA1B,EAAsC,KAAtC;IACAG,IAAI,CAACK,SAAL,CAAe,CAAf,EAAkBD,QAAQ,CAACE,MAAT,CAAgBR,GAAG,CAACS,QAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAhB,EAAoCC,MAApC,EAAlB,EAAgE,KAAhE;IACAV,GAAG,CAACW,GAAJ,CAAQhB,OAAR,EAAiB,EAAjB;IACAK,GAAG,CAACW,GAAJ,CAAQf,IAAR,EAAcD,OAAO,CAACI,UAAR,GAAqB,EAAnC,EAZqD,CAarD;;IACAG,IAAI,CAACK,SAAL,CAAeT,MAAM,GAAG,CAAxB,EAA2BQ,QAAQ,CAACE,MAAT,CAAgBR,GAAG,CAACS,QAAJ,CAAa,CAAb,EAAgBX,MAAM,GAAG,CAAzB,CAAhB,EAA6CY,MAA7C,EAA3B,EAAkF,KAAlF;IACA,OAAOV,GAAP;EACH,CAhBD;EAiBA;AACJ;AACA;AACA;;;EACIb,qBAAqB,CAACI,SAAtB,CAAgCqB,UAAhC,GAA6C,UAAUC,OAAV,EAAmB;IAC5D,IAAIpB,EAAE,GAAGP,YAAY,CAAC2B,OAAD,CAArB;IAAA,IAAgClB,OAAO,GAAGF,EAAE,CAACE,OAA7C;IAAA,IAAsDC,IAAI,GAAGH,EAAE,CAACG,IAAhE;;IACA,OAAO;MAAED,OAAO,EAAE,KAAKL,gBAAL,CAAsBwB,KAAtB,CAA4BnB,OAA5B,CAAX;MAAiDC,IAAI,EAAEA;IAAvD,CAAP;EACH,CAHD;EAIA;AACJ;AACA;AACA;;;EACIT,qBAAqB,CAACI,SAAtB,CAAgCwB,aAAhC,GAAgD,UAAUrB,UAAV,EAAsB;IAClE,OAAO,KAAKJ,gBAAL,CAAsBO,MAAtB,CAA6BH,UAA7B,CAAP;EACH,CAFD;;EAGA,OAAOP,qBAAP;AACH,CAzC0C,EAA3C;;AA0CA,SAASA,qBAAT","names":["Crc32","HeaderMarshaller","splitMessage","toUtf8","fromUtf8","headerMarshaller","EventStreamMarshaller","_a","rawHeaders","body","headers","format","length","byteLength","out","Uint8Array","view","DataView","buffer","byteOffset","checksum","setUint32","update","subarray","digest","set","message","parse"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/eventstream-marshaller/src/EventStreamMarshaller.ts"],"sourcesContent":["import { Crc32 } from \"@aws-crypto/crc32\";\nimport { Message, MessageHeaders } from \"@aws-sdk/types\";\nimport { Decoder, Encoder } from \"@aws-sdk/types\";\n\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\n\n/**\n * A marshaller that can convert binary-packed event stream messages into\n * JavaScript objects and back again into their binary format.\n */\nexport class EventStreamMarshaller {\n  private readonly headerMarshaller: HeaderMarshaller;\n\n  constructor(toUtf8: Encoder, fromUtf8: Decoder) {\n    this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n  }\n\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message.\n   */\n  marshall({ headers: rawHeaders, body }: Message): Uint8Array {\n    const headers = this.headerMarshaller.format(rawHeaders);\n    const length = headers.byteLength + body.byteLength + 16;\n\n    const out = new Uint8Array(length);\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    const checksum = new Crc32();\n\n    // Format message\n    view.setUint32(0, length, false);\n    view.setUint32(4, headers.byteLength, false);\n    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n    out.set(headers, 12);\n    out.set(body, headers.byteLength + 12);\n\n    // Write trailing message checksum\n    view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n\n    return out;\n  }\n\n  /**\n   * Convert a binary event stream message into a JavaScript object with an\n   * opaque, binary body and tagged, parsed headers.\n   */\n  unmarshall(message: ArrayBufferView): Message {\n    const { headers, body } = splitMessage(message);\n\n    return { headers: this.headerMarshaller.parse(headers), body };\n  }\n\n  /**\n   * Convert a structured JavaScript object with tagged headers into a binary\n   * event stream message header.\n   */\n  formatHeaders(rawHeaders: MessageHeaders): Uint8Array {\n    return this.headerMarshaller.format(rawHeaders);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}