{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport { TranslateClient, TranslateTextCommand } from '@aws-sdk/client-translate';\nimport { PollyClient, SynthesizeSpeechCommand } from '@aws-sdk/client-polly';\nimport { isBytesSource } from '../types';\nimport { Credentials, ConsoleLogger as Logger, Signer, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { EventStreamMarshaller } from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\nvar logger = new Logger('AmazonAIConvertPredictionsProvider');\nvar eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\nvar LANGUAGES_CODE_IN_8KHZ = ['fr-FR', 'en-AU', 'en-GB', 'fr-CA'];\n\nvar AmazonAIConvertPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AmazonAIConvertPredictionsProvider, _super);\n\n  function AmazonAIConvertPredictionsProvider() {\n    var _this = _super.call(this) || this;\n\n    _this.inputSampleRate = 44100;\n    return _this;\n  }\n\n  AmazonAIConvertPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIConvertPredictionsProvider';\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.translateText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, _c, _d, _e, sourceLanguage, _f, targetLanguage, _g, region, credentials, sourceLanguageCode, targetLanguageCode, translateTextCommand, data, err_1;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            logger.debug('Starting translation');\n            _a = this._config.translateText, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = _c === void 0 ? {} : _c, _e = _d.sourceLanguage, sourceLanguage = _e === void 0 ? '' : _e, _f = _d.targetLanguage, targetLanguage = _f === void 0 ? '' : _f, _g = _b.region, region = _g === void 0 ? '' : _g;\n\n            if (!region) {\n              return [2\n              /*return*/\n              , Promise.reject('region not configured for transcription')];\n            }\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _h.sent();\n\n            if (!credentials) {\n              return [2\n              /*return*/\n              , Promise.reject('No credentials')];\n            }\n\n            sourceLanguageCode = input.translateText.source.language || sourceLanguage;\n            targetLanguageCode = input.translateText.targetLanguage || targetLanguage;\n\n            if (!sourceLanguageCode || !targetLanguageCode) {\n              return [2\n              /*return*/\n              , Promise.reject('Please provide both source and target language')];\n            }\n\n            this.translateClient = new TranslateClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            translateTextCommand = new TranslateTextCommand({\n              SourceLanguageCode: sourceLanguageCode,\n              TargetLanguageCode: targetLanguageCode,\n              Text: input.translateText.source.text\n            });\n            _h.label = 2;\n\n          case 2:\n            _h.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this.translateClient.send(translateTextCommand)];\n\n          case 3:\n            data = _h.sent();\n            return [2\n            /*return*/\n            , {\n              text: data.TranslatedText,\n              language: data.TargetLanguageCode\n            }];\n\n          case 4:\n            err_1 = _h.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertTextToSpeech = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, _d, VoiceId, _e, region, voiceId, synthesizeSpeechCommand, data, response, arrayBuffer, blob, url, err_2;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _f.sent();\n\n            if (!credentials) {\n              return [2\n              /*return*/\n              , Promise.reject('No credentials')];\n            }\n\n            _a = this._config.speechGenerator, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).VoiceId, VoiceId = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n\n            if (!input.textToSpeech.source) {\n              return [2\n              /*return*/\n              , Promise.reject('Source needs to be provided in the input')];\n            }\n\n            voiceId = input.textToSpeech.voiceId || VoiceId;\n\n            if (!region) {\n              return [2\n              /*return*/\n              , Promise.reject('Region was undefined. Did you enable speech generator using amplify CLI?')];\n            }\n\n            if (!voiceId) {\n              return [2\n              /*return*/\n              , Promise.reject('VoiceId was undefined.')];\n            }\n\n            this.pollyClient = new PollyClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            synthesizeSpeechCommand = new SynthesizeSpeechCommand({\n              OutputFormat: 'mp3',\n              Text: input.textToSpeech.source.text,\n              VoiceId: voiceId,\n              TextType: 'text',\n              SampleRate: '24000'\n            });\n            _f.label = 2;\n\n          case 2:\n            _f.trys.push([2, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this.pollyClient.send(synthesizeSpeechCommand)];\n\n          case 3:\n            data = _f.sent();\n            response = new Response(data.AudioStream);\n            return [4\n            /*yield*/\n            , response.arrayBuffer()];\n\n          case 4:\n            arrayBuffer = _f.sent();\n            blob = new Blob([arrayBuffer], {\n              type: data.ContentType\n            });\n            url = URL.createObjectURL(blob);\n            return [2\n            /*return*/\n            , {\n              speech: {\n                url: url\n              },\n              audioStream: arrayBuffer,\n              text: input.textToSpeech.source.text\n            }];\n\n          case 5:\n            err_2 = _f.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_2)];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertSpeechToText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, _d, languageCode, _e, region, _f, source, _g, language, connection, fullText, err_3, err_4;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _h.trys.push([0, 7,, 8]);\n\n            logger.debug('starting transcription..');\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _h.sent();\n\n            if (!credentials) {\n              return [2\n              /*return*/\n              , Promise.reject('No credentials')];\n            }\n\n            _a = this._config.transcription, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).language, languageCode = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n\n            if (!region) {\n              return [2\n              /*return*/\n              , Promise.reject('region not configured for transcription')];\n            }\n\n            if (!languageCode) {\n              return [2\n              /*return*/\n              , Promise.reject('languageCode not configured or provided for transcription')];\n            }\n\n            _f = input.transcription, source = _f.source, _g = _f.language, language = _g === void 0 ? languageCode : _g;\n            if (!isBytesSource(source)) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this.openConnectionWithTranscribe({\n              credentials: credentials,\n              region: region,\n              languageCode: language\n            })];\n\n          case 2:\n            connection = _h.sent();\n            _h.label = 3;\n\n          case 3:\n            _h.trys.push([3, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this.sendDataToTranscribe({\n              connection: connection,\n              raw: source.bytes,\n              languageCode: language\n            })];\n\n          case 4:\n            fullText = _h.sent();\n            return [2\n            /*return*/\n            , {\n              transcription: {\n                fullText: fullText\n              }\n            }];\n\n          case 5:\n            err_3 = _h.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_3)];\n\n          case 6:\n            return [2\n            /*return*/\n            , Promise.reject('Source types other than byte source are not supported.')];\n\n          case 7:\n            err_4 = _h.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_4.name + ': ' + err_4.message)];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe = function (message) {\n    var decodedMessage = '';\n    var transcribeMessage = eventBuilder.unmarshall(Buffer.from(message.data));\n    var transcribeMessageJson = JSON.parse(toUtf8(transcribeMessage.body));\n\n    if (transcribeMessage.headers[':message-type'].value === 'exception') {\n      logger.debug('exception', JSON.stringify(transcribeMessageJson.Message, null, 2));\n      throw new Error(transcribeMessageJson.Message);\n    } else if (transcribeMessage.headers[':message-type'].value === 'event') {\n      if (transcribeMessageJson.Transcript.Results.length > 0) {\n        if (transcribeMessageJson.Transcript.Results[0].Alternatives.length > 0) {\n          if (transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript.length > 0) {\n            if (transcribeMessageJson.Transcript.Results[0].IsPartial === false) {\n              decodedMessage = transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript + '\\n';\n              logger.debug({\n                decodedMessage: decodedMessage\n              });\n            } else {\n              logger.debug({\n                transcript: transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return decodedMessage;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.sendDataToTranscribe = function (_a) {\n    var _this = this;\n\n    var connection = _a.connection,\n        raw = _a.raw,\n        languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      var fullText = '';\n\n      connection.onmessage = function (message) {\n        try {\n          var decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(message);\n\n          if (decodedMessage) {\n            fullText += decodedMessage + ' ';\n          }\n        } catch (err) {\n          logger.debug(err);\n          rej(err.message);\n        }\n      };\n\n      connection.onerror = function (errorEvent) {\n        logger.debug({\n          errorEvent: errorEvent\n        });\n        rej('failed to transcribe, network error');\n      };\n\n      connection.onclose = function (closeEvent) {\n        logger.debug({\n          closeEvent: closeEvent\n        });\n        return res(fullText.trim());\n      };\n\n      logger.debug({\n        raw: raw\n      });\n\n      if (Array.isArray(raw)) {\n        for (var i = 0; i < raw.length - 1023; i += 1024) {\n          var data = raw.slice(i, i + 1024);\n\n          _this.sendEncodedDataToTranscribe(connection, data, languageCode);\n        }\n      } else {\n        // If Buffer\n        _this.sendEncodedDataToTranscribe(connection, raw, languageCode);\n      } // sending end frame\n\n\n      var endFrameEventMessage = _this.getAudioEventMessage(Buffer.from([]));\n\n      var endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n      connection.send(endFrameBinary);\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.sendEncodedDataToTranscribe = function (connection, data, languageCode) {\n    var downsampledBuffer = this.downsampleBuffer({\n      buffer: data,\n      outputSampleRate: LANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? 8000 : 16000\n    });\n    var pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n    var audioEventMessage = this.getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n    var binary = eventBuilder.marshall(audioEventMessage);\n    connection.send(binary);\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.getAudioEventMessage = function (buffer) {\n    var audioEventMessage = {\n      body: buffer,\n      headers: {\n        ':message-type': {\n          type: 'string',\n          value: 'event'\n        },\n        ':event-type': {\n          type: 'string',\n          value: 'AudioEvent'\n        }\n      }\n    };\n    return audioEventMessage;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.pcmEncode = function (input) {\n    var offset = 0;\n    var buffer = new ArrayBuffer(input.length * 2);\n    var view = new DataView(buffer);\n\n    for (var i = 0; i < input.length; i++, offset += 2) {\n      var s = Math.max(-1, Math.min(1, input[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n\n    return buffer;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.downsampleBuffer = function (_a) {\n    var buffer = _a.buffer,\n        _b = _a.outputSampleRate,\n        outputSampleRate = _b === void 0 ? 16000 : _b;\n\n    if (outputSampleRate === this.inputSampleRate) {\n      return buffer;\n    }\n\n    var sampleRateRatio = this.inputSampleRate / outputSampleRate;\n    var newLength = Math.round(buffer.length / sampleRateRatio);\n    var result = new Float32Array(newLength);\n    var offsetResult = 0;\n    var offsetBuffer = 0;\n\n    while (offsetResult < result.length) {\n      var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n      var accum = 0,\n          count = 0;\n\n      for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n        accum += buffer[i];\n        count++;\n      }\n\n      result[offsetResult] = accum / count;\n      offsetResult++;\n      offsetBuffer = nextOffsetBuffer;\n    }\n\n    return result;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.openConnectionWithTranscribe = function (_a) {\n    var _this = this;\n\n    var userCredentials = _a.credentials,\n        region = _a.region,\n        languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var access_key, secret_key, session_token, credentials, signedUrl, connection;\n        return __generator(this, function (_a) {\n          access_key = userCredentials.accessKeyId, secret_key = userCredentials.secretAccessKey, session_token = userCredentials.sessionToken;\n          credentials = {\n            access_key: access_key,\n            secret_key: secret_key,\n            session_token: session_token\n          };\n          signedUrl = this.generateTranscribeUrl({\n            credentials: credentials,\n            region: region,\n            languageCode: languageCode\n          });\n          logger.debug('connecting...');\n          connection = new WebSocket(signedUrl);\n          connection.binaryType = 'arraybuffer';\n\n          connection.onopen = function () {\n            logger.debug('connected');\n            res(connection);\n          };\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.generateTranscribeUrl = function (_a) {\n    var credentials = _a.credentials,\n        region = _a.region,\n        languageCode = _a.languageCode;\n    var url = [\"wss://transcribestreaming.\" + region + \".amazonaws.com:8443\", '/stream-transcription-websocket?', \"media-encoding=pcm&\", \"sample-rate=\" + (LANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? '8000' : '16000') + \"&\", \"language-code=\" + languageCode].join('');\n    var signedUrl = Signer.signUrl(url, credentials, {\n      region: region,\n      service: 'transcribe'\n    }, 300);\n    return signedUrl;\n  };\n\n  return AmazonAIConvertPredictionsProvider;\n}(AbstractConvertPredictionsProvider);\n\nexport { AmazonAIConvertPredictionsProvider };\n/**\n * @deprecated use named import\n */\n\nexport default AmazonAIConvertPredictionsProvider;","map":{"version":3,"mappings":"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","names":["AbstractConvertPredictionsProvider","TranslateClient","TranslateTextCommand","PollyClient","SynthesizeSpeechCommand","isBytesSource","Credentials","ConsoleLogger","Logger","Signer","getAmplifyUserAgent","EventStreamMarshaller","fromUtf8","toUtf8","logger","eventBuilder","LANGUAGES_CODE_IN_8KHZ","__extends","_super","_this","AmazonAIConvertPredictionsProvider","input","debug","_a","_config","translateText","_c","_d","_e","sourceLanguage","_f","targetLanguage","_g","region","Promise","reject","get","credentials","_h","sourceLanguageCode","source","language","targetLanguageCode","translateClient","customUserAgent","translateTextCommand","SourceLanguageCode","TargetLanguageCode","Text","text","send","data","TranslatedText","err_1","speechGenerator","VoiceId","textToSpeech","voiceId","pollyClient","synthesizeSpeechCommand","OutputFormat","TextType","SampleRate","response","Response","AudioStream","arrayBuffer","blob","Blob","type","ContentType","url","URL","createObjectURL","speech","audioStream","err_2","transcription","languageCode","openConnectionWithTranscribe","connection","sendDataToTranscribe","raw","bytes","fullText","err_3","err_4","name","message","decodedMessage","transcribeMessage","unmarshall","Buffer","from","transcribeMessageJson","JSON","parse","body","headers","value","stringify","Message","Error","Transcript","Results","length","Alternatives","IsPartial","transcript","res","rej","onmessage","serializeDataFromTranscribe","err","onerror","errorEvent","onclose","closeEvent","trim","Array","isArray","i","slice","sendEncodedDataToTranscribe","endFrameEventMessage","getAudioEventMessage","endFrameBinary","marshall","downsampledBuffer","downsampleBuffer","buffer","outputSampleRate","includes","pcmEncodedBuffer","pcmEncode","audioEventMessage","binary","offset","ArrayBuffer","view","DataView","s","Math","max","min","setInt16","_b","inputSampleRate","sampleRateRatio","newLength","round","result","Float32Array","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","userCredentials","access_key","secret_key","session_token","signedUrl","generateTranscribeUrl","WebSocket","binaryType","onopen","join","signUrl","service"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/predictions/src/Providers/AmazonAIConvertPredictionsProvider.ts"],"sourcesContent":["import { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport {\n\tTranslateClient,\n\tTranslateTextCommand,\n} from '@aws-sdk/client-translate';\nimport { PollyClient, SynthesizeSpeechCommand } from '@aws-sdk/client-polly';\nimport {\n\tTranslateTextInput,\n\tTextToSpeechInput,\n\tSpeechToTextInput,\n\tTranslateTextOutput,\n\tTextToSpeechOutput,\n\tSpeechToTextOutput,\n\tisBytesSource,\n} from '../types';\nimport {\n\tCredentials,\n\tConsoleLogger as Logger,\n\tSigner,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport {\n\tEventStreamMarshaller,\n\tMessageHeaderValue,\n} from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\n\nconst logger = new Logger('AmazonAIConvertPredictionsProvider');\nconst eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\n\nconst LANGUAGES_CODE_IN_8KHZ = ['fr-FR', 'en-AU', 'en-GB', 'fr-CA'];\n\nexport class AmazonAIConvertPredictionsProvider extends AbstractConvertPredictionsProvider {\n\tprivate translateClient: TranslateClient;\n\tprivate pollyClient: PollyClient;\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AmazonAIConvertPredictionsProvider';\n\t}\n\n\tprotected async translateText(\n\t\tinput: TranslateTextInput\n\t): Promise<TranslateTextOutput> {\n\t\tlogger.debug('Starting translation');\n\t\tconst {\n\t\t\ttranslateText: {\n\t\t\t\tdefaults: { sourceLanguage = '', targetLanguage = '' } = {},\n\t\t\t\tregion = '',\n\t\t\t} = {},\n\t\t} = this._config;\n\n\t\tif (!region) {\n\t\t\treturn Promise.reject('region not configured for transcription');\n\t\t}\n\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\t\tconst sourceLanguageCode =\n\t\t\tinput.translateText.source.language || sourceLanguage;\n\t\tconst targetLanguageCode =\n\t\t\tinput.translateText.targetLanguage || targetLanguage;\n\t\tif (!sourceLanguageCode || !targetLanguageCode) {\n\t\t\treturn Promise.reject('Please provide both source and target language');\n\t\t}\n\n\t\tthis.translateClient = new TranslateClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst translateTextCommand = new TranslateTextCommand({\n\t\t\tSourceLanguageCode: sourceLanguageCode,\n\t\t\tTargetLanguageCode: targetLanguageCode,\n\t\t\tText: input.translateText.source.text,\n\t\t});\n\t\ttry {\n\t\t\tconst data = await this.translateClient.send(translateTextCommand);\n\t\t\treturn {\n\t\t\t\ttext: data.TranslatedText,\n\t\t\t\tlanguage: data.TargetLanguageCode,\n\t\t\t} as TranslateTextOutput;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\tprotected async convertTextToSpeech(\n\t\tinput: TextToSpeechInput\n\t): Promise<TextToSpeechOutput> {\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\t\tconst {\n\t\t\tspeechGenerator: { defaults: { VoiceId = '' } = {}, region = '' } = {},\n\t\t} = this._config;\n\n\t\tif (!input.textToSpeech.source) {\n\t\t\treturn Promise.reject('Source needs to be provided in the input');\n\t\t}\n\t\tconst voiceId = input.textToSpeech.voiceId || VoiceId;\n\n\t\tif (!region) {\n\t\t\treturn Promise.reject(\n\t\t\t\t'Region was undefined. Did you enable speech generator using amplify CLI?'\n\t\t\t);\n\t\t}\n\n\t\tif (!voiceId) {\n\t\t\treturn Promise.reject('VoiceId was undefined.');\n\t\t}\n\n\t\tthis.pollyClient = new PollyClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst synthesizeSpeechCommand = new SynthesizeSpeechCommand({\n\t\t\tOutputFormat: 'mp3',\n\t\t\tText: input.textToSpeech.source.text,\n\t\t\tVoiceId: voiceId,\n\t\t\tTextType: 'text',\n\t\t\tSampleRate: '24000',\n\t\t\t// tslint:disable-next-line: align\n\t\t});\n\t\ttry {\n\t\t\tconst data = await this.pollyClient.send(synthesizeSpeechCommand);\n\t\t\tconst response = new Response(data.AudioStream as ReadableStream);\n\t\t\tconst arrayBuffer = await response.arrayBuffer();\n\t\t\tconst blob = new Blob([arrayBuffer], {\n\t\t\t\ttype: data.ContentType,\n\t\t\t});\n\t\t\tconst url = URL.createObjectURL(blob);\n\t\t\treturn {\n\t\t\t\tspeech: { url },\n\t\t\t\taudioStream: arrayBuffer,\n\t\t\t\ttext: input.textToSpeech.source.text,\n\t\t\t} as TextToSpeechOutput;\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\tprotected async convertSpeechToText(\n\t\tinput: SpeechToTextInput\n\t): Promise<SpeechToTextOutput> {\n\t\ttry {\n\t\t\tlogger.debug('starting transcription..');\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) {\n\t\t\t\treturn Promise.reject('No credentials');\n\t\t\t}\n\t\t\tconst {\n\t\t\t\ttranscription: {\n\t\t\t\t\tdefaults: { language: languageCode = '' } = {},\n\t\t\t\t\tregion = '',\n\t\t\t\t} = {},\n\t\t\t} = this._config;\n\t\t\tif (!region) {\n\t\t\t\treturn Promise.reject('region not configured for transcription');\n\t\t\t}\n\t\t\tif (!languageCode) {\n\t\t\t\treturn Promise.reject(\n\t\t\t\t\t'languageCode not configured or provided for transcription'\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst {\n\t\t\t\ttranscription: { source, language = languageCode },\n\t\t\t} = input;\n\n\t\t\tif (isBytesSource(source)) {\n\t\t\t\tconst connection = await this.openConnectionWithTranscribe({\n\t\t\t\t\tcredentials,\n\t\t\t\t\tregion,\n\t\t\t\t\tlanguageCode: language,\n\t\t\t\t});\n\n\t\t\t\ttry {\n\t\t\t\t\tconst fullText = await this.sendDataToTranscribe({\n\t\t\t\t\t\tconnection,\n\t\t\t\t\t\traw: source.bytes,\n\t\t\t\t\t\tlanguageCode: language,\n\t\t\t\t\t});\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttranscription: {\n\t\t\t\t\t\t\tfullText,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn Promise.reject(\n\t\t\t\t'Source types other than byte source are not supported.'\n\t\t\t);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err.name + ': ' + err.message);\n\t\t}\n\t}\n\n\tpublic static serializeDataFromTranscribe(message) {\n\t\tlet decodedMessage = '';\n\t\tconst transcribeMessage = eventBuilder.unmarshall(\n\t\t\tBuffer.from(message.data)\n\t\t);\n\t\tconst transcribeMessageJson = JSON.parse(toUtf8(transcribeMessage.body));\n\t\tif (transcribeMessage.headers[':message-type'].value === 'exception') {\n\t\t\tlogger.debug(\n\t\t\t\t'exception',\n\t\t\t\tJSON.stringify(transcribeMessageJson.Message, null, 2)\n\t\t\t);\n\t\t\tthrow new Error(transcribeMessageJson.Message);\n\t\t} else if (transcribeMessage.headers[':message-type'].value === 'event') {\n\t\t\tif (transcribeMessageJson.Transcript.Results.length > 0) {\n\t\t\t\tif (\n\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives.length > 0\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives[0]\n\t\t\t\t\t\t\t.Transcript.length > 0\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].IsPartial === false\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tdecodedMessage =\n\t\t\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives[0]\n\t\t\t\t\t\t\t\t\t.Transcript + '\\n';\n\t\t\t\t\t\t\tlogger.debug({ decodedMessage });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlogger.debug({\n\t\t\t\t\t\t\t\ttranscript:\n\t\t\t\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives[0],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn decodedMessage;\n\t}\n\n\tprivate sendDataToTranscribe({\n\t\tconnection,\n\t\traw,\n\t\tlanguageCode,\n\t}): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tlet fullText = '';\n\t\t\tconnection.onmessage = message => {\n\t\t\t\ttry {\n\t\t\t\t\tconst decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(\n\t\t\t\t\t\tmessage\n\t\t\t\t\t);\n\t\t\t\t\tif (decodedMessage) {\n\t\t\t\t\t\tfullText += decodedMessage + ' ';\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug(err);\n\t\t\t\t\trej(err.message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconnection.onerror = errorEvent => {\n\t\t\t\tlogger.debug({ errorEvent });\n\t\t\t\trej('failed to transcribe, network error');\n\t\t\t};\n\n\t\t\tconnection.onclose = closeEvent => {\n\t\t\t\tlogger.debug({ closeEvent });\n\t\t\t\treturn res(fullText.trim());\n\t\t\t};\n\n\t\t\tlogger.debug({ raw });\n\n\t\t\tif (Array.isArray(raw)) {\n\t\t\t\tfor (let i = 0; i < raw.length - 1023; i += 1024) {\n\t\t\t\t\tconst data = raw.slice(i, i + 1024);\n\t\t\t\t\tthis.sendEncodedDataToTranscribe(connection, data, languageCode);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If Buffer\n\t\t\t\tthis.sendEncodedDataToTranscribe(connection, raw, languageCode);\n\t\t\t}\n\n\t\t\t// sending end frame\n\t\t\tconst endFrameEventMessage = this.getAudioEventMessage(Buffer.from([]));\n\t\t\tconst endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n\t\t\tconnection.send(endFrameBinary);\n\t\t});\n\t}\n\n\tprivate sendEncodedDataToTranscribe(connection, data, languageCode) {\n\t\tconst downsampledBuffer = this.downsampleBuffer({\n\t\t\tbuffer: data,\n\t\t\toutputSampleRate: LANGUAGES_CODE_IN_8KHZ.includes(languageCode)\n\t\t\t\t? 8000\n\t\t\t\t: 16000,\n\t\t});\n\t\tconst pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n\t\tconst audioEventMessage = this.getAudioEventMessage(\n\t\t\tBuffer.from(pcmEncodedBuffer)\n\t\t);\n\t\tconst binary = eventBuilder.marshall(audioEventMessage);\n\t\tconnection.send(binary);\n\t}\n\n\tprivate getAudioEventMessage(buffer) {\n\t\tconst audioEventMessage = {\n\t\t\tbody: buffer as Uint8Array,\n\t\t\theaders: {\n\t\t\t\t':message-type': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tvalue: 'event',\n\t\t\t\t} as MessageHeaderValue,\n\t\t\t\t':event-type': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tvalue: 'AudioEvent',\n\t\t\t\t} as MessageHeaderValue,\n\t\t\t},\n\t\t};\n\n\t\treturn audioEventMessage;\n\t}\n\n\tprivate pcmEncode(input) {\n\t\tlet offset = 0;\n\t\tconst buffer = new ArrayBuffer(input.length * 2);\n\t\tconst view = new DataView(buffer);\n\t\tfor (let i = 0; i < input.length; i++, offset += 2) {\n\t\t\tconst s = Math.max(-1, Math.min(1, input[i]));\n\t\t\tview.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n\t\t}\n\t\treturn buffer;\n\t}\n\n\tprivate inputSampleRate = 44100;\n\n\tprivate downsampleBuffer({ buffer, outputSampleRate = 16000 }) {\n\t\tif (outputSampleRate === this.inputSampleRate) {\n\t\t\treturn buffer;\n\t\t}\n\n\t\tconst sampleRateRatio = this.inputSampleRate / outputSampleRate;\n\t\tconst newLength = Math.round(buffer.length / sampleRateRatio);\n\t\tconst result = new Float32Array(newLength);\n\t\tlet offsetResult = 0;\n\t\tlet offsetBuffer = 0;\n\t\twhile (offsetResult < result.length) {\n\t\t\tconst nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n\t\t\tlet accum = 0,\n\t\t\t\tcount = 0;\n\t\t\tfor (\n\t\t\t\tlet i = offsetBuffer;\n\t\t\t\ti < nextOffsetBuffer && i < buffer.length;\n\t\t\t\ti++\n\t\t\t) {\n\t\t\t\taccum += buffer[i];\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tresult[offsetResult] = accum / count;\n\t\t\toffsetResult++;\n\t\t\toffsetBuffer = nextOffsetBuffer;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate openConnectionWithTranscribe({\n\t\tcredentials: userCredentials,\n\t\tregion,\n\t\tlanguageCode,\n\t}): Promise<WebSocket> {\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tconst {\n\t\t\t\taccessKeyId: access_key,\n\t\t\t\tsecretAccessKey: secret_key,\n\t\t\t\tsessionToken: session_token,\n\t\t\t} = userCredentials;\n\n\t\t\tconst credentials = {\n\t\t\t\taccess_key,\n\t\t\t\tsecret_key,\n\t\t\t\tsession_token,\n\t\t\t};\n\n\t\t\tconst signedUrl = this.generateTranscribeUrl({\n\t\t\t\tcredentials,\n\t\t\t\tregion,\n\t\t\t\tlanguageCode,\n\t\t\t});\n\n\t\t\tlogger.debug('connecting...');\n\t\t\tconst connection = new WebSocket(signedUrl);\n\n\t\t\tconnection.binaryType = 'arraybuffer';\n\t\t\tconnection.onopen = () => {\n\t\t\t\tlogger.debug('connected');\n\t\t\t\tres(connection);\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate generateTranscribeUrl({ credentials, region, languageCode }): string {\n\t\tconst url = [\n\t\t\t`wss://transcribestreaming.${region}.amazonaws.com:8443`,\n\t\t\t'/stream-transcription-websocket?',\n\t\t\t`media-encoding=pcm&`,\n\t\t\t`sample-rate=${\n\t\t\t\tLANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? '8000' : '16000'\n\t\t\t}&`,\n\t\t\t`language-code=${languageCode}`,\n\t\t].join('');\n\n\t\tconst signedUrl = Signer.signUrl(\n\t\t\turl,\n\t\t\tcredentials,\n\t\t\t{ region, service: 'transcribe' },\n\t\t\t300\n\t\t);\n\n\t\treturn signedUrl;\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default AmazonAIConvertPredictionsProvider;\n"]},"metadata":{},"sourceType":"module"}