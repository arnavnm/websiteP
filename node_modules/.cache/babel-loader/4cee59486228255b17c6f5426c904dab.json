{"ast":null,"code":"import { __read } from \"tslib\";\n/**\n * @internal\n */\n\nexport function resolveLogins(logins) {\n  return Promise.all(Object.keys(logins).reduce(function (arr, name) {\n    var tokenOrProvider = logins[name];\n\n    if (typeof tokenOrProvider === \"string\") {\n      arr.push([name, tokenOrProvider]);\n    } else {\n      arr.push(tokenOrProvider().then(function (token) {\n        return [name, token];\n      }));\n    }\n\n    return arr;\n  }, [])).then(function (resolvedPairs) {\n    return resolvedPairs.reduce(function (logins, _a) {\n      var _b = __read(_a, 2),\n          key = _b[0],\n          value = _b[1];\n\n      logins[key] = value;\n      return logins;\n    }, {});\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;EAClC,OAAOC,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,MAApB,CAA2B,UAAUC,GAAV,EAAeC,IAAf,EAAqB;IAC/D,IAAIC,eAAe,GAAGR,MAAM,CAACO,IAAD,CAA5B;;IACA,IAAI,OAAOC,eAAP,KAA2B,QAA/B,EAAyC;MACrCF,GAAG,CAACG,IAAJ,CAAS,CAACF,IAAD,EAAOC,eAAP,CAAT;IACH,CAFD,MAGK;MACDF,GAAG,CAACG,IAAJ,CAASD,eAAe,GAAGE,IAAlB,CAAuB,UAAUC,KAAV,EAAiB;QAAE,OAAO,CAACJ,IAAD,EAAOI,KAAP,CAAP;MAAuB,CAAjE,CAAT;IACH;;IACD,OAAOL,GAAP;EACH,CATkB,EAShB,EATgB,CAAZ,EASCI,IATD,CASM,UAAUE,aAAV,EAAyB;IAClC,OAAOA,aAAa,CAACP,MAAd,CAAqB,UAAUL,MAAV,EAAkBa,EAAlB,EAAsB;MAC9C,IAAIC,EAAE,GAAGhB,MAAM,CAACe,EAAD,EAAK,CAAL,CAAf;MAAA,IAAwBE,GAAG,GAAGD,EAAE,CAAC,CAAD,CAAhC;MAAA,IAAqCE,KAAK,GAAGF,EAAE,CAAC,CAAD,CAA/C;;MACAd,MAAM,CAACe,GAAD,CAAN,GAAcC,KAAd;MACA,OAAOhB,MAAP;IACH,CAJM,EAIJ,EAJI,CAAP;EAKH,CAfM,CAAP;AAgBH","names":["resolveLogins","logins","Promise","all","Object","keys","reduce","arr","name","tokenOrProvider","push","then","token","resolvedPairs","_a","_b","key","value"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/credential-provider-cognito-identity/src/resolveLogins.ts"],"sourcesContent":["import { Logins, ResolvedLogins } from \"./Logins\";\n\n/**\n * @internal\n */\nexport function resolveLogins(logins: Logins): Promise<ResolvedLogins> {\n  return Promise.all(\n    Object.keys(logins).reduce((arr: Array<[string, string] | Promise<[string, string]>>, name: string) => {\n      const tokenOrProvider = logins[name];\n      if (typeof tokenOrProvider === \"string\") {\n        arr.push([name, tokenOrProvider] as [string, string]);\n      } else {\n        arr.push(tokenOrProvider().then((token) => [name, token] as [string, string]));\n      }\n      return arr;\n    }, [] as Array<Promise<[string, string]>>)\n  ).then((resolvedPairs) =>\n    resolvedPairs.reduce((logins: ResolvedLogins, [key, value]) => {\n      logins[key] = value;\n      return logins;\n    }, {} as ResolvedLogins)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}