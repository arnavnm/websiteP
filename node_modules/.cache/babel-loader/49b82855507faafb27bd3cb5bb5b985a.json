{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutEventsCommand } from '@aws-sdk/client-pinpoint';\nimport { isAppInForeground } from '../utils/AppUtils';\nvar logger = new Logger('EventsBuffer');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\n\nvar EventsBuffer =\n/** @class */\nfunction () {\n  function EventsBuffer(client, config) {\n    this._pause = false;\n    this._flush = false;\n    logger.debug('Instantiating buffer with config:', config);\n    this._buffer = [];\n    this._client = client;\n    this._config = config;\n    this._sendBatch = this._sendBatch.bind(this);\n\n    this._startLoop();\n  }\n\n  EventsBuffer.prototype.push = function (event) {\n    var _a; // if the buffer is currently at the configured limit, pushing would exceed it\n\n\n    if (this._buffer.length >= this._config.bufferSize) {\n      logger.debug('Exceeded analytics events buffer size');\n      return event.handlers.reject(new Error('Exceeded the size of analytics events buffer'));\n    }\n\n    var eventId = event.params.event.eventId;\n    var bufferElement = (_a = {}, _a[eventId] = event, _a);\n\n    this._buffer.push(bufferElement);\n  };\n\n  EventsBuffer.prototype.pause = function () {\n    this._pause = true;\n  };\n\n  EventsBuffer.prototype.resume = function () {\n    this._pause = false;\n  };\n\n  EventsBuffer.prototype.updateClient = function (client) {\n    this._client = client;\n  };\n\n  EventsBuffer.prototype.flush = function () {\n    this._flush = true;\n  };\n\n  EventsBuffer.prototype._startLoop = function () {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n\n    var flushInterval = this._config.flushInterval;\n    this._interval = setInterval(this._sendBatch, flushInterval);\n  };\n\n  EventsBuffer.prototype._sendBatch = function () {\n    var bufferLength = this._buffer.length;\n\n    if (this._flush && !bufferLength) {\n      clearInterval(this._interval);\n    } // Do not send the batch of events if\n    // the Buffer is paused or is empty or the App is not in the foreground\n    // Apps should be in the foreground since\n    // the OS may restrict access to the network in the background\n\n\n    if (this._pause || !bufferLength || !isAppInForeground()) {\n      return;\n    }\n\n    var flushSize = this._config.flushSize;\n    var batchSize = Math.min(flushSize, bufferLength);\n\n    var bufferSubset = this._buffer.splice(0, batchSize);\n\n    this._putEvents(bufferSubset);\n  };\n\n  EventsBuffer.prototype._putEvents = function (buffer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventMap, batchEventParams, command, data, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            eventMap = this._bufferToMap(buffer);\n            batchEventParams = this._generateBatchEventParams(eventMap);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            command = new PutEventsCommand(batchEventParams);\n            return [4\n            /*yield*/\n            , this._client.send(command)];\n\n          case 2:\n            data = _a.sent();\n\n            this._processPutEventsSuccessResponse(data, eventMap);\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_1 = _a.sent();\n            return [2\n            /*return*/\n            , this._handlePutEventsFailure(err_1, eventMap)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  EventsBuffer.prototype._generateBatchEventParams = function (eventMap) {\n    var batchEventParams = {\n      ApplicationId: '',\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    Object.values(eventMap).forEach(function (item) {\n      var params = item.params;\n      var event = params.event,\n          timestamp = params.timestamp,\n          config = params.config;\n      var name = event.name,\n          attributes = event.attributes,\n          metrics = event.metrics,\n          eventId = event.eventId,\n          session = event.session;\n      var appId = config.appId,\n          endpointId = config.endpointId;\n      var batchItem = batchEventParams.EventsRequest.BatchItem;\n      batchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n\n      if (!batchItem[endpointId]) {\n        batchItem[endpointId] = {\n          Endpoint: {},\n          Events: {}\n        };\n      }\n\n      batchItem[endpointId].Events[eventId] = {\n        EventType: name,\n        Timestamp: new Date(timestamp).toISOString(),\n        Attributes: attributes,\n        Metrics: metrics,\n        Session: session\n      };\n    });\n    return batchEventParams;\n  };\n\n  EventsBuffer.prototype._handlePutEventsFailure = function (err, eventMap) {\n    logger.debug('_putEvents Failed: ', err);\n    var statusCode = err.$metadata && err.$metadata.httpStatusCode;\n\n    if (RETRYABLE_CODES.includes(statusCode)) {\n      var retryableEvents = Object.values(eventMap);\n\n      this._retry(retryableEvents);\n\n      return;\n    }\n  };\n\n  EventsBuffer.prototype._processPutEventsSuccessResponse = function (data, eventMap) {\n    var Results = data.EventsResponse.Results;\n    var retryableEvents = [];\n    Object.entries(Results).forEach(function (_a) {\n      var _b = __read(_a, 2),\n          endpointId = _b[0],\n          endpointValues = _b[1];\n\n      var responses = endpointValues.EventsItemResponse;\n      Object.entries(responses).forEach(function (_a) {\n        var _b, _c;\n\n        var _d = __read(_a, 2),\n            eventId = _d[0],\n            _e = _d[1],\n            StatusCode = _e.StatusCode,\n            Message = _e.Message;\n\n        var eventObject = eventMap[eventId]; // manually crafting handlers response to keep API consistant\n\n        var response = {\n          EventsResponse: {\n            Results: (_b = {}, _b[endpointId] = {\n              EventsItemResponse: (_c = {}, _c[eventId] = {\n                StatusCode: StatusCode,\n                Message: Message\n              }, _c)\n            }, _b)\n          }\n        };\n\n        if (ACCEPTED_CODES.includes(StatusCode)) {\n          eventObject.handlers.resolve(response);\n          return;\n        }\n\n        if (RETRYABLE_CODES.includes(StatusCode)) {\n          retryableEvents.push(eventObject);\n          return;\n        }\n\n        var name = eventObject.params.event.name;\n        logger.error(\"event \" + eventId + \" : \" + name + \" failed with error: \" + Message);\n        return eventObject.handlers.reject(response);\n      });\n    });\n\n    if (retryableEvents.length) {\n      this._retry(retryableEvents);\n    }\n  };\n\n  EventsBuffer.prototype._retry = function (retryableEvents) {\n    var _a; // retryable events that haven't reached the resendLimit\n\n\n    var eligibleEvents = [];\n    retryableEvents.forEach(function (event) {\n      var _a;\n\n      var params = event.params;\n      var _b = params.event,\n          eventId = _b.eventId,\n          name = _b.name;\n\n      if (params.resendLimit-- > 0) {\n        logger.debug(\"resending event \" + eventId + \" : \" + name + \" with \" + params.resendLimit + \" retry attempts remaining\");\n        eligibleEvents.push((_a = {}, _a[eventId] = event, _a));\n        return;\n      }\n\n      logger.debug(\"no retry attempts remaining for event \" + eventId + \" : \" + name);\n    }); // add the events to the front of the buffer\n\n    (_a = this._buffer).unshift.apply(_a, __spread(eligibleEvents));\n  }; // convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n  // this allows us to easily access the handlers after receiving a batch response\n\n\n  EventsBuffer.prototype._bufferToMap = function (buffer) {\n    return buffer.reduce(function (acc, curVal) {\n      var _a = __read(Object.entries(curVal), 1),\n          _b = __read(_a[0], 2),\n          key = _b[0],\n          value = _b[1];\n\n      acc[key] = value;\n      return acc;\n    }, {});\n  };\n\n  return EventsBuffer;\n}();\n\nexport default EventsBuffer;","map":{"version":3,"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;EACrF,SAASC,KAAT,CAAeC,KAAf,EAAsB;IAAE,OAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;MAAEA,OAAO,CAACD,KAAD,CAAP;IAAiB,CAA5C,CAApC;EAAoF;;EAC5G,OAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;IACvD,SAASC,SAAT,CAAmBJ,KAAnB,EAA0B;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;MAA8B,CAApC,CAAqC,OAAOO,CAAP,EAAU;QAAEJ,MAAM,CAACI,CAAD,CAAN;MAAY;IAAE;;IAC3F,SAASC,QAAT,CAAkBR,KAAlB,EAAyB;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;MAAkC,CAAxC,CAAyC,OAAOO,CAAP,EAAU;QAAEJ,MAAM,CAACI,CAAD,CAAN;MAAY;IAAE;;IAC9F,SAASF,IAAT,CAAcI,MAAd,EAAsB;MAAEA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;IAAsF;;IAC9GH,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;EACH,CALM,CAAP;AAMH,CARD;;AASA,IAAIO,WAAW,GAAI,QAAQ,KAAKA,WAAd,IAA8B,UAAUlB,OAAV,EAAmBmB,IAAnB,EAAyB;EACrE,IAAIC,CAAC,GAAG;IAAEC,KAAK,EAAE,CAAT;IAAYC,IAAI,EAAE,YAAW;MAAE,IAAIC,CAAC,CAAC,CAAD,CAAD,GAAO,CAAX,EAAc,MAAMA,CAAC,CAAC,CAAD,CAAP;MAAY,OAAOA,CAAC,CAAC,CAAD,CAAR;IAAc,CAAvE;IAAyEC,IAAI,EAAE,EAA/E;IAAmFC,GAAG,EAAE;EAAxF,CAAR;EAAA,IAAsGC,CAAtG;EAAA,IAAyGC,CAAzG;EAAA,IAA4GJ,CAA5G;EAAA,IAA+GK,CAA/G;EACA,OAAOA,CAAC,GAAG;IAAEjB,IAAI,EAAEkB,IAAI,CAAC,CAAD,CAAZ;IAAiB,SAASA,IAAI,CAAC,CAAD,CAA9B;IAAmC,UAAUA,IAAI,CAAC,CAAD;EAAjD,CAAJ,EAA4D,OAAOC,MAAP,KAAkB,UAAlB,KAAiCF,CAAC,CAACE,MAAM,CAACC,QAAR,CAAD,GAAqB,YAAW;IAAE,OAAO,IAAP;EAAc,CAAjF,CAA5D,EAAgJH,CAAvJ;;EACA,SAASC,IAAT,CAAcG,CAAd,EAAiB;IAAE,OAAO,UAAUC,CAAV,EAAa;MAAE,OAAOvB,IAAI,CAAC,CAACsB,CAAD,EAAIC,CAAJ,CAAD,CAAX;IAAsB,CAA5C;EAA+C;;EAClE,SAASvB,IAAT,CAAcwB,EAAd,EAAkB;IACd,IAAIR,CAAJ,EAAO,MAAM,IAAIS,SAAJ,CAAc,iCAAd,CAAN;;IACP,OAAOf,CAAP,EAAU,IAAI;MACV,IAAIM,CAAC,GAAG,CAAJ,EAAOC,CAAC,KAAKJ,CAAC,GAAGW,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR,GAAYP,CAAC,CAAC,QAAD,CAAb,GAA0BO,EAAE,CAAC,CAAD,CAAF,GAAQP,CAAC,CAAC,OAAD,CAAD,KAAe,CAACJ,CAAC,GAAGI,CAAC,CAAC,QAAD,CAAN,KAAqBJ,CAAC,CAACa,IAAF,CAAOT,CAAP,CAArB,EAAgC,CAA/C,CAAR,GAA4DA,CAAC,CAAChB,IAAjG,CAAD,IAA2G,CAAC,CAACY,CAAC,GAAGA,CAAC,CAACa,IAAF,CAAOT,CAAP,EAAUO,EAAE,CAAC,CAAD,CAAZ,CAAL,EAAuBnB,IAA9I,EAAoJ,OAAOQ,CAAP;MACpJ,IAAII,CAAC,GAAG,CAAJ,EAAOJ,CAAX,EAAcW,EAAE,GAAG,CAACA,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAT,EAAYX,CAAC,CAAClB,KAAd,CAAL;;MACd,QAAQ6B,EAAE,CAAC,CAAD,CAAV;QACI,KAAK,CAAL;QAAQ,KAAK,CAAL;UAAQX,CAAC,GAAGW,EAAJ;UAAQ;;QACxB,KAAK,CAAL;UAAQd,CAAC,CAACC,KAAF;UAAW,OAAO;YAAEhB,KAAK,EAAE6B,EAAE,CAAC,CAAD,CAAX;YAAgBnB,IAAI,EAAE;UAAtB,CAAP;;QACnB,KAAK,CAAL;UAAQK,CAAC,CAACC,KAAF;UAAWM,CAAC,GAAGO,EAAE,CAAC,CAAD,CAAN;UAAWA,EAAE,GAAG,CAAC,CAAD,CAAL;UAAU;;QACxC,KAAK,CAAL;UAAQA,EAAE,GAAGd,CAAC,CAACK,GAAF,CAAMY,GAAN,EAAL;;UAAkBjB,CAAC,CAACI,IAAF,CAAOa,GAAP;;UAAc;;QACxC;UACI,IAAI,EAAEd,CAAC,GAAGH,CAAC,CAACI,IAAN,EAAYD,CAAC,GAAGA,CAAC,CAACe,MAAF,GAAW,CAAX,IAAgBf,CAAC,CAACA,CAAC,CAACe,MAAF,GAAW,CAAZ,CAAnC,MAAuDJ,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,IAAeA,EAAE,CAAC,CAAD,CAAF,KAAU,CAAhF,CAAJ,EAAwF;YAAEd,CAAC,GAAG,CAAJ;YAAO;UAAW;;UAC5G,IAAIc,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,KAAgB,CAACX,CAAD,IAAOW,EAAE,CAAC,CAAD,CAAF,GAAQX,CAAC,CAAC,CAAD,CAAT,IAAgBW,EAAE,CAAC,CAAD,CAAF,GAAQX,CAAC,CAAC,CAAD,CAAhD,CAAJ,EAA2D;YAAEH,CAAC,CAACC,KAAF,GAAUa,EAAE,CAAC,CAAD,CAAZ;YAAiB;UAAQ;;UACtF,IAAIA,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,IAAed,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAA9B,EAAmC;YAAEH,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAAX;YAAgBA,CAAC,GAAGW,EAAJ;YAAQ;UAAQ;;UACrE,IAAIX,CAAC,IAAIH,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAApB,EAAyB;YAAEH,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAAX;;YAAgBH,CAAC,CAACK,GAAF,CAAMc,IAAN,CAAWL,EAAX;;YAAgB;UAAQ;;UACnE,IAAIX,CAAC,CAAC,CAAD,CAAL,EAAUH,CAAC,CAACK,GAAF,CAAMY,GAAN;;UACVjB,CAAC,CAACI,IAAF,CAAOa,GAAP;;UAAc;MAXtB;;MAaAH,EAAE,GAAGf,IAAI,CAACiB,IAAL,CAAUpC,OAAV,EAAmBoB,CAAnB,CAAL;IACH,CAjBS,CAiBR,OAAOR,CAAP,EAAU;MAAEsB,EAAE,GAAG,CAAC,CAAD,EAAItB,CAAJ,CAAL;MAAae,CAAC,GAAG,CAAJ;IAAQ,CAjBzB,SAiBkC;MAAED,CAAC,GAAGH,CAAC,GAAG,CAAR;IAAY;;IAC1D,IAAIW,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAZ,EAAe,MAAMA,EAAE,CAAC,CAAD,CAAR;IAAa,OAAO;MAAE7B,KAAK,EAAE6B,EAAE,CAAC,CAAD,CAAF,GAAQA,EAAE,CAAC,CAAD,CAAV,GAAgB,KAAK,CAA9B;MAAiCnB,IAAI,EAAE;IAAvC,CAAP;EAC/B;AACJ,CA1BD;;AA2BA,IAAIyB,MAAM,GAAI,QAAQ,KAAKA,MAAd,IAAyB,UAAUC,CAAV,EAAaT,CAAb,EAAgB;EAClD,IAAIU,CAAC,GAAG,OAAOZ,MAAP,KAAkB,UAAlB,IAAgCW,CAAC,CAACX,MAAM,CAACC,QAAR,CAAzC;EACA,IAAI,CAACW,CAAL,EAAQ,OAAOD,CAAP;EACR,IAAIE,CAAC,GAAGD,CAAC,CAACN,IAAF,CAAOK,CAAP,CAAR;EAAA,IAAmBG,CAAnB;EAAA,IAAsBC,EAAE,GAAG,EAA3B;EAAA,IAA+BjC,CAA/B;;EACA,IAAI;IACA,OAAO,CAACoB,CAAC,KAAK,KAAK,CAAX,IAAgBA,CAAC,KAAK,CAAvB,KAA6B,CAAC,CAACY,CAAC,GAAGD,CAAC,CAAChC,IAAF,EAAL,EAAeI,IAApD,EAA0D8B,EAAE,CAACN,IAAH,CAAQK,CAAC,CAACvC,KAAV;EAC7D,CAFD,CAGA,OAAOyC,KAAP,EAAc;IAAElC,CAAC,GAAG;MAAEkC,KAAK,EAAEA;IAAT,CAAJ;EAAuB,CAHvC,SAIQ;IACJ,IAAI;MACA,IAAIF,CAAC,IAAI,CAACA,CAAC,CAAC7B,IAAR,KAAiB2B,CAAC,GAAGC,CAAC,CAAC,QAAD,CAAtB,CAAJ,EAAuCD,CAAC,CAACN,IAAF,CAAOO,CAAP;IAC1C,CAFD,SAGQ;MAAE,IAAI/B,CAAJ,EAAO,MAAMA,CAAC,CAACkC,KAAR;IAAgB;EACpC;;EACD,OAAOD,EAAP;AACH,CAfD;;AAgBA,IAAIE,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;EAClD,KAAK,IAAIF,EAAE,GAAG,EAAT,EAAaF,CAAC,GAAG,CAAtB,EAAyBA,CAAC,GAAGK,SAAS,CAACV,MAAvC,EAA+CK,CAAC,EAAhD,EAAoDE,EAAE,GAAGA,EAAE,CAACI,MAAH,CAAUT,MAAM,CAACQ,SAAS,CAACL,CAAD,CAAV,CAAhB,CAAL;;EACpD,OAAOE,EAAP;AACH,CAHD;;AAIA,SAASK,aAAa,IAAIC,MAA1B,QAAwC,mBAAxC;AACA,SAASC,gBAAT,QAAkC,0BAAlC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,IAAIC,MAAM,GAAG,IAAIH,MAAJ,CAAW,cAAX,CAAb;AACA,IAAII,eAAe,GAAG,CAAC,GAAD,EAAM,GAAN,CAAtB;AACA,IAAIC,cAAc,GAAG,CAAC,GAAD,CAArB;;AACA,IAAIC,YAAY;AAAG;AAAe,YAAY;EAC1C,SAASA,YAAT,CAAsBC,MAAtB,EAA8BC,MAA9B,EAAsC;IAClC,KAAKC,MAAL,GAAc,KAAd;IACA,KAAKC,MAAL,GAAc,KAAd;IACAP,MAAM,CAACQ,KAAP,CAAa,mCAAb,EAAkDH,MAAlD;IACA,KAAKI,OAAL,GAAe,EAAf;IACA,KAAKC,OAAL,GAAeN,MAAf;IACA,KAAKO,OAAL,GAAeN,MAAf;IACA,KAAKO,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;;IACA,KAAKC,UAAL;EACH;;EACDX,YAAY,CAACY,SAAb,CAAuB9B,IAAvB,GAA8B,UAAU+B,KAAV,EAAiB;IAC3C,IAAIC,EAAJ,CAD2C,CAE3C;;;IACA,IAAI,KAAKR,OAAL,CAAazB,MAAb,IAAuB,KAAK2B,OAAL,CAAaO,UAAxC,EAAoD;MAChDlB,MAAM,CAACQ,KAAP,CAAa,uCAAb;MACA,OAAOQ,KAAK,CAACG,QAAN,CAAejE,MAAf,CAAsB,IAAIkE,KAAJ,CAAU,8CAAV,CAAtB,CAAP;IACH;;IACD,IAAIC,OAAO,GAAGL,KAAK,CAACM,MAAN,CAAaN,KAAb,CAAmBK,OAAjC;IACA,IAAIE,aAAa,IAAIN,EAAE,GAAG,EAAL,EAASA,EAAE,CAACI,OAAD,CAAF,GAAcL,KAAvB,EAA8BC,EAAlC,CAAjB;;IACA,KAAKR,OAAL,CAAaxB,IAAb,CAAkBsC,aAAlB;EACH,CAVD;;EAWApB,YAAY,CAACY,SAAb,CAAuBS,KAAvB,GAA+B,YAAY;IACvC,KAAKlB,MAAL,GAAc,IAAd;EACH,CAFD;;EAGAH,YAAY,CAACY,SAAb,CAAuBU,MAAvB,GAAgC,YAAY;IACxC,KAAKnB,MAAL,GAAc,KAAd;EACH,CAFD;;EAGAH,YAAY,CAACY,SAAb,CAAuBW,YAAvB,GAAsC,UAAUtB,MAAV,EAAkB;IACpD,KAAKM,OAAL,GAAeN,MAAf;EACH,CAFD;;EAGAD,YAAY,CAACY,SAAb,CAAuBY,KAAvB,GAA+B,YAAY;IACvC,KAAKpB,MAAL,GAAc,IAAd;EACH,CAFD;;EAGAJ,YAAY,CAACY,SAAb,CAAuBD,UAAvB,GAAoC,YAAY;IAC5C,IAAI,KAAKc,SAAT,EAAoB;MAChBC,aAAa,CAAC,KAAKD,SAAN,CAAb;IACH;;IACD,IAAIE,aAAa,GAAG,KAAKnB,OAAL,CAAamB,aAAjC;IACA,KAAKF,SAAL,GAAiBG,WAAW,CAAC,KAAKnB,UAAN,EAAkBkB,aAAlB,CAA5B;EACH,CAND;;EAOA3B,YAAY,CAACY,SAAb,CAAuBH,UAAvB,GAAoC,YAAY;IAC5C,IAAIoB,YAAY,GAAG,KAAKvB,OAAL,CAAazB,MAAhC;;IACA,IAAI,KAAKuB,MAAL,IAAe,CAACyB,YAApB,EAAkC;MAC9BH,aAAa,CAAC,KAAKD,SAAN,CAAb;IACH,CAJ2C,CAK5C;IACA;IACA;IACA;;;IACA,IAAI,KAAKtB,MAAL,IAAe,CAAC0B,YAAhB,IAAgC,CAACjC,iBAAiB,EAAtD,EAA0D;MACtD;IACH;;IACD,IAAIkC,SAAS,GAAG,KAAKtB,OAAL,CAAasB,SAA7B;IACA,IAAIC,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASH,SAAT,EAAoBD,YAApB,CAAhB;;IACA,IAAIK,YAAY,GAAG,KAAK5B,OAAL,CAAa6B,MAAb,CAAoB,CAApB,EAAuBJ,SAAvB,CAAnB;;IACA,KAAKK,UAAL,CAAgBF,YAAhB;EACH,CAhBD;;EAiBAlC,YAAY,CAACY,SAAb,CAAuBwB,UAAvB,GAAoC,UAAUC,MAAV,EAAkB;IAClD,OAAO/F,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAIgG,QAAJ,EAAcC,gBAAd,EAAgCC,OAAhC,EAAyCC,IAAzC,EAA+CC,KAA/C;MACA,OAAOjF,WAAW,CAAC,IAAD,EAAO,UAAUqD,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAClD,KAAX;UACI,KAAK,CAAL;YACI0E,QAAQ,GAAG,KAAKK,YAAL,CAAkBN,MAAlB,CAAX;YACAE,gBAAgB,GAAG,KAAKK,yBAAL,CAA+BN,QAA/B,CAAnB;YACAxB,EAAE,CAAClD,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACIkD,EAAE,CAAC/C,IAAH,CAAQe,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA0D,OAAO,GAAG,IAAI7C,gBAAJ,CAAqB4C,gBAArB,CAAV;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKhC,OAAL,CAAasC,IAAb,CAAkBL,OAAlB,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIC,IAAI,GAAG3B,EAAE,CAACjD,IAAH,EAAP;;YACA,KAAKiF,gCAAL,CAAsCL,IAAtC,EAA4CH,QAA5C;;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;UACJ,KAAK,CAAL;YACII,KAAK,GAAG5B,EAAE,CAACjD,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAe,KAAKkF,uBAAL,CAA6BL,KAA7B,EAAoCJ,QAApC,CAAf,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QAhBZ;MAkBH,CAnBiB,CAAlB;IAoBH,CAtBe,CAAhB;EAuBH,CAxBD;;EAyBAtC,YAAY,CAACY,SAAb,CAAuBgC,yBAAvB,GAAmD,UAAUN,QAAV,EAAoB;IACnE,IAAIC,gBAAgB,GAAG;MACnBS,aAAa,EAAE,EADI;MAEnBC,aAAa,EAAE;QACXC,SAAS,EAAE;MADA;IAFI,CAAvB;IAMAC,MAAM,CAACC,MAAP,CAAcd,QAAd,EAAwBe,OAAxB,CAAgC,UAAUC,IAAV,EAAgB;MAC5C,IAAInC,MAAM,GAAGmC,IAAI,CAACnC,MAAlB;MACA,IAAIN,KAAK,GAAGM,MAAM,CAACN,KAAnB;MAAA,IAA0B0C,SAAS,GAAGpC,MAAM,CAACoC,SAA7C;MAAA,IAAwDrD,MAAM,GAAGiB,MAAM,CAACjB,MAAxE;MACA,IAAIsD,IAAI,GAAG3C,KAAK,CAAC2C,IAAjB;MAAA,IAAuBC,UAAU,GAAG5C,KAAK,CAAC4C,UAA1C;MAAA,IAAsDC,OAAO,GAAG7C,KAAK,CAAC6C,OAAtE;MAAA,IAA+ExC,OAAO,GAAGL,KAAK,CAACK,OAA/F;MAAA,IAAwGyC,OAAO,GAAG9C,KAAK,CAAC8C,OAAxH;MACA,IAAIC,KAAK,GAAG1D,MAAM,CAAC0D,KAAnB;MAAA,IAA0BC,UAAU,GAAG3D,MAAM,CAAC2D,UAA9C;MACA,IAAIC,SAAS,GAAGvB,gBAAgB,CAACU,aAAjB,CAA+BC,SAA/C;MACAX,gBAAgB,CAACS,aAAjB,GAAiCT,gBAAgB,CAACS,aAAjB,IAAkCY,KAAnE;;MACA,IAAI,CAACE,SAAS,CAACD,UAAD,CAAd,EAA4B;QACxBC,SAAS,CAACD,UAAD,CAAT,GAAwB;UACpBE,QAAQ,EAAE,EADU;UAEpBC,MAAM,EAAE;QAFY,CAAxB;MAIH;;MACDF,SAAS,CAACD,UAAD,CAAT,CAAsBG,MAAtB,CAA6B9C,OAA7B,IAAwC;QACpC+C,SAAS,EAAET,IADyB;QAEpCU,SAAS,EAAE,IAAIC,IAAJ,CAASZ,SAAT,EAAoBa,WAApB,EAFyB;QAGpCC,UAAU,EAAEZ,UAHwB;QAIpCa,OAAO,EAAEZ,OAJ2B;QAKpCa,OAAO,EAAEZ;MAL2B,CAAxC;IAOH,CApBD;IAqBA,OAAOpB,gBAAP;EACH,CA7BD;;EA8BAvC,YAAY,CAACY,SAAb,CAAuBmC,uBAAvB,GAAiD,UAAUyB,GAAV,EAAelC,QAAf,EAAyB;IACtEzC,MAAM,CAACQ,KAAP,CAAa,qBAAb,EAAoCmE,GAApC;IACA,IAAIC,UAAU,GAAGD,GAAG,CAACE,SAAJ,IAAiBF,GAAG,CAACE,SAAJ,CAAcC,cAAhD;;IACA,IAAI7E,eAAe,CAAC8E,QAAhB,CAAyBH,UAAzB,CAAJ,EAA0C;MACtC,IAAII,eAAe,GAAG1B,MAAM,CAACC,MAAP,CAAcd,QAAd,CAAtB;;MACA,KAAKwC,MAAL,CAAYD,eAAZ;;MACA;IACH;EACJ,CARD;;EASA7E,YAAY,CAACY,SAAb,CAAuBkC,gCAAvB,GAA0D,UAAUL,IAAV,EAAgBH,QAAhB,EAA0B;IAChF,IAAIyC,OAAO,GAAGtC,IAAI,CAACuC,cAAL,CAAoBD,OAAlC;IACA,IAAIF,eAAe,GAAG,EAAtB;IACA1B,MAAM,CAAC8B,OAAP,CAAeF,OAAf,EAAwB1B,OAAxB,CAAgC,UAAUvC,EAAV,EAAc;MAC1C,IAAIoE,EAAE,GAAGnG,MAAM,CAAC+B,EAAD,EAAK,CAAL,CAAf;MAAA,IAAwB+C,UAAU,GAAGqB,EAAE,CAAC,CAAD,CAAvC;MAAA,IAA4CC,cAAc,GAAGD,EAAE,CAAC,CAAD,CAA/D;;MACA,IAAIE,SAAS,GAAGD,cAAc,CAACE,kBAA/B;MACAlC,MAAM,CAAC8B,OAAP,CAAeG,SAAf,EAA0B/B,OAA1B,CAAkC,UAAUvC,EAAV,EAAc;QAC5C,IAAIoE,EAAJ,EAAQI,EAAR;;QACA,IAAIC,EAAE,GAAGxG,MAAM,CAAC+B,EAAD,EAAK,CAAL,CAAf;QAAA,IAAwBI,OAAO,GAAGqE,EAAE,CAAC,CAAD,CAApC;QAAA,IAAyCC,EAAE,GAAGD,EAAE,CAAC,CAAD,CAAhD;QAAA,IAAqDE,UAAU,GAAGD,EAAE,CAACC,UAArE;QAAA,IAAiFC,OAAO,GAAGF,EAAE,CAACE,OAA9F;;QACA,IAAIC,WAAW,GAAGrD,QAAQ,CAACpB,OAAD,CAA1B,CAH4C,CAI5C;;QACA,IAAI0E,QAAQ,GAAG;UACXZ,cAAc,EAAE;YACZD,OAAO,GAAGG,EAAE,GAAG,EAAL,EACNA,EAAE,CAACrB,UAAD,CAAF,GAAiB;cACbwB,kBAAkB,GAAGC,EAAE,GAAG,EAAL,EACjBA,EAAE,CAACpE,OAAD,CAAF,GAAc;gBAAEuE,UAAU,EAAEA,UAAd;gBAA0BC,OAAO,EAAEA;cAAnC,CADG,EAEjBJ,EAFc;YADL,CADX,EAMNJ,EANG;UADK;QADL,CAAf;;QAWA,IAAInF,cAAc,CAAC6E,QAAf,CAAwBa,UAAxB,CAAJ,EAAyC;UACrCE,WAAW,CAAC3E,QAAZ,CAAqBnE,OAArB,CAA6B+I,QAA7B;UACA;QACH;;QACD,IAAI9F,eAAe,CAAC8E,QAAhB,CAAyBa,UAAzB,CAAJ,EAA0C;UACtCZ,eAAe,CAAC/F,IAAhB,CAAqB6G,WAArB;UACA;QACH;;QACD,IAAInC,IAAI,GAAGmC,WAAW,CAACxE,MAAZ,CAAmBN,KAAnB,CAAyB2C,IAApC;QACA3D,MAAM,CAACR,KAAP,CAAa,WAAW6B,OAAX,GAAqB,KAArB,GAA6BsC,IAA7B,GAAoC,sBAApC,GAA6DkC,OAA1E;QACA,OAAOC,WAAW,CAAC3E,QAAZ,CAAqBjE,MAArB,CAA4B6I,QAA5B,CAAP;MACH,CA3BD;IA4BH,CA/BD;;IAgCA,IAAIf,eAAe,CAAChG,MAApB,EAA4B;MACxB,KAAKiG,MAAL,CAAYD,eAAZ;IACH;EACJ,CAtCD;;EAuCA7E,YAAY,CAACY,SAAb,CAAuBkE,MAAvB,GAAgC,UAAUD,eAAV,EAA2B;IACvD,IAAI/D,EAAJ,CADuD,CAEvD;;;IACA,IAAI+E,cAAc,GAAG,EAArB;IACAhB,eAAe,CAACxB,OAAhB,CAAwB,UAAUxC,KAAV,EAAiB;MACrC,IAAIC,EAAJ;;MACA,IAAIK,MAAM,GAAGN,KAAK,CAACM,MAAnB;MACA,IAAI+D,EAAE,GAAG/D,MAAM,CAACN,KAAhB;MAAA,IAAuBK,OAAO,GAAGgE,EAAE,CAAChE,OAApC;MAAA,IAA6CsC,IAAI,GAAG0B,EAAE,CAAC1B,IAAvD;;MACA,IAAIrC,MAAM,CAAC2E,WAAP,KAAuB,CAA3B,EAA8B;QAC1BjG,MAAM,CAACQ,KAAP,CAAa,qBAAqBa,OAArB,GAA+B,KAA/B,GAAuCsC,IAAvC,GAA8C,QAA9C,GAAyDrC,MAAM,CAAC2E,WAAhE,GAA8E,2BAA3F;QACAD,cAAc,CAAC/G,IAAf,EAAqBgC,EAAE,GAAG,EAAL,EAASA,EAAE,CAACI,OAAD,CAAF,GAAcL,KAAvB,EAA8BC,EAAnD;QACA;MACH;;MACDjB,MAAM,CAACQ,KAAP,CAAa,2CAA2Ca,OAA3C,GAAqD,KAArD,GAA6DsC,IAA1E;IACH,CAVD,EAJuD,CAevD;;IACA,CAAC1C,EAAE,GAAG,KAAKR,OAAX,EAAoByF,OAApB,CAA4BvI,KAA5B,CAAkCsD,EAAlC,EAAsCxB,QAAQ,CAACuG,cAAD,CAA9C;EACH,CAjBD,CAjK0C,CAmL1C;EACA;;;EACA7F,YAAY,CAACY,SAAb,CAAuB+B,YAAvB,GAAsC,UAAUN,MAAV,EAAkB;IACpD,OAAOA,MAAM,CAAC2D,MAAP,CAAc,UAAUC,GAAV,EAAeC,MAAf,EAAuB;MACxC,IAAIpF,EAAE,GAAG/B,MAAM,CAACoE,MAAM,CAAC8B,OAAP,CAAeiB,MAAf,CAAD,EAAyB,CAAzB,CAAf;MAAA,IAA4ChB,EAAE,GAAGnG,MAAM,CAAC+B,EAAE,CAAC,CAAD,CAAH,EAAQ,CAAR,CAAvD;MAAA,IAAmEqF,GAAG,GAAGjB,EAAE,CAAC,CAAD,CAA3E;MAAA,IAAgFtI,KAAK,GAAGsI,EAAE,CAAC,CAAD,CAA1F;;MACAe,GAAG,CAACE,GAAD,CAAH,GAAWvJ,KAAX;MACA,OAAOqJ,GAAP;IACH,CAJM,EAIJ,EAJI,CAAP;EAKH,CAND;;EAOA,OAAOjG,YAAP;AACH,CA7LiC,EAAlC;;AA8LA,eAAeA,YAAf","names":["ConsoleLogger","Logger","PutEventsCommand","isAppInForeground","logger","RETRYABLE_CODES","ACCEPTED_CODES","client","config","debug","_buffer","_client","_config","_sendBatch","bind","_startLoop","EventsBuffer","event","length","bufferSize","handlers","reject","Error","bufferElement","_a","eventId","push","_pause","_flush","_interval","clearInterval","setInterval","flushInterval","bufferLength","batchSize","Math","min","flushSize","bufferSubset","splice","_putEvents","buffer","eventMap","_bufferToMap","batchEventParams","_generateBatchEventParams","command","send","data","_processPutEventsSuccessResponse","_handlePutEventsFailure","err_1","ApplicationId","EventsRequest","BatchItem","Object","values","forEach","timestamp","attributes","metrics","session","endpointId","batchItem","appId","Endpoint","Events","EventType","name","Timestamp","Date","toISOString","Attributes","Metrics","Session","err","statusCode","$metadata","httpStatusCode","includes","retryableEvents","_retry","entries","Results","_b","endpointValues","responses","EventsItemResponse","_d","_e","StatusCode","Message","eventObject","response","EventsResponse","_c","resolve","error","eligibleEvents","params","resendLimit","unshift","apply","__spread","reduce","acc","curVal","key","value"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/analytics/src/Providers/EventBuffer.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from '@aws-amplify/core';\n\nimport {\n\tPutEventsResponse,\n\tEventBuffer,\n\tEventObject,\n\tEventMap,\n} from '../types';\nimport {\n\tPutEventsCommand,\n\tPutEventsCommandOutput,\n} from '@aws-sdk/client-pinpoint';\nimport { isAppInForeground } from '../utils/AppUtils';\n\nconst logger = new Logger('EventsBuffer');\nconst RETRYABLE_CODES = [429, 500];\nconst ACCEPTED_CODES = [202];\n\ntype EventsBufferConfig = {\n\tbufferSize: number;\n\tflushSize: number;\n\tflushInterval: number;\n\tresendLimit: number;\n};\n\nexport default class EventsBuffer {\n\tprivate _config;\n\tprivate _client;\n\tprivate _interval;\n\tprivate _buffer: EventBuffer;\n\tprivate _pause = false;\n\tprivate _flush = false;\n\n\tconstructor(client, config: EventsBufferConfig) {\n\t\tlogger.debug('Instantiating buffer with config:', config);\n\t\tthis._buffer = [];\n\t\tthis._client = client;\n\t\tthis._config = config;\n\n\t\tthis._sendBatch = this._sendBatch.bind(this);\n\n\t\tthis._startLoop();\n\t}\n\n\tpublic push(event: EventObject) {\n\t\t// if the buffer is currently at the configured limit, pushing would exceed it\n\t\tif (this._buffer.length >= this._config.bufferSize) {\n\t\t\tlogger.debug('Exceeded analytics events buffer size');\n\t\t\treturn event.handlers.reject(\n\t\t\t\tnew Error('Exceeded the size of analytics events buffer')\n\t\t\t);\n\t\t}\n\n\t\tconst { eventId } = event.params.event;\n\t\tconst bufferElement = { [eventId]: event };\n\t\tthis._buffer.push(bufferElement);\n\t}\n\n\tpublic pause() {\n\t\tthis._pause = true;\n\t}\n\n\tpublic resume() {\n\t\tthis._pause = false;\n\t}\n\n\tpublic updateClient(client) {\n\t\tthis._client = client;\n\t}\n\n\tpublic flush() {\n\t\tthis._flush = true;\n\t}\n\n\tprivate _startLoop() {\n\t\tif (this._interval) {\n\t\t\tclearInterval(this._interval);\n\t\t}\n\n\t\tconst { flushInterval } = this._config;\n\n\t\tthis._interval = setInterval(this._sendBatch, flushInterval);\n\t}\n\n\tprivate _sendBatch() {\n\t\tconst bufferLength = this._buffer.length;\n\n\t\tif (this._flush && !bufferLength) {\n\t\t\tclearInterval(this._interval);\n\t\t}\n\n\t\t// Do not send the batch of events if\n\t\t// the Buffer is paused or is empty or the App is not in the foreground\n\t\t// Apps should be in the foreground since\n\t\t// the OS may restrict access to the network in the background\n\t\tif (this._pause || !bufferLength || !isAppInForeground()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { flushSize } = this._config;\n\n\t\tconst batchSize = Math.min(flushSize, bufferLength);\n\t\tconst bufferSubset = this._buffer.splice(0, batchSize);\n\n\t\tthis._putEvents(bufferSubset);\n\t}\n\n\tprivate async _putEvents(buffer: EventBuffer) {\n\t\tconst eventMap: EventMap = this._bufferToMap(buffer);\n\t\tconst batchEventParams = this._generateBatchEventParams(eventMap);\n\n\t\ttry {\n\t\t\tconst command: PutEventsCommand = new PutEventsCommand(batchEventParams);\n\t\t\tconst data: PutEventsCommandOutput = await this._client.send(command);\n\t\t\tthis._processPutEventsSuccessResponse(data, eventMap);\n\t\t} catch (err) {\n\t\t\treturn this._handlePutEventsFailure(err, eventMap);\n\t\t}\n\t}\n\n\tprivate _generateBatchEventParams(eventMap: EventMap) {\n\t\tconst batchEventParams = {\n\t\t\tApplicationId: '',\n\t\t\tEventsRequest: {\n\t\t\t\tBatchItem: {},\n\t\t\t},\n\t\t};\n\n\t\tObject.values(eventMap).forEach(item => {\n\t\t\tconst { params } = item;\n\t\t\tconst { event, timestamp, config } = params;\n\t\t\tconst { name, attributes, metrics, eventId, session } = event;\n\t\t\tconst { appId, endpointId } = config;\n\n\t\t\tconst batchItem = batchEventParams.EventsRequest.BatchItem;\n\n\t\t\tbatchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n\n\t\t\tif (!batchItem[endpointId]) {\n\t\t\t\tbatchItem[endpointId] = {\n\t\t\t\t\tEndpoint: {},\n\t\t\t\t\tEvents: {},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tbatchItem[endpointId].Events[eventId] = {\n\t\t\t\tEventType: name,\n\t\t\t\tTimestamp: new Date(timestamp).toISOString(),\n\t\t\t\tAttributes: attributes,\n\t\t\t\tMetrics: metrics,\n\t\t\t\tSession: session,\n\t\t\t};\n\t\t});\n\n\t\treturn batchEventParams;\n\t}\n\n\tprivate _handlePutEventsFailure(err, eventMap: EventMap) {\n\t\tlogger.debug('_putEvents Failed: ', err);\n\t\tconst statusCode = err.$metadata && err.$metadata.httpStatusCode;\n\n\t\tif (RETRYABLE_CODES.includes(statusCode)) {\n\t\t\tconst retryableEvents = Object.values(eventMap);\n\t\t\tthis._retry(retryableEvents);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate _processPutEventsSuccessResponse(\n\t\tdata: PutEventsResponse,\n\t\teventMap: EventMap\n\t) {\n\t\tconst { Results } = data.EventsResponse;\n\t\tconst retryableEvents: EventObject[] = [];\n\n\t\tObject.entries(Results).forEach(([endpointId, endpointValues]) => {\n\t\t\tconst responses = endpointValues.EventsItemResponse;\n\n\t\t\tObject.entries(responses).forEach(\n\t\t\t\t([eventId, { StatusCode, Message }]) => {\n\t\t\t\t\tconst eventObject = eventMap[eventId];\n\n\t\t\t\t\t// manually crafting handlers response to keep API consistant\n\t\t\t\t\tconst response = {\n\t\t\t\t\t\tEventsResponse: {\n\t\t\t\t\t\t\tResults: {\n\t\t\t\t\t\t\t\t[endpointId]: {\n\t\t\t\t\t\t\t\t\tEventsItemResponse: {\n\t\t\t\t\t\t\t\t\t\t[eventId]: { StatusCode, Message },\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tif (ACCEPTED_CODES.includes(StatusCode)) {\n\t\t\t\t\t\teventObject.handlers.resolve(response);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (RETRYABLE_CODES.includes(StatusCode)) {\n\t\t\t\t\t\tretryableEvents.push(eventObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { name } = eventObject.params.event;\n\n\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t`event ${eventId} : ${name} failed with error: ${Message}`\n\t\t\t\t\t);\n\t\t\t\t\treturn eventObject.handlers.reject(response);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\n\t\tif (retryableEvents.length) {\n\t\t\tthis._retry(retryableEvents);\n\t\t}\n\t}\n\n\tprivate _retry(retryableEvents: EventObject[]) {\n\t\t// retryable events that haven't reached the resendLimit\n\t\tconst eligibleEvents: EventBuffer = [];\n\n\t\tretryableEvents.forEach((event: EventObject) => {\n\t\t\tconst { params } = event;\n\t\t\tconst { eventId, name } = params.event;\n\n\t\t\tif (params.resendLimit-- > 0) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`resending event ${eventId} : ${name} with ${params.resendLimit} retry attempts remaining`\n\t\t\t\t);\n\t\t\t\teligibleEvents.push({ [eventId]: event });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(\n\t\t\t\t`no retry attempts remaining for event ${eventId} : ${name}`\n\t\t\t);\n\t\t});\n\n\t\t// add the events to the front of the buffer\n\t\tthis._buffer.unshift(...eligibleEvents);\n\t}\n\n\t// convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n\t// this allows us to easily access the handlers after receiving a batch response\n\tprivate _bufferToMap(buffer: EventBuffer) {\n\t\treturn buffer.reduce((acc, curVal) => {\n\t\t\tconst [[key, value]] = Object.entries(curVal);\n\t\t\tacc[key] = value;\n\t\t\treturn acc;\n\t\t}, {});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}