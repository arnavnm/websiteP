{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n};\n\nvar lists = [];\n\nvar MethodEmbed =\n/** @class */\nfunction () {\n  function MethodEmbed(context, methodName) {\n    this.context = context;\n    this.methodName = methodName;\n    this._originalMethod = context[methodName].bind(context);\n  }\n\n  MethodEmbed.add = function (context, methodName, methodOverride) {\n    getInstance(context, methodName).set(methodOverride);\n  };\n\n  MethodEmbed.remove = function (context, methodName) {\n    getInstance(context, methodName).remove();\n  };\n\n  MethodEmbed.prototype.set = function (methodOverride) {\n    var _this = this;\n\n    this.context[this.methodName] = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return methodOverride(_this._originalMethod.apply(_this, __spread(args)));\n    };\n  };\n\n  MethodEmbed.prototype.remove = function () {\n    this.context[this.methodName] = this._originalMethod;\n  };\n\n  return MethodEmbed;\n}();\n\nexport { MethodEmbed };\n\nfunction getInstance(context, methodName) {\n  var instance = lists.filter(function (h) {\n    return h.context === context && h.methodName === methodName;\n  })[0];\n\n  if (!instance) {\n    instance = new MethodEmbed(context, methodName);\n    lists.push(instance);\n  }\n\n  return instance;\n}\n/**\n * @deprecated use named import\n */\n\n\nexport default MethodEmbed;","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,MAAM,GAAI,QAAQ,KAAKA,MAAd,IAAyB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;EAClD,IAAIC,CAAC,GAAG,OAAOC,MAAP,KAAkB,UAAlB,IAAgCH,CAAC,CAACG,MAAM,CAACC,QAAR,CAAzC;EACA,IAAI,CAACF,CAAL,EAAQ,OAAOF,CAAP;EACR,IAAIK,CAAC,GAAGH,CAAC,CAACI,IAAF,CAAON,CAAP,CAAR;EAAA,IAAmBO,CAAnB;EAAA,IAAsBC,EAAE,GAAG,EAA3B;EAAA,IAA+BC,CAA/B;;EACA,IAAI;IACA,OAAO,CAACR,CAAC,KAAK,KAAK,CAAX,IAAgBA,CAAC,KAAK,CAAvB,KAA6B,CAAC,CAACM,CAAC,GAAGF,CAAC,CAACK,IAAF,EAAL,EAAeC,IAApD;MAA0DH,EAAE,CAACI,IAAH,CAAQL,CAAC,CAACM,KAAV;IAA1D;EACH,CAFD,CAGA,OAAOC,KAAP,EAAc;IAAEL,CAAC,GAAG;MAAEK,KAAK,EAAEA;IAAT,CAAJ;EAAuB,CAHvC,SAIQ;IACJ,IAAI;MACA,IAAIP,CAAC,IAAI,CAACA,CAAC,CAACI,IAAR,KAAiBT,CAAC,GAAGG,CAAC,CAAC,QAAD,CAAtB,CAAJ,EAAuCH,CAAC,CAACI,IAAF,CAAOD,CAAP;IAC1C,CAFD,SAGQ;MAAE,IAAII,CAAJ,EAAO,MAAMA,CAAC,CAACK,KAAR;IAAgB;EACpC;;EACD,OAAON,EAAP;AACH,CAfD;;AAgBA,IAAIO,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;EAClD,KAAK,IAAIP,EAAE,GAAG,EAAT,EAAaH,CAAC,GAAG,CAAtB,EAAyBA,CAAC,GAAGW,SAAS,CAACC,MAAvC,EAA+CZ,CAAC,EAAhD;IAAoDG,EAAE,GAAGA,EAAE,CAACU,MAAH,CAAUnB,MAAM,CAACiB,SAAS,CAACX,CAAD,CAAV,CAAhB,CAAL;EAApD;;EACA,OAAOG,EAAP;AACH,CAHD;;AAIA,IAAIW,KAAK,GAAG,EAAZ;;AACA,IAAIC,WAAW;AAAG;AAAe,YAAY;EACzC,SAASA,WAAT,CAAqBC,OAArB,EAA8BC,UAA9B,EAA0C;IACtC,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKC,UAAL,GAAkBA,UAAlB;IACA,KAAKC,eAAL,GAAuBF,OAAO,CAACC,UAAD,CAAP,CAAoBE,IAApB,CAAyBH,OAAzB,CAAvB;EACH;;EACDD,WAAW,CAACK,GAAZ,GAAkB,UAAUJ,OAAV,EAAmBC,UAAnB,EAA+BI,cAA/B,EAA+C;IAC7DC,WAAW,CAACN,OAAD,EAAUC,UAAV,CAAX,CAAiCM,GAAjC,CAAqCF,cAArC;EACH,CAFD;;EAGAN,WAAW,CAACS,MAAZ,GAAqB,UAAUR,OAAV,EAAmBC,UAAnB,EAA+B;IAChDK,WAAW,CAACN,OAAD,EAAUC,UAAV,CAAX,CAAiCO,MAAjC;EACH,CAFD;;EAGAT,WAAW,CAACU,SAAZ,CAAsBF,GAAtB,GAA4B,UAAUF,cAAV,EAA0B;IAClD,IAAIK,KAAK,GAAG,IAAZ;;IACA,KAAKV,OAAL,CAAa,KAAKC,UAAlB,IAAgC,YAAY;MACxC,IAAIU,IAAI,GAAG,EAAX;;MACA,KAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGjB,SAAS,CAACC,MAAhC,EAAwCgB,EAAE,EAA1C,EAA8C;QAC1CD,IAAI,CAACC,EAAD,CAAJ,GAAWjB,SAAS,CAACiB,EAAD,CAApB;MACH;;MACD,OAAOP,cAAc,CAACK,KAAK,CAACR,eAAN,CAAsBW,KAAtB,CAA4BH,KAA5B,EAAmChB,QAAQ,CAACiB,IAAD,CAA3C,CAAD,CAArB;IACH,CAND;EAOH,CATD;;EAUAZ,WAAW,CAACU,SAAZ,CAAsBD,MAAtB,GAA+B,YAAY;IACvC,KAAKR,OAAL,CAAa,KAAKC,UAAlB,IAAgC,KAAKC,eAArC;EACH,CAFD;;EAGA,OAAOH,WAAP;AACH,CA1BgC,EAAjC;;AA2BA,SAASA,WAAT;;AACA,SAASO,WAAT,CAAqBN,OAArB,EAA8BC,UAA9B,EAA0C;EACtC,IAAIa,QAAQ,GAAGhB,KAAK,CAACiB,MAAN,CAAa,UAAUC,CAAV,EAAa;IAAE,OAAOA,CAAC,CAAChB,OAAF,KAAcA,OAAd,IAAyBgB,CAAC,CAACf,UAAF,KAAiBA,UAAjD;EAA8D,CAA1F,EAA4F,CAA5F,CAAf;;EACA,IAAI,CAACa,QAAL,EAAe;IACXA,QAAQ,GAAG,IAAIf,WAAJ,CAAgBC,OAAhB,EAAyBC,UAAzB,CAAX;IACAH,KAAK,CAACP,IAAN,CAAWuB,QAAX;EACH;;EACD,OAAOA,QAAP;AACH;AACD;AACA;AACA;;;AACA,eAAef,WAAf","names":["lists","context","methodName","_originalMethod","bind","MethodEmbed","methodOverride","getInstance","set","remove","args","_this","apply","__spread","instance","filter","h","push"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/analytics/src/utils/MethodEmbed.ts"],"sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nconst lists: MethodEmbed[] = [];\n\nexport class MethodEmbed {\n\tpublic context;\n\tpublic methodName;\n\tprivate _originalMethod;\n\tprivate _bindedMethod;\n\n\tstatic add(context, methodName, methodOverride) {\n\t\tgetInstance(context, methodName).set(methodOverride);\n\t}\n\n\tstatic remove(context, methodName) {\n\t\tgetInstance(context, methodName).remove();\n\t}\n\n\tconstructor(context, methodName) {\n\t\tthis.context = context;\n\t\tthis.methodName = methodName;\n\n\t\tthis._originalMethod = context[methodName].bind(context);\n\t}\n\n\tpublic set(methodOverride) {\n\t\tthis.context[this.methodName] = (...args) => {\n\t\t\treturn methodOverride(this._originalMethod(...args));\n\t\t};\n\t}\n\n\tpublic remove() {\n\t\tthis.context[this.methodName] = this._originalMethod;\n\t}\n}\n\nfunction getInstance(context, methodName): MethodEmbed {\n\tlet instance = lists.filter(\n\t\th => h.context === context && h.methodName === methodName\n\t)[0];\n\n\tif (!instance) {\n\t\tinstance = new MethodEmbed(context, methodName);\n\t\tlists.push(instance);\n\t}\n\n\treturn instance;\n}\n\n/**\n * @deprecated use named import\n */\nexport default MethodEmbed;\n"]},"metadata":{},"sourceType":"module"}