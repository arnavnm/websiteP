{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { HeadObjectOutput, HeadObjectRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlHeadObjectCommand, serializeAws_restXmlHeadObjectCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getSsecPlugin } from \"@aws-sdk/middleware-ssec\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>The HEAD operation retrieves metadata from an object without returning the object\n *          itself. This operation is useful if you're only interested in an object's metadata. To use\n *          HEAD, you must have READ access to the object.</p>\n *\n *          <p>A <code>HEAD</code> request has the same options as a <code>GET</code> operation on an\n *          object. The response is identical to the <code>GET</code> response except that there is no\n *          response body.</p>\n *\n *          <p>If you encrypt an object by using server-side encryption with customer-provided\n *          encryption keys (SSE-C) when you store the object in Amazon S3, then when you retrieve the\n *          metadata from the object, you must use the following headers:</p>\n *          <ul>\n *             <li>\n *                <p>x-amz-server-side-encryption-customer-algorithm</p>\n *             </li>\n *             <li>\n *                <p>x-amz-server-side-encryption-customer-key</p>\n *             </li>\n *             <li>\n *                <p>x-amz-server-side-encryption-customer-key-MD5</p>\n *             </li>\n *          </ul>\n *          <p>For more information about SSE-C, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html\">Server-Side Encryption (Using\n *             Customer-Provided Encryption Keys)</a>.</p>\n *          <note>\n *             <p>Encryption request headers, like <code>x-amz-server-side-encryption</code>, should\n *             not be sent for GET requests if your object uses server-side encryption with CMKs stored\n *             in AWS KMS (SSE-KMS) or server-side encryption with Amazon S3–managed encryption keys\n *             (SSE-S3). If your object does use these types of keys, you’ll get an HTTP 400 BadRequest\n *             error.</p>\n *          </note>\n *\n *\n *\n *\n *\n *\n *\n *          <p>Request headers are limited to 8 KB in size. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonRequestHeaders.html\">Common Request\n *             Headers</a>.</p>\n *          <p>Consider the following when using request headers:</p>\n *          <ul>\n *             <li>\n *                <p> Consideration 1 – If both of the <code>If-Match</code> and\n *                   <code>If-Unmodified-Since</code> headers are present in the request as\n *                follows:</p>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <code>If-Match</code> condition evaluates to <code>true</code>, and;</p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>If-Unmodified-Since</code> condition evaluates to\n *                      <code>false</code>;</p>\n *                   </li>\n *                </ul>\n *                <p>Then Amazon S3 returns <code>200 OK</code> and the data requested.</p>\n *             </li>\n *             <li>\n *                <p> Consideration 2 – If both of the <code>If-None-Match</code> and\n *                   <code>If-Modified-Since</code> headers are present in the request as\n *                follows:</p>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <code>If-None-Match</code> condition evaluates to <code>false</code>,\n *                      and;</p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>If-Modified-Since</code> condition evaluates to\n *                      <code>true</code>;</p>\n *                   </li>\n *                </ul>\n *                <p>Then Amazon S3 returns the <code>304 Not Modified</code> response code.</p>\n *             </li>\n *          </ul>\n *\n *          <p>For more information about conditional requests, see <a href=\"https://tools.ietf.org/html/rfc7232\">RFC 7232</a>.</p>\n *\n *          <p>\n *             <b>Permissions</b>\n *          </p>\n *          <p>You need the <code>s3:GetObject</code> permission for this operation. For more\n *          information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html\">Specifying Permissions\n *             in a Policy</a>. If the object you request does not exist, the error Amazon S3 returns\n *          depends on whether you also have the s3:ListBucket permission.</p>\n *          <ul>\n *             <li>\n *                <p>If you have the <code>s3:ListBucket</code> permission on the bucket, Amazon S3 returns\n *                an HTTP status code 404 (\"no such key\") error.</p>\n *             </li>\n *             <li>\n *                <p>If you don’t have the <code>s3:ListBucket</code> permission, Amazon S3 returns an HTTP\n *                status code 403 (\"access denied\") error.</p>\n *             </li>\n *          </ul>\n *\n *          <p>The following operation is related to <code>HeadObject</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html\">GetObject</a>\n *                </p>\n *             </li>\n *          </ul>\n */\n\nvar HeadObjectCommand =\n/** @class */\nfunction (_super) {\n  __extends(HeadObjectCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function HeadObjectCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  HeadObjectCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getSsecPlugin(configuration));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"HeadObjectCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: HeadObjectRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: HeadObjectOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  HeadObjectCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlHeadObjectCommand(input, context);\n  };\n\n  HeadObjectCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlHeadObjectCommand(output, context);\n  };\n\n  return HeadObjectCommand;\n}($Command);\n\nexport { HeadObjectCommand };","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,oBAApD;AACA,SAASC,uCAAT,EAAkDC,qCAAlD,QAAgG,0BAAhG;AACA,SAASC,uBAAT,QAAwC,qCAAxC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApiBAAiB;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACrDX,SAAS,CAACU,iBAAD,EAAoBC,MAApB,CAAT,CADqD,CAErD;EACA;;;EACA,SAASD,iBAAT,CAA2BE,KAA3B,EAAkC;IAC9B,IAAIC,KAAK,GACT;IACAF,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;IAGAD,KAAK,CAACD,KAAN,GAAcA,KAAd;IACA,OAAOC,KAAP,CAL8B,CAM9B;EACH;EACD;AACJ;AACA;;;EACIH,iBAAiB,CAACK,SAAlB,CAA4BC,iBAA5B,GAAgD,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;IAC3F,KAAKC,eAAL,CAAqBC,GAArB,CAAyBf,cAAc,CAACY,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,KAAKH,eAAL,CAAqBC,GAArB,CAAyBd,aAAa,CAACW,aAAD,CAAtC;IACA,KAAKE,eAAL,CAAqBC,GAArB,CAAyBhB,uBAAuB,CAACa,aAAD,CAAhD;IACA,IAAIM,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;IACA,IAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;IACA,IAAIC,UAAU,GAAG,UAAjB;IACA,IAAIC,WAAW,GAAG,mBAAlB;IACA,IAAIC,uBAAuB,GAAG;MAC1BH,MAAM,EAAEA,MADkB;MAE1BC,UAAU,EAAEA,UAFc;MAG1BC,WAAW,EAAEA,WAHa;MAI1BE,uBAAuB,EAAE5B,iBAAiB,CAAC6B,kBAJjB;MAK1BC,wBAAwB,EAAE/B,gBAAgB,CAAC8B;IALjB,CAA9B;IAOA,IAAIE,cAAc,GAAGf,aAAa,CAACe,cAAnC;IACA,OAAOT,KAAK,CAACU,OAAN,CAAc,UAAUC,OAAV,EAAmB;MACpC,OAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuChB,OAAO,IAAI,EAAlD,CAAP;IACH,CAFM,EAEJU,uBAFI,CAAP;EAGH,CAnBD;;EAoBAnB,iBAAiB,CAACK,SAAlB,CAA4BO,SAA5B,GAAwC,UAAUV,KAAV,EAAiByB,OAAjB,EAA0B;IAC9D,OAAOjC,qCAAqC,CAACQ,KAAD,EAAQyB,OAAR,CAA5C;EACH,CAFD;;EAGA3B,iBAAiB,CAACK,SAAlB,CAA4BQ,WAA5B,GAA0C,UAAUe,MAAV,EAAkBD,OAAlB,EAA2B;IACjE,OAAOlC,uCAAuC,CAACmC,MAAD,EAASD,OAAT,CAA9C;EACH,CAFD;;EAGA,OAAO3B,iBAAP;AACH,CA1CsC,CA0CrCD,QA1CqC,CAAvC;;AA2CA,SAASC,iBAAT","names":["HeadObjectOutput","HeadObjectRequest","deserializeAws_restXmlHeadObjectCommand","serializeAws_restXmlHeadObjectCommand","getBucketEndpointPlugin","getSerdePlugin","getSsecPlugin","Command","$Command","__extends","input","_super","_this","HeadObjectCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/client-s3/commands/HeadObjectCommand.ts"],"sourcesContent":["import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { HeadObjectOutput, HeadObjectRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlHeadObjectCommand,\n  serializeAws_restXmlHeadObjectCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getSsecPlugin } from \"@aws-sdk/middleware-ssec\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type HeadObjectCommandInput = HeadObjectRequest;\nexport type HeadObjectCommandOutput = HeadObjectOutput & __MetadataBearer;\n\n/**\n * <p>The HEAD operation retrieves metadata from an object without returning the object\n *          itself. This operation is useful if you're only interested in an object's metadata. To use\n *          HEAD, you must have READ access to the object.</p>\n *\n *          <p>A <code>HEAD</code> request has the same options as a <code>GET</code> operation on an\n *          object. The response is identical to the <code>GET</code> response except that there is no\n *          response body.</p>\n *\n *          <p>If you encrypt an object by using server-side encryption with customer-provided\n *          encryption keys (SSE-C) when you store the object in Amazon S3, then when you retrieve the\n *          metadata from the object, you must use the following headers:</p>\n *          <ul>\n *             <li>\n *                <p>x-amz-server-side-encryption-customer-algorithm</p>\n *             </li>\n *             <li>\n *                <p>x-amz-server-side-encryption-customer-key</p>\n *             </li>\n *             <li>\n *                <p>x-amz-server-side-encryption-customer-key-MD5</p>\n *             </li>\n *          </ul>\n *          <p>For more information about SSE-C, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html\">Server-Side Encryption (Using\n *             Customer-Provided Encryption Keys)</a>.</p>\n *          <note>\n *             <p>Encryption request headers, like <code>x-amz-server-side-encryption</code>, should\n *             not be sent for GET requests if your object uses server-side encryption with CMKs stored\n *             in AWS KMS (SSE-KMS) or server-side encryption with Amazon S3–managed encryption keys\n *             (SSE-S3). If your object does use these types of keys, you’ll get an HTTP 400 BadRequest\n *             error.</p>\n *          </note>\n *\n *\n *\n *\n *\n *\n *\n *          <p>Request headers are limited to 8 KB in size. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonRequestHeaders.html\">Common Request\n *             Headers</a>.</p>\n *          <p>Consider the following when using request headers:</p>\n *          <ul>\n *             <li>\n *                <p> Consideration 1 – If both of the <code>If-Match</code> and\n *                   <code>If-Unmodified-Since</code> headers are present in the request as\n *                follows:</p>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <code>If-Match</code> condition evaluates to <code>true</code>, and;</p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>If-Unmodified-Since</code> condition evaluates to\n *                      <code>false</code>;</p>\n *                   </li>\n *                </ul>\n *                <p>Then Amazon S3 returns <code>200 OK</code> and the data requested.</p>\n *             </li>\n *             <li>\n *                <p> Consideration 2 – If both of the <code>If-None-Match</code> and\n *                   <code>If-Modified-Since</code> headers are present in the request as\n *                follows:</p>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <code>If-None-Match</code> condition evaluates to <code>false</code>,\n *                      and;</p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>If-Modified-Since</code> condition evaluates to\n *                      <code>true</code>;</p>\n *                   </li>\n *                </ul>\n *                <p>Then Amazon S3 returns the <code>304 Not Modified</code> response code.</p>\n *             </li>\n *          </ul>\n *\n *          <p>For more information about conditional requests, see <a href=\"https://tools.ietf.org/html/rfc7232\">RFC 7232</a>.</p>\n *\n *          <p>\n *             <b>Permissions</b>\n *          </p>\n *          <p>You need the <code>s3:GetObject</code> permission for this operation. For more\n *          information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html\">Specifying Permissions\n *             in a Policy</a>. If the object you request does not exist, the error Amazon S3 returns\n *          depends on whether you also have the s3:ListBucket permission.</p>\n *          <ul>\n *             <li>\n *                <p>If you have the <code>s3:ListBucket</code> permission on the bucket, Amazon S3 returns\n *                an HTTP status code 404 (\"no such key\") error.</p>\n *             </li>\n *             <li>\n *                <p>If you don’t have the <code>s3:ListBucket</code> permission, Amazon S3 returns an HTTP\n *                status code 403 (\"access denied\") error.</p>\n *             </li>\n *          </ul>\n *\n *          <p>The following operation is related to <code>HeadObject</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html\">GetObject</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class HeadObjectCommand extends $Command<\n  HeadObjectCommandInput,\n  HeadObjectCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: HeadObjectCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<HeadObjectCommandInput, HeadObjectCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getSsecPlugin(configuration));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"HeadObjectCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: HeadObjectRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: HeadObjectOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: HeadObjectCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlHeadObjectCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<HeadObjectCommandOutput> {\n    return deserializeAws_restXmlHeadObjectCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}