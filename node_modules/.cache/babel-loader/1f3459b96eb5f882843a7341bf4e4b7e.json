{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport Observable from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, Constants, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport { CONNECTION_STATE_CHANGE, CONTROL_MSG } from '../../index';\nimport { AMPLIFY_SYMBOL, AWS_APPSYNC_REALTIME_HEADERS, CONNECTION_INIT_TIMEOUT, DEFAULT_KEEP_ALIVE_TIMEOUT, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT, MAX_DELAY_MS, MESSAGE_TYPES, NON_RETRYABLE_CODES, SOCKET_STATUS, START_ACK_TIMEOUT, SUBSCRIPTION_STATUS } from './constants';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../../utils/ConnectionStateMonitor';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\n\nvar dispatchApiEvent = function dispatchApiEvent(event, data, message) {\n  Hub.dispatch('api', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\nvar standardDomainPattern = /^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com\\/graphql$/i;\nvar customDomainPath = '/realtime';\n\nvar AWSAppSyncRealTimeProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSAppSyncRealTimeProvider, _super);\n\n  function AWSAppSyncRealTimeProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this.socketStatus = SOCKET_STATUS.CLOSED;\n    _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n    _this.subscriptionObserverMap = new Map();\n    _this.promiseArray = [];\n    _this.connectionStateMonitor = new ConnectionStateMonitor(); // Monitor the connection state and pass changes along to Hub\n\n    _this.connectionStateMonitor.connectionStateObservable.subscribe(function (ConnectionState) {\n      dispatchApiEvent(CONNECTION_STATE_CHANGE, {\n        provider: _this,\n        connectionState: ConnectionState\n      }, \"Connection state is \" + ConnectionState);\n    });\n\n    return _this;\n  }\n\n  AWSAppSyncRealTimeProvider.prototype.getNewWebSocket = function (url, protocol) {\n    return new WebSocket(url, protocol);\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncRealTimeProvider';\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n    throw new Error('Not used here');\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  }; // Check if url matches standard domain pattern\n\n\n  AWSAppSyncRealTimeProvider.prototype.isCustomDomain = function (url) {\n    return url.match(standardDomainPattern) === null;\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options) {\n    var _this = this;\n\n    var appSyncGraphqlEndpoint = options === null || options === void 0 ? void 0 : options.appSyncGraphqlEndpoint;\n    return new Observable(function (observer) {\n      if (!options || !appSyncGraphqlEndpoint) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\"))]\n        });\n        observer.complete();\n      } else {\n        var subscriptionId_1 = uuid();\n\n        _this._startSubscriptionWithAWSAppSyncRealTime({\n          options: options,\n          observer: observer,\n          subscriptionId: subscriptionId_1\n        }).catch(function (err) {\n          observer.error({\n            errors: [__assign({}, new GraphQLError(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR + \": \" + err))]\n          });\n\n          _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\n          observer.complete();\n        });\n\n        return function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var subscriptionState, err_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2, 3, 4]); // Waiting that subscription has been connected before trying to unsubscribe\n\n\n                  return [4\n                  /*yield*/\n                  , this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n\n                case 1:\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  _a.sent();\n\n                  subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n\n                  if (!subscriptionState) {\n                    // subscription already unsubscribed\n                    return [2\n                    /*return*/\n                    ];\n                  }\n\n                  if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                  } else {\n                    throw new Error('Subscription never connected');\n                  }\n\n                  return [3\n                  /*break*/\n                  , 4];\n\n                case 2:\n                  err_1 = _a.sent();\n                  logger.debug(\"Error while unsubscribing \" + err_1);\n                  return [3\n                  /*break*/\n                  , 4];\n\n                case 3:\n                  this._removeSubscriptionObserver(subscriptionId_1);\n\n                  return [7\n                  /*endfinally*/\n                  ];\n\n                case 4:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        };\n      }\n    });\n  };\n\n  Object.defineProperty(AWSAppSyncRealTimeProvider.prototype, \"isSSLEnabled\", {\n    get: function get() {\n      return !this.options.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n    var options = _a.options,\n        observer = _a.observer,\n        subscriptionId = _a.subscriptionId;\n\n    var _b, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _d, graphql_headers, _e, additionalHeaders, subscriptionState, data, dataString, headerObj, _f, _g, subscriptionMessage, stringToAWSRealTime, err_2, message, subscriptionFailedCallback_1, _h, subscriptionFailedCallback, subscriptionReadyCallback;\n\n      var _j;\n\n      var _this = this;\n\n      return __generator(this, function (_k) {\n        switch (_k.label) {\n          case 0:\n            appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _d = options.graphql_headers, graphql_headers = _d === void 0 ? function () {\n              return {};\n            } : _d, _e = options.additionalHeaders, additionalHeaders = _e === void 0 ? {} : _e;\n            subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n            data = {\n              query: query,\n              variables: variables\n            }; // Having a subscription id map will make it simple to forward messages received\n\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionState: subscriptionState,\n              startAckTimeoutId: undefined\n            });\n            dataString = JSON.stringify(data);\n            _f = [{}];\n            return [4\n            /*yield*/\n            , this._awsRealTimeHeaderBasedAuth({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              payload: dataString,\n              canonicalUri: '',\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n\n          case 1:\n            _g = [__assign.apply(void 0, _f.concat([_k.sent()]))];\n            return [4\n            /*yield*/\n            , graphql_headers()];\n\n          case 2:\n            headerObj = __assign.apply(void 0, [__assign.apply(void 0, [__assign.apply(void 0, _g.concat([_k.sent()])), additionalHeaders]), (_j = {}, _j[USER_AGENT_HEADER] = Constants.userAgent, _j)]);\n            subscriptionMessage = {\n              id: subscriptionId,\n              payload: {\n                data: dataString,\n                extensions: {\n                  authorization: __assign({}, headerObj)\n                }\n              },\n              type: MESSAGE_TYPES.GQL_START\n            };\n            stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n            _k.label = 3;\n\n          case 3:\n            _k.trys.push([3, 5,, 6]);\n\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            return [4\n            /*yield*/\n            , this._initializeWebSocketConnection({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              region: region,\n              additionalHeaders: additionalHeaders\n            })];\n\n          case 4:\n            _k.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            err_2 = _k.sent();\n            logger.debug({\n              err: err_2\n            });\n            message = (_b = err_2['message']) !== null && _b !== void 0 ? _b : '';\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            observer.error({\n              errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + message))]\n            });\n            observer.complete();\n            subscriptionFailedCallback_1 = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback; // Notify concurrent unsubscription\n\n            if (typeof subscriptionFailedCallback_1 === 'function') {\n              subscriptionFailedCallback_1();\n            }\n\n            return [2\n            /*return*/\n            ];\n\n          case 6:\n            _h = (_c = this.subscriptionObserverMap.get(subscriptionId)) !== null && _c !== void 0 ? _c : {}, subscriptionFailedCallback = _h.subscriptionFailedCallback, subscriptionReadyCallback = _h.subscriptionReadyCallback; // This must be done before sending the message in order to be listening immediately\n\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              query: query !== null && query !== void 0 ? query : '',\n              variables: variables !== null && variables !== void 0 ? variables : {},\n              subscriptionReadyCallback: subscriptionReadyCallback,\n              subscriptionFailedCallback: subscriptionFailedCallback,\n              startAckTimeoutId: setTimeout(function () {\n                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n              }, START_ACK_TIMEOUT)\n            });\n\n            if (this.awsRealTimeSocket) {\n              this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // Waiting that subscription has been connected before trying to unsubscribe\n\n\n  AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var subscriptionObserver, subscriptionState;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n\n        if (subscriptionObserver) {\n          subscriptionState = subscriptionObserver.subscriptionState; // This in case unsubscribe is invoked before sending start subscription message\n\n          if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n            return [2\n            /*return*/\n            , new Promise(function (res, rej) {\n              var observer = subscriptionObserver.observer,\n                  subscriptionState = subscriptionObserver.subscriptionState,\n                  variables = subscriptionObserver.variables,\n                  query = subscriptionObserver.query;\n\n              _this.subscriptionObserverMap.set(subscriptionId, {\n                observer: observer,\n                subscriptionState: subscriptionState,\n                variables: variables,\n                query: query,\n                subscriptionReadyCallback: res,\n                subscriptionFailedCallback: rej\n              });\n            })];\n          }\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n    try {\n      if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN && this.socketStatus === SOCKET_STATUS.READY) {\n        // Preparing unsubscribe message to stop receiving messages for that subscription\n        var unsubscribeMessage = {\n          id: subscriptionId,\n          type: MESSAGE_TYPES.GQL_STOP\n        };\n        var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n        this.awsRealTimeSocket.send(stringToAWSRealTime);\n      }\n    } catch (err) {\n      // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n      logger.debug({\n        err: err\n      });\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n    this.subscriptionObserverMap.delete(subscriptionId); // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n\n    setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n    if (this.subscriptionObserverMap.size > 0) {\n      // Active subscriptions on the WebSocket\n      return;\n    }\n\n    if (!this.awsRealTimeSocket) {\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      return;\n    }\n\n    this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n\n    if (this.awsRealTimeSocket.bufferedAmount > 0) {\n      // Still data on the WebSocket\n      setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    } else {\n      logger.debug('closing WebSocket...');\n\n      if (this.keepAliveTimeoutId) {\n        clearTimeout(this.keepAliveTimeoutId);\n      }\n\n      if (this.keepAliveAlertTimeoutId) {\n        clearTimeout(this.keepAliveAlertTimeoutId);\n      }\n\n      var tempSocket = this.awsRealTimeSocket; // Cleaning callbacks to avoid race condition, socket still exists\n\n      tempSocket.onclose = null;\n      tempSocket.onerror = null;\n      tempSocket.close(1000);\n      this.awsRealTimeSocket = undefined;\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n    var _this = this;\n\n    logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n\n    var _a = JSON.parse(message.data),\n        _b = _a.id,\n        id = _b === void 0 ? '' : _b,\n        payload = _a.payload,\n        type = _a.type;\n\n    var _c = this.subscriptionObserverMap.get(id) || {},\n        _d = _c.observer,\n        observer = _d === void 0 ? null : _d,\n        _e = _c.query,\n        query = _e === void 0 ? '' : _e,\n        _f = _c.variables,\n        variables = _f === void 0 ? {} : _f,\n        startAckTimeoutId = _c.startAckTimeoutId,\n        subscriptionReadyCallback = _c.subscriptionReadyCallback,\n        subscriptionFailedCallback = _c.subscriptionFailedCallback;\n\n    logger.debug({\n      id: id,\n      observer: observer,\n      query: query,\n      variables: variables\n    });\n\n    if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n      if (observer) {\n        observer.next(payload);\n      } else {\n        logger.debug(\"observer not found for id: \" + id);\n      }\n\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.GQL_START_ACK) {\n      logger.debug(\"subscription ready for \" + JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n\n      if (typeof subscriptionReadyCallback === 'function') {\n        subscriptionReadyCallback();\n      }\n\n      if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n      dispatchApiEvent(CONTROL_MSG.SUBSCRIPTION_ACK, {\n        query: query,\n        variables: variables\n      }, 'Connection established for subscription');\n      var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: undefined,\n          subscriptionState: subscriptionState,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback\n        });\n      }\n\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n      if (this.keepAliveTimeoutId) clearTimeout(this.keepAliveTimeoutId);\n      if (this.keepAliveAlertTimeoutId) clearTimeout(this.keepAliveAlertTimeoutId);\n      this.keepAliveTimeoutId = setTimeout(function () {\n        return _this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT);\n      }, this.keepAliveTimeout);\n      this.keepAliveAlertTimeoutId = setTimeout(function () {\n        _this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n      }, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.GQL_ERROR) {\n      var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n\n      if (observer) {\n        this.subscriptionObserverMap.set(id, {\n          observer: observer,\n          query: query,\n          variables: variables,\n          startAckTimeoutId: startAckTimeoutId,\n          subscriptionReadyCallback: subscriptionReadyCallback,\n          subscriptionFailedCallback: subscriptionFailedCallback,\n          subscriptionState: subscriptionState\n        });\n        observer.error({\n          errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload)))]\n        });\n        if (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n        observer.complete();\n\n        if (typeof subscriptionFailedCallback === 'function') {\n          subscriptionFailedCallback();\n        }\n      }\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n    logger.debug(\"Disconnect error: \" + msg);\n    this.subscriptionObserverMap.forEach(function (_a) {\n      var observer = _a.observer;\n\n      if (observer && !observer.closed) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(msg))]\n        });\n      }\n    });\n    this.subscriptionObserverMap.clear();\n\n    if (this.awsRealTimeSocket) {\n      this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n      this.awsRealTimeSocket.close();\n    }\n\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n    var subscriptionObserver = this.subscriptionObserverMap.get(subscriptionId);\n\n    if (subscriptionObserver) {\n      var observer = subscriptionObserver.observer,\n          query = subscriptionObserver.query,\n          variables = subscriptionObserver.variables;\n\n      if (!observer) {\n        return;\n      }\n\n      this.subscriptionObserverMap.set(subscriptionId, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        subscriptionState: SUBSCRIPTION_STATUS.FAILED\n      });\n\n      if (observer && !observer.closed) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscription timeout \" + JSON.stringify({\n            query: query,\n            variables: variables\n          })))]\n        }); // Cleanup will be automatically executed\n\n        observer.complete();\n      }\n\n      logger.debug('timeoutStartSubscription', JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n    var _this = this;\n\n    var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n        authenticationType = _a.authenticationType,\n        apiKey = _a.apiKey,\n        region = _a.region,\n        additionalHeaders = _a.additionalHeaders;\n\n    if (this.socketStatus === SOCKET_STATUS.READY) {\n      return;\n    }\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var payloadString, headerString, _a, _b, headerQs, payloadQs, discoverableEndpoint, protocol, awsRealTimeUrl, err_3;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              this.promiseArray.push({\n                res: res,\n                rej: rej\n              });\n              if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3\n              /*break*/\n              , 5];\n              _c.label = 1;\n\n            case 1:\n              _c.trys.push([1, 4,, 5]);\n\n              this.socketStatus = SOCKET_STATUS.CONNECTING;\n              payloadString = '{}';\n              _b = (_a = JSON).stringify;\n              return [4\n              /*yield*/\n              , this._awsRealTimeHeaderBasedAuth({\n                authenticationType: authenticationType,\n                payload: payloadString,\n                canonicalUri: '/connect',\n                apiKey: apiKey,\n                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                region: region,\n                additionalHeaders: additionalHeaders\n              })];\n\n            case 2:\n              headerString = _b.apply(_a, [_c.sent()]);\n              headerQs = Buffer.from(headerString).toString('base64');\n              payloadQs = Buffer.from(payloadString).toString('base64');\n              discoverableEndpoint = appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '';\n\n              if (this.isCustomDomain(discoverableEndpoint)) {\n                discoverableEndpoint = discoverableEndpoint.concat(customDomainPath);\n              } else {\n                discoverableEndpoint = discoverableEndpoint.replace('appsync-api', 'appsync-realtime-api').replace('gogi-beta', 'grt-beta');\n              }\n\n              protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n              discoverableEndpoint = discoverableEndpoint.replace('https://', protocol).replace('http://', protocol);\n              awsRealTimeUrl = discoverableEndpoint + \"?header=\" + headerQs + \"&payload=\" + payloadQs;\n              return [4\n              /*yield*/\n              , this._initializeRetryableHandshake(awsRealTimeUrl)];\n\n            case 3:\n              _c.sent();\n\n              this.promiseArray.forEach(function (_a) {\n                var res = _a.res;\n                logger.debug('Notifying connection successful');\n                res();\n              });\n              this.socketStatus = SOCKET_STATUS.READY;\n              this.promiseArray = [];\n              return [3\n              /*break*/\n              , 5];\n\n            case 4:\n              err_3 = _c.sent();\n              this.promiseArray.forEach(function (_a) {\n                var rej = _a.rej;\n                return rej(err_3);\n              });\n              this.promiseArray = [];\n\n              if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                this.awsRealTimeSocket.close(3001);\n              }\n\n              this.awsRealTimeSocket = undefined;\n              this.socketStatus = SOCKET_STATUS.CLOSED;\n              return [3\n              /*break*/\n              , 5];\n\n            case 5:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (awsRealTimeUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug(\"Initializaling retryable Handshake\");\n            return [4\n            /*yield*/\n            , jitteredExponentialRetry(this._initializeHandshake.bind(this), [awsRealTimeUrl], MAX_DELAY_MS)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (awsRealTimeUrl) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4, _a, errorType, errorCode;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , function () {\n              return new Promise(function (res, rej) {\n                var newSocket = _this.getNewWebSocket(awsRealTimeUrl, 'graphql-ws');\n\n                newSocket.onerror = function () {\n                  logger.debug(\"WebSocket connection error\");\n                };\n\n                newSocket.onclose = function () {\n                  _this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n\n                  rej(new Error('Connection handshake error'));\n                };\n\n                newSocket.onopen = function () {\n                  _this.awsRealTimeSocket = newSocket;\n                  return res();\n                };\n              });\n            }()];\n\n          case 2:\n            _b.sent(); // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n\n\n            return [4\n            /*yield*/\n            , function () {\n              return new Promise(function (res, rej) {\n                if (_this.awsRealTimeSocket) {\n                  var ackOk_1 = false;\n\n                  _this.awsRealTimeSocket.onerror = function (error) {\n                    logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                  };\n\n                  _this.awsRealTimeSocket.onclose = function (event) {\n                    logger.debug(\"WebSocket closed \" + event.reason);\n                    rej(new Error(JSON.stringify(event)));\n                  };\n\n                  _this.awsRealTimeSocket.onmessage = function (message) {\n                    logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                    var data = JSON.parse(message.data);\n                    var type = data.type,\n                        _a = data.payload,\n                        _b = (_a === void 0 ? {} : _a).connectionTimeoutMs,\n                        connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                      ackOk_1 = true;\n\n                      if (_this.awsRealTimeSocket) {\n                        _this.keepAliveTimeout = connectionTimeoutMs;\n                        _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);\n\n                        _this.awsRealTimeSocket.onerror = function (err) {\n                          logger.debug(err);\n\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n\n                        _this.awsRealTimeSocket.onclose = function (event) {\n                          logger.debug(\"WebSocket closed \" + event.reason);\n\n                          _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                        };\n                      }\n\n                      res('Cool, connected to AWS AppSyncRealTime');\n                      return;\n                    }\n\n                    if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                      var _c = data.payload,\n                          _d = (_c === void 0 ? {} : _c).errors,\n                          _e = __read(_d === void 0 ? [] : _d, 1),\n                          _f = _e[0],\n                          _g = _f === void 0 ? {} : _f,\n                          _h = _g.errorType,\n                          errorType = _h === void 0 ? '' : _h,\n                          _j = _g.errorCode,\n                          errorCode = _j === void 0 ? 0 : _j;\n\n                      rej({\n                        errorType: errorType,\n                        errorCode: errorCode\n                      });\n                    }\n                  };\n\n                  var gqlInit = {\n                    type: MESSAGE_TYPES.GQL_CONNECTION_INIT\n                  };\n\n                  _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n\n                  setTimeout(checkAckOk.bind(_this, ackOk_1), CONNECTION_INIT_TIMEOUT);\n                }\n\n                function checkAckOk(ackOk) {\n                  if (!ackOk) {\n                    this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_FAILED);\n                    rej(new Error(\"Connection timeout: ack from AWSRealTime was not received on \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                  }\n                }\n              });\n            }()];\n\n          case 3:\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            err_4 = _b.sent();\n            _a = err_4, errorType = _a.errorType, errorCode = _a.errorCode;\n\n            if (NON_RETRYABLE_CODES.includes(errorCode)) {\n              throw new NonRetryableError(errorType);\n            } else if (errorType) {\n              throw new Error(errorType);\n            } else {\n              throw err_4;\n            }\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n    var authenticationType = _a.authenticationType,\n        payload = _a.payload,\n        canonicalUri = _a.canonicalUri,\n        appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n        apiKey = _a.apiKey,\n        region = _a.region,\n        additionalHeaders = _a.additionalHeaders;\n    return __awaiter(this, void 0, void 0, function () {\n      var headerHandler, handler, host, result;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            headerHandler = {\n              API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n              AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n              OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n              AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n              AWS_LAMBDA: this._customAuthHeader\n            };\n            if (!(!authenticationType || !headerHandler[authenticationType])) return [3\n            /*break*/\n            , 1];\n            logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n            return [2\n            /*return*/\n            , ''];\n\n          case 1:\n            handler = headerHandler[authenticationType];\n            host = url.parse(appSyncGraphqlEndpoint !== null && appSyncGraphqlEndpoint !== void 0 ? appSyncGraphqlEndpoint : '').host;\n            logger.debug(\"Authenticating with \" + authenticationType);\n            return [4\n            /*yield*/\n            , handler({\n              payload: payload,\n              canonicalUri: canonicalUri,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              apiKey: apiKey,\n              region: region,\n              host: host,\n              additionalHeaders: additionalHeaders\n            })];\n\n          case 2:\n            result = _b.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var session;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Auth.currentSession()];\n\n          case 1:\n            session = _b.sent();\n            return [2\n            /*return*/\n            , {\n              Authorization: session.getAccessToken().getJwtToken(),\n              host: host\n            }];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var token, federatedInfo, currentUser;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Cache.getItem('federatedInfo')];\n\n          case 1:\n            federatedInfo = _b.sent();\n            if (!federatedInfo) return [3\n            /*break*/\n            , 2];\n            token = federatedInfo.token;\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , Auth.currentAuthenticatedUser()];\n\n          case 3:\n            currentUser = _b.sent();\n\n            if (currentUser) {\n              token = currentUser.token;\n            }\n\n            _b.label = 4;\n\n          case 4:\n            if (!token) {\n              throw new Error('No federated jwt');\n            }\n\n            return [2\n            /*return*/\n            , {\n              Authorization: token,\n              host: host\n            }];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n    var apiKey = _a.apiKey,\n        host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var dt, dtStr;\n      return __generator(this, function (_b) {\n        dt = new Date();\n        dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n        return [2\n        /*return*/\n        , {\n          host: host,\n          'x-amz-date': dtStr,\n          'x-api-key': apiKey\n        }];\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n    var payload = _a.payload,\n        canonicalUri = _a.canonicalUri,\n        appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n        region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointInfo, credentialsOK, creds, request, signed_params;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            endpointInfo = {\n              region: region,\n              service: 'appsync'\n            };\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _b.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            return [4\n            /*yield*/\n            , Credentials.get().then(function (credentials) {\n              var _a = credentials,\n                  secretAccessKey = _a.secretAccessKey,\n                  accessKeyId = _a.accessKeyId,\n                  sessionToken = _a.sessionToken;\n              return {\n                secret_key: secretAccessKey,\n                access_key: accessKeyId,\n                session_token: sessionToken\n              };\n            })];\n\n          case 2:\n            creds = _b.sent();\n            request = {\n              url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n              data: payload,\n              method: 'POST',\n              headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS)\n            };\n            signed_params = Signer.sign(request, creds, endpointInfo);\n            return [2\n            /*return*/\n            , signed_params.headers];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._customAuthHeader = function (_a) {\n    var host = _a.host,\n        additionalHeaders = _a.additionalHeaders;\n\n    if (!additionalHeaders || !additionalHeaders['Authorization']) {\n      throw new Error('No auth token specified');\n    }\n\n    return {\n      Authorization: additionalHeaders.Authorization,\n      host: host\n    };\n  };\n  /**\n   * @private\n   */\n\n\n  AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n\n  return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider);\n\nexport { AWSAppSyncRealTimeProvider };","map":{"version":3,"mappings":"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","names":["Observable","GraphQLError","url","v4","uuid","Buffer","Logger","Credentials","Signer","Hub","Constants","USER_AGENT_HEADER","jitteredExponentialRetry","NonRetryableError","Cache","Auth","AbstractPubSubProvider","CONNECTION_STATE_CHANGE","CONTROL_MSG","AMPLIFY_SYMBOL","AWS_APPSYNC_REALTIME_HEADERS","CONNECTION_INIT_TIMEOUT","DEFAULT_KEEP_ALIVE_TIMEOUT","DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT","MAX_DELAY_MS","MESSAGE_TYPES","NON_RETRYABLE_CODES","SOCKET_STATUS","START_ACK_TIMEOUT","SUBSCRIPTION_STATUS","ConnectionStateMonitor","CONNECTION_CHANGE","logger","dispatchApiEvent","event","data","message","dispatch","standardDomainPattern","customDomainPath","__extends","options","_super","_this","CLOSED","Map","connectionStateMonitor","connectionStateObservable","subscribe","provider","connectionState","ConnectionState","AWSAppSyncRealTimeProvider","protocol","WebSocket","Error","_topics","_msg","_options","match","appSyncGraphqlEndpoint","observer","error","errors","complete","subscriptionId_1","_startSubscriptionWithAWSAppSyncRealTime","subscriptionId","catch","REALTIME_SUBSCRIPTION_INIT_ERROR","err","record","_waitForSubscriptionToBeConnected","_a","subscriptionState","subscriptionObserverMap","get","CONNECTED","_sendUnsubscriptionMessage","debug","err_1","_removeSubscriptionObserver","Object","aws_appsync_dangerously_connect_to_http_endpoint_for_testing","authenticationType","query","variables","apiKey","region","_d","graphql_headers","_e","additionalHeaders","PENDING","set","startAckTimeoutId","undefined","dataString","JSON","stringify","_awsRealTimeHeaderBasedAuth","payload","canonicalUri","_k","headerObj","_j","userAgent","subscriptionMessage","id","extensions","authorization","type","GQL_START","stringToAWSRealTime","OPENING_CONNECTION","_initializeWebSocketConnection","err_2","_b","CONNECTION_FAILED","subscriptionFailedCallback_1","subscriptionFailedCallback","_h","_c","subscriptionReadyCallback","setTimeout","_timeoutStartSubscriptionAck","call","awsRealTimeSocket","send","subscriptionObserver","Promise","res","rej","readyState","OPEN","socketStatus","READY","unsubscribeMessage","GQL_STOP","delete","_closeSocketIfRequired","bind","size","CLOSING_CONNECTION","bufferedAmount","keepAliveTimeoutId","clearTimeout","keepAliveAlertTimeoutId","tempSocket","onclose","onerror","close","_f","GQL_DATA","next","GQL_START_ACK","SUBSCRIPTION_ACK","CONNECTION_ESTABLISHED","GQL_CONNECTION_KEEP_ALIVE","_errorDisconnect","TIMEOUT_DISCONNECT","keepAliveTimeout","KEEP_ALIVE_MISSED","KEEP_ALIVE","GQL_ERROR","FAILED","msg","forEach","closed","clear","promiseArray","push","CONNECTING","payloadString","headerString","headerQs","from","toString","payloadQs","discoverableEndpoint","isCustomDomain","concat","replace","isSSLEnabled","awsRealTimeUrl","_initializeRetryableHandshake","err_3","_initializeHandshake","newSocket","getNewWebSocket","onopen","ackOk_1","reason","onmessage","parse","connectionTimeoutMs","GQL_CONNECTION_ACK","_handleIncomingSubscriptionMessage","CONNECTION_CLOSED","GQL_CONNECTION_ERROR","_g","errorType","errorCode","gqlInit","GQL_CONNECTION_INIT","checkAckOk","ackOk","err_4","includes","headerHandler","API_KEY","_awsRealTimeApiKeyHeader","AWS_IAM","_awsRealTimeIAMHeader","OPENID_CONNECT","_awsRealTimeOPENIDHeader","AMAZON_COGNITO_USER_POOLS","_awsRealTimeCUPHeader","AWS_LAMBDA","_customAuthHeader","handler","host","result","currentSession","session","Authorization","getAccessToken","getJwtToken","getItem","federatedInfo","token","currentAuthenticatedUser","currentUser","dt","Date","dtStr","toISOString","endpointInfo","service","_ensureCredentials","credentialsOK","then","credentials","secretAccessKey","accessKeyId","sessionToken","secret_key","access_key","session_token","creds","request","method","headers","signed_params","sign","cred","shear","warn"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/pubsub/src/Providers/AWSAppSyncRealTimeProvider/index.ts"],"sourcesContent":["/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { ProviderOptions } from '../../types';\nimport {\n\tLogger,\n\tCredentials,\n\tSigner,\n\tHub,\n\tConstants,\n\tUSER_AGENT_HEADER,\n\tjitteredExponentialRetry,\n\tNonRetryableError,\n\tICredentials,\n} from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth, { GRAPHQL_AUTH_MODE } from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from '../PubSubProvider';\nimport { CONNECTION_STATE_CHANGE, CONTROL_MSG } from '../../index';\n\nimport {\n\tAMPLIFY_SYMBOL,\n\tAWS_APPSYNC_REALTIME_HEADERS,\n\tCONNECTION_INIT_TIMEOUT,\n\tDEFAULT_KEEP_ALIVE_TIMEOUT,\n\tDEFAULT_KEEP_ALIVE_ALERT_TIMEOUT,\n\tMAX_DELAY_MS,\n\tMESSAGE_TYPES,\n\tNON_RETRYABLE_CODES,\n\tSOCKET_STATUS,\n\tSTART_ACK_TIMEOUT,\n\tSUBSCRIPTION_STATUS,\n} from './constants';\nimport {\n\tConnectionStateMonitor,\n\tCONNECTION_CHANGE,\n} from '../../utils/ConnectionStateMonitor';\n\nconst logger = new Logger('AWSAppSyncRealTimeProvider');\n\nconst dispatchApiEvent = (event: string, data: any, message: string) => {\n\tHub.dispatch('api', { event, data, message }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\nexport type ObserverQuery = {\n\tobserver: ZenObservable.SubscriptionObserver<any>;\n\tquery: string;\n\tvariables: object;\n\tsubscriptionState: SUBSCRIPTION_STATUS;\n\tsubscriptionReadyCallback?: Function;\n\tsubscriptionFailedCallback?: Function;\n\tstartAckTimeoutId?: ReturnType<typeof setTimeout>;\n};\n\nconst standardDomainPattern =\n\t/^https:\\/\\/\\w{26}\\.appsync\\-api\\.\\w{2}(?:(?:\\-\\w{2,})+)\\-\\d\\.amazonaws.com\\/graphql$/i;\n\nconst customDomainPath = '/realtime';\n\ntype GraphqlAuthModes = keyof typeof GRAPHQL_AUTH_MODE;\n\nexport interface AWSAppSyncRealTimeProviderOptions extends ProviderOptions {\n\tappSyncGraphqlEndpoint?: string;\n\tauthenticationType?: GraphqlAuthModes;\n\tquery?: string;\n\tvariables?: object;\n\tapiKey?: string;\n\tregion?: string;\n\tgraphql_headers?: () => {} | (() => Promise<{}>);\n\tadditionalHeaders?: { [key: string]: string };\n}\n\ntype AWSAppSyncRealTimeAuthInput =\n\tPartial<AWSAppSyncRealTimeProviderOptions> & {\n\t\tcanonicalUri: string;\n\t\tpayload: string;\n\t};\n\nexport class AWSAppSyncRealTimeProvider extends AbstractPubSubProvider {\n\tprivate awsRealTimeSocket?: WebSocket;\n\tprivate socketStatus: SOCKET_STATUS = SOCKET_STATUS.CLOSED;\n\tprivate keepAliveTimeoutId?: ReturnType<typeof setTimeout>;\n\tprivate keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n\tprivate keepAliveAlertTimeoutId?: ReturnType<typeof setTimeout>;\n\tprivate subscriptionObserverMap: Map<string, ObserverQuery> = new Map();\n\tprivate promiseArray: Array<{ res: Function; rej: Function }> = [];\n\tprivate readonly connectionStateMonitor = new ConnectionStateMonitor();\n\n\tconstructor(options: ProviderOptions = {}) {\n\t\tsuper(options);\n\t\t// Monitor the connection state and pass changes along to Hub\n\t\tthis.connectionStateMonitor.connectionStateObservable.subscribe(\n\t\t\tConnectionState => {\n\t\t\t\tdispatchApiEvent(\n\t\t\t\t\tCONNECTION_STATE_CHANGE,\n\t\t\t\t\t{\n\t\t\t\t\t\tprovider: this,\n\t\t\t\t\t\tconnectionState: ConnectionState,\n\t\t\t\t\t},\n\t\t\t\t\t`Connection state is ${ConnectionState}`\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\tgetNewWebSocket(url, protocol) {\n\t\treturn new WebSocket(url, protocol);\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AWSAppSyncRealTimeProvider';\n\t}\n\n\tnewClient(): Promise<any> {\n\t\tthrow new Error('Not used here');\n\t}\n\n\tpublic async publish(_topics: string[] | string, _msg: any, _options?: any) {\n\t\tthrow new Error('Operation not supported');\n\t}\n\n\t// Check if url matches standard domain pattern\n\tprivate isCustomDomain(url: string): boolean {\n\t\treturn url.match(standardDomainPattern) === null;\n\t}\n\n\tsubscribe(\n\t\t_topics: string[] | string,\n\t\toptions?: AWSAppSyncRealTimeProviderOptions\n\t): Observable<any> {\n\t\tconst appSyncGraphqlEndpoint = options?.appSyncGraphqlEndpoint;\n\n\t\treturn new Observable(observer => {\n\t\t\tif (!options || !appSyncGraphqlEndpoint) {\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`Subscribe only available for AWS AppSync endpoint`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t\tobserver.complete();\n\t\t\t} else {\n\t\t\t\tconst subscriptionId = uuid();\n\t\t\t\tthis._startSubscriptionWithAWSAppSyncRealTime({\n\t\t\t\t\toptions,\n\t\t\t\t\tobserver,\n\t\t\t\t\tsubscriptionId,\n\t\t\t\t}).catch<any>(err => {\n\t\t\t\t\tobserver.error({\n\t\t\t\t\t\terrors: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t\t`${CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR}: ${err}`\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t});\n\t\t\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\t\t\tobserver.complete();\n\t\t\t\t});\n\n\t\t\t\treturn async () => {\n\t\t\t\t\t// Cleanup after unsubscribing or observer.complete was called after _startSubscriptionWithAWSAppSyncRealTime\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Waiting that subscription has been connected before trying to unsubscribe\n\t\t\t\t\t\tawait this._waitForSubscriptionToBeConnected(subscriptionId);\n\n\t\t\t\t\t\tconst { subscriptionState } =\n\t\t\t\t\t\t\tthis.subscriptionObserverMap.get(subscriptionId) || {};\n\n\t\t\t\t\t\tif (!subscriptionState) {\n\t\t\t\t\t\t\t// subscription already unsubscribed\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n\t\t\t\t\t\t\tthis._sendUnsubscriptionMessage(subscriptionId);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error('Subscription never connected');\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tlogger.debug(`Error while unsubscribing ${err}`);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis._removeSubscriptionObserver(subscriptionId);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected get isSSLEnabled() {\n\t\treturn !this.options\n\t\t\t.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n\t}\n\n\tprivate async _startSubscriptionWithAWSAppSyncRealTime({\n\t\toptions,\n\t\tobserver,\n\t\tsubscriptionId,\n\t}: {\n\t\toptions: AWSAppSyncRealTimeProviderOptions;\n\t\tobserver: ZenObservable.SubscriptionObserver<any>;\n\t\tsubscriptionId: string;\n\t}) {\n\t\tconst {\n\t\t\tappSyncGraphqlEndpoint,\n\t\t\tauthenticationType,\n\t\t\tquery,\n\t\t\tvariables,\n\t\t\tapiKey,\n\t\t\tregion,\n\t\t\tgraphql_headers = () => ({}),\n\t\t\tadditionalHeaders = {},\n\t\t} = options;\n\n\t\tconst subscriptionState: SUBSCRIPTION_STATUS = SUBSCRIPTION_STATUS.PENDING;\n\t\tconst data = {\n\t\t\tquery,\n\t\t\tvariables,\n\t\t};\n\t\t// Having a subscription id map will make it simple to forward messages received\n\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\tobserver,\n\t\t\tquery: query ?? '',\n\t\t\tvariables: variables ?? {},\n\t\t\tsubscriptionState,\n\t\t\tstartAckTimeoutId: undefined,\n\t\t});\n\n\t\t// Preparing payload for subscription message\n\n\t\tconst dataString = JSON.stringify(data);\n\t\tconst headerObj = {\n\t\t\t...(await this._awsRealTimeHeaderBasedAuth({\n\t\t\t\tapiKey,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tauthenticationType,\n\t\t\t\tpayload: dataString,\n\t\t\t\tcanonicalUri: '',\n\t\t\t\tregion,\n\t\t\t\tadditionalHeaders,\n\t\t\t})),\n\t\t\t...(await graphql_headers()),\n\t\t\t...additionalHeaders,\n\t\t\t[USER_AGENT_HEADER]: Constants.userAgent,\n\t\t};\n\n\t\tconst subscriptionMessage = {\n\t\t\tid: subscriptionId,\n\t\t\tpayload: {\n\t\t\t\tdata: dataString,\n\t\t\t\textensions: {\n\t\t\t\t\tauthorization: {\n\t\t\t\t\t\t...headerObj,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\ttype: MESSAGE_TYPES.GQL_START,\n\t\t};\n\n\t\tconst stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n\n\t\ttry {\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n\t\t\tawait this._initializeWebSocketConnection({\n\t\t\t\tapiKey,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tauthenticationType,\n\t\t\t\tregion,\n\t\t\t\tadditionalHeaders,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tlogger.debug({ err });\n\t\t\tconst message = err['message'] ?? '';\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\tobserver.error({\n\t\t\t\terrors: [\n\t\t\t\t\t{\n\t\t\t\t\t\t...new GraphQLError(`${CONTROL_MSG.CONNECTION_FAILED}: ${message}`),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tobserver.complete();\n\t\t\tconst { subscriptionFailedCallback } =\n\t\t\t\tthis.subscriptionObserverMap.get(subscriptionId) || {};\n\n\t\t\t// Notify concurrent unsubscription\n\t\t\tif (typeof subscriptionFailedCallback === 'function') {\n\t\t\t\tsubscriptionFailedCallback();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Potential race condition can occur when unsubscribe is called during _initializeWebSocketConnection.\n\t\t// E.g.unsubscribe gets invoked prior to finishing WebSocket handshake or START_ACK.\n\t\t// Both subscriptionFailedCallback and subscriptionReadyCallback are used to synchronized this.\n\n\t\tconst { subscriptionFailedCallback, subscriptionReadyCallback } =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId) ?? {};\n\n\t\t// This must be done before sending the message in order to be listening immediately\n\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\tobserver,\n\t\t\tsubscriptionState,\n\t\t\tquery: query ?? '',\n\t\t\tvariables: variables ?? {},\n\t\t\tsubscriptionReadyCallback,\n\t\t\tsubscriptionFailedCallback,\n\t\t\tstartAckTimeoutId: setTimeout(() => {\n\t\t\t\tthis._timeoutStartSubscriptionAck.call(this, subscriptionId);\n\t\t\t}, START_ACK_TIMEOUT),\n\t\t});\n\t\tif (this.awsRealTimeSocket) {\n\t\t\tthis.awsRealTimeSocket.send(stringToAWSRealTime);\n\t\t}\n\t}\n\n\t// Waiting that subscription has been connected before trying to unsubscribe\n\tprivate async _waitForSubscriptionToBeConnected(subscriptionId: string) {\n\t\tconst subscriptionObserver =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId);\n\t\tif (subscriptionObserver) {\n\t\t\tconst { subscriptionState } = subscriptionObserver;\n\t\t\t// This in case unsubscribe is invoked before sending start subscription message\n\t\t\tif (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tconst { observer, subscriptionState, variables, query } =\n\t\t\t\t\t\tsubscriptionObserver;\n\t\t\t\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\t\t\t\tobserver,\n\t\t\t\t\t\tsubscriptionState,\n\t\t\t\t\t\tvariables,\n\t\t\t\t\t\tquery,\n\t\t\t\t\t\tsubscriptionReadyCallback: res,\n\t\t\t\t\t\tsubscriptionFailedCallback: rej,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _sendUnsubscriptionMessage(subscriptionId: string) {\n\t\ttry {\n\t\t\tif (\n\t\t\t\tthis.awsRealTimeSocket &&\n\t\t\t\tthis.awsRealTimeSocket.readyState === WebSocket.OPEN &&\n\t\t\t\tthis.socketStatus === SOCKET_STATUS.READY\n\t\t\t) {\n\t\t\t\t// Preparing unsubscribe message to stop receiving messages for that subscription\n\t\t\t\tconst unsubscribeMessage = {\n\t\t\t\t\tid: subscriptionId,\n\t\t\t\t\ttype: MESSAGE_TYPES.GQL_STOP,\n\t\t\t\t};\n\t\t\t\tconst stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n\t\t\t\tthis.awsRealTimeSocket.send(stringToAWSRealTime);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n\t\t\tlogger.debug({ err });\n\t\t}\n\t}\n\n\tprivate _removeSubscriptionObserver(subscriptionId: string) {\n\t\tthis.subscriptionObserverMap.delete(subscriptionId);\n\n\t\t// Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n\t\tsetTimeout(this._closeSocketIfRequired.bind(this), 1000);\n\t}\n\n\tprivate _closeSocketIfRequired() {\n\t\tif (this.subscriptionObserverMap.size > 0) {\n\t\t\t// Active subscriptions on the WebSocket\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.awsRealTimeSocket) {\n\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n\n\t\tif (this.awsRealTimeSocket.bufferedAmount > 0) {\n\t\t\t// Still data on the WebSocket\n\t\t\tsetTimeout(this._closeSocketIfRequired.bind(this), 1000);\n\t\t} else {\n\t\t\tlogger.debug('closing WebSocket...');\n\t\t\tif (this.keepAliveTimeoutId) {\n\t\t\t\tclearTimeout(this.keepAliveTimeoutId);\n\t\t\t}\n\t\t\tif (this.keepAliveAlertTimeoutId) {\n\t\t\t\tclearTimeout(this.keepAliveAlertTimeoutId);\n\t\t\t}\n\t\t\tconst tempSocket = this.awsRealTimeSocket;\n\t\t\t// Cleaning callbacks to avoid race condition, socket still exists\n\t\t\ttempSocket.onclose = null;\n\t\t\ttempSocket.onerror = null;\n\t\t\ttempSocket.close(1000);\n\t\t\tthis.awsRealTimeSocket = undefined;\n\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t}\n\t}\n\n\tprivate _handleIncomingSubscriptionMessage(message: MessageEvent) {\n\t\tlogger.debug(\n\t\t\t`subscription message from AWS AppSync RealTime: ${message.data}`\n\t\t);\n\t\tconst { id = '', payload, type } = JSON.parse(message.data);\n\t\tconst {\n\t\t\tobserver = null,\n\t\t\tquery = '',\n\t\t\tvariables = {},\n\t\t\tstartAckTimeoutId,\n\t\t\tsubscriptionReadyCallback,\n\t\t\tsubscriptionFailedCallback,\n\t\t} = this.subscriptionObserverMap.get(id) || {};\n\n\t\tlogger.debug({ id, observer, query, variables });\n\n\t\tif (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n\t\t\tif (observer) {\n\t\t\t\tobserver.next(payload);\n\t\t\t} else {\n\t\t\t\tlogger.debug(`observer not found for id: ${id}`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_START_ACK) {\n\t\t\tlogger.debug(\n\t\t\t\t`subscription ready for ${JSON.stringify({ query, variables })}`\n\t\t\t);\n\t\t\tif (typeof subscriptionReadyCallback === 'function') {\n\t\t\t\tsubscriptionReadyCallback();\n\t\t\t}\n\t\t\tif (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n\t\t\tdispatchApiEvent(\n\t\t\t\tCONTROL_MSG.SUBSCRIPTION_ACK,\n\t\t\t\t{ query, variables },\n\t\t\t\t'Connection established for subscription'\n\t\t\t);\n\t\t\tconst subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n\t\t\tif (observer) {\n\t\t\t\tthis.subscriptionObserverMap.set(id, {\n\t\t\t\t\tobserver,\n\t\t\t\t\tquery,\n\t\t\t\t\tvariables,\n\t\t\t\t\tstartAckTimeoutId: undefined,\n\t\t\t\t\tsubscriptionState,\n\t\t\t\t\tsubscriptionReadyCallback,\n\t\t\t\t\tsubscriptionFailedCallback,\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\tCONNECTION_CHANGE.CONNECTION_ESTABLISHED\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n\t\t\tif (this.keepAliveTimeoutId) clearTimeout(this.keepAliveTimeoutId);\n\t\t\tif (this.keepAliveAlertTimeoutId)\n\t\t\t\tclearTimeout(this.keepAliveAlertTimeoutId);\n\t\t\tthis.keepAliveTimeoutId = setTimeout(\n\t\t\t\t() => this._errorDisconnect(CONTROL_MSG.TIMEOUT_DISCONNECT),\n\t\t\t\tthis.keepAliveTimeout\n\t\t\t);\n\t\t\tthis.keepAliveAlertTimeoutId = setTimeout(() => {\n\t\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE_MISSED);\n\t\t\t}, DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT);\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.KEEP_ALIVE);\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_ERROR) {\n\t\t\tconst subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n\t\t\tif (observer) {\n\t\t\t\tthis.subscriptionObserverMap.set(id, {\n\t\t\t\t\tobserver,\n\t\t\t\t\tquery,\n\t\t\t\t\tvariables,\n\t\t\t\t\tstartAckTimeoutId,\n\t\t\t\t\tsubscriptionReadyCallback,\n\t\t\t\t\tsubscriptionFailedCallback,\n\t\t\t\t\tsubscriptionState,\n\t\t\t\t});\n\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`${CONTROL_MSG.CONNECTION_FAILED}: ${JSON.stringify(payload)}`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t\tif (startAckTimeoutId) clearTimeout(startAckTimeoutId);\n\n\t\t\t\tobserver.complete();\n\t\t\t\tif (typeof subscriptionFailedCallback === 'function') {\n\t\t\t\t\tsubscriptionFailedCallback();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _errorDisconnect(msg: string) {\n\t\tlogger.debug(`Disconnect error: ${msg}`);\n\t\tthis.subscriptionObserverMap.forEach(({ observer }) => {\n\t\t\tif (observer && !observer.closed) {\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [{ ...new GraphQLError(msg) }],\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tthis.subscriptionObserverMap.clear();\n\t\tif (this.awsRealTimeSocket) {\n\t\t\tthis.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\t\t\tthis.awsRealTimeSocket.close();\n\t\t}\n\n\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t}\n\n\tprivate _timeoutStartSubscriptionAck(subscriptionId: string) {\n\t\tconst subscriptionObserver =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId);\n\t\tif (subscriptionObserver) {\n\t\t\tconst { observer, query, variables } = subscriptionObserver;\n\t\t\tif (!observer) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\t\tobserver,\n\t\t\t\tquery,\n\t\t\t\tvariables,\n\t\t\t\tsubscriptionState: SUBSCRIPTION_STATUS.FAILED,\n\t\t\t});\n\n\t\t\tif (observer && !observer.closed) {\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`Subscription timeout ${JSON.stringify({\n\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\tvariables,\n\t\t\t\t\t\t\t\t})}`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t\t// Cleanup will be automatically executed\n\t\t\t\tobserver.complete();\n\t\t\t}\n\t\t\tlogger.debug(\n\t\t\t\t'timeoutStartSubscription',\n\t\t\t\tJSON.stringify({ query, variables })\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _initializeWebSocketConnection({\n\t\tappSyncGraphqlEndpoint,\n\t\tauthenticationType,\n\t\tapiKey,\n\t\tregion,\n\t\tadditionalHeaders,\n\t}: AWSAppSyncRealTimeProviderOptions) {\n\t\tif (this.socketStatus === SOCKET_STATUS.READY) {\n\t\t\treturn;\n\t\t}\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tthis.promiseArray.push({ res, rej });\n\n\t\t\tif (this.socketStatus === SOCKET_STATUS.CLOSED) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.CONNECTING;\n\n\t\t\t\t\tconst payloadString = '{}';\n\t\t\t\t\tconst headerString = JSON.stringify(\n\t\t\t\t\t\tawait this._awsRealTimeHeaderBasedAuth({\n\t\t\t\t\t\t\tauthenticationType,\n\t\t\t\t\t\t\tpayload: payloadString,\n\t\t\t\t\t\t\tcanonicalUri: '/connect',\n\t\t\t\t\t\t\tapiKey,\n\t\t\t\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\t\t\t\tregion,\n\t\t\t\t\t\t\tadditionalHeaders,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tconst headerQs = Buffer.from(headerString).toString('base64');\n\n\t\t\t\t\tconst payloadQs = Buffer.from(payloadString).toString('base64');\n\n\t\t\t\t\tlet discoverableEndpoint = appSyncGraphqlEndpoint ?? '';\n\n\t\t\t\t\tif (this.isCustomDomain(discoverableEndpoint)) {\n\t\t\t\t\t\tdiscoverableEndpoint =\n\t\t\t\t\t\t\tdiscoverableEndpoint.concat(customDomainPath);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdiscoverableEndpoint = discoverableEndpoint\n\t\t\t\t\t\t\t.replace('appsync-api', 'appsync-realtime-api')\n\t\t\t\t\t\t\t.replace('gogi-beta', 'grt-beta');\n\t\t\t\t\t}\n\n\t\t\t\t\t// Creating websocket url with required query strings\n\t\t\t\t\tconst protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n\t\t\t\t\tdiscoverableEndpoint = discoverableEndpoint\n\t\t\t\t\t\t.replace('https://', protocol)\n\t\t\t\t\t\t.replace('http://', protocol);\n\n\t\t\t\t\tconst awsRealTimeUrl = `${discoverableEndpoint}?header=${headerQs}&payload=${payloadQs}`;\n\n\t\t\t\t\tawait this._initializeRetryableHandshake(awsRealTimeUrl);\n\n\t\t\t\t\tthis.promiseArray.forEach(({ res }) => {\n\t\t\t\t\t\tlogger.debug('Notifying connection successful');\n\t\t\t\t\t\tres();\n\t\t\t\t\t});\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.READY;\n\t\t\t\t\tthis.promiseArray = [];\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthis.promiseArray.forEach(({ rej }) => rej(err));\n\t\t\t\t\tthis.promiseArray = [];\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.awsRealTimeSocket &&\n\t\t\t\t\t\tthis.awsRealTimeSocket.readyState === WebSocket.OPEN\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.awsRealTimeSocket.close(3001);\n\t\t\t\t\t}\n\t\t\t\t\tthis.awsRealTimeSocket = undefined;\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _initializeRetryableHandshake(awsRealTimeUrl: string) {\n\t\tlogger.debug(`Initializaling retryable Handshake`);\n\t\tawait jitteredExponentialRetry(\n\t\t\tthis._initializeHandshake.bind(this),\n\t\t\t[awsRealTimeUrl],\n\t\t\tMAX_DELAY_MS\n\t\t);\n\t}\n\n\tprivate async _initializeHandshake(awsRealTimeUrl: string) {\n\t\tlogger.debug(`Initializing handshake ${awsRealTimeUrl}`);\n\t\t// Because connecting the socket is async, is waiting until connection is open\n\t\t// Step 1: connect websocket\n\t\ttry {\n\t\t\tawait (() => {\n\t\t\t\treturn new Promise<void>((res, rej) => {\n\t\t\t\t\tconst newSocket = this.getNewWebSocket(awsRealTimeUrl, 'graphql-ws');\n\t\t\t\t\tnewSocket.onerror = () => {\n\t\t\t\t\t\tlogger.debug(`WebSocket connection error`);\n\t\t\t\t\t};\n\t\t\t\t\tnewSocket.onclose = () => {\n\t\t\t\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\t\t\t\tCONNECTION_CHANGE.CONNECTION_FAILED\n\t\t\t\t\t\t);\n\t\t\t\t\t\trej(new Error('Connection handshake error'));\n\t\t\t\t\t};\n\t\t\t\t\tnewSocket.onopen = () => {\n\t\t\t\t\t\tthis.awsRealTimeSocket = newSocket;\n\t\t\t\t\t\treturn res();\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t})();\n\n\t\t\t// Step 2: wait for ack from AWS AppSyncReaTime after sending init\n\t\t\tawait (() => {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tif (this.awsRealTimeSocket) {\n\t\t\t\t\t\tlet ackOk = false;\n\t\t\t\t\t\tthis.awsRealTimeSocket.onerror = error => {\n\t\t\t\t\t\t\tlogger.debug(`WebSocket error ${JSON.stringify(error)}`);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.awsRealTimeSocket.onclose = event => {\n\t\t\t\t\t\t\tlogger.debug(`WebSocket closed ${event.reason}`);\n\t\t\t\t\t\t\trej(new Error(JSON.stringify(event)));\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.awsRealTimeSocket.onmessage = (message: MessageEvent) => {\n\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t`subscription message from AWS AppSyncRealTime: ${message.data} `\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst data = JSON.parse(message.data);\n\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\tconnectionTimeoutMs = DEFAULT_KEEP_ALIVE_TIMEOUT,\n\t\t\t\t\t\t\t\t} = {},\n\t\t\t\t\t\t\t} = data;\n\t\t\t\t\t\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n\t\t\t\t\t\t\t\tackOk = true;\n\t\t\t\t\t\t\t\tif (this.awsRealTimeSocket) {\n\t\t\t\t\t\t\t\t\tthis.keepAliveTimeout = connectionTimeoutMs;\n\t\t\t\t\t\t\t\t\tthis.awsRealTimeSocket.onmessage =\n\t\t\t\t\t\t\t\t\t\tthis._handleIncomingSubscriptionMessage.bind(this);\n\t\t\t\t\t\t\t\t\tthis.awsRealTimeSocket.onerror = err => {\n\t\t\t\t\t\t\t\t\t\tlogger.debug(err);\n\t\t\t\t\t\t\t\t\t\tthis._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tthis.awsRealTimeSocket.onclose = event => {\n\t\t\t\t\t\t\t\t\t\tlogger.debug(`WebSocket closed ${event.reason}`);\n\t\t\t\t\t\t\t\t\t\tthis._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tres('Cool, connected to AWS AppSyncRealTime');\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\t\terrors: [{ errorType = '', errorCode = 0 } = {}] = [],\n\t\t\t\t\t\t\t\t\t} = {},\n\t\t\t\t\t\t\t\t} = data;\n\n\t\t\t\t\t\t\t\trej({ errorType, errorCode });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst gqlInit = {\n\t\t\t\t\t\t\ttype: MESSAGE_TYPES.GQL_CONNECTION_INIT,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n\n\t\t\t\t\t\tsetTimeout(checkAckOk.bind(this, ackOk), CONNECTION_INIT_TIMEOUT);\n\t\t\t\t\t}\n\n\t\t\t\t\tfunction checkAckOk(ackOk: boolean) {\n\t\t\t\t\t\tif (!ackOk) {\n\t\t\t\t\t\t\tthis.connectionStateMonitor.record(\n\t\t\t\t\t\t\t\tCONNECTION_CHANGE.CONNECTION_FAILED\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t`Connection timeout: ack from AWSRealTime was not received on ${CONNECTION_INIT_TIMEOUT} ms`\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t})();\n\t\t} catch (err) {\n\t\t\tconst { errorType, errorCode } = err as {\n\t\t\t\terrorType: string;\n\t\t\t\terrorCode: number;\n\t\t\t};\n\n\t\t\tif (NON_RETRYABLE_CODES.includes(errorCode)) {\n\t\t\t\tthrow new NonRetryableError(errorType);\n\t\t\t} else if (errorType) {\n\t\t\t\tthrow new Error(errorType);\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _awsRealTimeHeaderBasedAuth({\n\t\tauthenticationType,\n\t\tpayload,\n\t\tcanonicalUri,\n\t\tappSyncGraphqlEndpoint,\n\t\tapiKey,\n\t\tregion,\n\t\tadditionalHeaders,\n\t}: AWSAppSyncRealTimeProviderOptions): Promise<any> {\n\t\tconst headerHandler: {\n\t\t\t[key in GraphqlAuthModes]: (AWSAppSyncRealTimeAuthInput) => {};\n\t\t} = {\n\t\t\tAPI_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n\t\t\tAWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n\t\t\tOPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n\t\t\tAMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n\t\t\tAWS_LAMBDA: this._customAuthHeader,\n\t\t};\n\n\t\tif (!authenticationType || !headerHandler[authenticationType]) {\n\t\t\tlogger.debug(`Authentication type ${authenticationType} not supported`);\n\t\t\treturn '';\n\t\t} else {\n\t\t\tconst handler = headerHandler[authenticationType];\n\n\t\t\tconst { host } = url.parse(appSyncGraphqlEndpoint ?? '');\n\n\t\t\tlogger.debug(`Authenticating with ${authenticationType}`);\n\n\t\t\tconst result = await handler({\n\t\t\t\tpayload,\n\t\t\t\tcanonicalUri,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tapiKey,\n\t\t\t\tregion,\n\t\t\t\thost,\n\t\t\t\tadditionalHeaders,\n\t\t\t});\n\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tprivate async _awsRealTimeCUPHeader({ host }: AWSAppSyncRealTimeAuthInput) {\n\t\tconst session = await Auth.currentSession();\n\t\treturn {\n\t\t\tAuthorization: session.getAccessToken().getJwtToken(),\n\t\t\thost,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeOPENIDHeader({\n\t\thost,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tlet token;\n\t\t// backwards compatibility\n\t\tconst federatedInfo = await Cache.getItem('federatedInfo');\n\t\tif (federatedInfo) {\n\t\t\ttoken = federatedInfo.token;\n\t\t} else {\n\t\t\tconst currentUser = await Auth.currentAuthenticatedUser();\n\t\t\tif (currentUser) {\n\t\t\t\ttoken = currentUser.token;\n\t\t\t}\n\t\t}\n\t\tif (!token) {\n\t\t\tthrow new Error('No federated jwt');\n\t\t}\n\t\treturn {\n\t\t\tAuthorization: token,\n\t\t\thost,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeApiKeyHeader({\n\t\tapiKey,\n\t\thost,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tconst dt = new Date();\n\t\tconst dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n\n\t\treturn {\n\t\t\thost,\n\t\t\t'x-amz-date': dtStr,\n\t\t\t'x-api-key': apiKey,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeIAMHeader({\n\t\tpayload,\n\t\tcanonicalUri,\n\t\tappSyncGraphqlEndpoint,\n\t\tregion,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tconst endpointInfo = {\n\t\t\tregion,\n\t\t\tservice: 'appsync',\n\t\t};\n\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\t\tconst creds = await Credentials.get().then((credentials: any) => {\n\t\t\tconst { secretAccessKey, accessKeyId, sessionToken } =\n\t\t\t\tcredentials as ICredentials;\n\n\t\t\treturn {\n\t\t\t\tsecret_key: secretAccessKey,\n\t\t\t\taccess_key: accessKeyId,\n\t\t\t\tsession_token: sessionToken,\n\t\t\t};\n\t\t});\n\n\t\tconst request = {\n\t\t\turl: `${appSyncGraphqlEndpoint}${canonicalUri}`,\n\t\t\tdata: payload,\n\t\t\tmethod: 'POST',\n\t\t\theaders: { ...AWS_APPSYNC_REALTIME_HEADERS },\n\t\t};\n\n\t\tconst signed_params = Signer.sign(request, creds, endpointInfo);\n\t\treturn signed_params.headers;\n\t}\n\n\tprivate _customAuthHeader({\n\t\thost,\n\t\tadditionalHeaders,\n\t}: AWSAppSyncRealTimeAuthInput) {\n\t\tif (!additionalHeaders || !additionalHeaders['Authorization']) {\n\t\t\tthrow new Error('No auth token specified');\n\t\t}\n\n\t\treturn {\n\t\t\tAuthorization: additionalHeaders.Authorization,\n\t\t\thost,\n\t\t};\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_ensureCredentials() {\n\t\treturn Credentials.get()\n\t\t\t.then((credentials: any) => {\n\t\t\t\tif (!credentials) return false;\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\tlogger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.catch((err: any) => {\n\t\t\t\tlogger.warn('ensure credentials error', err);\n\t\t\t\treturn false;\n\t\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}