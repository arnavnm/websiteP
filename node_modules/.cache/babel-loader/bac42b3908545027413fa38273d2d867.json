{"ast":null,"code":"import * as e from \"react\";\nexport function useSize(r) {\n  const [i, t] = e.useState(void 0);\n  return e.useEffect(() => {\n    if (r) {\n      const e = new ResizeObserver(e => {\n        if (!Array.isArray(e)) return;\n        if (!e.length) return;\n        const i = e[0];\n        let o, n;\n\n        if (\"borderBoxSize\" in i) {\n          const e = i.borderBoxSize,\n                r = Array.isArray(e) ? e[0] : e;\n          o = r.inlineSize, n = r.blockSize;\n        } else {\n          const e = r.getBoundingClientRect();\n          o = e.width, n = e.height;\n        }\n\n        t({\n          width: o,\n          height: n\n        });\n      });\n      return e.observe(r, {\n        box: \"border-box\"\n      }), () => e.unobserve(r);\n    }\n\n    t(void 0);\n  }, [r]), i;\n}","map":{"version":3,"mappings":"AAAA,OAAM,KAAIA,CAAV,MAAgB,OAAhB;AAAwB,OAAO,SAASC,OAAT,CAAiBC,CAAjB,EAAmB;EAAC,MAAK,CAACC,CAAD,EAAGC,CAAH,IAAMJ,CAAC,CAACK,QAAF,CAAW,KAAK,CAAhB,CAAX;EAA8B,OAAOL,CAAC,CAACM,SAAF,CAAa,MAAI;IAAC,IAAGJ,CAAH,EAAK;MAAC,MAAMF,CAAC,GAAC,IAAIO,cAAJ,CAAoBP,CAAC,IAAE;QAAC,IAAG,CAACQ,KAAK,CAACC,OAAN,CAAcT,CAAd,CAAJ,EAAqB;QAAO,IAAG,CAACA,CAAC,CAACU,MAAN,EAAa;QAAO,MAAMP,CAAC,GAACH,CAAC,CAAC,CAAD,CAAT;QAAa,IAAIW,CAAJ,EAAMC,CAAN;;QAAQ,IAAG,mBAAkBT,CAArB,EAAuB;UAAC,MAAMH,CAAC,GAACG,CAAC,CAACU,aAAV;UAAA,MAAwBX,CAAC,GAACM,KAAK,CAACC,OAAN,CAAcT,CAAd,IAAiBA,CAAC,CAAC,CAAD,CAAlB,GAAsBA,CAAhD;UAAkDW,CAAC,GAACT,CAAC,CAACY,UAAJ,EAAeF,CAAC,GAACV,CAAC,CAACa,SAAnB;QAA6B,CAAvG,MAA2G;UAAC,MAAMf,CAAC,GAACE,CAAC,CAACc,qBAAF,EAAR;UAAkCL,CAAC,GAACX,CAAC,CAACiB,KAAJ,EAAUL,CAAC,GAACZ,CAAC,CAACkB,MAAd;QAAqB;;QAAAd,CAAC,CAAC;UAACa,KAAK,EAACN,CAAP;UAASO,MAAM,EAACN;QAAhB,CAAD,CAAD;MAAsB,CAAtR,CAAR;MAAiS,OAAOZ,CAAC,CAACmB,OAAF,CAAUjB,CAAV,EAAY;QAACkB,GAAG,EAAC;MAAL,CAAZ,GAAgC,MAAIpB,CAAC,CAACqB,SAAF,CAAYnB,CAAZ,CAA3C;IAA0D;;IAAAE,CAAC,CAAC,KAAK,CAAN,CAAD;EAAU,CAA7X,EAA+X,CAACF,CAAD,CAA/X,GAAoYC,CAA3Y;AAA6Y","names":["useSize","element","size","setSize","React","useState","undefined","useEffect","resizeObserver","ResizeObserver","entries","Array","isArray","length","entry","width","height","borderSizeEntry","borderBoxSize","borderSize","inlineSize","blockSize","rect","getBoundingClientRect","observe","box","unobserve"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@radix-ui/react-use-size/dist/packages/react/use-size/src/useSize.tsx"],"sourcesContent":["/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\n\nfunction useSize(element: HTMLElement | SVGElement | null) {\n  const [size, setSize] = React.useState<{ width: number; height: number } | undefined>(undefined);\n\n  React.useEffect(() => {\n    if (element) {\n      const resizeObserver = new ResizeObserver((entries) => {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n\n        // Since we only observe the one element, we don't need to loop over the\n        // array\n        if (!entries.length) {\n          return;\n        }\n\n        const entry = entries[0];\n        let width: number;\n        let height: number;\n\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize'];\n          // iron out differences between browsers\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate a rect ourselves to get the correct border box.\n          const rect = element.getBoundingClientRect();\n          width = rect.width;\n          height = rect.height;\n        }\n\n        setSize({ width, height });\n      });\n\n      resizeObserver.observe(element, { box: 'border-box' });\n\n      return () => resizeObserver.unobserve(element);\n    } else {\n      // We only want to reset to `undefined` when the element becomes `null`,\n      // not if it changes to another element.\n      setSize(undefined);\n    }\n  }, [element]);\n\n  return size;\n}\n\nexport { useSize };\n"]},"metadata":{},"sourceType":"module"}