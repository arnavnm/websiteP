{"ast":null,"code":"import { __asyncGenerator, __await, __awaiter, __generator } from \"tslib\";\n/**\n * A util function converting ReadableStream into an async iterable.\n * Reference: https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate\n */\n\nexport var readableStreamtoIterable = function readableStreamtoIterable(readableStream) {\n  var _a;\n\n  return _a = {}, _a[Symbol.asyncIterator] = function () {\n    return __asyncGenerator(this, arguments, function () {\n      var reader, _a, done, value;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            reader = readableStream.getReader();\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1,, 9, 10]);\n\n            _b.label = 2;\n\n          case 2:\n            if (!true) return [3\n            /*break*/\n            , 8];\n            return [4\n            /*yield*/\n            , __await(reader.read())];\n\n          case 3:\n            _a = _b.sent(), done = _a.done, value = _a.value;\n            if (!done) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , __await(void 0)];\n\n          case 4:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 5:\n            return [4\n            /*yield*/\n            , __await(value)];\n\n          case 6:\n            return [4\n            /*yield*/\n            , _b.sent()];\n\n          case 7:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 2];\n\n          case 8:\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            reader.releaseLock();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 10:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }, _a;\n};\n/**\n * A util function converting async iterable to a ReadableStream.\n */\n\nexport var iterableToReadableStream = function iterableToReadableStream(asyncIterable) {\n  var iterator = asyncIterable[Symbol.asyncIterator]();\n  return new ReadableStream({\n    pull: function pull(controller) {\n      return __awaiter(this, void 0, void 0, function () {\n        var _a, done, value;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , iterator.next()];\n\n            case 1:\n              _a = _b.sent(), done = _a.done, value = _a.value;\n\n              if (done) {\n                return [2\n                /*return*/\n                , controller.close()];\n              }\n\n              controller.enqueue(value);\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }\n  });\n};","map":{"version":3,"mappings":"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","names":["readableStreamtoIterable","readableStream","_a","Symbol","asyncIterator","reader","getReader","read","_b","done","value","releaseLock","iterableToReadableStream","asyncIterable","iterator","ReadableStream","pull","controller","next","close","enqueue"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/eventstream-serde-browser/src/utils.ts"],"sourcesContent":["/**\n * A util function converting ReadableStream into an async iterable.\n * Reference: https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate\n */\nexport const readableStreamtoIterable = <T>(readableStream: ReadableStream<T>): AsyncIterable<T> => ({\n  [Symbol.asyncIterator]: async function* () {\n    const reader = readableStream.getReader();\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) return;\n        yield value as T;\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  },\n});\n\n/**\n * A util function converting async iterable to a ReadableStream.\n */\nexport const iterableToReadableStream = <T>(asyncIterable: AsyncIterable<T>): ReadableStream<T> => {\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  return new ReadableStream({\n    async pull(controller) {\n      const { done, value } = await iterator.next();\n      if (done) {\n        return controller.close();\n      }\n      controller.enqueue(value);\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}