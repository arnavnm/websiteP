{"ast":null,"code":"/**\n * Lazy String holder for JSON typed contents.\n */\nimport { __extends, __read, __spread } from \"tslib\";\n/**\n * Because of https://github.com/microsoft/tslib/issues/95,\n * TS 'extends' shim doesn't support extending native types like String.\n * So here we create StringWrapper that duplicate everything from String\n * class including its prototype chain. So we can extend from here.\n */\n// @ts-ignore StringWrapper implementation is not a simple constructor\n\nexport var StringWrapper = function () {\n  //@ts-ignore 'this' cannot be assigned to any, but Object.getPrototypeOf accepts any\n  var Class = Object.getPrototypeOf(this).constructor;\n  var Constructor = Function.bind.apply(String, __spread([null], arguments)); //@ts-ignore Call wrapped String constructor directly, don't bother typing it.\n\n  var instance = new Constructor();\n  Object.setPrototypeOf(instance, Class.prototype);\n  return instance;\n};\nStringWrapper.prototype = Object.create(String.prototype, {\n  constructor: {\n    value: StringWrapper,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n});\nObject.setPrototypeOf(StringWrapper, String);\n\nvar LazyJsonString =\n/** @class */\nfunction (_super) {\n  __extends(LazyJsonString, _super);\n\n  function LazyJsonString() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LazyJsonString.prototype.deserializeJSON = function () {\n    return JSON.parse(_super.prototype.toString.call(this));\n  };\n\n  LazyJsonString.prototype.toJSON = function () {\n    return _super.prototype.toString.call(this);\n  };\n\n  LazyJsonString.fromObject = function (object) {\n    if (object instanceof LazyJsonString) {\n      return object;\n    } else if (object instanceof String || typeof object === \"string\") {\n      return new LazyJsonString(object);\n    }\n\n    return new LazyJsonString(JSON.stringify(object));\n  };\n\n  return LazyJsonString;\n}(StringWrapper);\n\nexport { LazyJsonString };","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,aAAa,GAAG,YAAY;EACnC;EACA,IAAIC,KAAK,GAAGC,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BC,WAAxC;EACA,IAAIC,WAAW,GAAGC,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,MAApB,EAA4BV,QAAQ,CAAC,CAAC,IAAD,CAAD,EAASW,SAAT,CAApC,CAAlB,CAHmC,CAInC;;EACA,IAAIC,QAAQ,GAAG,IAAIN,WAAJ,EAAf;EACAH,MAAM,CAACU,cAAP,CAAsBD,QAAtB,EAAgCV,KAAK,CAACY,SAAtC;EACA,OAAOF,QAAP;AACH,CARM;AASPX,aAAa,CAACa,SAAd,GAA0BX,MAAM,CAACY,MAAP,CAAcL,MAAM,CAACI,SAArB,EAAgC;EACtDT,WAAW,EAAE;IACTW,KAAK,EAAEf,aADE;IAETgB,UAAU,EAAE,KAFH;IAGTC,QAAQ,EAAE,IAHD;IAITC,YAAY,EAAE;EAJL;AADyC,CAAhC,CAA1B;AAQAhB,MAAM,CAACU,cAAP,CAAsBZ,aAAtB,EAAqCS,MAArC;;AACA,IAAIU,cAAc;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAClDvB,SAAS,CAACsB,cAAD,EAAiBC,MAAjB,CAAT;;EACA,SAASD,cAAT,GAA0B;IACtB,OAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACZ,KAAP,CAAa,IAAb,EAAmBE,SAAnB,CAAnB,IAAoD,IAA3D;EACH;;EACDS,cAAc,CAACN,SAAf,CAAyBQ,eAAzB,GAA2C,YAAY;IACnD,OAAOC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACP,SAAP,CAAiBW,QAAjB,CAA0BC,IAA1B,CAA+B,IAA/B,CAAX,CAAP;EACH,CAFD;;EAGAN,cAAc,CAACN,SAAf,CAAyBa,MAAzB,GAAkC,YAAY;IAC1C,OAAON,MAAM,CAACP,SAAP,CAAiBW,QAAjB,CAA0BC,IAA1B,CAA+B,IAA/B,CAAP;EACH,CAFD;;EAGAN,cAAc,CAACQ,UAAf,GAA4B,UAAUC,MAAV,EAAkB;IAC1C,IAAIA,MAAM,YAAYT,cAAtB,EAAsC;MAClC,OAAOS,MAAP;IACH,CAFD,MAGK,IAAIA,MAAM,YAAYnB,MAAlB,IAA4B,OAAOmB,MAAP,KAAkB,QAAlD,EAA4D;MAC7D,OAAO,IAAIT,cAAJ,CAAmBS,MAAnB,CAAP;IACH;;IACD,OAAO,IAAIT,cAAJ,CAAmBG,IAAI,CAACO,SAAL,CAAeD,MAAf,CAAnB,CAAP;EACH,CARD;;EASA,OAAOT,cAAP;AACH,CArBmC,CAqBlCnB,aArBkC,CAApC;;AAsBA,SAASmB,cAAT","names":["StringWrapper","Class","Object","getPrototypeOf","constructor","Constructor","Function","bind","apply","String","__spread","arguments","instance","setPrototypeOf","prototype","create","value","enumerable","writable","configurable","__extends","LazyJsonString","JSON","parse","_super","toString","call","object","stringify"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/smithy-client/src/lazy-json.ts"],"sourcesContent":["/**\n * Lazy String holder for JSON typed contents.\n */\n\ninterface StringWrapper {\n  new (arg: any): String;\n}\n\n/**\n * Because of https://github.com/microsoft/tslib/issues/95,\n * TS 'extends' shim doesn't support extending native types like String.\n * So here we create StringWrapper that duplicate everything from String\n * class including its prototype chain. So we can extend from here.\n */\n// @ts-ignore StringWrapper implementation is not a simple constructor\nexport const StringWrapper: StringWrapper = function () {\n  //@ts-ignore 'this' cannot be assigned to any, but Object.getPrototypeOf accepts any\n  const Class = Object.getPrototypeOf(this).constructor;\n  const Constructor = Function.bind.apply(String, [null as any, ...arguments]);\n  //@ts-ignore Call wrapped String constructor directly, don't bother typing it.\n  const instance = new Constructor();\n  Object.setPrototypeOf(instance, Class.prototype);\n  return instance as String;\n};\nStringWrapper.prototype = Object.create(String.prototype, {\n  constructor: {\n    value: StringWrapper,\n    enumerable: false,\n    writable: true,\n    configurable: true,\n  },\n});\nObject.setPrototypeOf(StringWrapper, String);\n\nexport class LazyJsonString extends StringWrapper {\n  deserializeJSON(): any {\n    return JSON.parse(super.toString());\n  }\n\n  toJSON(): string {\n    return super.toString();\n  }\n\n  static fromObject(object: any): LazyJsonString {\n    if (object instanceof LazyJsonString) {\n      return object;\n    } else if (object instanceof String || typeof object === \"string\") {\n      return new LazyJsonString(object);\n    }\n    return new LazyJsonString(JSON.stringify(object));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}