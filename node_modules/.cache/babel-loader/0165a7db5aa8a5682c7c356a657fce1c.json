{"ast":null,"code":"import { transformToViewState, applyViewStateToTransform, cloneTransform } from '../utils/transform';\nimport { normalizeStyle } from '../utils/style-utils';\nimport { deepEqual } from '../utils/deep-equal';\nconst pointerEvents = {\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseover: 'onMouseOver',\n  mousemove: 'onMouseMove',\n  click: 'onClick',\n  dblclick: 'onDblClick',\n  mouseenter: 'onMouseEnter',\n  mouseleave: 'onMouseLeave',\n  mouseout: 'onMouseOut',\n  contextmenu: 'onContextMenu',\n  touchstart: 'onTouchStart',\n  touchend: 'onTouchEnd',\n  touchmove: 'onTouchMove',\n  touchcancel: 'onTouchCancel'\n};\nconst cameraEvents = {\n  movestart: 'onMoveStart',\n  move: 'onMove',\n  moveend: 'onMoveEnd',\n  dragstart: 'onDragStart',\n  drag: 'onDrag',\n  dragend: 'onDragEnd',\n  zoomstart: 'onZoomStart',\n  zoom: 'onZoom',\n  zoomend: 'onZoomEnd',\n  rotatestart: 'onRotateStart',\n  rotate: 'onRotate',\n  rotateend: 'onRotateEnd',\n  pitchstart: 'onPitchStart',\n  pitch: 'onPitch',\n  pitchend: 'onPitchEnd'\n};\nconst otherEvents = {\n  wheel: 'onWheel',\n  boxzoomstart: 'onBoxZoomStart',\n  boxzoomend: 'onBoxZoomEnd',\n  boxzoomcancel: 'onBoxZoomCancel',\n  resize: 'onResize',\n  load: 'onLoad',\n  render: 'onRender',\n  idle: 'onIdle',\n  remove: 'onRemove',\n  data: 'onData',\n  styledata: 'onStyleData',\n  sourcedata: 'onSourceData',\n  error: 'onError'\n};\nconst settingNames = ['minZoom', 'maxZoom', 'minPitch', 'maxPitch', 'maxBounds', 'projection', 'renderWorldCopies'];\nconst handlerNames = ['scrollZoom', 'boxZoom', 'dragRotate', 'dragPan', 'keyboard', 'doubleClickZoom', 'touchZoomRotate', 'touchPitch'];\n/**\n * A wrapper for mapbox-gl's Map class\n */\n\nexport default class Mapbox {\n  constructor(MapClass, props, container) {\n    // mapboxgl.Map instance. Not using type here because we are accessing\n    // private members and methods\n    this._map = null; // Internal states\n\n    this._internalUpdate = false;\n    this._inRender = false;\n    this._hoveredFeatures = null;\n    this._deferredEvents = {\n      move: false,\n      zoom: false,\n      pitch: false,\n      rotate: false\n    };\n\n    this._onEvent = e => {\n      // @ts-ignore\n      const cb = this.props[otherEvents[e.type]];\n\n      if (cb) {\n        cb(e);\n      }\n    };\n\n    this._onPointerEvent = e => {\n      if (e.type === 'mousemove' || e.type === 'mouseout') {\n        this._updateHover(e);\n      } // @ts-ignore\n\n\n      const cb = this.props[pointerEvents[e.type]];\n\n      if (cb) {\n        if (this.props.interactiveLayerIds && e.type !== 'mouseover' && e.type !== 'mouseout') {\n          const features = this._hoveredFeatures || this._map.queryRenderedFeatures(e.point, {\n            layers: this.props.interactiveLayerIds\n          });\n\n          if (!features.length) {\n            return;\n          }\n\n          e.features = features;\n        }\n\n        cb(e);\n        delete e.features;\n      }\n    };\n\n    this._onCameraEvent = e => {\n      if (!this._internalUpdate) {\n        // @ts-ignore\n        const cb = this.props[cameraEvents[e.type]];\n\n        if (cb) {\n          cb(e);\n        }\n      }\n\n      if (e.type in this._deferredEvents) {\n        this._deferredEvents[e.type] = false;\n      }\n    };\n\n    this._MapClass = MapClass;\n    this.props = props;\n\n    this._initialize(container);\n  }\n\n  get map() {\n    return this._map;\n  }\n\n  get transform() {\n    return this._renderTransform;\n  }\n\n  setProps(props) {\n    const oldProps = this.props;\n    this.props = props;\n\n    const settingsChanged = this._updateSettings(props, oldProps);\n\n    if (settingsChanged) {\n      this._renderTransform = cloneTransform(this._map.transform);\n    }\n\n    const sizeChanged = this._updateSize(props);\n\n    const viewStateChanged = this._updateViewState(props, true);\n\n    this._updateStyle(props, oldProps);\n\n    this._updateStyleComponents(props, oldProps);\n\n    this._updateHandlers(props, oldProps); // If 1) view state has changed to match props and\n    //    2) the props change is not triggered by map events,\n    // it's driven by an external state change. Redraw immediately\n\n\n    if (settingsChanged || sizeChanged || viewStateChanged && !this._map.isMoving()) {\n      this.redraw();\n    }\n  }\n\n  static reuse(props, container) {\n    const that = Mapbox.savedMaps.pop();\n\n    if (!that) {\n      return null;\n    }\n\n    const map = that.map; // When reusing the saved map, we need to reparent the map(canvas) and other child nodes\n    // intoto the new container from the props.\n    // Step1: reparenting child nodes from old container to new container\n\n    const oldContainer = map.getContainer();\n    container.className = oldContainer.className;\n\n    while (oldContainer.childNodes.length > 0) {\n      container.appendChild(oldContainer.childNodes[0]);\n    } // Step2: replace the internal container with new container from the react component\n    // @ts-ignore\n\n\n    map._container = container; // Step 3: apply new props\n\n    if (props.initialViewState) {\n      that._updateViewState(props.initialViewState, false);\n    }\n\n    map.resize();\n    that.setProps({ ...props,\n      styleDiffing: false\n    }); // Simulate load event\n\n    if (map.isStyleLoaded()) {\n      map.fire('load');\n    } else {\n      map.once('styledata', () => map.fire('load'));\n    }\n\n    return that;\n  }\n  /* eslint-disable complexity,max-statements */\n\n\n  _initialize(container) {\n    const {\n      props\n    } = this;\n    const mapOptions = { ...props,\n      ...props.initialViewState,\n      accessToken: props.mapboxAccessToken || getAccessTokenFromEnv() || null,\n      container,\n      style: normalizeStyle(props.mapStyle)\n    };\n    const viewState = mapOptions.initialViewState || mapOptions.viewState || mapOptions;\n    Object.assign(mapOptions, {\n      center: [viewState.longitude || 0, viewState.latitude || 0],\n      zoom: viewState.zoom || 0,\n      pitch: viewState.pitch || 0,\n      bearing: viewState.bearing || 0\n    });\n\n    if (props.gl) {\n      // eslint-disable-next-line\n      const getContext = HTMLCanvasElement.prototype.getContext; // Hijack canvas.getContext to return our own WebGLContext\n      // This will be called inside the mapboxgl.Map constructor\n      // @ts-expect-error\n\n      HTMLCanvasElement.prototype.getContext = () => {\n        // Unhijack immediately\n        HTMLCanvasElement.prototype.getContext = getContext;\n        return props.gl;\n      };\n    }\n\n    const map = new this._MapClass(mapOptions); // Props that are not part of constructor options\n\n    if (viewState.padding) {\n      map.setPadding(viewState.padding);\n    }\n\n    if (props.cursor) {\n      map.getCanvas().style.cursor = props.cursor;\n    }\n\n    this._renderTransform = cloneTransform(map.transform); // Hack\n    // Insert code into map's render cycle\n\n    const renderMap = map._render;\n\n    map._render = arg => {\n      this._inRender = true;\n      renderMap.call(map, arg);\n      this._inRender = false;\n    };\n\n    const runRenderTaskQueue = map._renderTaskQueue.run;\n\n    map._renderTaskQueue.run = arg => {\n      runRenderTaskQueue.call(map._renderTaskQueue, arg);\n\n      this._onBeforeRepaint();\n    };\n\n    map.on('render', () => this._onAfterRepaint()); // Insert code into map's event pipeline\n\n    const fireEvent = map.fire;\n    map.fire = this._fireEvent.bind(this, fireEvent); // add listeners\n\n    map.on('resize', () => {\n      this._renderTransform.resize(map.transform.width, map.transform.height);\n    });\n    map.on('styledata', () => this._updateStyleComponents(this.props, {}));\n    map.on('sourcedata', () => this._updateStyleComponents(this.props, {}));\n\n    for (const eventName in pointerEvents) {\n      map.on(eventName, this._onPointerEvent);\n    }\n\n    for (const eventName in cameraEvents) {\n      map.on(eventName, this._onCameraEvent);\n    }\n\n    for (const eventName in otherEvents) {\n      map.on(eventName, this._onEvent);\n    }\n\n    this._map = map;\n  }\n  /* eslint-enable complexity,max-statements */\n\n\n  recycle() {\n    Mapbox.savedMaps.push(this);\n  }\n\n  destroy() {\n    this._map.remove();\n  } // Force redraw the map now. Typically resize() and jumpTo() is reflected in the next\n  // render cycle, which is managed by Mapbox's animation loop.\n  // This removes the synchronization issue caused by requestAnimationFrame.\n\n\n  redraw() {\n    const map = this._map; // map._render will throw error if style does not exist\n    // https://github.com/mapbox/mapbox-gl-js/blob/fb9fc316da14e99ff4368f3e4faa3888fb43c513\n    //   /src/ui/map.js#L1834\n\n    if (!this._inRender && map.style) {\n      // cancel the scheduled update\n      if (map._frame) {\n        map._frame.cancel();\n\n        map._frame = null;\n      } // the order is important - render() may schedule another update\n\n\n      map._render();\n    }\n  }\n  /* Trigger map resize if size is controlled\n     @param {object} nextProps\n     @returns {bool} true if size has changed\n   */\n\n\n  _updateSize(nextProps) {\n    // Check if size is controlled\n    const {\n      viewState\n    } = nextProps;\n\n    if (viewState) {\n      const map = this._map;\n\n      if (viewState.width !== map.transform.width || viewState.height !== map.transform.height) {\n        map.resize();\n        return true;\n      }\n    }\n\n    return false;\n  } // Adapted from map.jumpTo\n\n  /* Update camera to match props\n     @param {object} nextProps\n     @param {bool} triggerEvents - should fire camera events\n     @returns {bool} true if anything is changed\n   */\n\n\n  _updateViewState(nextProps, triggerEvents) {\n    if (this._internalUpdate) {\n      return false;\n    }\n\n    const map = this._map;\n    const tr = this._renderTransform; // Take a snapshot of the transform before mutation\n\n    const {\n      zoom,\n      pitch,\n      bearing\n    } = tr;\n    const changed = applyViewStateToTransform(tr, { ...transformToViewState(map.transform),\n      ...nextProps\n    });\n\n    if (changed && triggerEvents) {\n      const deferredEvents = this._deferredEvents; // Delay DOM control updates to the next render cycle\n\n      deferredEvents.move = true;\n      deferredEvents.zoom || (deferredEvents.zoom = zoom !== tr.zoom);\n      deferredEvents.rotate || (deferredEvents.rotate = bearing !== tr.bearing);\n      deferredEvents.pitch || (deferredEvents.pitch = pitch !== tr.pitch);\n    } // Avoid manipulating the real transform when interaction/animation is ongoing\n    // as it would interfere with Mapbox's handlers\n\n\n    if (!map.isMoving()) {\n      applyViewStateToTransform(map.transform, nextProps);\n    }\n\n    return changed;\n  }\n  /* Update camera constraints and projection settings to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n\n\n  _updateSettings(nextProps, currProps) {\n    const map = this._map;\n    let changed = false;\n\n    for (const propName of settingNames) {\n      if (propName in nextProps && !deepEqual(nextProps[propName], currProps[propName])) {\n        changed = true;\n        map[`set${propName[0].toUpperCase()}${propName.slice(1)}`](nextProps[propName]);\n      }\n    }\n\n    return changed;\n  }\n  /* Update map style to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if style is changed\n   */\n\n\n  _updateStyle(nextProps, currProps) {\n    if (nextProps.cursor !== currProps.cursor) {\n      this._map.getCanvas().style.cursor = nextProps.cursor;\n    }\n\n    if (nextProps.mapStyle !== currProps.mapStyle) {\n      const options = {\n        diff: nextProps.styleDiffing\n      };\n\n      if ('localIdeographFontFamily' in nextProps) {\n        options.localIdeographFontFamily = nextProps.localIdeographFontFamily;\n      }\n\n      this._map.setStyle(normalizeStyle(nextProps.mapStyle), options);\n\n      return true;\n    }\n\n    return false;\n  }\n  /* Update fog, light and terrain to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n\n\n  _updateStyleComponents(nextProps, currProps) {\n    const map = this._map;\n    let changed = false;\n\n    if (map.style.loaded()) {\n      if ('light' in nextProps && !deepEqual(nextProps.light, currProps.light)) {\n        changed = true;\n        map.setLight(nextProps.light);\n      }\n\n      if ('fog' in nextProps && !deepEqual(nextProps.fog, currProps.fog)) {\n        changed = true;\n        map.setFog(nextProps.fog);\n      }\n\n      if ('terrain' in nextProps && !deepEqual(nextProps.terrain, currProps.terrain)) {\n        if (!nextProps.terrain || map.getSource(nextProps.terrain.source)) {\n          changed = true;\n          map.setTerrain(nextProps.terrain);\n        }\n      }\n    }\n\n    return changed;\n  }\n  /* Update interaction handlers to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n\n\n  _updateHandlers(nextProps, currProps) {\n    const map = this._map;\n    let changed = false;\n\n    for (const propName of handlerNames) {\n      const newValue = nextProps[propName];\n\n      if (!deepEqual(newValue, currProps[propName])) {\n        changed = true;\n\n        if (newValue) {\n          map[propName].enable(newValue);\n        } else {\n          map[propName].disable();\n        }\n      }\n    }\n\n    return changed;\n  }\n\n  _updateHover(e) {\n    var _a;\n\n    const {\n      props\n    } = this;\n    const shouldTrackHoveredFeatures = props.interactiveLayerIds && (props.onMouseMove || props.onMouseEnter || props.onMouseLeave);\n\n    if (shouldTrackHoveredFeatures) {\n      const eventType = e.type;\n      const wasHovering = ((_a = this._hoveredFeatures) === null || _a === void 0 ? void 0 : _a.length) > 0;\n      let features;\n\n      if (eventType === 'mousemove') {\n        try {\n          features = this._map.queryRenderedFeatures(e.point, {\n            layers: props.interactiveLayerIds\n          });\n        } catch (_b) {\n          features = [];\n        }\n      } else {\n        features = [];\n      }\n\n      const isHovering = features.length > 0;\n\n      if (!isHovering && wasHovering) {\n        e.type = 'mouseleave';\n\n        this._onPointerEvent(e);\n      }\n\n      this._hoveredFeatures = features;\n\n      if (isHovering && !wasHovering) {\n        e.type = 'mouseenter';\n\n        this._onPointerEvent(e);\n      }\n\n      e.type = eventType;\n    } else {\n      this._hoveredFeatures = null;\n    }\n  }\n\n  _fireEvent(baseFire, event, properties) {\n    const map = this._map;\n    const tr = map.transform;\n    const eventType = typeof event === 'string' ? event : event.type;\n\n    if (eventType === 'move') {\n      this._updateViewState(this.props, false);\n    }\n\n    if (eventType in cameraEvents) {\n      if (typeof event === 'object') {\n        event.viewState = transformToViewState(tr);\n      }\n\n      if (this._map.isMoving()) {\n        // Replace map.transform with ours during the callbacks\n        map.transform = this._renderTransform;\n        baseFire.call(map, event, properties);\n        map.transform = tr;\n        return map;\n      }\n    }\n\n    baseFire.call(map, event, properties);\n    return map;\n  } // All camera manipulations are complete, ready to repaint\n\n\n  _onBeforeRepaint() {\n    const map = this._map; // If there are camera changes driven by props, invoke camera events so that DOM controls are synced\n\n    this._internalUpdate = true;\n\n    for (const eventType in this._deferredEvents) {\n      if (this._deferredEvents[eventType]) {\n        map.fire(eventType);\n      }\n    }\n\n    this._internalUpdate = false;\n    const tr = this._map.transform; // Make sure camera matches the current props\n\n    this._map.transform = this._renderTransform;\n    this._map.painter.transform = this._renderTransform;\n\n    this._onAfterRepaint = () => {\n      // Terrain is updated during render\n      if (tr.elevation = this._renderTransform.elevation) {\n        tr.updateElevation(false);\n      } // Restores camera state before render/load events are fired\n\n\n      this._map.transform = tr;\n    };\n  }\n\n}\nMapbox.savedMaps = [];\n/**\n * Access token can be provided via one of:\n *   mapboxAccessToken prop\n *   access_token query parameter\n *   MapboxAccessToken environment variable\n *   REACT_APP_MAPBOX_ACCESS_TOKEN environment variable\n * @returns access token\n */\n\nfunction getAccessTokenFromEnv() {\n  let accessToken = null;\n  /* global location, process */\n\n  if (typeof location !== 'undefined') {\n    const match = /access_token=([^&\\/]*)/.exec(location.search);\n    accessToken = match && match[1];\n  } // Note: This depends on bundler plugins (e.g. webpack) importing environment correctly\n\n\n  try {\n    accessToken = accessToken || process.env.MapboxAccessToken;\n  } catch (_a) {// ignore\n  }\n\n  try {\n    accessToken = accessToken || process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n  } catch (_b) {// ignore\n  }\n\n  return accessToken;\n}","map":{"version":3,"mappings":"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","names":["transformToViewState","applyViewStateToTransform","cloneTransform","normalizeStyle","deepEqual","pointerEvents","mousedown","mouseup","mouseover","mousemove","click","dblclick","mouseenter","mouseleave","mouseout","contextmenu","touchstart","touchend","touchmove","touchcancel","cameraEvents","movestart","move","moveend","dragstart","drag","dragend","zoomstart","zoom","zoomend","rotatestart","rotate","rotateend","pitchstart","pitch","pitchend","otherEvents","wheel","boxzoomstart","boxzoomend","boxzoomcancel","resize","load","render","idle","remove","data","styledata","sourcedata","error","settingNames","handlerNames","Mapbox","constructor","MapClass","props","container","e","cb","type","_updateHover","interactiveLayerIds","features","_hoveredFeatures","_map","queryRenderedFeatures","point","layers","length","_internalUpdate","_deferredEvents","_MapClass","_initialize","map","transform","_renderTransform","setProps","oldProps","settingsChanged","_updateSettings","sizeChanged","_updateSize","viewStateChanged","_updateViewState","_updateStyle","_updateStyleComponents","_updateHandlers","isMoving","redraw","reuse","that","savedMaps","pop","oldContainer","getContainer","className","childNodes","appendChild","_container","initialViewState","styleDiffing","isStyleLoaded","fire","once","mapOptions","accessToken","mapboxAccessToken","getAccessTokenFromEnv","style","mapStyle","viewState","Object","assign","center","longitude","latitude","bearing","gl","getContext","HTMLCanvasElement","prototype","padding","setPadding","cursor","getCanvas","renderMap","_render","arg","_inRender","call","runRenderTaskQueue","_renderTaskQueue","run","_onBeforeRepaint","on","_onAfterRepaint","fireEvent","_fireEvent","bind","width","height","eventName","_onPointerEvent","_onCameraEvent","_onEvent","recycle","push","destroy","_frame","cancel","nextProps","triggerEvents","tr","changed","deferredEvents","currProps","propName","toUpperCase","slice","options","diff","localIdeographFontFamily","setStyle","loaded","light","setLight","fog","setFog","terrain","getSource","source","setTerrain","newValue","enable","disable","shouldTrackHoveredFeatures","onMouseMove","onMouseEnter","onMouseLeave","eventType","wasHovering","_a","isHovering","baseFire","event","properties","painter","elevation","updateElevation","location","match","exec","search","process","env","MapboxAccessToken","REACT_APP_MAPBOX_ACCESS_TOKEN"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/react-map-gl/src/mapbox/mapbox.ts"],"sourcesContent":["import {transformToViewState, applyViewStateToTransform, cloneTransform} from '../utils/transform';\nimport {normalizeStyle} from '../utils/style-utils';\nimport {deepEqual} from '../utils/deep-equal';\n\nimport type {\n  Transform,\n  ProjectionSpecification,\n  ViewState,\n  ViewStateChangeEvent,\n  DragPanOptions,\n  ZoomRotateOptions,\n  TransformRequestFunction,\n  Light,\n  Fog,\n  TerrainSpecification,\n  MapboxStyle,\n  ImmutableLike,\n  LngLatBoundsLike,\n  FitBoundsOptions,\n  MapMouseEvent,\n  MapLayerMouseEvent,\n  MapLayerTouchEvent,\n  MapWheelEvent,\n  MapBoxZoomEvent,\n  MapStyleDataEvent,\n  MapSourceDataEvent,\n  MapboxEvent,\n  ErrorEvent,\n  MapboxGeoJSONFeature,\n  MapboxMap\n} from '../types';\n\nexport type MapboxProps = Partial<ViewState> & {\n  // Init options\n  mapboxAccessToken?: string;\n\n  /** Camera options used when constructing the Map instance */\n  initialViewState?: Partial<ViewState> & {\n    /** The initial bounds of the map. If bounds is specified, it overrides longitude, latitude and zoom options. */\n    bounds?: LngLatBoundsLike;\n    /** A fitBounds options object to use only when setting the bounds option. */\n    fitBoundsOptions?: FitBoundsOptions;\n  };\n\n  /** If provided, render into an external WebGL context */\n  gl?: WebGLRenderingContext;\n\n  /**\n   * If true, the gl context will be created with MSA antialiasing, which can be useful for antialiasing custom layers.\n   * This is false by default as a performance optimization.\n   * @default false\n   */\n  antialias?: boolean;\n  /**\n   * If true, an attribution control will be added to the map.\n   * @default true\n   */\n  attributionControl?: boolean;\n  /**\n   * Snap to north threshold in degrees.\n   * @default 7\n   */\n  bearingSnap?: number;\n  /**\n   * The max number of pixels a user can shift the mouse pointer during a click for it to be\n   * considered a valid click (as opposed to a mouse drag).\n   * @default 3\n   */\n  clickTolerance?: number;\n  /**\n   * If `true`, Resource Timing API information will be collected for requests made by GeoJSON\n   * and Vector Tile web workers (this information is normally inaccessible from the main\n   * Javascript thread). Information will be returned in a `resourceTiming` property of\n   * relevant `data` events.\n   * @default false\n   */\n  collectResourceTiming?: boolean;\n  /**\n   * If `true` , scroll zoom will require pressing the ctrl or ⌘ key while scrolling to zoom map,\n   * and touch pan will require using two fingers while panning to move the map.\n   * Touch pitch will require three fingers to activate if enabled.\n   */\n  cooperativeGestures?: boolean;\n  /**\n   * If `true`, symbols from multiple sources can collide with each other during collision\n   * detection. If `false`, collision detection is run separately for the symbols in each source.\n   * @default true\n   */\n  crossSourceCollisions?: boolean;\n  /** String or strings to show in an AttributionControl.\n   * Only applicable if options.attributionControl is `true`. */\n  customAttribution?: string | string[];\n  /**\n   * Controls the duration of the fade-in/fade-out animation for label collisions, in milliseconds.\n   * This setting affects all symbol layers. This setting does not affect the duration of runtime\n   * styling transitions or raster tile cross-fading.\n   * @default 300\n   */\n  fadeDuration?: number;\n  /** If true, map creation will fail if the implementation determines that the performance of the created WebGL context would be dramatically lower than expected.\n   * @default false\n   */\n  failIfMajorPerformanceCaveat?: boolean;\n  /** If `true`, the map's position (zoom, center latitude, center longitude, bearing, and pitch) will be synced with the hash fragment of the page's URL.\n   * For example, `http://path/to/my/page.html#2.59/39.26/53.07/-24.1/60`.\n   * An additional string may optionally be provided to indicate a parameter-styled hash,\n   * e.g. http://path/to/my/page.html#map=2.59/39.26/53.07/-24.1/60&foo=bar, where foo\n   * is a custom parameter and bar is an arbitrary hash distinct from the map hash.\n   */\n  hash?: boolean | string;\n  /** If false, no mouse, touch, or keyboard listeners are attached to the map, so it will not respond to input\n   * @default true\n   */\n  interactive?: boolean;\n  /** A patch to apply to the default localization table for UI strings, e.g. control tooltips.\n   * The `locale` object maps namespaced UI string IDs to translated strings in the target language;\n   * see `src/ui/default_locale.js` for an example with all supported string IDs.\n   * The object may specify all UI strings (thereby adding support for a new translation) or\n   * only a subset of strings (thereby patching the default translation table).\n   */\n  locale?: {[key: string]: string};\n  /**\n   * Overrides the generation of all glyphs and font settings except font-weight keywords\n   * Also overrides localIdeographFontFamily\n   * @default null\n   */\n  localFontFamily?: string;\n  /**\n   * If specified, defines a CSS font-family for locally overriding generation of glyphs in the\n   * 'CJK Unified Ideographs' and 'Hangul Syllables' ranges. In these ranges, font settings from\n   * the map's style will be ignored, except for font-weight keywords (light/regular/medium/bold).\n   * The purpose of this option is to avoid bandwidth-intensive glyph server requests.\n   * @default \"sans-serif\"\n   */\n  localIdeographFontFamily?: string;\n  /**\n   * A string representing the position of the Mapbox wordmark on the map.\n   * @default \"bottom-left\"\n   */\n  logoPosition?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n  /**\n   * The maximum number of tiles stored in the tile cache for a given source. If omitted, the\n   * cache will be dynamically sized based on the current viewport.\n   * @default null\n   */\n  maxTileCacheSize?: number;\n  /**\n   * If true, map will prioritize rendering for performance by reordering layers\n   * If false, layers will always be drawn in the specified order\n   * @default true\n   */\n  optimizeForTerrain?: boolean;\n  /**\n   * If `false`, the map's pitch (tilt) control with \"drag to rotate\" interaction will be disabled.\n   * @default true\n   */\n  pitchWithRotate?: boolean;\n  /** If true, The maps canvas can be exported to a PNG using map.getCanvas().toDataURL();. This is false by default as a performance optimization.\n   * @default false\n   */\n  preserveDrawingBuffer?: boolean;\n  /**\n   * If `false`, the map won't attempt to re-request tiles once they expire per their HTTP\n   * `cacheControl`/`expires` headers.\n   * @default true\n   */\n  refreshExpiredTiles?: boolean;\n  /**\n   * Allows for the usage of the map in automated tests without an accessToken with custom self-hosted test fixtures.\n   * @default null\n   */\n  testMode?: boolean;\n  /**\n   * If  true, the map will automatically resize when the browser window resizes\n   * @default true\n   */\n  trackResize?: boolean;\n  /**\n   * A callback run before the Map makes a request for an external URL. The callback can be\n   * used to modify the url, set headers, or set the credentials property for cross-origin requests.\n   * @default null\n   */\n  transformRequest?: TransformRequestFunction;\n\n  // Handlers\n\n  /**\n   * If true, enable the \"box zoom\" interaction (see BoxZoomHandler)\n   * @default true\n   */\n  boxZoom?: boolean;\n  /**\n   * If true, enable the \"double click to zoom\" interaction (see DoubleClickZoomHandler).\n   * @default true\n   */\n  doubleClickZoom?: boolean;\n  /**\n   * If `true`, the \"drag to pan\" interaction is enabled.\n   * An `Object` value is passed as options to {@link DragPanHandler#enable}.\n   * @default true\n   */\n  dragPan?: boolean | DragPanOptions;\n  /**\n   * If true, enable the \"drag to rotate\" interaction (see DragRotateHandler).\n   * @default true\n   */\n  dragRotate?: boolean;\n  /**\n   * If true, enable keyboard shortcuts (see KeyboardHandler).\n   * @default true\n   */\n  keyboard?: boolean;\n  /**\n   * If `true`, the \"scroll to zoom\" interaction is enabled.\n   * An `Object` value is passed as options to {@link ScrollZoomHandler#enable}.\n   * @default true\n   */\n  scrollZoom?: boolean | ZoomRotateOptions;\n  /**\n   * If `true`, the \"drag to pitch\" interaction is enabled.\n   * An `Object` value is passed as options to {@link TouchPitchHandler#enable}.\n   * @default true\n   */\n  touchPitch?: boolean;\n  /**\n   * If `true`, the \"pinch to rotate and zoom\" interaction is enabled.\n   * An `Object` value is passed as options to {@link TouchZoomRotateHandler#enable}.\n   * @default true\n   */\n  touchZoomRotate?: boolean | ZoomRotateOptions;\n\n  // Constraints\n\n  /** If set, the map is constrained to the given bounds. */\n  maxBounds?: LngLatBoundsLike;\n  /** Maximum pitch of the map. */\n  maxPitch?: number;\n  /** Maximum zoom of the map. */\n  maxZoom?: number;\n  /** Minimum pitch of the map. */\n  minPitch?: number;\n  /** Minimum zoom of the map. */\n  minZoom?: number;\n\n  /** For external controller to override the camera state */\n  viewState?: ViewState & {\n    width: number;\n    height: number;\n  };\n\n  // Styling\n\n  /** Mapbox style */\n  mapStyle?: string | MapboxStyle | ImmutableLike;\n  /** Enable diffing when the map style changes\n   * @default true\n   */\n  styleDiffing?: boolean;\n  /** The fog property of the style. Must conform to the Fog Style Specification .\n   * If `null` is provided, removes the fog from the map. */\n  fog?: Fog | null;\n  /** Light properties of the map. */\n  light?: Light;\n  /** Terrain property of the style. Must conform to the Terrain Style Specification .\n   * If `null` is provided, removes terrain from the map. */\n  terrain?: TerrainSpecification | null;\n  /** Default layers to query on pointer events */\n  interactiveLayerIds?: string[];\n  /** The projection the map should be rendered in\n   * @default \"mercator\"\n   */\n  projection?: ProjectionSpecification | string;\n  /**\n   * If `true`, multiple copies of the world will be rendered, when zoomed out.\n   * @default true\n   */\n  renderWorldCopies?: boolean;\n  /** CSS cursor */\n  cursor?: string;\n\n  // Callbacks\n  onMouseDown?: (e: MapLayerMouseEvent) => void;\n  onMouseUp?: (e: MapLayerMouseEvent) => void;\n  onMouseOver?: (e: MapLayerMouseEvent) => void;\n  onMouseMove?: (e: MapLayerMouseEvent) => void;\n  onClick?: (e: MapLayerMouseEvent) => void;\n  onDblClick?: (e: MapLayerMouseEvent) => void;\n  onMouseEnter?: (e: MapLayerMouseEvent) => void;\n  onMouseLeave?: (e: MapLayerMouseEvent) => void;\n  onMouseOut?: (e: MapLayerMouseEvent) => void;\n  onContextMenu?: (e: MapLayerMouseEvent) => void;\n  onTouchStart?: (e: MapLayerTouchEvent) => void;\n  onTouchEnd?: (e: MapLayerTouchEvent) => void;\n  onTouchMove?: (e: MapLayerTouchEvent) => void;\n  onTouchCancel?: (e: MapLayerTouchEvent) => void;\n\n  onMoveStart?: (e: ViewStateChangeEvent) => void;\n  onMove?: (e: ViewStateChangeEvent) => void;\n  onMoveEnd?: (e: ViewStateChangeEvent) => void;\n  onDragStart?: (e: ViewStateChangeEvent) => void;\n  onDrag?: (e: ViewStateChangeEvent) => void;\n  onDragEnd?: (e: ViewStateChangeEvent) => void;\n  onZoomStart?: (e: ViewStateChangeEvent) => void;\n  onZoom?: (e: ViewStateChangeEvent) => void;\n  onZoomEnd?: (e: ViewStateChangeEvent) => void;\n  onRotateStart?: (e: ViewStateChangeEvent) => void;\n  onRotate?: (e: ViewStateChangeEvent) => void;\n  onRotateEnd?: (e: ViewStateChangeEvent) => void;\n  onPitchStart?: (e: ViewStateChangeEvent) => void;\n  onPitch?: (e: ViewStateChangeEvent) => void;\n  onPitchEnd?: (e: ViewStateChangeEvent) => void;\n\n  onWheel?: (e: MapWheelEvent) => void;\n  onBoxZoomStart?: (e: MapBoxZoomEvent) => void;\n  onBoxZoomEnd?: (e: MapBoxZoomEvent) => void;\n  onBoxZoomCancel?: (e: MapBoxZoomEvent) => void;\n\n  onResize?: (e: MapboxEvent) => void;\n  onLoad?: (e: MapboxEvent) => void;\n  onRender?: (e: MapboxEvent) => void;\n  onIdle?: (e: MapboxEvent) => void;\n  onError?: (e: ErrorEvent) => void;\n  onRemove?: (e: MapboxEvent) => void;\n  onData?: (e: MapStyleDataEvent | MapSourceDataEvent) => void;\n  onStyleData?: (e: MapStyleDataEvent) => void;\n  onSourceData?: (e: MapSourceDataEvent) => void;\n};\n\nconst pointerEvents = {\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseover: 'onMouseOver',\n  mousemove: 'onMouseMove',\n  click: 'onClick',\n  dblclick: 'onDblClick',\n  mouseenter: 'onMouseEnter',\n  mouseleave: 'onMouseLeave',\n  mouseout: 'onMouseOut',\n  contextmenu: 'onContextMenu',\n  touchstart: 'onTouchStart',\n  touchend: 'onTouchEnd',\n  touchmove: 'onTouchMove',\n  touchcancel: 'onTouchCancel'\n};\nconst cameraEvents = {\n  movestart: 'onMoveStart',\n  move: 'onMove',\n  moveend: 'onMoveEnd',\n  dragstart: 'onDragStart',\n  drag: 'onDrag',\n  dragend: 'onDragEnd',\n  zoomstart: 'onZoomStart',\n  zoom: 'onZoom',\n  zoomend: 'onZoomEnd',\n  rotatestart: 'onRotateStart',\n  rotate: 'onRotate',\n  rotateend: 'onRotateEnd',\n  pitchstart: 'onPitchStart',\n  pitch: 'onPitch',\n  pitchend: 'onPitchEnd'\n};\nconst otherEvents = {\n  wheel: 'onWheel',\n  boxzoomstart: 'onBoxZoomStart',\n  boxzoomend: 'onBoxZoomEnd',\n  boxzoomcancel: 'onBoxZoomCancel',\n  resize: 'onResize',\n  load: 'onLoad',\n  render: 'onRender',\n  idle: 'onIdle',\n  remove: 'onRemove',\n  data: 'onData',\n  styledata: 'onStyleData',\n  sourcedata: 'onSourceData',\n  error: 'onError'\n};\nconst settingNames: (keyof MapboxProps)[] = [\n  'minZoom',\n  'maxZoom',\n  'minPitch',\n  'maxPitch',\n  'maxBounds',\n  'projection',\n  'renderWorldCopies'\n];\nconst handlerNames: (keyof MapboxProps)[] = [\n  'scrollZoom',\n  'boxZoom',\n  'dragRotate',\n  'dragPan',\n  'keyboard',\n  'doubleClickZoom',\n  'touchZoomRotate',\n  'touchPitch'\n];\n\n/**\n * A wrapper for mapbox-gl's Map class\n */\nexport default class Mapbox {\n  private _MapClass: typeof MapboxMap;\n  // mapboxgl.Map instance. Not using type here because we are accessing\n  // private members and methods\n  private _map: any = null;\n  // User-supplied props\n  props: MapboxProps;\n\n  // Mapbox map is stateful.\n  // During method calls/user interactions, map.transform is mutated and\n  // deviate from user-supplied props.\n  // In order to control the map reactively, we shadow the transform\n  // with the one below, which reflects the view state resolved from\n  // both user-supplied props and the underlying state\n  private _renderTransform: Transform;\n\n  // Internal states\n  private _internalUpdate: boolean = false;\n  private _inRender: boolean = false;\n  private _hoveredFeatures: MapboxGeoJSONFeature[] = null;\n  private _deferredEvents: {\n    move: boolean;\n    zoom: boolean;\n    pitch: boolean;\n    rotate: boolean;\n  } = {\n    move: false,\n    zoom: false,\n    pitch: false,\n    rotate: false\n  };\n\n  static savedMaps: Mapbox[] = [];\n\n  constructor(MapClass: typeof MapboxMap, props: MapboxProps, container: HTMLDivElement) {\n    this._MapClass = MapClass;\n    this.props = props;\n    this._initialize(container);\n  }\n\n  get map(): MapboxMap {\n    return this._map as MapboxMap;\n  }\n\n  get transform(): Transform {\n    return this._renderTransform;\n  }\n\n  setProps(props: MapboxProps) {\n    const oldProps = this.props;\n    this.props = props;\n\n    const settingsChanged = this._updateSettings(props, oldProps);\n    if (settingsChanged) {\n      this._renderTransform = cloneTransform(this._map.transform);\n    }\n    const sizeChanged = this._updateSize(props);\n    const viewStateChanged = this._updateViewState(props, true);\n    this._updateStyle(props, oldProps);\n    this._updateStyleComponents(props, oldProps);\n    this._updateHandlers(props, oldProps);\n\n    // If 1) view state has changed to match props and\n    //    2) the props change is not triggered by map events,\n    // it's driven by an external state change. Redraw immediately\n    if (settingsChanged || sizeChanged || (viewStateChanged && !this._map.isMoving())) {\n      this.redraw();\n    }\n  }\n\n  static reuse(props: MapboxProps, container: HTMLDivElement) {\n    const that = Mapbox.savedMaps.pop();\n    if (!that) {\n      return null;\n    }\n\n    const map = that.map;\n    // When reusing the saved map, we need to reparent the map(canvas) and other child nodes\n    // intoto the new container from the props.\n    // Step1: reparenting child nodes from old container to new container\n    const oldContainer = map.getContainer();\n    container.className = oldContainer.className;\n    while (oldContainer.childNodes.length > 0) {\n      container.appendChild(oldContainer.childNodes[0]);\n    }\n    // Step2: replace the internal container with new container from the react component\n    // @ts-ignore\n    map._container = container;\n\n    // Step 3: apply new props\n    if (props.initialViewState) {\n      that._updateViewState(props.initialViewState, false);\n    }\n    map.resize();\n    that.setProps({...props, styleDiffing: false});\n\n    // Simulate load event\n    if (map.isStyleLoaded()) {\n      map.fire('load');\n    } else {\n      map.once('styledata', () => map.fire('load'));\n    }\n    return that;\n  }\n\n  /* eslint-disable complexity,max-statements */\n  _initialize(container: HTMLDivElement) {\n    const {props} = this;\n    const mapOptions = {\n      ...props,\n      ...props.initialViewState,\n      accessToken: props.mapboxAccessToken || getAccessTokenFromEnv() || null,\n      container,\n      style: normalizeStyle(props.mapStyle)\n    };\n\n    const viewState = mapOptions.initialViewState || mapOptions.viewState || mapOptions;\n    Object.assign(mapOptions, {\n      center: [viewState.longitude || 0, viewState.latitude || 0],\n      zoom: viewState.zoom || 0,\n      pitch: viewState.pitch || 0,\n      bearing: viewState.bearing || 0\n    });\n\n    if (props.gl) {\n      // eslint-disable-next-line\n      const getContext = HTMLCanvasElement.prototype.getContext;\n      // Hijack canvas.getContext to return our own WebGLContext\n      // This will be called inside the mapboxgl.Map constructor\n      // @ts-expect-error\n      HTMLCanvasElement.prototype.getContext = () => {\n        // Unhijack immediately\n        HTMLCanvasElement.prototype.getContext = getContext;\n        return props.gl;\n      };\n    }\n\n    const map: any = new this._MapClass(mapOptions);\n    // Props that are not part of constructor options\n    if (viewState.padding) {\n      map.setPadding(viewState.padding);\n    }\n    if (props.cursor) {\n      map.getCanvas().style.cursor = props.cursor;\n    }\n    this._renderTransform = cloneTransform(map.transform);\n\n    // Hack\n    // Insert code into map's render cycle\n    const renderMap = map._render;\n    map._render = (arg: number) => {\n      this._inRender = true;\n      renderMap.call(map, arg);\n      this._inRender = false;\n    };\n    const runRenderTaskQueue = map._renderTaskQueue.run;\n    map._renderTaskQueue.run = (arg: number) => {\n      runRenderTaskQueue.call(map._renderTaskQueue, arg);\n      this._onBeforeRepaint();\n    };\n    map.on('render', () => this._onAfterRepaint());\n    // Insert code into map's event pipeline\n    const fireEvent = map.fire;\n    map.fire = this._fireEvent.bind(this, fireEvent);\n\n    // add listeners\n    map.on('resize', () => {\n      this._renderTransform.resize(map.transform.width, map.transform.height);\n    });\n    map.on('styledata', () => this._updateStyleComponents(this.props, {}));\n    map.on('sourcedata', () => this._updateStyleComponents(this.props, {}));\n    for (const eventName in pointerEvents) {\n      map.on(eventName, this._onPointerEvent);\n    }\n    for (const eventName in cameraEvents) {\n      map.on(eventName, this._onCameraEvent);\n    }\n    for (const eventName in otherEvents) {\n      map.on(eventName, this._onEvent);\n    }\n    this._map = map;\n  }\n  /* eslint-enable complexity,max-statements */\n\n  recycle() {\n    Mapbox.savedMaps.push(this);\n  }\n\n  destroy() {\n    this._map.remove();\n  }\n\n  // Force redraw the map now. Typically resize() and jumpTo() is reflected in the next\n  // render cycle, which is managed by Mapbox's animation loop.\n  // This removes the synchronization issue caused by requestAnimationFrame.\n  redraw() {\n    const map = this._map;\n    // map._render will throw error if style does not exist\n    // https://github.com/mapbox/mapbox-gl-js/blob/fb9fc316da14e99ff4368f3e4faa3888fb43c513\n    //   /src/ui/map.js#L1834\n    if (!this._inRender && map.style) {\n      // cancel the scheduled update\n      if (map._frame) {\n        map._frame.cancel();\n        map._frame = null;\n      }\n      // the order is important - render() may schedule another update\n      map._render();\n    }\n  }\n\n  /* Trigger map resize if size is controlled\n     @param {object} nextProps\n     @returns {bool} true if size has changed\n   */\n  _updateSize(nextProps: MapboxProps): boolean {\n    // Check if size is controlled\n    const {viewState} = nextProps;\n    if (viewState) {\n      const map = this._map;\n      if (viewState.width !== map.transform.width || viewState.height !== map.transform.height) {\n        map.resize();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Adapted from map.jumpTo\n  /* Update camera to match props\n     @param {object} nextProps\n     @param {bool} triggerEvents - should fire camera events\n     @returns {bool} true if anything is changed\n   */\n  _updateViewState(nextProps: MapboxProps, triggerEvents: boolean): boolean {\n    if (this._internalUpdate) {\n      return false;\n    }\n    const map = this._map;\n\n    const tr = this._renderTransform;\n    // Take a snapshot of the transform before mutation\n    const {zoom, pitch, bearing} = tr;\n    const changed = applyViewStateToTransform(tr, {\n      ...transformToViewState(map.transform),\n      ...nextProps\n    });\n\n    if (changed && triggerEvents) {\n      const deferredEvents = this._deferredEvents;\n      // Delay DOM control updates to the next render cycle\n      deferredEvents.move = true;\n      deferredEvents.zoom ||= zoom !== tr.zoom;\n      deferredEvents.rotate ||= bearing !== tr.bearing;\n      deferredEvents.pitch ||= pitch !== tr.pitch;\n    }\n\n    // Avoid manipulating the real transform when interaction/animation is ongoing\n    // as it would interfere with Mapbox's handlers\n    if (!map.isMoving()) {\n      applyViewStateToTransform(map.transform, nextProps);\n    }\n\n    return changed;\n  }\n\n  /* Update camera constraints and projection settings to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateSettings(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    const map = this._map;\n    let changed = false;\n    for (const propName of settingNames) {\n      if (propName in nextProps && !deepEqual(nextProps[propName], currProps[propName])) {\n        changed = true;\n        map[`set${propName[0].toUpperCase()}${propName.slice(1)}`](nextProps[propName]);\n      }\n    }\n    return changed;\n  }\n\n  /* Update map style to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if style is changed\n   */\n  _updateStyle(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    if (nextProps.cursor !== currProps.cursor) {\n      this._map.getCanvas().style.cursor = nextProps.cursor;\n    }\n    if (nextProps.mapStyle !== currProps.mapStyle) {\n      const options: any = {\n        diff: nextProps.styleDiffing\n      };\n      if ('localIdeographFontFamily' in nextProps) {\n        options.localIdeographFontFamily = nextProps.localIdeographFontFamily;\n      }\n      this._map.setStyle(normalizeStyle(nextProps.mapStyle), options);\n      return true;\n    }\n    return false;\n  }\n\n  /* Update fog, light and terrain to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateStyleComponents(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    const map = this._map;\n    let changed = false;\n    if (map.style.loaded()) {\n      if ('light' in nextProps && !deepEqual(nextProps.light, currProps.light)) {\n        changed = true;\n        map.setLight(nextProps.light);\n      }\n      if ('fog' in nextProps && !deepEqual(nextProps.fog, currProps.fog)) {\n        changed = true;\n        map.setFog(nextProps.fog);\n      }\n      if ('terrain' in nextProps && !deepEqual(nextProps.terrain, currProps.terrain)) {\n        if (!nextProps.terrain || map.getSource(nextProps.terrain.source)) {\n          changed = true;\n          map.setTerrain(nextProps.terrain);\n        }\n      }\n    }\n    return changed;\n  }\n\n  /* Update interaction handlers to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateHandlers(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    const map = this._map;\n    let changed = false;\n    for (const propName of handlerNames) {\n      const newValue = nextProps[propName];\n      if (!deepEqual(newValue, currProps[propName])) {\n        changed = true;\n        if (newValue) {\n          map[propName].enable(newValue);\n        } else {\n          map[propName].disable();\n        }\n      }\n    }\n    return changed;\n  }\n\n  _onEvent = (e: MapboxEvent) => {\n    // @ts-ignore\n    const cb = this.props[otherEvents[e.type]];\n    if (cb) {\n      cb(e);\n    }\n  };\n\n  _updateHover(e: MapMouseEvent) {\n    const {props} = this;\n    const shouldTrackHoveredFeatures =\n      props.interactiveLayerIds && (props.onMouseMove || props.onMouseEnter || props.onMouseLeave);\n\n    if (shouldTrackHoveredFeatures) {\n      const eventType = e.type;\n      const wasHovering = this._hoveredFeatures?.length > 0;\n      let features;\n      if (eventType === 'mousemove') {\n        try {\n          features = this._map.queryRenderedFeatures(e.point, {\n            layers: props.interactiveLayerIds\n          });\n        } catch {\n          features = [];\n        }\n      } else {\n        features = [];\n      }\n      const isHovering = features.length > 0;\n\n      if (!isHovering && wasHovering) {\n        e.type = 'mouseleave';\n        this._onPointerEvent(e);\n      }\n      this._hoveredFeatures = features;\n      if (isHovering && !wasHovering) {\n        e.type = 'mouseenter';\n        this._onPointerEvent(e);\n      }\n      e.type = eventType;\n    } else {\n      this._hoveredFeatures = null;\n    }\n  }\n\n  _onPointerEvent = (e: MapLayerMouseEvent | MapLayerTouchEvent) => {\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      this._updateHover(e);\n    }\n\n    // @ts-ignore\n    const cb = this.props[pointerEvents[e.type]];\n    if (cb) {\n      if (this.props.interactiveLayerIds && e.type !== 'mouseover' && e.type !== 'mouseout') {\n        const features =\n          this._hoveredFeatures ||\n          this._map.queryRenderedFeatures(e.point, {\n            layers: this.props.interactiveLayerIds\n          });\n        if (!features.length) {\n          return;\n        }\n        e.features = features;\n      }\n      cb(e);\n      delete e.features;\n    }\n  };\n\n  _onCameraEvent = (e: ViewStateChangeEvent) => {\n    if (!this._internalUpdate) {\n      // @ts-ignore\n      const cb = this.props[cameraEvents[e.type]];\n      if (cb) {\n        cb(e);\n      }\n    }\n    if (e.type in this._deferredEvents) {\n      this._deferredEvents[e.type] = false;\n    }\n  };\n\n  _fireEvent(baseFire: Function, event: string | MapboxEvent, properties?: object) {\n    const map = this._map;\n    const tr = map.transform;\n\n    const eventType = typeof event === 'string' ? event : event.type;\n    if (eventType === 'move') {\n      this._updateViewState(this.props, false);\n    }\n    if (eventType in cameraEvents) {\n      if (typeof event === 'object') {\n        (event as ViewStateChangeEvent).viewState = transformToViewState(tr);\n      }\n      if (this._map.isMoving()) {\n        // Replace map.transform with ours during the callbacks\n        map.transform = this._renderTransform;\n        baseFire.call(map, event, properties);\n        map.transform = tr;\n\n        return map;\n      }\n    }\n    baseFire.call(map, event, properties);\n\n    return map;\n  }\n\n  // All camera manipulations are complete, ready to repaint\n  _onBeforeRepaint() {\n    const map = this._map;\n\n    // If there are camera changes driven by props, invoke camera events so that DOM controls are synced\n    this._internalUpdate = true;\n    for (const eventType in this._deferredEvents) {\n      if (this._deferredEvents[eventType]) {\n        map.fire(eventType);\n      }\n    }\n    this._internalUpdate = false;\n\n    const tr = this._map.transform;\n    // Make sure camera matches the current props\n    this._map.transform = this._renderTransform;\n    this._map.painter.transform = this._renderTransform;\n\n    this._onAfterRepaint = () => {\n      // Terrain is updated during render\n      if ((tr.elevation = this._renderTransform.elevation)) {\n        tr.updateElevation(false);\n      }\n      // Restores camera state before render/load events are fired\n      this._map.transform = tr;\n    };\n  }\n\n  _onAfterRepaint: () => void;\n}\n\n/**\n * Access token can be provided via one of:\n *   mapboxAccessToken prop\n *   access_token query parameter\n *   MapboxAccessToken environment variable\n *   REACT_APP_MAPBOX_ACCESS_TOKEN environment variable\n * @returns access token\n */\nfunction getAccessTokenFromEnv(): string {\n  let accessToken = null;\n\n  /* global location, process */\n  if (typeof location !== 'undefined') {\n    const match = /access_token=([^&\\/]*)/.exec(location.search);\n    accessToken = match && match[1];\n  }\n\n  // Note: This depends on bundler plugins (e.g. webpack) importing environment correctly\n  try {\n    accessToken = accessToken || process.env.MapboxAccessToken;\n  } catch {\n    // ignore\n  }\n\n  try {\n    accessToken = accessToken || process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n  } catch {\n    // ignore\n  }\n\n  return accessToken;\n}\n"]},"metadata":{},"sourceType":"module"}