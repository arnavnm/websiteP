{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, StandardRetryStrategy } from \"./defaultStrategy\";\nexport var ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport var CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n  environmentVariableSelector: function environmentVariableSelector(env) {\n    var value = env[ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Environment variable \" + ENV_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n    }\n\n    return maxAttempt;\n  },\n  configFileSelector: function configFileSelector(profile) {\n    var value = profile[CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Shared config file entry \" + CONFIG_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n    }\n\n    return maxAttempt;\n  },\n  default: DEFAULT_MAX_ATTEMPTS\n};\nexport var resolveRetryConfig = function resolveRetryConfig(input) {\n  var maxAttempts = normalizeMaxAttempts(input.maxAttempts);\n  return __assign(__assign({}, input), {\n    maxAttempts: maxAttempts,\n    retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts)\n  });\n};\n\nvar normalizeMaxAttempts = function normalizeMaxAttempts(maxAttempts) {\n  if (maxAttempts === void 0) {\n    maxAttempts = DEFAULT_MAX_ATTEMPTS;\n  }\n\n  if (typeof maxAttempts === \"number\") {\n    var promisified_1 = Promise.resolve(maxAttempts);\n    return function () {\n      return promisified_1;\n    };\n  }\n\n  return maxAttempts;\n};\n\nexport var ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport var CONFIG_RETRY_MODE = \"retry_mode\";\nexport var NODE_RETRY_MODE_CONFIG_OPTIONS = {\n  environmentVariableSelector: function environmentVariableSelector(env) {\n    return env[ENV_RETRY_MODE];\n  },\n  configFileSelector: function configFileSelector(profile) {\n    return profile[CONFIG_RETRY_MODE];\n  },\n  default: DEFAULT_RETRY_MODE\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,oBAAT,EAA+BC,kBAA/B,EAAmDC,qBAAnD,QAAgF,mBAAhF;AACA,OAAO,IAAIC,gBAAgB,GAAG,kBAAvB;AACP,OAAO,IAAIC,mBAAmB,GAAG,cAA1B;AACP,OAAO,IAAIC,+BAA+B,GAAG;EACzCC,2BAA2B,EAAE,qCAAUC,GAAV,EAAe;IACxC,IAAIC,KAAK,GAAGD,GAAG,CAACJ,gBAAD,CAAf;IACA,IAAI,CAACK,KAAL,EACI,OAAOC,SAAP;IACJ,IAAIC,UAAU,GAAGC,QAAQ,CAACH,KAAD,CAAzB;;IACA,IAAII,MAAM,CAACC,KAAP,CAAaH,UAAb,CAAJ,EAA8B;MAC1B,MAAM,IAAII,KAAJ,CAAU,0BAA0BX,gBAA1B,GAA6C,2BAA7C,GAA2EK,KAA3E,GAAmF,IAA7F,CAAN;IACH;;IACD,OAAOE,UAAP;EACH,CAVwC;EAWzCK,kBAAkB,EAAE,4BAAUC,OAAV,EAAmB;IACnC,IAAIR,KAAK,GAAGQ,OAAO,CAACZ,mBAAD,CAAnB;IACA,IAAI,CAACI,KAAL,EACI,OAAOC,SAAP;IACJ,IAAIC,UAAU,GAAGC,QAAQ,CAACH,KAAD,CAAzB;;IACA,IAAII,MAAM,CAACC,KAAP,CAAaH,UAAb,CAAJ,EAA8B;MAC1B,MAAM,IAAII,KAAJ,CAAU,8BAA8BV,mBAA9B,GAAoD,2BAApD,GAAkFI,KAAlF,GAA0F,IAApG,CAAN;IACH;;IACD,OAAOE,UAAP;EACH,CApBwC;EAqBzCO,OAAO,EAAEjB;AArBgC,CAAtC;AAuBP,OAAO,IAAIkB,kBAAkB,GAAG,SAArBA,kBAAqB,CAAUC,KAAV,EAAiB;EAC7C,IAAIC,WAAW,GAAGC,oBAAoB,CAACF,KAAK,CAACC,WAAP,CAAtC;EACA,OAAOrB,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKoB,KAAL,CAAT,EAAsB;IAAEC,WAAW,EAAEA,WAAf;IAA4BE,aAAa,EAAEH,KAAK,CAACG,aAAN,IAAuB,IAAIpB,qBAAJ,CAA0BkB,WAA1B;EAAlE,CAAtB,CAAf;AACH,CAHM;;AAIP,IAAIC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAUD,WAAV,EAAuB;EAC9C,IAAIA,WAAW,KAAK,KAAK,CAAzB,EAA4B;IAAEA,WAAW,GAAGpB,oBAAd;EAAqC;;EACnE,IAAI,OAAOoB,WAAP,KAAuB,QAA3B,EAAqC;IACjC,IAAIG,aAAa,GAAGC,OAAO,CAACC,OAAR,CAAgBL,WAAhB,CAApB;IACA,OAAO,YAAY;MAAE,OAAOG,aAAP;IAAuB,CAA5C;EACH;;EACD,OAAOH,WAAP;AACH,CAPD;;AAQA,OAAO,IAAIM,cAAc,GAAG,gBAArB;AACP,OAAO,IAAIC,iBAAiB,GAAG,YAAxB;AACP,OAAO,IAAIC,8BAA8B,GAAG;EACxCtB,2BAA2B,EAAE,qCAAUC,GAAV,EAAe;IAAE,OAAOA,GAAG,CAACmB,cAAD,CAAV;EAA6B,CADnC;EAExCX,kBAAkB,EAAE,4BAAUC,OAAV,EAAmB;IAAE,OAAOA,OAAO,CAACW,iBAAD,CAAd;EAAoC,CAFrC;EAGxCV,OAAO,EAAEhB;AAH+B,CAArC","names":["DEFAULT_MAX_ATTEMPTS","DEFAULT_RETRY_MODE","StandardRetryStrategy","ENV_MAX_ATTEMPTS","CONFIG_MAX_ATTEMPTS","NODE_MAX_ATTEMPT_CONFIG_OPTIONS","environmentVariableSelector","env","value","undefined","maxAttempt","parseInt","Number","isNaN","Error","configFileSelector","profile","default","resolveRetryConfig","input","maxAttempts","normalizeMaxAttempts","retryStrategy","promisified_1","Promise","resolve","ENV_RETRY_MODE","CONFIG_RETRY_MODE","NODE_RETRY_MODE_CONFIG_OPTIONS"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/middleware-retry/src/configurations.ts"],"sourcesContent":["import { LoadedConfigSelectors } from \"@aws-sdk/node-config-provider\";\nimport { Provider, RetryStrategy } from \"@aws-sdk/types\";\n\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, StandardRetryStrategy } from \"./defaultStrategy\";\n\nexport const ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport const CONFIG_MAX_ATTEMPTS = \"max_attempts\";\n\nexport const NODE_MAX_ATTEMPT_CONFIG_OPTIONS: LoadedConfigSelectors<number> = {\n  environmentVariableSelector: (env) => {\n    const value = env[ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n    return maxAttempt;\n  },\n  configFileSelector: (profile) => {\n    const value = profile[CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n    return maxAttempt;\n  },\n  default: DEFAULT_MAX_ATTEMPTS,\n};\n\nexport interface RetryInputConfig {\n  /**\n   * The maximum number of times requests that encounter retryable failures should be attempted.\n   */\n  maxAttempts?: number | Provider<number>;\n  /**\n   * The strategy to retry the request. Using built-in exponential backoff strategy by default.\n   */\n  retryStrategy?: RetryStrategy;\n}\n\ninterface PreviouslyResolved {}\nexport interface RetryResolvedConfig {\n  maxAttempts: Provider<number>;\n  retryStrategy: RetryStrategy;\n}\n\nexport const resolveRetryConfig = <T>(input: T & PreviouslyResolved & RetryInputConfig): T & RetryResolvedConfig => {\n  const maxAttempts = normalizeMaxAttempts(input.maxAttempts);\n  return {\n    ...input,\n    maxAttempts,\n    retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts),\n  };\n};\n\nconst normalizeMaxAttempts = (maxAttempts: number | Provider<number> = DEFAULT_MAX_ATTEMPTS): Provider<number> => {\n  if (typeof maxAttempts === \"number\") {\n    const promisified = Promise.resolve(maxAttempts);\n    return () => promisified;\n  }\n  return maxAttempts;\n};\n\nexport const ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport const CONFIG_RETRY_MODE = \"retry_mode\";\n\nexport const NODE_RETRY_MODE_CONFIG_OPTIONS: LoadedConfigSelectors<string> = {\n  environmentVariableSelector: (env) => env[ENV_RETRY_MODE],\n  configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],\n  default: DEFAULT_RETRY_MODE,\n};\n"]},"metadata":{},"sourceType":"module"}