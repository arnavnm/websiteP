{"ast":null,"code":"import { Constants, ExternalInteractorBase } from \"../../../Core\";\nimport { getDistance, getLinkColor, getLinkRandomColor, isInArray } from \"../../../Utils\";\nexport class Grabber extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled() {\n    const container = this.container,\n          mouse = container.interactivity.mouse,\n          events = container.actualOptions.interactivity.events;\n    return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n  }\n\n  reset() {}\n\n  async interact() {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions,\n          interactivity = options.interactivity;\n\n    if (interactivity.events.onHover.enable && container.interactivity.status === Constants.mouseMoveEvent) {\n      const mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      const distance = container.retina.grabModeDistance,\n            query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n      for (const particle of query) {\n        const pos = particle.getPosition(),\n              pointDistance = getDistance(pos, mousePos);\n\n        if (pointDistance <= distance) {\n          const grabLineOptions = interactivity.modes.grab.links,\n                lineOpacity = grabLineOptions.opacity,\n                opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n          if (opacityLine <= 0) {\n            continue;\n          }\n\n          const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n\n          if (!container.particles.grabLineColor) {\n            const linksOptions = options.interactivity.modes.grab.links;\n            container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n          }\n\n          const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n\n          if (!colorLine) {\n            return;\n          }\n\n          container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n        }\n      }\n    }\n  }\n\n}","map":{"version":3,"names":["Constants","ExternalInteractorBase","getDistance","getLinkColor","getLinkRandomColor","isInArray","Grabber","constructor","container","isEnabled","mouse","interactivity","events","actualOptions","onHover","enable","position","mode","reset","interact","_a","options","status","mouseMoveEvent","mousePos","distance","retina","grabModeDistance","query","particles","quadTree","queryCircle","particle","pos","getPosition","pointDistance","grabLineOptions","modes","grab","links","lineOpacity","opacity","opacityLine","optColor","color","grabLineColor","linksOptions","blink","consent","colorLine","undefined","canvas","drawGrabLine"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/tsparticles/esm/Interactions/External/Grab/Grabber.js"],"sourcesContent":["import { Constants, ExternalInteractorBase } from \"../../../Core\";\nimport { getDistance, getLinkColor, getLinkRandomColor, isInArray } from \"../../../Utils\";\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, mouse = container.interactivity.mouse, events = container.actualOptions.interactivity.events;\n        return events.onHover.enable && !!mouse.position && isInArray(\"grab\", events.onHover.mode);\n    }\n    reset() {\n    }\n    async interact() {\n        var _a;\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (interactivity.events.onHover.enable && container.interactivity.status === Constants.mouseMoveEvent) {\n            const mousePos = container.interactivity.mouse.position;\n            if (!mousePos) {\n                return;\n            }\n            const distance = container.retina.grabModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n            for (const particle of query) {\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n                if (pointDistance <= distance) {\n                    const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n                    if (opacityLine <= 0) {\n                        continue;\n                    }\n                    const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.options.links.color;\n                    if (!container.particles.grabLineColor) {\n                        const linksOptions = options.interactivity.modes.grab.links;\n                        container.particles.grabLineColor = getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n                    }\n                    const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n                    if (!colorLine) {\n                        return;\n                    }\n                    container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n                }\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}