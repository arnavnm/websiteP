{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport bowser from \"bowser\";\n/**\n * Default provider to the user agent in browsers. It's a best effort to infer\n * the device information. It uses bowser library to detect the browser and virsion\n */\n\nexport var defaultUserAgent = function (_a) {\n  var serviceId = _a.serviceId,\n      clientVersion = _a.clientVersion;\n  return function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var parsedUA, sections;\n\n      var _a, _b, _c, _d, _e, _f, _g;\n\n      return __generator(this, function (_h) {\n        parsedUA = ((_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) ? bowser.parse(window.navigator.userAgent) : undefined;\n        sections = [// sdk-metadata\n        [\"aws-sdk-js\", clientVersion], // os-metadata\n        [\"os/\" + (((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _b === void 0 ? void 0 : _b.name) || \"other\"), (_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _c === void 0 ? void 0 : _c.version], // language-metadata\n        // ECMAScript edition doesn't matter in JS.\n        [\"lang/js\"], // browser vendor and version.\n        [\"md/browser\", ((_e = (_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : \"unknown\") + \"_\" + ((_g = (_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _f === void 0 ? void 0 : _f.version) !== null && _g !== void 0 ? _g : \"unknown\")]];\n\n        if (serviceId) {\n          // api-metadata\n          // service Id may not appear in non-AWS clients\n          sections.push([\"api/\" + serviceId, clientVersion]);\n        }\n\n        return [2\n        /*return*/\n        , sections];\n      });\n    });\n  };\n};","map":{"version":3,"mappings":"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","names":["bowser","defaultUserAgent","_a","serviceId","clientVersion","parsedUA","navigator","userAgent","parse","window","undefined","sections","os","_b","name","_c","version","browser","_d","_e","_f","_g","push"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/util-user-agent-browser/src/index.ts"],"sourcesContent":["import { Provider, UserAgent } from \"@aws-sdk/types\";\nimport bowser from \"bowser\";\n\nimport { DefaultUserAgentOptions } from \"./configurations\";\n\n/**\n * Default provider to the user agent in browsers. It's a best effort to infer\n * the device information. It uses bowser library to detect the browser and virsion\n */\nexport const defaultUserAgent = ({\n  serviceId,\n  clientVersion,\n}: DefaultUserAgentOptions): Provider<UserAgent> => async () => {\n  const parsedUA = window?.navigator?.userAgent ? bowser.parse(window.navigator.userAgent) : undefined;\n  const sections: UserAgent = [\n    // sdk-metadata\n    [\"aws-sdk-js\", clientVersion],\n    // os-metadata\n    [`os/${parsedUA?.os?.name || \"other\"}`, parsedUA?.os?.version],\n    // language-metadata\n    // ECMAScript edition doesn't matter in JS.\n    [\"lang/js\"],\n    // browser vendor and version.\n    [\"md/browser\", `${parsedUA?.browser?.name ?? \"unknown\"}_${parsedUA?.browser?.version ?? \"unknown\"}`],\n  ];\n\n  if (serviceId) {\n    // api-metadata\n    // service Id may not appear in non-AWS clients\n    sections.push([`api/${serviceId}`, clientVersion]);\n  }\n\n  return sections;\n};\n"]},"metadata":{},"sourceType":"module"}