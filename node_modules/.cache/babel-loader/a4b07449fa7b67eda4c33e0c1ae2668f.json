{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { ConsoleLogger as LoggerClass } from './Logger';\nvar logger = new LoggerClass('Amplify');\n\nvar AmplifyClass =\n/** @class */\nfunction () {\n  function AmplifyClass() {\n    // Everything that is `register`ed is tracked here\n    this._components = [];\n    this._config = {}; // All modules (with `getModuleName()`) are stored here for dependency injection\n\n    this._modules = {}; // for backward compatibility to avoid breaking change\n    // if someone is using like Amplify.Auth\n\n    this.Auth = null;\n    this.Analytics = null;\n    this.API = null;\n    this.Credentials = null;\n    this.Storage = null;\n    this.I18n = null;\n    this.Cache = null;\n    this.PubSub = null;\n    this.Interactions = null;\n    this.Pushnotification = null;\n    this.UI = null;\n    this.XR = null;\n    this.Predictions = null;\n    this.DataStore = null;\n    this.Geo = null;\n    this.Logger = LoggerClass;\n    this.ServiceWorker = null;\n  }\n\n  AmplifyClass.prototype.register = function (comp) {\n    logger.debug('component registered in amplify', comp);\n\n    this._components.push(comp);\n\n    if (typeof comp.getModuleName === 'function') {\n      this._modules[comp.getModuleName()] = comp;\n      this[comp.getModuleName()] = comp;\n    } else {\n      logger.debug('no getModuleName method for component', comp);\n    } // Finally configure this new component(category) loaded\n    // With the new modularization changes in Amplify V3, all the Amplify\n    // component are not loaded/registered right away but when they are\n    // imported (and hence instantiated) in the client's app. This ensures\n    // that all new components imported get correctly configured with the\n    // configuration that Amplify.configure() was called with.\n\n\n    comp.configure(this._config);\n  };\n\n  AmplifyClass.prototype.configure = function (config) {\n    var _this = this;\n\n    if (!config) return this._config;\n    this._config = Object.assign(this._config, config);\n    logger.debug('amplify config', this._config); // Dependency Injection via property-setting.\n    // This avoids introducing a public method/interface/setter that's difficult to remove later.\n    // Plus, it reduces `if` statements within the `constructor` and `configure` of each module\n\n    Object.entries(this._modules).forEach(function (_a) {\n      var _b = __read(_a, 2),\n          Name = _b[0],\n          comp = _b[1]; // e.g. Auth.*\n\n\n      Object.keys(comp).forEach(function (property) {\n        // e.g. Auth[\"Credentials\"] = this._modules[\"Credentials\"] when set\n        if (_this._modules[property]) {\n          comp[property] = _this._modules[property];\n        }\n      });\n    });\n\n    this._components.map(function (comp) {\n      comp.configure(_this._config);\n    });\n\n    return this._config;\n  };\n\n  AmplifyClass.prototype.addPluggable = function (pluggable) {\n    if (pluggable && pluggable['getCategory'] && typeof pluggable['getCategory'] === 'function') {\n      this._components.map(function (comp) {\n        if (comp['addPluggable'] && typeof comp['addPluggable'] === 'function') {\n          comp.addPluggable(pluggable);\n        }\n      });\n    }\n  };\n\n  return AmplifyClass;\n}();\n\nexport { AmplifyClass };\nexport var Amplify = new AmplifyClass();\n/**\n * @deprecated use named import\n */\n\nexport default Amplify;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","LoggerClass","logger","AmplifyClass","comp","debug","_components","push","getModuleName","_modules","configure","_config","config","Object","assign","entries","forEach","_a","_b","Name","keys","_this","property","map","pluggable","addPluggable","Amplify"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/core/src/Amplify.ts"],"sourcesContent":["import { ConsoleLogger as LoggerClass } from './Logger';\n\nconst logger = new LoggerClass('Amplify');\n\nexport class AmplifyClass {\n\t// Everything that is `register`ed is tracked here\n\tprivate _components = [];\n\tprivate _config = {};\n\n\t// All modules (with `getModuleName()`) are stored here for dependency injection\n\tprivate _modules = {};\n\n\t// for backward compatibility to avoid breaking change\n\t// if someone is using like Amplify.Auth\n\tAuth = null;\n\tAnalytics = null;\n\tAPI = null;\n\tCredentials = null;\n\tStorage = null;\n\tI18n = null;\n\tCache = null;\n\tPubSub = null;\n\tInteractions = null;\n\tPushnotification = null;\n\tUI = null;\n\tXR = null;\n\tPredictions = null;\n\tDataStore = null;\n\tGeo = null;\n\n\tLogger = LoggerClass;\n\tServiceWorker = null;\n\n\tregister(comp) {\n\t\tlogger.debug('component registered in amplify', comp);\n\t\tthis._components.push(comp);\n\t\tif (typeof comp.getModuleName === 'function') {\n\t\t\tthis._modules[comp.getModuleName()] = comp;\n\t\t\tthis[comp.getModuleName()] = comp;\n\t\t} else {\n\t\t\tlogger.debug('no getModuleName method for component', comp);\n\t\t}\n\n\t\t// Finally configure this new component(category) loaded\n\t\t// With the new modularization changes in Amplify V3, all the Amplify\n\t\t// component are not loaded/registered right away but when they are\n\t\t// imported (and hence instantiated) in the client's app. This ensures\n\t\t// that all new components imported get correctly configured with the\n\t\t// configuration that Amplify.configure() was called with.\n\t\tcomp.configure(this._config);\n\t}\n\n\tconfigure(config?) {\n\t\tif (!config) return this._config;\n\n\t\tthis._config = Object.assign(this._config, config);\n\t\tlogger.debug('amplify config', this._config);\n\n\t\t// Dependency Injection via property-setting.\n\t\t// This avoids introducing a public method/interface/setter that's difficult to remove later.\n\t\t// Plus, it reduces `if` statements within the `constructor` and `configure` of each module\n\t\tObject.entries(this._modules).forEach(([Name, comp]) => {\n\t\t\t// e.g. Auth.*\n\t\t\tObject.keys(comp).forEach(property => {\n\t\t\t\t// e.g. Auth[\"Credentials\"] = this._modules[\"Credentials\"] when set\n\t\t\t\tif (this._modules[property]) {\n\t\t\t\t\tcomp[property] = this._modules[property];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis._components.map(comp => {\n\t\t\tcomp.configure(this._config);\n\t\t});\n\n\t\treturn this._config;\n\t}\n\n\taddPluggable(pluggable) {\n\t\tif (\n\t\t\tpluggable &&\n\t\t\tpluggable['getCategory'] &&\n\t\t\ttypeof pluggable['getCategory'] === 'function'\n\t\t) {\n\t\t\tthis._components.map(comp => {\n\t\t\t\tif (\n\t\t\t\t\tcomp['addPluggable'] &&\n\t\t\t\t\ttypeof comp['addPluggable'] === 'function'\n\t\t\t\t) {\n\t\t\t\t\tcomp.addPluggable(pluggable);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport const Amplify = new AmplifyClass();\n\n/**\n * @deprecated use named import\n */\nexport default Amplify;\n"]},"metadata":{},"sourceType":"module"}