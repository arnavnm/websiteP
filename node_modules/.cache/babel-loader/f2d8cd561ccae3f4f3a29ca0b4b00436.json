{"ast":null,"code":"import _objectSpread from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { useState, useRef, useEffect, useContext, useMemo, forwardRef, useImperativeHandle } from 'react';\nimport { MountedMapsContext } from './use-map';\nimport Mapbox from '../mapbox/mapbox';\nimport createRef from '../mapbox/create-ref';\nimport useIsomorphicLayoutEffect from '../utils/use-isomorphic-layout-effect';\nimport setGlobals from '../utils/set-globals';\nexport var MapContext = React.createContext(null);\nvar defaultProps = {\n  // Constraints\n  minZoom: 0,\n  maxZoom: 22,\n  minPitch: 0,\n  maxPitch: 60,\n  // Interaction handlers\n  scrollZoom: true,\n  boxZoom: true,\n  dragRotate: true,\n  dragPan: true,\n  keyboard: true,\n  doubleClickZoom: true,\n  touchZoomRotate: true,\n  touchPitch: true,\n  // Style\n  mapStyle: {\n    version: 8,\n    sources: {},\n    layers: []\n  },\n  styleDiffing: true,\n  projection: 'mercator',\n  renderWorldCopies: true,\n  // Callbacks\n  onError: function onError(e) {\n    return console.error(e.error);\n  },\n  // Globals\n  RTLTextPlugin: 'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js'\n};\nvar Map = forwardRef(function (props, ref) {\n  var mountedMapsContext = useContext(MountedMapsContext);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      mapInstance = _useState2[0],\n      setMapInstance = _useState2[1];\n\n  var containerRef = useRef();\n\n  var _useRef = useRef({\n    mapLib: null,\n    map: null\n  }),\n      contextValue = _useRef.current;\n\n  useEffect(function () {\n    var mapLib = props.mapLib;\n    var isMounted = true;\n    var mapbox;\n    Promise.resolve(mapLib || import('mapbox-gl')).then(function (mapboxgl) {\n      if (!isMounted) {\n        return;\n      }\n\n      if (!mapboxgl.Map) {\n        // commonjs style\n        mapboxgl = mapboxgl.default;\n      }\n\n      if (!mapboxgl || !mapboxgl.Map) {\n        throw new Error('Invalid mapLib');\n      }\n\n      if (mapboxgl.supported(props)) {\n        setGlobals(mapboxgl, props);\n\n        if (props.reuseMaps) {\n          mapbox = Mapbox.reuse(props, containerRef.current);\n        }\n\n        if (!mapbox) {\n          mapbox = new Mapbox(mapboxgl.Map, props, containerRef.current);\n        }\n\n        contextValue.map = createRef(mapbox, mapboxgl);\n        contextValue.mapLib = mapboxgl;\n        setMapInstance(mapbox);\n        mountedMapsContext === null || mountedMapsContext === void 0 ? void 0 : mountedMapsContext.onMapMount(contextValue.map, props.id);\n      } else {\n        throw new Error('Map is not supported by this browser');\n      }\n    }).catch(function (error) {\n      props.onError({\n        type: 'error',\n        target: null,\n        originalEvent: null,\n        error: error\n      });\n    });\n    return function () {\n      isMounted = false;\n\n      if (mapbox) {\n        mountedMapsContext === null || mountedMapsContext === void 0 ? void 0 : mountedMapsContext.onMapUnmount(props.id);\n\n        if (props.reuseMaps) {\n          mapbox.recycle();\n        } else {\n          mapbox.destroy();\n        }\n      }\n    };\n  }, []);\n  useIsomorphicLayoutEffect(function () {\n    if (mapInstance) {\n      mapInstance.setProps(props);\n    }\n  });\n  useImperativeHandle(ref, function () {\n    return contextValue.map;\n  }, [mapInstance]);\n  var style = useMemo(function () {\n    return _objectSpread({\n      position: 'relative',\n      width: '100%',\n      height: '100%'\n    }, props.style);\n  }, [props.style]);\n  return React.createElement(\"div\", {\n    id: props.id,\n    ref: containerRef,\n    style: style\n  }, mapInstance && React.createElement(MapContext.Provider, {\n    value: contextValue\n  }, props.children));\n});\nMap.displayName = 'Map';\nMap.defaultProps = defaultProps;\nexport default Map;","map":{"version":3,"mappings":"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","names":["React","useState","useRef","useEffect","useContext","useMemo","forwardRef","useImperativeHandle","MountedMapsContext","Mapbox","createRef","useIsomorphicLayoutEffect","setGlobals","MapContext","createContext","defaultProps","minZoom","maxZoom","minPitch","maxPitch","scrollZoom","boxZoom","dragRotate","dragPan","keyboard","doubleClickZoom","touchZoomRotate","touchPitch","mapStyle","version","sources","layers","styleDiffing","projection","renderWorldCopies","onError","console","error","e","RTLTextPlugin","Map","props","ref","mountedMapsContext","mapInstance","setMapInstance","containerRef","mapLib","map","contextValue","current","isMounted","mapbox","Promise","resolve","then","mapboxgl","default","Error","supported","reuseMaps","reuse","onMapMount","id","catch","type","target","originalEvent","onMapUnmount","recycle","destroy","setProps","style","position","width","height","Provider","value","children","displayName"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/react-map-gl/src/components/map.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  useState,\n  useRef,\n  useEffect,\n  useContext,\n  useMemo,\n  forwardRef,\n  useImperativeHandle\n} from 'react';\n\nimport {MountedMapsContext} from './use-map';\nimport Mapbox, {MapboxProps} from '../mapbox/mapbox';\nimport createRef, {MapRef} from '../mapbox/create-ref';\n\nimport type {CSSProperties} from 'react';\nimport useIsomorphicLayoutEffect from '../utils/use-isomorphic-layout-effect';\nimport setGlobals, {GlobalSettings} from '../utils/set-globals';\n\nexport type MapContextValue = {\n  mapLib: any;\n  map: MapRef;\n};\n\nexport const MapContext = React.createContext<MapContextValue>(null);\n\nexport type MapProps = MapboxProps &\n  GlobalSettings & {\n    mapLib?: any;\n    reuseMaps?: boolean;\n    /** Map container id */\n    id?: string;\n    /** Map container CSS style */\n    style?: CSSProperties;\n    children?: any;\n  };\n\nconst defaultProps: MapProps = {\n  // Constraints\n  minZoom: 0,\n  maxZoom: 22,\n  minPitch: 0,\n  maxPitch: 60,\n\n  // Interaction handlers\n  scrollZoom: true,\n  boxZoom: true,\n  dragRotate: true,\n  dragPan: true,\n  keyboard: true,\n  doubleClickZoom: true,\n  touchZoomRotate: true,\n  touchPitch: true,\n\n  // Style\n  mapStyle: {version: 8, sources: {}, layers: []},\n  styleDiffing: true,\n  projection: 'mercator',\n  renderWorldCopies: true,\n\n  // Callbacks\n  onError: e => console.error(e.error), // eslint-disable-line\n\n  // Globals\n  RTLTextPlugin:\n    'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js'\n};\n\nconst Map = forwardRef<MapRef, MapProps>((props, ref) => {\n  const mountedMapsContext = useContext(MountedMapsContext);\n  const [mapInstance, setMapInstance] = useState<Mapbox>(null);\n  const containerRef = useRef();\n\n  const {current: contextValue} = useRef<MapContextValue>({mapLib: null, map: null});\n\n  useEffect(() => {\n    const mapLib = props.mapLib;\n    let isMounted = true;\n    let mapbox;\n\n    Promise.resolve(mapLib || import('mapbox-gl'))\n      .then(mapboxgl => {\n        if (!isMounted) {\n          return;\n        }\n\n        if (!mapboxgl.Map) {\n          // commonjs style\n          mapboxgl = mapboxgl.default;\n        }\n        if (!mapboxgl || !mapboxgl.Map) {\n          throw new Error('Invalid mapLib');\n        }\n\n        if (mapboxgl.supported(props)) {\n          setGlobals(mapboxgl, props);\n          if (props.reuseMaps) {\n            mapbox = Mapbox.reuse(props, containerRef.current);\n          }\n          if (!mapbox) {\n            mapbox = new Mapbox(mapboxgl.Map, props, containerRef.current);\n          }\n          contextValue.map = createRef(mapbox, mapboxgl);\n          contextValue.mapLib = mapboxgl;\n\n          setMapInstance(mapbox);\n          mountedMapsContext?.onMapMount(contextValue.map, props.id);\n        } else {\n          throw new Error('Map is not supported by this browser');\n        }\n      })\n      .catch(error => {\n        props.onError({\n          type: 'error',\n          target: null,\n          originalEvent: null,\n          error\n        });\n      });\n\n    return () => {\n      isMounted = false;\n      if (mapbox) {\n        mountedMapsContext?.onMapUnmount(props.id);\n        if (props.reuseMaps) {\n          mapbox.recycle();\n        } else {\n          mapbox.destroy();\n        }\n      }\n    };\n  }, []);\n\n  useIsomorphicLayoutEffect(() => {\n    if (mapInstance) {\n      mapInstance.setProps(props);\n    }\n  });\n\n  useImperativeHandle(ref, () => contextValue.map, [mapInstance]);\n\n  const style: CSSProperties = useMemo(\n    () => ({\n      position: 'relative',\n      width: '100%',\n      height: '100%',\n      ...props.style\n    }),\n    [props.style]\n  );\n\n  return (\n    <div id={props.id} ref={containerRef} style={style}>\n      {mapInstance && (\n        <MapContext.Provider value={contextValue}>{props.children}</MapContext.Provider>\n      )}\n    </div>\n  );\n});\n\nMap.displayName = 'Map';\nMap.defaultProps = defaultProps;\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}