{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\n\nvar isClockSkewed = function (newServerTime, systemClockOffset) {\n  return Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 300000;\n};\n\nvar getSkewCorrectedDate = function (systemClockOffset) {\n  return new Date(Date.now() + systemClockOffset);\n};\n\nexport function awsAuthMiddleware(options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(this, void 0, void 0, function () {\n        var signer, _a, output, _b, _c, headers, dateHeader, serverTime;\n\n        var _d;\n\n        return __generator(this, function (_e) {\n          switch (_e.label) {\n            case 0:\n              if (!HttpRequest.isInstance(args.request)) return [2\n              /*return*/\n              , next(args)];\n              if (!(typeof options.signer === \"function\")) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , options.signer()];\n\n            case 1:\n              _a = _e.sent();\n              return [3\n              /*break*/\n              , 3];\n\n            case 2:\n              _a = options.signer;\n              _e.label = 3;\n\n            case 3:\n              signer = _a;\n              _b = next;\n              _c = [__assign({}, args)];\n              _d = {};\n              return [4\n              /*yield*/\n              , signer.sign(args.request, {\n                signingDate: new Date(Date.now() + options.systemClockOffset),\n                signingRegion: context[\"signing_region\"],\n                signingService: context[\"signing_service\"]\n              })];\n\n            case 4:\n              return [4\n              /*yield*/\n              , _b.apply(void 0, [__assign.apply(void 0, _c.concat([(_d.request = _e.sent(), _d)]))])];\n\n            case 5:\n              output = _e.sent();\n              headers = output.response.headers;\n              dateHeader = headers && (headers.date || headers.Date);\n\n              if (dateHeader) {\n                serverTime = Date.parse(dateHeader);\n\n                if (isClockSkewed(serverTime, options.systemClockOffset)) {\n                  options.systemClockOffset = serverTime - Date.now();\n                }\n              }\n\n              return [2\n              /*return*/\n              , output];\n          }\n        });\n      });\n    };\n  };\n}\nexport var awsAuthMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true\n};\nexport var getAwsAuthPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AACA,IAAIC,aAAa,GAAG,UAAUC,aAAV,EAAyBC,iBAAzB,EAA4C;EAC5D,OAAOC,IAAI,CAACC,GAAL,CAASC,oBAAoB,CAACH,iBAAD,CAApB,CAAwCI,OAAxC,KAAoDL,aAA7D,KAA+E,MAAtF;AACH,CAFD;;AAGA,IAAII,oBAAoB,GAAG,UAAUH,iBAAV,EAA6B;EAAE,OAAO,IAAIK,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAaN,iBAAtB,CAAP;AAAkD,CAA5G;;AACA,OAAO,SAASO,iBAAT,CAA2BC,OAA3B,EAAoC;EACvC,OAAO,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;IAC5B,OAAO,UAAUC,IAAV,EAAgB;MACnB,OAAOhB,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;QAC/C,IAAIiB,MAAJ,EAAYC,EAAZ,EAAgBC,MAAhB,EAAwBC,EAAxB,EAA4BC,EAA5B,EAAgCC,OAAhC,EAAyCC,UAAzC,EAAqDC,UAArD;;QACA,IAAIC,EAAJ;;QACA,OAAOxB,WAAW,CAAC,IAAD,EAAO,UAAUyB,EAAV,EAAc;UACnC,QAAQA,EAAE,CAACC,KAAX;YACI,KAAK,CAAL;cACI,IAAI,CAACzB,WAAW,CAAC0B,UAAZ,CAAuBZ,IAAI,CAACa,OAA5B,CAAL,EACI,OAAO,CAAC;cAAE;cAAH,EAAef,IAAI,CAACE,IAAD,CAAnB,CAAP;cACJ,IAAI,EAAE,OAAOH,OAAO,CAACI,MAAf,KAA0B,UAA5B,CAAJ,EAA6C,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;cAC7C,OAAO,CAAC;cAAE;cAAH,EAAcJ,OAAO,CAACI,MAAR,EAAd,CAAP;;YACJ,KAAK,CAAL;cACIC,EAAE,GAAGQ,EAAE,CAACI,IAAH,EAAL;cACA,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACJ,KAAK,CAAL;cACIZ,EAAE,GAAGL,OAAO,CAACI,MAAb;cACAS,EAAE,CAACC,KAAH,GAAW,CAAX;;YACJ,KAAK,CAAL;cACIV,MAAM,GAAGC,EAAT;cACAE,EAAE,GAAGN,IAAL;cACAO,EAAE,GAAG,CAACtB,QAAQ,CAAC,EAAD,EAAKiB,IAAL,CAAT,CAAL;cACAS,EAAE,GAAG,EAAL;cACA,OAAO,CAAC;cAAE;cAAH,EAAcR,MAAM,CAACc,IAAP,CAAYf,IAAI,CAACa,OAAjB,EAA0B;gBACvCG,WAAW,EAAE,IAAItB,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAaE,OAAO,CAACR,iBAA9B,CAD0B;gBAEvC4B,aAAa,EAAElB,OAAO,CAAC,gBAAD,CAFiB;gBAGvCmB,cAAc,EAAEnB,OAAO,CAAC,iBAAD;cAHgB,CAA1B,CAAd,CAAP;;YAKJ,KAAK,CAAL;cAAQ,OAAO,CAAC;cAAE;cAAH,EAAcK,EAAE,CAACe,KAAH,CAAS,KAAK,CAAd,EAAiB,CAACpC,QAAQ,CAACoC,KAAT,CAAe,KAAK,CAApB,EAAuBd,EAAE,CAACe,MAAH,CAAU,EAAEX,EAAE,CAACI,OAAH,GAAaH,EAAE,CAACI,IAAH,EAAb,EAAwBL,EAA1B,EAAV,CAAvB,CAAD,CAAjB,CAAd,CAAP;;YACR,KAAK,CAAL;cACIN,MAAM,GAAGO,EAAE,CAACI,IAAH,EAAT;cACAR,OAAO,GAAGH,MAAM,CAACkB,QAAP,CAAgBf,OAA1B;cACAC,UAAU,GAAGD,OAAO,KAAKA,OAAO,CAACgB,IAAR,IAAgBhB,OAAO,CAACZ,IAA7B,CAApB;;cACA,IAAIa,UAAJ,EAAgB;gBACZC,UAAU,GAAGd,IAAI,CAAC6B,KAAL,CAAWhB,UAAX,CAAb;;gBACA,IAAIpB,aAAa,CAACqB,UAAD,EAAaX,OAAO,CAACR,iBAArB,CAAjB,EAA0D;kBACtDQ,OAAO,CAACR,iBAAR,GAA4BmB,UAAU,GAAGd,IAAI,CAACC,GAAL,EAAzC;gBACH;cACJ;;cACD,OAAO,CAAC;cAAE;cAAH,EAAeQ,MAAf,CAAP;UAjCR;QAmCH,CApCiB,CAAlB;MAqCH,CAxCe,CAAhB;IAyCH,CA1CD;EA2CH,CA5CD;AA6CH;AACD,OAAO,IAAIqB,wBAAwB,GAAG;EAClCC,IAAI,EAAE,mBAD4B;EAElCC,IAAI,EAAE,CAAC,WAAD,EAAc,SAAd,CAF4B;EAGlCC,QAAQ,EAAE,OAHwB;EAIlCC,YAAY,EAAE,iBAJoB;EAKlCC,QAAQ,EAAE;AALwB,CAA/B;AAOP,OAAO,IAAIC,gBAAgB,GAAG,UAAUjC,OAAV,EAAmB;EAAE,OAAQ;IACvDkC,YAAY,EAAE,UAAUC,WAAV,EAAuB;MACjCA,WAAW,CAACC,aAAZ,CAA0BrC,iBAAiB,CAACC,OAAD,CAA3C,EAAsD2B,wBAAtD;IACH;EAHsD,CAAR;AAI9C,CAJE","names":["HttpRequest","isClockSkewed","newServerTime","systemClockOffset","abs","getSkewCorrectedDate","getTime","Date","now","awsAuthMiddleware","options","next","context","args","isInstance","request","signer","_a","_b","sign","signingDate","signingRegion","signingService","_d","_e","output","headers","response","dateHeader","date","serverTime","parse","awsAuthMiddlewareOptions","name","tags","relation","toMiddleware","override","getAwsAuthPlugin","applyToStack","clientStack","addRelativeTo"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/middleware-signing/src/middleware.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  FinalizeHandler,\n  FinalizeHandlerArguments,\n  FinalizeHandlerOutput,\n  FinalizeRequestMiddleware,\n  HandlerExecutionContext,\n  Pluggable,\n  RelativeMiddlewareOptions,\n} from \"@aws-sdk/types\";\n\nimport { AwsAuthResolvedConfig } from \"./configurations\";\n\nconst isClockSkewed = (newServerTime: number, systemClockOffset: number) =>\n  Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 300000;\n\nconst getSkewCorrectedDate = (systemClockOffset: number) => new Date(Date.now() + systemClockOffset);\n\nexport function awsAuthMiddleware<Input extends object, Output extends object>(\n  options: AwsAuthResolvedConfig\n): FinalizeRequestMiddleware<Input, Output> {\n  return (next: FinalizeHandler<Input, Output>, context: HandlerExecutionContext): FinalizeHandler<Input, Output> =>\n    async function (args: FinalizeHandlerArguments<Input>): Promise<FinalizeHandlerOutput<Output>> {\n      if (!HttpRequest.isInstance(args.request)) return next(args);\n      const signer = typeof options.signer === \"function\" ? await options.signer() : options.signer;\n      const output = await next({\n        ...args,\n        request: await signer.sign(args.request, {\n          signingDate: new Date(Date.now() + options.systemClockOffset),\n          signingRegion: context[\"signing_region\"],\n          signingService: context[\"signing_service\"],\n        }),\n      });\n\n      const { headers } = output.response as any;\n      const dateHeader = headers && (headers.date || headers.Date);\n      if (dateHeader) {\n        const serverTime = Date.parse(dateHeader);\n        if (isClockSkewed(serverTime, options.systemClockOffset)) {\n          options.systemClockOffset = serverTime - Date.now();\n        }\n      }\n\n      return output;\n    };\n}\n\nexport const awsAuthMiddlewareOptions: RelativeMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true,\n};\n\nexport const getAwsAuthPlugin = (options: AwsAuthResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}