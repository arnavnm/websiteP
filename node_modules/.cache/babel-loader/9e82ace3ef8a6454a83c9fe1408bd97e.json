{"ast":null,"code":"import { exhaustiveCheck } from '../util';\nexport { ModelSortPredicateCreator } from './sort';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n  return predicatesAllSet.has(predicate);\n} // This symbol is not used at runtime, only its type (unique symbol)\n\nexport var PredicateAll = Symbol('A predicate that matches all records');\n\nvar Predicates =\n/** @class */\nfunction () {\n  function Predicates() {}\n\n  Object.defineProperty(Predicates, \"ALL\", {\n    get: function () {\n      var predicate = function (c) {\n        return c;\n      };\n\n      predicatesAllSet.add(predicate);\n      return predicate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Predicates;\n}();\n\nexport { Predicates };\n\nvar ModelPredicateCreator =\n/** @class */\nfunction () {\n  function ModelPredicateCreator() {}\n\n  ModelPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function (_target, propertyKey, receiver) {\n        var groupType = propertyKey;\n\n        switch (groupType) {\n          case 'and':\n          case 'or':\n          case 'not':\n            var result_1 = function (newPredicate) {\n              var group = {\n                type: groupType,\n                predicates: []\n              }; // Create a new recorder\n\n              var tmpPredicateRecorder = new Proxy({}, handler); // Set the recorder group\n\n              ModelPredicateCreator.predicateGroupsMap.set(tmpPredicateRecorder, group); // Apply the predicates to the recorder (this is the step that records the changes)\n\n              newPredicate(tmpPredicateRecorder); // Push the group to the top-level recorder\n\n              ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push(group);\n              return receiver;\n            };\n\n            return result_1;\n\n          default:\n            exhaustiveCheck(groupType, false);\n        }\n\n        var field = propertyKey;\n\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n\n        var result = function (operator, operand) {\n          ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push({\n            field: field,\n            operator: operator,\n            operand: operand\n          });\n          return receiver;\n        };\n\n        return result;\n      }\n    });\n    var group = {\n      type: 'and',\n      predicates: []\n    };\n    ModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n    return predicate;\n  };\n\n  ModelPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n  };\n\n  ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n\n    if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n\n    return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n  }; // transforms cb-style predicate into Proxy\n\n\n  ModelPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n\n    return existing(ModelPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n\n  ModelPredicateCreator.createForId = function (modelDefinition, id) {\n    return ModelPredicateCreator.createPredicateBuilder(modelDefinition).id('eq', id);\n  };\n\n  ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n  return ModelPredicateCreator;\n}();\n\nexport { ModelPredicateCreator };","map":{"version":3,"mappings":"AAAA,SAASA,eAAT,QAAgC,SAAhC;AACA,SAASC,yBAAT,QAA0C,QAA1C;AACA,IAAIC,gBAAgB,GAAG,IAAIC,OAAJ,EAAvB;AACA,OAAO,SAASC,eAAT,CAAyBC,SAAzB,EAAoC;EACvC,OAAOH,gBAAgB,CAACI,GAAjB,CAAqBD,SAArB,CAAP;AACH,C,CACD;;AACA,OAAO,IAAIE,YAAY,GAAGC,MAAM,CAAC,sCAAD,CAAzB;;AACP,IAAIC,UAAU;AAAG;AAAe,YAAY;EACxC,SAASA,UAAT,GAAsB,CACrB;;EACDC,MAAM,CAACC,cAAP,CAAsBF,UAAtB,EAAkC,KAAlC,EAAyC;IACrCG,GAAG,EAAE,YAAY;MACb,IAAIP,SAAS,GAAI,UAAUQ,CAAV,EAAa;QAAE,OAAOA,CAAP;MAAW,CAA3C;;MACAX,gBAAgB,CAACY,GAAjB,CAAqBT,SAArB;MACA,OAAOA,SAAP;IACH,CALoC;IAMrCU,UAAU,EAAE,IANyB;IAOrCC,YAAY,EAAE;EAPuB,CAAzC;EASA,OAAOP,UAAP;AACH,CAb+B,EAAhC;;AAcA,SAASA,UAAT;;AACA,IAAIQ,qBAAqB;AAAG;AAAe,YAAY;EACnD,SAASA,qBAAT,GAAiC,CAChC;;EACDA,qBAAqB,CAACC,sBAAtB,GAA+C,UAAUC,eAAV,EAA2B;IACtE,IAAIC,SAAS,GAAGD,eAAe,CAACE,IAAhC;IACA,IAAIC,UAAU,GAAG,IAAIC,GAAJ,CAAQb,MAAM,CAACc,IAAP,CAAYL,eAAe,CAACM,MAA5B,CAAR,CAAjB;IACA,IAAIC,OAAJ;IACA,IAAIrB,SAAS,GAAG,IAAIsB,KAAJ,CAAU,EAAV,EAAeD,OAAO,GAAG;MACrCd,GAAG,EAAE,UAAUgB,OAAV,EAAmBC,WAAnB,EAAgCC,QAAhC,EAA0C;QAC3C,IAAIC,SAAS,GAAGF,WAAhB;;QACA,QAAQE,SAAR;UACI,KAAK,KAAL;UACA,KAAK,IAAL;UACA,KAAK,KAAL;YACI,IAAIC,QAAQ,GAAG,UAAUC,YAAV,EAAwB;cACnC,IAAIC,KAAK,GAAG;gBACRC,IAAI,EAAEJ,SADE;gBAERK,UAAU,EAAE;cAFJ,CAAZ,CADmC,CAKnC;;cACA,IAAIC,oBAAoB,GAAG,IAAIV,KAAJ,CAAU,EAAV,EAAcD,OAAd,CAA3B,CANmC,CAOnC;;cACAT,qBAAqB,CAACqB,kBAAtB,CAAyCC,GAAzC,CAA6CF,oBAA7C,EAAmEH,KAAnE,EARmC,CASnC;;cACAD,YAAY,CAACI,oBAAD,CAAZ,CAVmC,CAWnC;;cACApB,qBAAqB,CAACqB,kBAAtB,CACK1B,GADL,CACSkB,QADT,EAEKM,UAFL,CAEgBI,IAFhB,CAEqBN,KAFrB;cAGA,OAAOJ,QAAP;YACH,CAhBD;;YAiBA,OAAOE,QAAP;;UACJ;YACIhC,eAAe,CAAC+B,SAAD,EAAY,KAAZ,CAAf;QAvBR;;QAyBA,IAAIU,KAAK,GAAGZ,WAAZ;;QACA,IAAI,CAACP,UAAU,CAAChB,GAAX,CAAemC,KAAf,CAAL,EAA4B;UACxB,MAAM,IAAIC,KAAJ,CAAU,qCAAqCD,KAArC,GAA6C,WAA7C,GAA2DrB,SAArE,CAAN;QACH;;QACD,IAAIuB,MAAM,GAAG,UAAUC,QAAV,EAAoBC,OAApB,EAA6B;UACtC5B,qBAAqB,CAACqB,kBAAtB,CACK1B,GADL,CACSkB,QADT,EAEKM,UAFL,CAEgBI,IAFhB,CAEqB;YAAEC,KAAK,EAAEA,KAAT;YAAgBG,QAAQ,EAAEA,QAA1B;YAAoCC,OAAO,EAAEA;UAA7C,CAFrB;UAGA,OAAOf,QAAP;QACH,CALD;;QAMA,OAAOa,MAAP;MACH;IAvCoC,CAAzB,CAAhB;IAyCA,IAAIT,KAAK,GAAG;MACRC,IAAI,EAAE,KADE;MAERC,UAAU,EAAE;IAFJ,CAAZ;IAIAnB,qBAAqB,CAACqB,kBAAtB,CAAyCC,GAAzC,CAA6ClC,SAA7C,EAAwD6B,KAAxD;IACA,OAAO7B,SAAP;EACH,CAnDD;;EAoDAY,qBAAqB,CAAC6B,gBAAtB,GAAyC,UAAUzC,SAAV,EAAqB;IAC1D,OAAOY,qBAAqB,CAACqB,kBAAtB,CAAyChC,GAAzC,CAA6CD,SAA7C,CAAP;EACH,CAFD;;EAGAY,qBAAqB,CAAC8B,aAAtB,GAAsC,UAAU1C,SAAV,EAAqB2C,cAArB,EAAqC;IACvE,IAAIA,cAAc,KAAK,KAAK,CAA5B,EAA+B;MAAEA,cAAc,GAAG,IAAjB;IAAwB;;IACzD,IAAIA,cAAc,IAAI,CAAC/B,qBAAqB,CAAC6B,gBAAtB,CAAuCzC,SAAvC,CAAvB,EAA0E;MACtE,MAAM,IAAIqC,KAAJ,CAAU,4BAAV,CAAN;IACH;;IACD,OAAOzB,qBAAqB,CAACqB,kBAAtB,CAAyC1B,GAAzC,CAA6CP,SAA7C,CAAP;EACH,CAND,CA1DmD,CAiEnD;;;EACAY,qBAAqB,CAACgC,kBAAtB,GAA2C,UAAU9B,eAAV,EAA2B+B,QAA3B,EAAqC;IAC5E,IAAI,CAACA,QAAD,IAAa,CAAC/B,eAAlB,EAAmC;MAC/B,OAAOgC,SAAP;IACH;;IACD,OAAOD,QAAQ,CAACjC,qBAAqB,CAACC,sBAAtB,CAA6CC,eAA7C,CAAD,CAAf;EACH,CALD;;EAMAF,qBAAqB,CAACmC,WAAtB,GAAoC,UAAUjC,eAAV,EAA2BkC,EAA3B,EAA+B;IAC/D,OAAOpC,qBAAqB,CAACC,sBAAtB,CAA6CC,eAA7C,EAA8DkC,EAA9D,CAAiE,IAAjE,EAAuEA,EAAvE,CAAP;EACH,CAFD;;EAGApC,qBAAqB,CAACqB,kBAAtB,GAA2C,IAAIgB,OAAJ,EAA3C;EACA,OAAOrC,qBAAP;AACH,CA7E0C,EAA3C;;AA8EA,SAASA,qBAAT","names":["exhaustiveCheck","ModelSortPredicateCreator","predicatesAllSet","WeakSet","isPredicatesAll","predicate","has","PredicateAll","Symbol","Object","Predicates","add","ModelPredicateCreator","modelDefinition","fieldNames","Set","keys","fields","handler","Proxy","get","_target","propertyKey","receiver","groupType","result_1","newPredicate","group","type","predicates","tmpPredicateRecorder","predicateGroupsMap","set","push","field","Error","modelName","result","operator","operand","throwOnInvalid","isValidPredicate","existing","undefined","createPredicateBuilder","id","WeakMap"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-amplify/datastore/src/predicates/index.ts"],"sourcesContent":["import {\n\tAllOperators,\n\tModelPredicate,\n\tPersistentModel,\n\tPredicateExpression,\n\tPredicateGroups,\n\tPredicatesGroup,\n\tProducerModelPredicate,\n\tSchemaModel,\n} from '../types';\nimport { exhaustiveCheck } from '../util';\n\nexport { ModelSortPredicateCreator } from './sort';\n\nconst predicatesAllSet = new WeakSet<ProducerModelPredicate<any>>();\n\nexport function isPredicatesAll(\n\tpredicate: any\n): predicate is typeof PredicateAll {\n\treturn predicatesAllSet.has(predicate);\n}\n\n// This symbol is not used at runtime, only its type (unique symbol)\nexport const PredicateAll = Symbol('A predicate that matches all records');\n\nexport class Predicates {\n\tpublic static get ALL(): typeof PredicateAll {\n\t\tconst predicate = <ProducerModelPredicate<any>>(c => c);\n\n\t\tpredicatesAllSet.add(predicate);\n\n\t\treturn <typeof PredicateAll>(<unknown>predicate);\n\t}\n}\n\nexport class ModelPredicateCreator {\n\tprivate static predicateGroupsMap = new WeakMap<\n\t\tModelPredicate<any>,\n\t\tPredicatesGroup<any>\n\t>();\n\n\tprivate static createPredicateBuilder<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel\n\t) {\n\t\tconst { name: modelName } = modelDefinition;\n\t\tconst fieldNames = new Set<keyof T>(Object.keys(modelDefinition.fields));\n\n\t\tlet handler: ProxyHandler<ModelPredicate<T>>;\n\t\tconst predicate = new Proxy(\n\t\t\t{} as ModelPredicate<T>,\n\t\t\t(handler = {\n\t\t\t\tget(\n\t\t\t\t\t_target,\n\t\t\t\t\tpropertyKey,\n\t\t\t\t\treceiver: ModelPredicate<T>\n\t\t\t\t): PredicateExpression<T, any> {\n\t\t\t\t\tconst groupType = propertyKey as keyof PredicateGroups<T>;\n\n\t\t\t\t\tswitch (groupType) {\n\t\t\t\t\t\tcase 'and':\n\t\t\t\t\t\tcase 'or':\n\t\t\t\t\t\tcase 'not':\n\t\t\t\t\t\t\tconst result: PredicateExpression<T, any> = (\n\t\t\t\t\t\t\t\tnewPredicate: (criteria: ModelPredicate<T>) => ModelPredicate<T>\n\t\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\t\tconst group: PredicatesGroup<T> = {\n\t\t\t\t\t\t\t\t\ttype: groupType,\n\t\t\t\t\t\t\t\t\tpredicates: [],\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Create a new recorder\n\t\t\t\t\t\t\t\tconst tmpPredicateRecorder = new Proxy(\n\t\t\t\t\t\t\t\t\t{} as ModelPredicate<T>,\n\t\t\t\t\t\t\t\t\thandler\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// Set the recorder group\n\t\t\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap.set(\n\t\t\t\t\t\t\t\t\ttmpPredicateRecorder,\n\t\t\t\t\t\t\t\t\tgroup\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// Apply the predicates to the recorder (this is the step that records the changes)\n\t\t\t\t\t\t\t\tnewPredicate(tmpPredicateRecorder);\n\n\t\t\t\t\t\t\t\t// Push the group to the top-level recorder\n\t\t\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap\n\t\t\t\t\t\t\t\t\t.get(receiver)\n\t\t\t\t\t\t\t\t\t.predicates.push(group);\n\n\t\t\t\t\t\t\t\treturn receiver;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\texhaustiveCheck(groupType, false);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst field = propertyKey as keyof T;\n\n\t\t\t\t\tif (!fieldNames.has(field)) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Invalid field for model. field: ${field}, model: ${modelName}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result: PredicateExpression<T, any> = (\n\t\t\t\t\t\toperator: keyof AllOperators,\n\t\t\t\t\t\toperand: any\n\t\t\t\t\t) => {\n\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap\n\t\t\t\t\t\t\t.get(receiver)\n\t\t\t\t\t\t\t.predicates.push({ field, operator, operand });\n\t\t\t\t\t\treturn receiver;\n\t\t\t\t\t};\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\n\t\tconst group: PredicatesGroup<T> = {\n\t\t\ttype: 'and',\n\t\t\tpredicates: [],\n\t\t};\n\t\tModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n\n\t\treturn predicate;\n\t}\n\n\tstatic isValidPredicate<T extends PersistentModel>(\n\t\tpredicate: any\n\t): predicate is ModelPredicate<T> {\n\t\treturn ModelPredicateCreator.predicateGroupsMap.has(predicate);\n\t}\n\n\tstatic getPredicates<T extends PersistentModel>(\n\t\tpredicate: ModelPredicate<T>,\n\t\tthrowOnInvalid: boolean = true\n\t) {\n\t\tif (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n\t\t\tthrow new Error('The predicate is not valid');\n\t\t}\n\n\t\treturn ModelPredicateCreator.predicateGroupsMap.get(predicate);\n\t}\n\n\t// transforms cb-style predicate into Proxy\n\tstatic createFromExisting<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\texisting: ProducerModelPredicate<T>\n\t) {\n\t\tif (!existing || !modelDefinition) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn existing(\n\t\t\tModelPredicateCreator.createPredicateBuilder(modelDefinition)\n\t\t);\n\t}\n\n\tstatic createForId<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tid: string\n\t) {\n\t\treturn ModelPredicateCreator.createPredicateBuilder<T>(modelDefinition).id(\n\t\t\t'eq',\n\t\t\t<any>id\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}