{"ast":null,"code":"import { useId as e } from \"@radix-ui/react-id\";\nimport { Presence as t } from \"@radix-ui/react-presence\";\nimport { Primitive as o } from \"@radix-ui/react-primitive\";\nimport { useComposedRefs as n } from \"@radix-ui/react-compose-refs\";\nimport { useLayoutEffect as r } from \"@radix-ui/react-use-layout-effect\";\nimport { useControllableState as i } from \"@radix-ui/react-use-controllable-state\";\nimport { createContextScope as a } from \"@radix-ui/react-context\";\nimport { composeEventHandlers as l } from \"@radix-ui/primitive\";\nimport * as s from \"react\";\nimport c from \"@babel/runtime/helpers/esm/extends\";\nconst [p, d] = a(\"Collapsible\");\nexport { d as createCollapsibleScope };\nconst [u, m] = p(\"Collapsible\");\nexport const Collapsible = /*#__PURE__*/s.forwardRef((t, n) => {\n  const {\n    __scopeCollapsible: r,\n    open: a,\n    defaultOpen: l,\n    disabled: p,\n    onOpenChange: d,\n    ...m\n  } = t,\n        [f = !1, C] = i({\n    prop: a,\n    defaultProp: l,\n    onChange: d\n  });\n  /*#__PURE__*/\n\n  return s.createElement(u, {\n    scope: r,\n    disabled: p,\n    contentId: e(),\n    open: f,\n    onOpenToggle: s.useCallback(() => C(e => !e), [C])\n  }, /*#__PURE__*/s.createElement(o.div, c({\n    \"data-state\": b(f),\n    \"data-disabled\": p ? \"\" : void 0\n  }, m, {\n    ref: n\n  })));\n});\n/*#__PURE__*/\n\nexport const CollapsibleTrigger = /*#__PURE__*/s.forwardRef((e, t) => {\n  const {\n    __scopeCollapsible: n,\n    ...r\n  } = e,\n        i = m(\"CollapsibleTrigger\", n);\n  /*#__PURE__*/\n\n  return s.createElement(o.button, c({\n    type: \"button\",\n    \"aria-controls\": i.contentId,\n    \"aria-expanded\": i.open || !1,\n    \"data-state\": b(i.open),\n    \"data-disabled\": i.disabled ? \"\" : void 0,\n    disabled: i.disabled\n  }, r, {\n    ref: t,\n    onClick: l(e.onClick, i.onOpenToggle)\n  }));\n});\n/*#__PURE__*/\n\nexport const CollapsibleContent = /*#__PURE__*/s.forwardRef((e, o) => {\n  const {\n    forceMount: n,\n    ...r\n  } = e,\n        i = m(\"CollapsibleContent\", e.__scopeCollapsible);\n  /*#__PURE__*/\n\n  return s.createElement(t, {\n    present: n || i.open\n  }, _ref => {\n    let {\n      present: e\n    } = _ref;\n    return /*#__PURE__*/s.createElement(f, c({}, r, {\n      ref: o,\n      present: e\n    }));\n  });\n});\n/*#__PURE__*/\n\nconst f = /*#__PURE__*/s.forwardRef((e, t) => {\n  const {\n    __scopeCollapsible: i,\n    present: a,\n    children: l,\n    ...p\n  } = e,\n        d = m(\"CollapsibleContent\", i),\n        [u, f] = s.useState(a),\n        C = s.useRef(null),\n        x = n(t, C),\n        g = s.useRef(0),\n        y = g.current,\n        h = s.useRef(0),\n        R = h.current,\n        D = d.open || u,\n        v = s.useRef(D),\n        _ = s.useRef();\n\n  return s.useEffect(() => {\n    const e = requestAnimationFrame(() => v.current = !1);\n    return () => cancelAnimationFrame(e);\n  }, []), r(() => {\n    const e = C.current;\n\n    if (e) {\n      _.current = _.current || {\n        transitionDuration: e.style.transitionDuration,\n        animationDuration: e.style.animationDuration,\n        animationFillMode: e.style.animationFillMode\n      }, e.style.transitionDuration = \"0s\", e.style.animationDuration = \"0s\", e.style.animationFillMode = \"none\";\n      const t = e.getBoundingClientRect();\n      g.current = t.height, h.current = t.width, v.current || (e.style.transitionDuration = _.current.transitionDuration, e.style.animationDuration = _.current.animationDuration, e.style.animationFillMode = _.current.animationFillMode), f(a);\n    }\n  }, [d.open, a]), /*#__PURE__*/s.createElement(o.div, c({\n    \"data-state\": b(d.open),\n    \"data-disabled\": d.disabled ? \"\" : void 0,\n    id: d.contentId,\n    hidden: !D\n  }, p, {\n    ref: x,\n    style: {\n      \"--radix-collapsible-content-height\": y ? `${y}px` : void 0,\n      \"--radix-collapsible-content-width\": R ? `${R}px` : void 0,\n      ...e.style\n    }\n  }), D && l);\n});\n\nfunction b(e) {\n  return e ? \"open\" : \"closed\";\n}\n\nexport const Root = Collapsible;\nexport const Trigger = CollapsibleTrigger;\nexport const Content = CollapsibleContent;","map":{"version":3,"mappings":"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","names":["createCollapsibleContext","createCollapsibleScope","createContextScope","CollapsibleProvider","useCollapsibleContext","Collapsible","React","forwardRef","props","forwardedRef","__scopeCollapsible","open","openProp","defaultOpen","disabled","onOpenChange","collapsibleProps","setOpen","useControllableState","prop","defaultProp","onChange","_react","$a5c9ff236b90360c7963e374990ad39$var$CollapsibleProvider","scope","contentId","useId","onOpenToggle","useCallback","prevOpen","Primitive","div","getState","undefined","_babelRuntimeHelpersEsmExtends","ref","CollapsibleTrigger","triggerProps","context","button","type","onClick","composeEventHandlers","CollapsibleContent","forceMount","contentProps","Presence","present","$a5c9ff236b90360c7963e374990ad39$var$CollapsibleContentImpl","CollapsibleContentImpl","children","isPresent","setIsPresent","useState","useRef","composedRefs","useComposedRefs","heightRef","height","current","widthRef","width","isOpen","isMountAnimationPreventedRef","originalStylesRef","useEffect","rAF","requestAnimationFrame","cancelAnimationFrame","useLayoutEffect","node","transitionDuration","style","animationDuration","animationFillMode","rect","getBoundingClientRect","id","hidden","Root","Trigger","Content"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@radix-ui/react-collapsible/dist/packages/react/collapsible/src/Collapsible.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Presence } from '@radix-ui/react-presence';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Collapsible\n * -----------------------------------------------------------------------------------------------*/\n\nconst COLLAPSIBLE_NAME = 'Collapsible';\n\ntype ScopedProps<P> = P & { __scopeCollapsible?: Scope };\nconst [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);\n\ntype CollapsibleContextValue = {\n  contentId: string;\n  disabled?: boolean;\n  open: boolean;\n  onOpenToggle(): void;\n};\n\nconst [CollapsibleProvider, useCollapsibleContext] =\n  createCollapsibleContext<CollapsibleContextValue>(COLLAPSIBLE_NAME);\n\ntype CollapsibleElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface CollapsibleProps extends PrimitiveDivProps {\n  defaultOpen?: boolean;\n  open?: boolean;\n  disabled?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst Collapsible = React.forwardRef<CollapsibleElement, CollapsibleProps>(\n  (props: ScopedProps<CollapsibleProps>, forwardedRef) => {\n    const {\n      __scopeCollapsible,\n      open: openProp,\n      defaultOpen,\n      disabled,\n      onOpenChange,\n      ...collapsibleProps\n    } = props;\n\n    const [open = false, setOpen] = useControllableState({\n      prop: openProp,\n      defaultProp: defaultOpen,\n      onChange: onOpenChange,\n    });\n\n    return (\n      <CollapsibleProvider\n        scope={__scopeCollapsible}\n        disabled={disabled}\n        contentId={useId()}\n        open={open}\n        onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      >\n        <Primitive.div\n          data-state={getState(open)}\n          data-disabled={disabled ? '' : undefined}\n          {...collapsibleProps}\n          ref={forwardedRef}\n        />\n      </CollapsibleProvider>\n    );\n  }\n);\n\nCollapsible.displayName = COLLAPSIBLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'CollapsibleTrigger';\n\ntype CollapsibleTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CollapsibleTriggerProps extends PrimitiveButtonProps {}\n\nconst CollapsibleTrigger = React.forwardRef<CollapsibleTriggerElement, CollapsibleTriggerProps>(\n  (props: ScopedProps<CollapsibleTriggerProps>, forwardedRef) => {\n    const { __scopeCollapsible, ...triggerProps } = props;\n    const context = useCollapsibleContext(TRIGGER_NAME, __scopeCollapsible);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-controls={context.contentId}\n        aria-expanded={context.open || false}\n        data-state={getState(context.open)}\n        data-disabled={context.disabled ? '' : undefined}\n        disabled={context.disabled}\n        {...triggerProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nCollapsibleTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsibleContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'CollapsibleContent';\n\ntype CollapsibleContentElement = CollapsibleContentImplElement;\ninterface CollapsibleContentProps extends Omit<CollapsibleContentImplProps, 'present'> {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CollapsibleContent = React.forwardRef<CollapsibleContentElement, CollapsibleContentProps>(\n  (props: ScopedProps<CollapsibleContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useCollapsibleContext(CONTENT_NAME, props.__scopeCollapsible);\n    return (\n      <Presence present={forceMount || context.open}>\n        {({ present }) => (\n          <CollapsibleContentImpl {...contentProps} ref={forwardedRef} present={present} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nCollapsibleContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype CollapsibleContentImplElement = React.ElementRef<typeof Primitive.div>;\ninterface CollapsibleContentImplProps extends PrimitiveDivProps {\n  present: boolean;\n}\n\nconst CollapsibleContentImpl = React.forwardRef<\n  CollapsibleContentImplElement,\n  CollapsibleContentImplProps\n>((props: ScopedProps<CollapsibleContentImplProps>, forwardedRef) => {\n  const { __scopeCollapsible, present, children, ...contentProps } = props;\n  const context = useCollapsibleContext(CONTENT_NAME, __scopeCollapsible);\n  const [isPresent, setIsPresent] = React.useState(present);\n  const ref = React.useRef<CollapsibleContentImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const heightRef = React.useRef<number | undefined>(0);\n  const height = heightRef.current;\n  const widthRef = React.useRef<number | undefined>(0);\n  const width = widthRef.current;\n  // when opening we want it to immediately open to retrieve dimensions\n  // when closing we delay `present` to retrieve dimensions before closing\n  const isOpen = context.open || isPresent;\n  const isMountAnimationPreventedRef = React.useRef(isOpen);\n  const originalStylesRef = React.useRef<Record<string, string>>();\n\n  React.useEffect(() => {\n    const rAF = requestAnimationFrame(() => (isMountAnimationPreventedRef.current = false));\n    return () => cancelAnimationFrame(rAF);\n  }, []);\n\n  useLayoutEffect(() => {\n    const node = ref.current;\n    if (node) {\n      originalStylesRef.current = originalStylesRef.current || {\n        transitionDuration: node.style.transitionDuration,\n        animationDuration: node.style.animationDuration,\n        animationFillMode: node.style.animationFillMode,\n      };\n      // block any animations/transitions so the element renders at its full dimensions\n      node.style.transitionDuration = '0s';\n      node.style.animationDuration = '0s';\n      node.style.animationFillMode = 'none';\n\n      // get width and height from full dimensions\n      const rect = node.getBoundingClientRect();\n      heightRef.current = rect.height;\n      widthRef.current = rect.width;\n\n      // kick off any animations/transitions that were originally set up if it isn't the initial mount\n      if (!isMountAnimationPreventedRef.current) {\n        node.style.transitionDuration = originalStylesRef.current.transitionDuration;\n        node.style.animationDuration = originalStylesRef.current.animationDuration;\n        node.style.animationFillMode = originalStylesRef.current.animationFillMode;\n      }\n\n      setIsPresent(present);\n    }\n    /**\n     * depends on `context.open` because it will change to `false`\n     * when a close is triggered but `present` will be `false` on\n     * animation end (so when close finishes). This allows us to\n     * retrieve the dimensions *before* closing.\n     */\n  }, [context.open, present]);\n\n  return (\n    <Primitive.div\n      data-state={getState(context.open)}\n      data-disabled={context.disabled ? '' : undefined}\n      id={context.contentId}\n      hidden={!isOpen}\n      {...contentProps}\n      ref={composedRefs}\n      style={{\n        [`--radix-collapsible-content-height` as any]: height ? `${height}px` : undefined,\n        [`--radix-collapsible-content-width` as any]: width ? `${width}px` : undefined,\n        ...props.style,\n      }}\n    >\n      {isOpen && children}\n    </Primitive.div>\n  );\n});\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open?: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst Root = Collapsible;\nconst Trigger = CollapsibleTrigger;\nconst Content = CollapsibleContent;\n\nexport {\n  createCollapsibleScope,\n  //\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent,\n  //\n  Root,\n  Trigger,\n  Content,\n};\nexport type { CollapsibleProps, CollapsibleTriggerProps, CollapsibleContentProps };\n"]},"metadata":{},"sourceType":"module"}