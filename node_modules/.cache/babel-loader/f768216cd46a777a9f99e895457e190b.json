{"ast":null,"code":"import { MAXIMUM_RETRY_DELAY } from \"./constants\";\n/**\n * Calculate a capped, fully-jittered exponential backoff time.\n */\n\nexport var defaultDelayDecider = function (delayBase, attempts) {\n  return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * Math.pow(2, attempts) * delayBase));\n};","map":{"version":3,"mappings":"AAAA,SAASA,mBAAT,QAAoC,aAApC;AACA;AACA;AACA;;AACA,OAAO,IAAIC,mBAAmB,GAAG,UAAUC,SAAV,EAAqBC,QAArB,EAA+B;EAC5D,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASN,mBAAT,EAA8BI,IAAI,CAACG,MAAL,KAAgBH,IAAI,CAACI,GAAL,CAAS,CAAT,EAAYL,QAAZ,CAAhB,GAAwCD,SAAtE,CAAX,CAAP;AACH,CAFM","names":["MAXIMUM_RETRY_DELAY","defaultDelayDecider","delayBase","attempts","floor","Math","min","random"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/middleware-retry/src/delayDecider.ts"],"sourcesContent":["import { MAXIMUM_RETRY_DELAY } from \"./constants\";\n\n/**\n * Calculate a capped, fully-jittered exponential backoff time.\n */\nexport const defaultDelayDecider = (delayBase: number, attempts: number) =>\n  Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));\n"]},"metadata":{},"sourceType":"module"}