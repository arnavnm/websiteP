{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _tslib = require('./_virtual/_tslib.js');\n\nvar types = require('./types.js');\n\nvar actionTypes = require('./actionTypes.js');\n\nvar utils = require('./utils.js');\n\nvar environment = require('./environment.js');\n\nvar initEvent = /*#__PURE__*/utils.toSCXMLEvent({\n  type: actionTypes.init\n});\n\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\n\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n\n  if (utils.isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n\n    if (utils.isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (utils.isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n\n    if (utils.isFunction(exec)) {\n      actionObject = _tslib.__assign(_tslib.__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var actionType = exec.type || action.type;\n      actionObject = _tslib.__assign(_tslib.__assign(_tslib.__assign({}, exec), action), {\n        type: actionType\n      });\n    } else {\n      actionObject = action;\n    }\n  }\n\n  return actionObject;\n}\n\nvar toActionObjects = function toActionObjects(action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n\n  var actions = utils.isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\n\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return _tslib.__assign(_tslib.__assign({\n    id: utils.isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\n\nfunction raise(event) {\n  if (!utils.isString(event)) {\n    return send(event, {\n      to: types.SpecialTargets.Internal\n    });\n  }\n\n  return {\n    type: actionTypes.raise,\n    event: event\n  };\n}\n\nfunction resolveRaise(action) {\n  return {\n    type: actionTypes.raise,\n    _event: utils.toSCXMLEvent(action.event)\n  };\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: actionTypes.send,\n    event: utils.isFunction(event) ? event : utils.toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options && options.id !== undefined ? options.id : utils.isFunction(event) ? event.name : utils.getEventType(event)\n  };\n}\n\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = utils.toSCXMLEvent(utils.isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n\n  if (utils.isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = utils.isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = utils.isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n\n  var resolvedTarget = utils.isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return _tslib.__assign(_tslib.__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\n\nfunction sendParent(event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: types.SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */\n\n\nfunction sendTo(actor, event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: actor\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\n\nfunction sendUpdate() {\n  return sendParent(actionTypes.update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\n\nfunction respond(event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: function to(_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\n\nvar defaultLogExpr = function defaultLogExpr(context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n\n  return {\n    type: actionTypes.log,\n    label: label,\n    expr: expr\n  };\n}\n\nvar resolveLog = function resolveLog(action, ctx, _event) {\n  return _tslib.__assign(_tslib.__assign({}, action), {\n    value: utils.isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\n\nvar cancel = function cancel(sendId) {\n  return {\n    type: actionTypes.cancel,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: types.ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */\n\n\nfunction stop(actorRef) {\n  var activity = utils.isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);\n  return {\n    type: types.ActionTypes.Stop,\n    activity: activity,\n    exec: undefined\n  };\n}\n\nfunction resolveStop(action, context, _event) {\n  var actorRefOrString = utils.isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;\n  var resolvedActorRef = typeof actorRefOrString === 'string' ? {\n    id: actorRefOrString\n  } : actorRefOrString;\n  var actionObject = {\n    type: types.ActionTypes.Stop,\n    activity: resolvedActorRef\n  };\n  return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\n\nvar assign = function assign(assignment) {\n  return {\n    type: actionTypes.assign,\n    assignment: assignment\n  };\n};\n\nfunction isActionObject(action) {\n  return typeof action === 'object' && 'type' in action;\n}\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\".concat(id) : '';\n  return \"\".concat(types.ActionTypes.After, \"(\").concat(delayRef, \")\").concat(idSuffix);\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\n\nfunction done(id, data) {\n  var type = \"\".concat(types.ActionTypes.DoneState, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\n\nfunction doneInvoke(id, data) {\n  var type = \"\".concat(types.ActionTypes.DoneInvoke, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n\nfunction error(id, data) {\n  var type = \"\".concat(types.ActionTypes.ErrorPlatform, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n\nfunction pure(getActions) {\n  return {\n    type: types.ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\n\nfunction forwardTo(target, options) {\n  if (!environment.IS_PRODUCTION && (!target || typeof target === 'function')) {\n    var originalTarget_1 = target;\n\n    target = function target() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var resolvedTarget = typeof originalTarget_1 === 'function' ? originalTarget_1.apply(void 0, _tslib.__spreadArray([], _tslib.__read(args), false)) : originalTarget_1;\n\n      if (!resolvedTarget) {\n        throw new Error(\"Attempted to forward event to undefined actor. This risks an infinite loop in the sender.\");\n      }\n\n      return resolvedTarget;\n    };\n  }\n\n  return send(function (_, event) {\n    return event;\n  }, _tslib.__assign(_tslib.__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: actionTypes.error,\n      data: utils.isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, _tslib.__assign(_tslib.__assign({}, options), {\n    to: types.SpecialTargets.Parent\n  }));\n}\n\nfunction choose(conds) {\n  return {\n    type: types.ActionTypes.Choose,\n    conds: conds\n  };\n}\n\nfunction resolveActions(machine, currentState, currentContext, _event, actions, predictableExec, preserveActionOrder) {\n  if (preserveActionOrder === void 0) {\n    preserveActionOrder = false;\n  }\n\n  var _a = _tslib.__read(preserveActionOrder ? [[], actions] : utils.partition(actions, function (action) {\n    return action.type === actionTypes.assign;\n  }), 2),\n      assignActions = _a[0],\n      otherActions = _a[1];\n\n  var updatedContext = assignActions.length ? utils.updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;\n  var resolvedActions = utils.flatten(otherActions.map(function (actionObject) {\n    var _a;\n\n    switch (actionObject.type) {\n      case actionTypes.raise:\n        {\n          return resolveRaise(actionObject);\n        }\n\n      case actionTypes.send:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!environment.IS_PRODUCTION) {\n          // warn after resolving as we can create better contextual message here\n          utils.warn(!utils.isString(actionObject.delay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\".concat(actionObject.delay, \"' was found on machine '\").concat(machine.id, \"'\"));\n        }\n\n        if (sendAction.to !== types.SpecialTargets.Internal) {\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(sendAction, updatedContext, _event);\n        }\n\n        return sendAction;\n\n      case actionTypes.log:\n        {\n          var resolved = resolveLog(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);\n          return resolved;\n        }\n\n      case actionTypes.choose:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = utils.toGuard(condition.cond, machine.options.guards);\n            return !guard || utils.evaluateGuard(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _b = _tslib.__read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(utils.toArray(matchedActions), machine.options.actions), predictableExec, preserveActionOrder), 2),\n              resolvedActionsFromChoose = _b[0],\n              resolvedContextFromChoose = _b[1];\n\n          updatedContext = resolvedContextFromChoose;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromChoose;\n        }\n\n      case actionTypes.pure:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _c = _tslib.__read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(utils.toArray(matchedActions), machine.options.actions), predictableExec, preserveActionOrder), 2),\n              resolvedActionsFromPure = _c[0],\n              resolvedContext = _c[1];\n\n          updatedContext = resolvedContext;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromPure;\n        }\n\n      case actionTypes.stop:\n        {\n          var resolved = resolveStop(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);\n          return resolved;\n        }\n\n      case actionTypes.assign:\n        {\n          updatedContext = utils.updateContext(updatedContext, _event, [actionObject], !predictableExec ? currentState : undefined);\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          break;\n        }\n\n      default:\n        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n        var exec_1 = resolvedActionObject.exec;\n\n        if (predictableExec) {\n          predictableExec(resolvedActionObject, updatedContext, _event);\n        } else if (exec_1 && preservedContexts) {\n          var contextIndex_1 = preservedContexts.length - 1;\n          resolvedActionObject = _tslib.__assign(_tslib.__assign({}, resolvedActionObject), {\n            exec: function exec(_ctx) {\n              var args = [];\n\n              for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n              }\n\n              exec_1.apply(void 0, _tslib.__spreadArray([preservedContexts[contextIndex_1]], _tslib.__read(args), false));\n            }\n          });\n        }\n\n        return resolvedActionObject;\n    }\n  }).filter(function (a) {\n    return !!a;\n  }));\n  return [resolvedActions, updatedContext];\n}\n\nexports.actionTypes = actionTypes;\nexports.after = after;\nexports.assign = assign;\nexports.cancel = cancel;\nexports.choose = choose;\nexports.done = done;\nexports.doneInvoke = doneInvoke;\nexports.error = error;\nexports.escalate = escalate;\nexports.forwardTo = forwardTo;\nexports.getActionFunction = getActionFunction;\nexports.initEvent = initEvent;\nexports.isActionObject = isActionObject;\nexports.log = log;\nexports.pure = pure;\nexports.raise = raise;\nexports.resolveActions = resolveActions;\nexports.resolveLog = resolveLog;\nexports.resolveRaise = resolveRaise;\nexports.resolveSend = resolveSend;\nexports.resolveStop = resolveStop;\nexports.respond = respond;\nexports.send = send;\nexports.sendParent = sendParent;\nexports.sendTo = sendTo;\nexports.sendUpdate = sendUpdate;\nexports.start = start;\nexports.stop = stop;\nexports.toActionObject = toActionObject;\nexports.toActionObjects = toActionObjects;\nexports.toActivityDefinition = toActivityDefinition;","map":{"version":3,"names":["Object","defineProperty","exports","value","_tslib","require","types","actionTypes","utils","environment","initEvent","toSCXMLEvent","type","init","getActionFunction","actionType","actionFunctionMap","undefined","toActionObject","action","actionObject","isString","exec","isFunction","name","toString","__assign","toActionObjects","actions","isArray","map","subAction","toActivityDefinition","id","raise","event","send","to","SpecialTargets","Internal","resolveRaise","_event","options","toEventObject","delay","getEventType","resolveSend","ctx","delaysMap","meta","resolvedEvent","data","resolvedDelay","configDelay","resolvedTarget","sendParent","Parent","sendTo","actor","sendUpdate","update","respond","_","__","_a","origin","defaultLogExpr","context","log","expr","label","resolveLog","cancel","sendId","start","activity","activityDef","ActionTypes","Start","stop","actorRef","Stop","resolveStop","actorRefOrString","resolvedActorRef","assign","assignment","isActionObject","after","delayRef","idSuffix","concat","After","done","DoneState","eventObject","doneInvoke","DoneInvoke","error","ErrorPlatform","pure","getActions","Pure","get","forwardTo","target","IS_PRODUCTION","originalTarget_1","args","_i","arguments","length","apply","__spreadArray","__read","Error","escalate","errorData","choose","conds","Choose","resolveActions","machine","currentState","currentContext","predictableExec","preserveActionOrder","partition","assignActions","otherActions","updatedContext","updateContext","preservedContexts","resolvedActions","flatten","sendAction","delays","warn","resolved","chooseAction","matchedActions","find","condition","guard","toGuard","cond","guards","evaluateGuard","_b","toArray","resolvedActionsFromChoose","resolvedContextFromChoose","push","_c","resolvedActionsFromPure","resolvedContext","resolvedActionObject","exec_1","contextIndex_1","_ctx","filter","a"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/xstate/lib/actions.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar _tslib = require('./_virtual/_tslib.js');\nvar types = require('./types.js');\nvar actionTypes = require('./actionTypes.js');\nvar utils = require('./utils.js');\nvar environment = require('./environment.js');\n\nvar initEvent = /*#__PURE__*/utils.toSCXMLEvent({\n  type: actionTypes.init\n});\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n\n  if (utils.isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n\n    if (utils.isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (utils.isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n\n    if (utils.isFunction(exec)) {\n      actionObject = _tslib.__assign(_tslib.__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var actionType = exec.type || action.type;\n      actionObject = _tslib.__assign(_tslib.__assign(_tslib.__assign({}, exec), action), {\n        type: actionType\n      });\n    } else {\n      actionObject = action;\n    }\n  }\n\n  return actionObject;\n}\nvar toActionObjects = function (action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n\n  var actions = utils.isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return _tslib.__assign(_tslib.__assign({\n    id: utils.isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\nfunction raise(event) {\n  if (!utils.isString(event)) {\n    return send(event, {\n      to: types.SpecialTargets.Internal\n    });\n  }\n\n  return {\n    type: actionTypes.raise,\n    event: event\n  };\n}\nfunction resolveRaise(action) {\n  return {\n    type: actionTypes.raise,\n    _event: utils.toSCXMLEvent(action.event)\n  };\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: actionTypes.send,\n    event: utils.isFunction(event) ? event : utils.toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options && options.id !== undefined ? options.id : utils.isFunction(event) ? event.name : utils.getEventType(event)\n  };\n}\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = utils.toSCXMLEvent(utils.isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n\n  if (utils.isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = utils.isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = utils.isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n\n  var resolvedTarget = utils.isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return _tslib.__assign(_tslib.__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\nfunction sendParent(event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: types.SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */\n\nfunction sendTo(actor, event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: actor\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\nfunction sendUpdate() {\n  return sendParent(actionTypes.update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\nfunction respond(event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: function (_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\n\nvar defaultLogExpr = function (context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n\n  return {\n    type: actionTypes.log,\n    label: label,\n    expr: expr\n  };\n}\nvar resolveLog = function (action, ctx, _event) {\n  return _tslib.__assign(_tslib.__assign({}, action), {\n    value: utils.isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\nvar cancel = function (sendId) {\n  return {\n    type: actionTypes.cancel,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: types.ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */\n\nfunction stop(actorRef) {\n  var activity = utils.isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);\n  return {\n    type: types.ActionTypes.Stop,\n    activity: activity,\n    exec: undefined\n  };\n}\nfunction resolveStop(action, context, _event) {\n  var actorRefOrString = utils.isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;\n  var resolvedActorRef = typeof actorRefOrString === 'string' ? {\n    id: actorRefOrString\n  } : actorRefOrString;\n  var actionObject = {\n    type: types.ActionTypes.Stop,\n    activity: resolvedActorRef\n  };\n  return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\nvar assign = function (assignment) {\n  return {\n    type: actionTypes.assign,\n    assignment: assignment\n  };\n};\nfunction isActionObject(action) {\n  return typeof action === 'object' && 'type' in action;\n}\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\".concat(id) : '';\n  return \"\".concat(types.ActionTypes.After, \"(\").concat(delayRef, \")\").concat(idSuffix);\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\nfunction done(id, data) {\n  var type = \"\".concat(types.ActionTypes.DoneState, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\nfunction doneInvoke(id, data) {\n  var type = \"\".concat(types.ActionTypes.DoneInvoke, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\nfunction error(id, data) {\n  var type = \"\".concat(types.ActionTypes.ErrorPlatform, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\nfunction pure(getActions) {\n  return {\n    type: types.ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction forwardTo(target, options) {\n  if (!environment.IS_PRODUCTION && (!target || typeof target === 'function')) {\n    var originalTarget_1 = target;\n\n    target = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var resolvedTarget = typeof originalTarget_1 === 'function' ? originalTarget_1.apply(void 0, _tslib.__spreadArray([], _tslib.__read(args), false)) : originalTarget_1;\n\n      if (!resolvedTarget) {\n        throw new Error(\"Attempted to forward event to undefined actor. This risks an infinite loop in the sender.\");\n      }\n\n      return resolvedTarget;\n    };\n  }\n\n  return send(function (_, event) {\n    return event;\n  }, _tslib.__assign(_tslib.__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: actionTypes.error,\n      data: utils.isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, _tslib.__assign(_tslib.__assign({}, options), {\n    to: types.SpecialTargets.Parent\n  }));\n}\nfunction choose(conds) {\n  return {\n    type: types.ActionTypes.Choose,\n    conds: conds\n  };\n}\nfunction resolveActions(machine, currentState, currentContext, _event, actions, predictableExec, preserveActionOrder) {\n  if (preserveActionOrder === void 0) {\n    preserveActionOrder = false;\n  }\n\n  var _a = _tslib.__read(preserveActionOrder ? [[], actions] : utils.partition(actions, function (action) {\n    return action.type === actionTypes.assign;\n  }), 2),\n      assignActions = _a[0],\n      otherActions = _a[1];\n\n  var updatedContext = assignActions.length ? utils.updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;\n  var resolvedActions = utils.flatten(otherActions.map(function (actionObject) {\n    var _a;\n\n    switch (actionObject.type) {\n      case actionTypes.raise:\n        {\n          return resolveRaise(actionObject);\n        }\n\n      case actionTypes.send:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!environment.IS_PRODUCTION) {\n          // warn after resolving as we can create better contextual message here\n          utils.warn(!utils.isString(actionObject.delay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\".concat(actionObject.delay, \"' was found on machine '\").concat(machine.id, \"'\"));\n        }\n\n        if (sendAction.to !== types.SpecialTargets.Internal) {\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(sendAction, updatedContext, _event);\n        }\n\n        return sendAction;\n\n      case actionTypes.log:\n        {\n          var resolved = resolveLog(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);\n          return resolved;\n        }\n\n      case actionTypes.choose:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = utils.toGuard(condition.cond, machine.options.guards);\n            return !guard || utils.evaluateGuard(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _b = _tslib.__read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(utils.toArray(matchedActions), machine.options.actions), predictableExec, preserveActionOrder), 2),\n              resolvedActionsFromChoose = _b[0],\n              resolvedContextFromChoose = _b[1];\n\n          updatedContext = resolvedContextFromChoose;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromChoose;\n        }\n\n      case actionTypes.pure:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _c = _tslib.__read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(utils.toArray(matchedActions), machine.options.actions), predictableExec, preserveActionOrder), 2),\n              resolvedActionsFromPure = _c[0],\n              resolvedContext = _c[1];\n\n          updatedContext = resolvedContext;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromPure;\n        }\n\n      case actionTypes.stop:\n        {\n          var resolved = resolveStop(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);\n          return resolved;\n        }\n\n      case actionTypes.assign:\n        {\n          updatedContext = utils.updateContext(updatedContext, _event, [actionObject], !predictableExec ? currentState : undefined);\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          break;\n        }\n\n      default:\n        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n        var exec_1 = resolvedActionObject.exec;\n\n        if (predictableExec) {\n          predictableExec(resolvedActionObject, updatedContext, _event);\n        } else if (exec_1 && preservedContexts) {\n          var contextIndex_1 = preservedContexts.length - 1;\n          resolvedActionObject = _tslib.__assign(_tslib.__assign({}, resolvedActionObject), {\n            exec: function (_ctx) {\n              var args = [];\n\n              for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n              }\n\n              exec_1.apply(void 0, _tslib.__spreadArray([preservedContexts[contextIndex_1]], _tslib.__read(args), false));\n            }\n          });\n        }\n\n        return resolvedActionObject;\n    }\n  }).filter(function (a) {\n    return !!a;\n  }));\n  return [resolvedActions, updatedContext];\n}\n\nexports.actionTypes = actionTypes;\nexports.after = after;\nexports.assign = assign;\nexports.cancel = cancel;\nexports.choose = choose;\nexports.done = done;\nexports.doneInvoke = doneInvoke;\nexports.error = error;\nexports.escalate = escalate;\nexports.forwardTo = forwardTo;\nexports.getActionFunction = getActionFunction;\nexports.initEvent = initEvent;\nexports.isActionObject = isActionObject;\nexports.log = log;\nexports.pure = pure;\nexports.raise = raise;\nexports.resolveActions = resolveActions;\nexports.resolveLog = resolveLog;\nexports.resolveRaise = resolveRaise;\nexports.resolveSend = resolveSend;\nexports.resolveStop = resolveStop;\nexports.respond = respond;\nexports.send = send;\nexports.sendParent = sendParent;\nexports.sendTo = sendTo;\nexports.sendUpdate = sendUpdate;\nexports.start = start;\nexports.stop = stop;\nexports.toActionObject = toActionObject;\nexports.toActionObjects = toActionObjects;\nexports.toActivityDefinition = toActivityDefinition;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}