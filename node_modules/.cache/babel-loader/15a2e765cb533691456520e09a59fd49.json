{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetFaceSearchRequest, GetFaceSearchResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetFaceSearchCommand, serializeAws_json1_1GetFaceSearchCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets the face search results for Amazon Rekognition Video face search started by\n *       <a>StartFaceSearch</a>. The search returns faces in a collection that match the faces\n *     of persons detected in a video. It also includes the time(s) that faces are matched in the video.</p>\n *          <p>Face search in a video is an asynchronous operation. You start face search by calling\n *       to <a>StartFaceSearch</a> which returns a job identifier (<code>JobId</code>).\n *       When the search operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n *       topic registered in the initial call to <code>StartFaceSearch</code>.\n *       To get the search results, first check that the status value published to the Amazon SNS\n *       topic is <code>SUCCEEDED</code>. If so, call  <code>GetFaceSearch</code> and pass the job identifier\n *       (<code>JobId</code>) from the initial call to <code>StartFaceSearch</code>.</p>\n *\n *          <p>For more information, see Searching Faces in a Collection in the\n *       Amazon Rekognition Developer Guide.</p>\n *          <p>The search results are retured in an array, <code>Persons</code>, of\n *     <a>PersonMatch</a> objects. Each<code>PersonMatch</code> element contains\n *     details about the matching faces in the input collection, person information (facial attributes,\n *     bounding boxes, and person identifer)\n *     for the matched person, and the time the person was matched in the video.</p>\n *          <note>\n *\n *             <p>\n *                <code>GetFaceSearch</code> only returns the default\n *         facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,\n *         <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n *         in the <code>Face</code> object of the following response syntax are not returned. For more information,\n *         see FaceDetail in the Amazon Rekognition Developer Guide. </p>\n *          </note>\n *\n *          <p>By default, the <code>Persons</code> array is sorted by the time, in milliseconds from the\n *     start of the video, persons are matched.\n *     You can also sort by persons by specifying <code>INDEX</code> for the <code>SORTBY</code> input\n *     parameter.</p>\n */\n\nvar GetFaceSearchCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetFaceSearchCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetFaceSearchCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetFaceSearchCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"GetFaceSearchCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetFaceSearchRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetFaceSearchResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetFaceSearchCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetFaceSearchCommand(input, context);\n  };\n\n  GetFaceSearchCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetFaceSearchCommand(output, context);\n  };\n\n  return GetFaceSearchCommand;\n}($Command);\n\nexport { GetFaceSearchCommand };","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,oBAAT,EAA+BC,qBAA/B,QAA4D,oBAA5D;AACA,SAASC,0CAAT,EAAqDC,wCAArD,QAAsG,0BAAtG;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,oBAAoB;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACxDT,SAAS,CAACQ,oBAAD,EAAuBC,MAAvB,CAAT,CADwD,CAExD;EACA;;;EACA,SAASD,oBAAT,CAA8BE,KAA9B,EAAqC;IACjC,IAAIC,KAAK,GACT;IACAF,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;IAGAD,KAAK,CAACD,KAAN,GAAcA,KAAd;IACA,OAAOC,KAAP,CALiC,CAMjC;EACH;EACD;AACJ;AACA;;;EACIH,oBAAoB,CAACK,SAArB,CAA+BC,iBAA/B,GAAmD,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;IAC9F,KAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,IAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;IACA,IAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;IACA,IAAIC,UAAU,GAAG,mBAAjB;IACA,IAAIC,WAAW,GAAG,sBAAlB;IACA,IAAIC,uBAAuB,GAAG;MAC1BH,MAAM,EAAEA,MADkB;MAE1BC,UAAU,EAAEA,UAFc;MAG1BC,WAAW,EAAEA,WAHa;MAI1BE,uBAAuB,EAAE3B,oBAAoB,CAAC4B,kBAJpB;MAK1BC,wBAAwB,EAAE5B,qBAAqB,CAAC2B;IALtB,CAA9B;IAOA,IAAIE,cAAc,GAAGf,aAAa,CAACe,cAAnC;IACA,OAAOT,KAAK,CAACU,OAAN,CAAc,UAAUC,OAAV,EAAmB;MACpC,OAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuChB,OAAO,IAAI,EAAlD,CAAP;IACH,CAFM,EAEJU,uBAFI,CAAP;EAGH,CAjBD;;EAkBAnB,oBAAoB,CAACK,SAArB,CAA+BO,SAA/B,GAA2C,UAAUV,KAAV,EAAiByB,OAAjB,EAA0B;IACjE,OAAO/B,wCAAwC,CAACM,KAAD,EAAQyB,OAAR,CAA/C;EACH,CAFD;;EAGA3B,oBAAoB,CAACK,SAArB,CAA+BQ,WAA/B,GAA6C,UAAUe,MAAV,EAAkBD,OAAlB,EAA2B;IACpE,OAAOhC,0CAA0C,CAACiC,MAAD,EAASD,OAAT,CAAjD;EACH,CAFD;;EAGA,OAAO3B,oBAAP;AACH,CAxCyC,CAwCxCD,QAxCwC,CAA1C;;AAyCA,SAASC,oBAAT","names":["GetFaceSearchRequest","GetFaceSearchResponse","deserializeAws_json1_1GetFaceSearchCommand","serializeAws_json1_1GetFaceSearchCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","GetFaceSearchCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-sdk/client-rekognition/commands/GetFaceSearchCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { GetFaceSearchRequest, GetFaceSearchResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1GetFaceSearchCommand,\n  serializeAws_json1_1GetFaceSearchCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetFaceSearchCommandInput = GetFaceSearchRequest;\nexport type GetFaceSearchCommandOutput = GetFaceSearchResponse & __MetadataBearer;\n\n/**\n * <p>Gets the face search results for Amazon Rekognition Video face search started by\n *       <a>StartFaceSearch</a>. The search returns faces in a collection that match the faces\n *     of persons detected in a video. It also includes the time(s) that faces are matched in the video.</p>\n *          <p>Face search in a video is an asynchronous operation. You start face search by calling\n *       to <a>StartFaceSearch</a> which returns a job identifier (<code>JobId</code>).\n *       When the search operation finishes, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service\n *       topic registered in the initial call to <code>StartFaceSearch</code>.\n *       To get the search results, first check that the status value published to the Amazon SNS\n *       topic is <code>SUCCEEDED</code>. If so, call  <code>GetFaceSearch</code> and pass the job identifier\n *       (<code>JobId</code>) from the initial call to <code>StartFaceSearch</code>.</p>\n *\n *          <p>For more information, see Searching Faces in a Collection in the\n *       Amazon Rekognition Developer Guide.</p>\n *          <p>The search results are retured in an array, <code>Persons</code>, of\n *     <a>PersonMatch</a> objects. Each<code>PersonMatch</code> element contains\n *     details about the matching faces in the input collection, person information (facial attributes,\n *     bounding boxes, and person identifer)\n *     for the matched person, and the time the person was matched in the video.</p>\n *          <note>\n *\n *             <p>\n *                <code>GetFaceSearch</code> only returns the default\n *         facial attributes (<code>BoundingBox</code>, <code>Confidence</code>,\n *         <code>Landmarks</code>, <code>Pose</code>, and <code>Quality</code>). The other facial attributes listed\n *         in the <code>Face</code> object of the following response syntax are not returned. For more information,\n *         see FaceDetail in the Amazon Rekognition Developer Guide. </p>\n *          </note>\n *\n *          <p>By default, the <code>Persons</code> array is sorted by the time, in milliseconds from the\n *     start of the video, persons are matched.\n *     You can also sort by persons by specifying <code>INDEX</code> for the <code>SORTBY</code> input\n *     parameter.</p>\n */\nexport class GetFaceSearchCommand extends $Command<\n  GetFaceSearchCommandInput,\n  GetFaceSearchCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetFaceSearchCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetFaceSearchCommandInput, GetFaceSearchCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"GetFaceSearchCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetFaceSearchRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: GetFaceSearchResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: GetFaceSearchCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1GetFaceSearchCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<GetFaceSearchCommandOutput> {\n    return deserializeAws_json1_1GetFaceSearchCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}