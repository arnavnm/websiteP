{"ast":null,"code":"import { __values } from \"tslib\";\nimport { escapeUri } from \"@aws-sdk/util-uri-escape\";\nimport { SIGNATURE_HEADER } from \"./constants\";\n/**\n * @internal\n */\n\nexport function getCanonicalQuery(_a) {\n  var e_1, _b;\n\n  var _c = _a.query,\n      query = _c === void 0 ? {} : _c;\n  var keys = [];\n  var serialized = {};\n\n  var _loop_1 = function (key) {\n    if (key.toLowerCase() === SIGNATURE_HEADER) {\n      return \"continue\";\n    }\n\n    keys.push(key);\n    var value = query[key];\n\n    if (typeof value === \"string\") {\n      serialized[key] = escapeUri(key) + \"=\" + escapeUri(value);\n    } else if (Array.isArray(value)) {\n      serialized[key] = value.slice(0).sort().reduce(function (encoded, value) {\n        return encoded.concat([escapeUri(key) + \"=\" + escapeUri(value)]);\n      }, []).join(\"&\");\n    }\n  };\n\n  try {\n    for (var _d = __values(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()) {\n      var key = _e.value;\n\n      _loop_1(key);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_e && !_e.done && (_b = _d.return)) _b.call(_d);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return keys.map(function (key) {\n    return serialized[key];\n  }).filter(function (serialized) {\n    return serialized;\n  }) // omit any falsy values\n  .join(\"&\");\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,EAA3B,EAA+B;EAClC,IAAIC,GAAJ,EAASC,EAAT;;EACA,IAAIC,EAAE,GAAGH,EAAE,CAACI,KAAZ;EAAA,IAAmBA,KAAK,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAAhD;EACA,IAAIE,IAAI,GAAG,EAAX;EACA,IAAIC,UAAU,GAAG,EAAjB;;EACA,IAAIC,OAAO,GAAG,UAAUC,GAAV,EAAe;IACzB,IAAIA,GAAG,CAACC,WAAJ,OAAsBX,gBAA1B,EAA4C;MACxC,OAAO,UAAP;IACH;;IACDO,IAAI,CAACK,IAAL,CAAUF,GAAV;IACA,IAAIG,KAAK,GAAGP,KAAK,CAACI,GAAD,CAAjB;;IACA,IAAI,OAAOG,KAAP,KAAiB,QAArB,EAA+B;MAC3BL,UAAU,CAACE,GAAD,CAAV,GAAkBX,SAAS,CAACW,GAAD,CAAT,GAAiB,GAAjB,GAAuBX,SAAS,CAACc,KAAD,CAAlD;IACH,CAFD,MAGK,IAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;MAC3BL,UAAU,CAACE,GAAD,CAAV,GAAkBG,KAAK,CAClBG,KADa,CACP,CADO,EAEbC,IAFa,GAGbC,MAHa,CAGN,UAAUC,OAAV,EAAmBN,KAAnB,EAA0B;QAAE,OAAOM,OAAO,CAACC,MAAR,CAAe,CAACrB,SAAS,CAACW,GAAD,CAAT,GAAiB,GAAjB,GAAuBX,SAAS,CAACc,KAAD,CAAjC,CAAf,CAAP;MAAmE,CAHzF,EAG2F,EAH3F,EAIbQ,IAJa,CAIR,GAJQ,CAAlB;IAKH;EACJ,CAhBD;;EAiBA,IAAI;IACA,KAAK,IAAIC,EAAE,GAAGxB,QAAQ,CAACyB,MAAM,CAAChB,IAAP,CAAYD,KAAZ,EAAmBW,IAAnB,EAAD,CAAjB,EAA8CO,EAAE,GAAGF,EAAE,CAACG,IAAH,EAAxD,EAAmE,CAACD,EAAE,CAACE,IAAvE,EAA6EF,EAAE,GAAGF,EAAE,CAACG,IAAH,EAAlF,EAA6F;MACzF,IAAIf,GAAG,GAAGc,EAAE,CAACX,KAAb;;MACAJ,OAAO,CAACC,GAAD,CAAP;IACH;EACJ,CALD,CAMA,OAAOiB,KAAP,EAAc;IAAExB,GAAG,GAAG;MAAEyB,KAAK,EAAED;IAAT,CAAN;EAAyB,CANzC,SAOQ;IACJ,IAAI;MACA,IAAIH,EAAE,IAAI,CAACA,EAAE,CAACE,IAAV,KAAmBtB,EAAE,GAAGkB,EAAE,CAACO,MAA3B,CAAJ,EAAwCzB,EAAE,CAAC0B,IAAH,CAAQR,EAAR;IAC3C,CAFD,SAGQ;MAAE,IAAInB,GAAJ,EAAS,MAAMA,GAAG,CAACyB,KAAV;IAAkB;EACxC;;EACD,OAAOrB,IAAI,CACNwB,GADE,CACE,UAAUrB,GAAV,EAAe;IAAE,OAAOF,UAAU,CAACE,GAAD,CAAjB;EAAyB,CAD5C,EAEFsB,MAFE,CAEK,UAAUxB,UAAV,EAAsB;IAAE,OAAOA,UAAP;EAAoB,CAFjD,EAEmD;EAFnD,CAGFa,IAHE,CAGG,GAHH,CAAP;AAIH","names":["escapeUri","SIGNATURE_HEADER","getCanonicalQuery","_a","_c","query","keys","serialized","key","toLowerCase","push","value","Array","isArray","slice","sort","reduce","encoded","concat","join","_e","map","filter"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/signature-v4/src/getCanonicalQuery.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/types\";\nimport { escapeUri } from \"@aws-sdk/util-uri-escape\";\n\nimport { SIGNATURE_HEADER } from \"./constants\";\n\n/**\n * @internal\n */\nexport function getCanonicalQuery({ query = {} }: HttpRequest): string {\n  const keys: Array<string> = [];\n  const serialized: { [key: string]: string } = {};\n  for (const key of Object.keys(query).sort()) {\n    if (key.toLowerCase() === SIGNATURE_HEADER) {\n      continue;\n    }\n\n    keys.push(key);\n    const value = query[key];\n    if (typeof value === \"string\") {\n      serialized[key] = `${escapeUri(key)}=${escapeUri(value)}`;\n    } else if (Array.isArray(value)) {\n      serialized[key] = value\n        .slice(0)\n        .sort()\n        .reduce(\n          (encoded: Array<string>, value: string) => encoded.concat([`${escapeUri(key)}=${escapeUri(value)}`]),\n          []\n        )\n        .join(\"&\");\n    }\n  }\n\n  return keys\n    .map((key) => serialized[key])\n    .filter((serialized) => serialized) // omit any falsy values\n    .join(\"&\");\n}\n"]},"metadata":{},"sourceType":"module"}