{"ast":null,"code":"import * as React from 'react';\nimport { useContext, useEffect, useMemo, useState, useRef } from 'react';\nimport { cloneElement } from 'react';\nimport { MapContext } from './map';\nimport assert from '../utils/assert';\nimport { deepEqual } from '../utils/deep-equal';\nlet sourceCounter = 0;\n\nfunction createSource(map, id, props) {\n  // @ts-ignore\n  if (map.style && map.style._loaded) {\n    const options = { ...props\n    };\n    delete options.id;\n    delete options.children; // @ts-ignore\n\n    map.addSource(id, options);\n    return map.getSource(id);\n  }\n\n  return null;\n}\n/* eslint-disable complexity */\n\n\nfunction updateSource(source, props, prevProps) {\n  assert(props.id === prevProps.id, 'source id changed');\n  assert(props.type === prevProps.type, 'source type changed');\n  let changedKey = '';\n  let changedKeyCount = 0;\n\n  for (const key in props) {\n    if (key !== 'children' && key !== 'id' && !deepEqual(prevProps[key], props[key])) {\n      changedKey = key;\n      changedKeyCount++;\n    }\n  }\n\n  if (!changedKeyCount) {\n    return;\n  }\n\n  const type = props.type;\n\n  if (type === 'geojson') {\n    source.setData(props.data);\n  } else if (type === 'image') {\n    source.updateImage({\n      url: props.url,\n      coordinates: props.coordinates\n    });\n  } else if ((type === 'canvas' || type === 'video') && changedKeyCount === 1 && changedKey === 'coordinates') {\n    source.setCoordinates(props.coordinates);\n  } else if (type === 'vector' && 'setUrl' in source) {\n    // Added in 1.12.0:\n    // vectorTileSource.setTiles\n    // vectorTileSource.setUrl\n    switch (changedKey) {\n      case 'url':\n        source.setUrl(props.url);\n        break;\n\n      case 'tiles':\n        source.setTiles(props.tiles);\n        break;\n\n      default:\n    }\n  } else {\n    // eslint-disable-next-line\n    console.warn(`Unable to update <Source> prop: ${changedKey}`);\n  }\n}\n/* eslint-enable complexity */\n\n\nfunction Source(props) {\n  const map = useContext(MapContext).map.getMap();\n  const propsRef = useRef(props);\n  const [, setStyleLoaded] = useState(0);\n  const id = useMemo(() => props.id || `jsx-source-${sourceCounter++}`, []);\n  useEffect(() => {\n    if (map) {\n      const forceUpdate = () => setStyleLoaded(version => version + 1);\n\n      map.on('styledata', forceUpdate);\n      forceUpdate();\n      return () => {\n        var _a;\n\n        map.off('styledata', forceUpdate); // @ts-ignore\n\n        if (map.style && map.style._loaded && map.getSource(id)) {\n          // Parent effects are destroyed before child ones, see\n          // https://github.com/facebook/react/issues/16728\n          // Source can only be removed after all child layers are removed\n          const allLayers = (_a = map.getStyle()) === null || _a === void 0 ? void 0 : _a.layers;\n\n          if (allLayers) {\n            for (const layer of allLayers) {\n              // @ts-ignore (2339) source does not exist on all layer types\n              if (layer.source === id) {\n                map.removeLayer(layer.id);\n              }\n            }\n          }\n\n          map.removeSource(id);\n        }\n      };\n    }\n\n    return undefined;\n  }, [map]); // @ts-ignore\n\n  let source = map && map.style && map.getSource(id);\n\n  if (source) {\n    updateSource(source, props, propsRef.current);\n  } else {\n    source = createSource(map, id, props);\n  }\n\n  propsRef.current = props;\n  return source && React.Children.map(props.children, child => child && cloneElement(child, {\n    source: id\n  })) || null;\n}\n\nexport default Source;","map":{"version":3,"mappings":"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","names":["React","useContext","useEffect","useMemo","useState","useRef","cloneElement","MapContext","assert","deepEqual","sourceCounter","createSource","map","id","props","style","_loaded","options","children","addSource","getSource","updateSource","source","prevProps","type","changedKey","changedKeyCount","key","setData","data","updateImage","url","coordinates","setCoordinates","setUrl","setTiles","tiles","console","warn","Source","getMap","propsRef","setStyleLoaded","forceUpdate","version","on","off","allLayers","getStyle","_a","layers","layer","removeLayer","removeSource","undefined","current","Children","child"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/react-map-gl/src/components/source.ts"],"sourcesContent":["import * as React from 'react';\nimport {useContext, useEffect, useMemo, useState, useRef} from 'react';\nimport {cloneElement} from 'react';\nimport {MapContext} from './map';\nimport assert from '../utils/assert';\nimport {deepEqual} from '../utils/deep-equal';\n\nimport type {\n  MapboxMap,\n  AnySourceData,\n  GeoJSONSource,\n  ImageSource,\n  VideoSource,\n  AnySourceImpl\n} from '../types';\n\nexport type SourceProps = AnySourceData & {\n  id?: string;\n  children?: any;\n};\n\nlet sourceCounter = 0;\n\nfunction createSource(map: MapboxMap, id: string, props: SourceProps) {\n  // @ts-ignore\n  if (map.style && map.style._loaded) {\n    const options = {...props};\n    delete options.id;\n    delete options.children;\n    // @ts-ignore\n    map.addSource(id, options);\n    return map.getSource(id);\n  }\n  return null;\n}\n\n/* eslint-disable complexity */\nfunction updateSource(source: AnySourceImpl, props: SourceProps, prevProps: SourceProps) {\n  assert(props.id === prevProps.id, 'source id changed');\n  assert(props.type === prevProps.type, 'source type changed');\n\n  let changedKey = '';\n  let changedKeyCount = 0;\n\n  for (const key in props) {\n    if (key !== 'children' && key !== 'id' && !deepEqual(prevProps[key], props[key])) {\n      changedKey = key;\n      changedKeyCount++;\n    }\n  }\n\n  if (!changedKeyCount) {\n    return;\n  }\n\n  const type = props.type;\n\n  if (type === 'geojson') {\n    (source as GeoJSONSource).setData(props.data);\n  } else if (type === 'image') {\n    (source as ImageSource).updateImage({url: props.url, coordinates: props.coordinates});\n  } else if (\n    (type === 'canvas' || type === 'video') &&\n    changedKeyCount === 1 &&\n    changedKey === 'coordinates'\n  ) {\n    (source as VideoSource).setCoordinates(props.coordinates);\n  } else if (type === 'vector' && 'setUrl' in source) {\n    // Added in 1.12.0:\n    // vectorTileSource.setTiles\n    // vectorTileSource.setUrl\n    switch (changedKey) {\n      case 'url':\n        source.setUrl(props.url);\n        break;\n      case 'tiles':\n        source.setTiles(props.tiles);\n        break;\n      default:\n    }\n  } else {\n    // eslint-disable-next-line\n    console.warn(`Unable to update <Source> prop: ${changedKey}`);\n  }\n}\n/* eslint-enable complexity */\n\nfunction Source(props: SourceProps) {\n  const map: MapboxMap = useContext(MapContext).map.getMap();\n  const propsRef = useRef(props);\n  const [, setStyleLoaded] = useState(0);\n\n  const id = useMemo(() => props.id || `jsx-source-${sourceCounter++}`, []);\n\n  useEffect(() => {\n    if (map) {\n      const forceUpdate = () => setStyleLoaded(version => version + 1);\n      map.on('styledata', forceUpdate);\n      forceUpdate();\n\n      return () => {\n        map.off('styledata', forceUpdate);\n        // @ts-ignore\n        if (map.style && map.style._loaded && map.getSource(id)) {\n          // Parent effects are destroyed before child ones, see\n          // https://github.com/facebook/react/issues/16728\n          // Source can only be removed after all child layers are removed\n          const allLayers = map.getStyle()?.layers;\n          if (allLayers) {\n            for (const layer of allLayers) {\n              // @ts-ignore (2339) source does not exist on all layer types\n              if (layer.source === id) {\n                map.removeLayer(layer.id);\n              }\n            }\n          }\n          map.removeSource(id);\n        }\n      };\n    }\n    return undefined;\n  }, [map]);\n\n  // @ts-ignore\n  let source = map && map.style && map.getSource(id);\n  if (source) {\n    updateSource(source, props, propsRef.current);\n  } else {\n    source = createSource(map, id, props);\n  }\n  propsRef.current = props;\n\n  return (\n    (source &&\n      React.Children.map(\n        props.children,\n        child =>\n          child &&\n          cloneElement(child, {\n            source: id\n          })\n      )) ||\n    null\n  );\n}\n\nexport default Source;\n"]},"metadata":{},"sourceType":"module"}