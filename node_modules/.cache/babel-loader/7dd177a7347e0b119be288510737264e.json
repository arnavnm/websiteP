{"ast":null,"code":"import _classCallCheck from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { clamp, getDistance, getDistances, getRangeMax, getRangeValue, isInArray, isSsr } from \"../../Utils\";\n\nfunction applyDistance(particle) {\n  var initialPosition = particle.initialPosition;\n\n  var _getDistances = getDistances(initialPosition, particle.position),\n      dx = _getDistances.dx,\n      dy = _getDistances.dy;\n\n  var dxFixed = Math.abs(dx),\n      dyFixed = Math.abs(dy);\n  var hDistance = particle.retina.maxDistance.horizontal;\n  var vDistance = particle.retina.maxDistance.vertical;\n\n  if (!hDistance && !vDistance) {\n    return;\n  }\n\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    var pos = particle.position,\n        vel = particle.velocity;\n\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -Math.random();\n    }\n\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -Math.random();\n    }\n  }\n}\n\nexport var ParticlesMover = /*#__PURE__*/function () {\n  function ParticlesMover(container) {\n    _classCallCheck(this, ParticlesMover);\n\n    this.container = container;\n  }\n\n  _createClass(ParticlesMover, [{\n    key: \"move\",\n    value: function move(particle, delta) {\n      if (particle.destroyed) {\n        return;\n      }\n\n      this.moveParticle(particle, delta);\n      this.moveParallax(particle);\n    }\n  }, {\n    key: \"moveParticle\",\n    value: function moveParticle(particle, delta) {\n      var _a, _b, _c;\n\n      var _d, _e;\n\n      var particleOptions = particle.options;\n      var moveOptions = particleOptions.move;\n\n      if (!moveOptions.enable) {\n        return;\n      }\n\n      var container = this.container,\n          slowFactor = this.getProximitySpeedFactor(particle),\n          baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : _d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n          moveDrift = (_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : _e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio,\n          maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio,\n          sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n          diffFactor = 2,\n          speedFactor = sizeFactor * slowFactor * (delta.factor || 1) / diffFactor,\n          moveSpeed = baseSpeed * speedFactor;\n      this.applyPath(particle, delta);\n      var gravityOptions = particle.gravity;\n      var gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n\n      if (gravityOptions.enable && moveSpeed) {\n        particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n      }\n\n      if (moveDrift && moveSpeed) {\n        particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n      }\n\n      var decay = particle.moveDecay;\n\n      if (decay != 1) {\n        particle.velocity.multTo(decay);\n      }\n\n      var velocity = particle.velocity.mult(moveSpeed);\n      var maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n\n      if (gravityOptions.enable && maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n        velocity.y = gravityFactor * maxSpeed;\n\n        if (moveSpeed) {\n          particle.velocity.y = velocity.y / moveSpeed;\n        }\n      }\n\n      var zIndexOptions = particle.options.zIndex,\n          zVelocityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.velocityRate);\n\n      if (moveOptions.spin.enable) {\n        this.spin(particle, moveSpeed);\n      } else {\n        if (zVelocityFactor != 1) {\n          velocity.multTo(zVelocityFactor);\n        }\n\n        particle.position.addTo(velocity);\n\n        if (moveOptions.vibrate) {\n          particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n          particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n      }\n\n      applyDistance(particle);\n    }\n  }, {\n    key: \"spin\",\n    value: function spin(particle, moveSpeed) {\n      var container = this.container;\n\n      if (!particle.spin) {\n        return;\n      }\n\n      var updateFunc = {\n        x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n        y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos\n      };\n      particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n      particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n      particle.spin.radius += particle.spin.acceleration;\n      var maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n\n      if (particle.spin.radius > maxCanvasSize / 2) {\n        particle.spin.radius = maxCanvasSize / 2;\n        particle.spin.acceleration *= -1;\n      } else if (particle.spin.radius < 0) {\n        particle.spin.radius = 0;\n        particle.spin.acceleration *= -1;\n      }\n\n      particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);\n    }\n  }, {\n    key: \"applyPath\",\n    value: function applyPath(particle, delta) {\n      var particlesOptions = particle.options;\n      var pathOptions = particlesOptions.move.path;\n      var pathEnabled = pathOptions.enable;\n\n      if (!pathEnabled) {\n        return;\n      }\n\n      var container = this.container;\n\n      if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n      }\n\n      var path = container.pathGenerator.generate(particle);\n      particle.velocity.addTo(path);\n\n      if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n        particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n      }\n\n      particle.lastPathTime -= particle.pathDelay;\n    }\n  }, {\n    key: \"moveParallax\",\n    value: function moveParallax(particle) {\n      var container = this.container;\n      var options = container.actualOptions;\n\n      if (isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n        return;\n      }\n\n      var parallaxForce = options.interactivity.events.onHover.parallax.force;\n      var mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      var canvasCenter = {\n        x: container.canvas.size.width / 2,\n        y: container.canvas.size.height / 2\n      };\n      var parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n      var factor = particle.getRadius() / parallaxForce;\n      var tmp = {\n        x: (mousePos.x - canvasCenter.x) * factor,\n        y: (mousePos.y - canvasCenter.y) * factor\n      };\n      particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n      particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n  }, {\n    key: \"getProximitySpeedFactor\",\n    value: function getProximitySpeedFactor(particle) {\n      var container = this.container;\n      var options = container.actualOptions;\n      var active = isInArray(\"slow\", options.interactivity.events.onHover.mode);\n\n      if (!active) {\n        return 1;\n      }\n\n      var mousePos = this.container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return 1;\n      }\n\n      var particlePos = particle.getPosition();\n      var dist = getDistance(mousePos, particlePos);\n      var radius = container.retina.slowModeRadius;\n\n      if (dist > radius) {\n        return 1;\n      }\n\n      var proximityFactor = dist / radius || 0;\n      var slowFactor = options.interactivity.modes.slow.factor;\n      return proximityFactor / slowFactor;\n    }\n  }]);\n\n  return ParticlesMover;\n}();","map":{"version":3,"names":["clamp","getDistance","getDistances","getRangeMax","getRangeValue","isInArray","isSsr","applyDistance","particle","initialPosition","position","dx","dy","dxFixed","Math","abs","dyFixed","hDistance","retina","maxDistance","horizontal","vDistance","vertical","misplaced","velocity","x","y","pos","vel","random","ParticlesMover","container","delta","destroyed","moveParticle","moveParallax","_a","_b","_c","_d","_e","particleOptions","options","moveOptions","move","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","speed","pixelRatio","reduceFactor","moveDrift","drift","maxSize","size","value","sizeFactor","getRadius","diffFactor","speedFactor","factor","applyPath","gravityOptions","gravity","gravityFactor","inverse","acceleration","decay","moveDecay","multTo","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","zIndexFactor","velocityRate","spin","addTo","vibrate","sin","cos","updateFunc","direction","center","radius","angle","maxCanvasSize","max","canvas","width","height","particlesOptions","pathOptions","path","pathEnabled","lastPathTime","pathDelay","pathGenerator","generate","actualOptions","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","parallaxSmooth","smooth","tmp","offset","active","mode","particlePos","getPosition","dist","slowModeRadius","proximityFactor","modes","slow"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/tsparticles/esm/Core/Utils/ParticlesMover.js"],"sourcesContent":["import { clamp, getDistance, getDistances, getRangeMax, getRangeValue, isInArray, isSsr } from \"../../Utils\";\nfunction applyDistance(particle) {\n    const initialPosition = particle.initialPosition;\n    const { dx, dy } = getDistances(initialPosition, particle.position);\n    const dxFixed = Math.abs(dx), dyFixed = Math.abs(dy);\n    const hDistance = particle.retina.maxDistance.horizontal;\n    const vDistance = particle.retina.maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -Math.random();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -Math.random();\n        }\n    }\n}\nexport class ParticlesMover {\n    constructor(container) {\n        this.container = container;\n    }\n    move(particle, delta) {\n        if (particle.destroyed) {\n            return;\n        }\n        this.moveParticle(particle, delta);\n        this.moveParallax(particle);\n    }\n    moveParticle(particle, delta) {\n        var _a, _b, _c;\n        var _d, _e;\n        const particleOptions = particle.options;\n        const moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = this.container, slowFactor = this.getProximitySpeedFactor(particle), baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : (_d.moveSpeed = getRangeValue(moveOptions.speed) * container.retina.pixelRatio)) *\n            container.retina.reduceFactor, moveDrift = ((_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : (_e.moveDrift = getRangeValue(particle.options.move.drift) * container.retina.pixelRatio)), maxSize = getRangeMax(particleOptions.size.value) * container.retina.pixelRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, diffFactor = 2, speedFactor = (sizeFactor * slowFactor * (delta.factor || 1)) / diffFactor, moveSpeed = baseSpeed * speedFactor;\n        this.applyPath(particle, delta);\n        const gravityOptions = particle.gravity;\n        const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n        if (gravityOptions.enable && moveSpeed) {\n            particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n        }\n        if (moveDrift && moveSpeed) {\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n        }\n        const decay = particle.moveDecay;\n        if (decay != 1) {\n            particle.velocity.multTo(decay);\n        }\n        const velocity = particle.velocity.mult(moveSpeed);\n        const maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n        if (gravityOptions.enable &&\n            maxSpeed > 0 &&\n            ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n            velocity.y = gravityFactor * maxSpeed;\n            if (moveSpeed) {\n                particle.velocity.y = velocity.y / moveSpeed;\n            }\n        }\n        const zIndexOptions = particle.options.zIndex, zVelocityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n        if (moveOptions.spin.enable) {\n            this.spin(particle, moveSpeed);\n        }\n        else {\n            if (zVelocityFactor != 1) {\n                velocity.multTo(zVelocityFactor);\n            }\n            particle.position.addTo(velocity);\n            if (moveOptions.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n        }\n        applyDistance(particle);\n    }\n    spin(particle, moveSpeed) {\n        const container = this.container;\n        if (!particle.spin) {\n            return;\n        }\n        const updateFunc = {\n            x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n            y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos,\n        };\n        particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n        particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n        particle.spin.radius += particle.spin.acceleration;\n        const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n        if (particle.spin.radius > maxCanvasSize / 2) {\n            particle.spin.radius = maxCanvasSize / 2;\n            particle.spin.acceleration *= -1;\n        }\n        else if (particle.spin.radius < 0) {\n            particle.spin.radius = 0;\n            particle.spin.acceleration *= -1;\n        }\n        particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n    }\n    applyPath(particle, delta) {\n        const particlesOptions = particle.options;\n        const pathOptions = particlesOptions.move.path;\n        const pathEnabled = pathOptions.enable;\n        if (!pathEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastPathTime <= particle.pathDelay) {\n            particle.lastPathTime += delta.value;\n            return;\n        }\n        const path = container.pathGenerator.generate(particle);\n        particle.velocity.addTo(path);\n        if (pathOptions.clamp) {\n            particle.velocity.x = clamp(particle.velocity.x, -1, 1);\n            particle.velocity.y = clamp(particle.velocity.y, -1, 1);\n        }\n        particle.lastPathTime -= particle.pathDelay;\n    }\n    moveParallax(particle) {\n        const container = this.container;\n        const options = container.actualOptions;\n        if (isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const factor = particle.getRadius() / parallaxForce;\n        const tmp = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor(particle) {\n        const container = this.container;\n        const options = container.actualOptions;\n        const active = isInArray(\"slow\", options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = particle.getPosition();\n        const dist = getDistance(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}