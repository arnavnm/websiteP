{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nexport var resolveEndpointsConfig = function (input) {\n  var _a;\n\n  return __assign(__assign({}, input), {\n    tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,\n    endpoint: input.endpoint ? normalizeEndpoint(input) : function () {\n      return getEndPointFromRegion(input);\n    },\n    isCustomEndpoint: input.endpoint ? true : false\n  });\n};\n\nvar normalizeEndpoint = function (input) {\n  var endpoint = input.endpoint,\n      urlParser = input.urlParser;\n\n  if (typeof endpoint === \"string\") {\n    var promisified_1 = Promise.resolve(urlParser(endpoint));\n    return function () {\n      return promisified_1;\n    };\n  } else if (typeof endpoint === \"object\") {\n    var promisified_2 = Promise.resolve(endpoint);\n    return function () {\n      return promisified_2;\n    };\n  }\n\n  return endpoint;\n};\n\nvar getEndPointFromRegion = function (input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, tls, region, dnsHostRegex, hostname;\n\n    var _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = input.tls, tls = _a === void 0 ? true : _a;\n          return [4\n          /*yield*/\n          , input.region()];\n\n        case 1:\n          region = _c.sent();\n          dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n\n          if (!dnsHostRegex.test(region)) {\n            throw new Error(\"Invalid region in client config\");\n          }\n\n          return [4\n          /*yield*/\n          , input.regionInfoProvider(region)];\n\n        case 2:\n          hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;\n\n          if (!hostname) {\n            throw new Error(\"Cannot resolve hostname from client config\");\n          }\n\n          return [2\n          /*return*/\n          , input.urlParser((tls ? \"https:\" : \"http:\") + \"//\" + hostname)];\n      }\n    });\n  });\n};","map":{"version":3,"mappings":"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","names":["resolveEndpointsConfig","input","tls","_a","endpoint","normalizeEndpoint","isCustomEndpoint","urlParser","promisified_1","Promise","resolve","promisified_2","getEndPointFromRegion","region","_c","dnsHostRegex","RegExp","test","Error","regionInfoProvider","hostname","_b"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/config-resolver/src/EndpointsConfig.ts"],"sourcesContent":["import { Endpoint, Provider, RegionInfoProvider, UrlParser } from \"@aws-sdk/types\";\n\nexport interface EndpointsInputConfig {\n  /**\n   * The fully qualified endpoint of the webservice. This is only required when using a custom endpoint (for example, when using a local version of S3).\n   */\n  endpoint?: string | Endpoint | Provider<Endpoint>;\n\n  /**\n   * Whether TLS is enabled for requests.\n   */\n  tls?: boolean;\n}\n\ninterface PreviouslyResolved {\n  regionInfoProvider: RegionInfoProvider;\n  urlParser: UrlParser;\n  region: Provider<string>;\n}\n\nexport interface EndpointsResolvedConfig extends Required<EndpointsInputConfig> {\n  endpoint: Provider<Endpoint>;\n  isCustomEndpoint: boolean;\n}\n\nexport const resolveEndpointsConfig = <T>(\n  input: T & EndpointsInputConfig & PreviouslyResolved\n): T & EndpointsResolvedConfig => ({\n  ...input,\n  tls: input.tls ?? true,\n  endpoint: input.endpoint ? normalizeEndpoint(input) : () => getEndPointFromRegion(input),\n  isCustomEndpoint: input.endpoint ? true : false,\n});\n\nconst normalizeEndpoint = (input: EndpointsInputConfig & PreviouslyResolved): Provider<Endpoint> => {\n  const { endpoint, urlParser } = input;\n  if (typeof endpoint === \"string\") {\n    const promisified = Promise.resolve(urlParser(endpoint));\n    return () => promisified;\n  } else if (typeof endpoint === \"object\") {\n    const promisified = Promise.resolve(endpoint);\n    return () => promisified;\n  }\n  return endpoint!;\n};\n\nconst getEndPointFromRegion = async (input: EndpointsInputConfig & PreviouslyResolved) => {\n  const { tls = true } = input;\n  const region = await input.region();\n\n  const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n  if (!dnsHostRegex.test(region)) {\n    throw new Error(\"Invalid region in client config\");\n  }\n\n  const { hostname } = (await input.regionInfoProvider(region)) ?? {};\n  if (!hostname) {\n    throw new Error(\"Cannot resolve hostname from client config\");\n  }\n\n  return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\n};\n"]},"metadata":{},"sourceType":"module"}