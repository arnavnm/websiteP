{"ast":null,"code":"import _defineProperty from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { useState, useCallback, useMemo, useContext } from 'react';\nimport { MapContext } from './map';\nexport var MountedMapsContext = React.createContext(null);\nexport var MapProvider = function MapProvider(props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      maps = _useState2[0],\n      setMaps = _useState2[1];\n\n  var onMapMount = useCallback(function (map) {\n    var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    setMaps(function (currMaps) {\n      if (id === 'current') {\n        throw new Error(\"'current' cannot be used as map id\");\n      }\n\n      if (currMaps[id]) {\n        throw new Error(\"Multiple maps with the same id: \".concat(id));\n      }\n\n      return _objectSpread(_objectSpread({}, currMaps), {}, _defineProperty({}, id, map));\n    });\n  }, []);\n  var onMapUnmount = useCallback(function () {\n    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n    setMaps(function (currMaps) {\n      if (currMaps[id]) {\n        var nextMaps = _objectSpread({}, currMaps);\n\n        delete nextMaps[id];\n        return nextMaps;\n      }\n\n      return currMaps;\n    });\n  }, []);\n  return React.createElement(MountedMapsContext.Provider, {\n    value: {\n      maps: maps,\n      onMapMount: onMapMount,\n      onMapUnmount: onMapUnmount\n    }\n  }, props.children);\n};\nexport function useMap() {\n  var _a;\n\n  var maps = (_a = useContext(MountedMapsContext)) === null || _a === void 0 ? void 0 : _a.maps;\n  var currentMap = useContext(MapContext);\n  var mapsWithCurrent = useMemo(function () {\n    return _objectSpread(_objectSpread({}, maps), {}, {\n      current: currentMap === null || currentMap === void 0 ? void 0 : currentMap.map\n    });\n  }, [maps, currentMap]);\n  return mapsWithCurrent;\n}","map":{"version":3,"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,OAAhC,EAAyCC,UAAzC,QAA2D,OAA3D;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAO,IAAMC,kBAAkB,GAAGN,KAAK,CAACO,aAAN,CAAoB,IAApB,CAA3B;AACP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;EAChC,gBAAwBR,QAAQ,CAAC,EAAD,CAAhC;EAAA;EAAA,IAAOS,IAAP;EAAA,IAAaC,OAAb;;EACA,IAAMC,UAAU,GAAGV,WAAW,CAAC,UAACW,GAAD,EAAyB;IAAA,IAAnBC,EAAmB,uEAAd,SAAc;IACpDH,OAAO,CAAC,UAAAI,QAAQ,EAAI;MAChB,IAAID,EAAE,KAAK,SAAX,EAAsB;QAClB,MAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;MACH;;MACD,IAAID,QAAQ,CAACD,EAAD,CAAZ,EAAkB;QACd,MAAM,IAAIE,KAAJ,2CAA6CF,EAA7C,EAAN;MACH;;MACD,uCAAYC,QAAZ,2BAAuBD,EAAvB,EAA4BD,GAA5B;IACH,CARM,CAAP;EASH,CAV6B,EAU3B,EAV2B,CAA9B;EAWA,IAAMI,YAAY,GAAGf,WAAW,CAAC,YAAoB;IAAA,IAAnBY,EAAmB,uEAAd,SAAc;IACjDH,OAAO,CAAC,UAAAI,QAAQ,EAAI;MAChB,IAAIA,QAAQ,CAACD,EAAD,CAAZ,EAAkB;QACd,IAAMI,QAAQ,qBAAQH,QAAR,CAAd;;QACA,OAAOG,QAAQ,CAACJ,EAAD,CAAf;QACA,OAAOI,QAAP;MACH;;MACD,OAAOH,QAAP;IACH,CAPM,CAAP;EAQH,CAT+B,EAS7B,EAT6B,CAAhC;EAUA,OAAQf,KAAK,CAACmB,aAAN,CAAoBb,kBAAkB,CAACc,QAAvC,EAAiD;IAAEC,KAAK,EAAE;MAC1DX,IAAI,EAAJA,IAD0D;MAE1DE,UAAU,EAAVA,UAF0D;MAG1DK,YAAY,EAAZA;IAH0D;EAAT,CAAjD,EAICR,KAAK,CAACa,QAJP,CAAR;AAKH,CA5BM;AA6BP,OAAO,SAASC,MAAT,GAAkB;EACrB,IAAIC,EAAJ;;EACA,IAAMd,IAAI,GAAG,CAACc,EAAE,GAAGpB,UAAU,CAACE,kBAAD,CAAhB,MAA0C,IAA1C,IAAkDkB,EAAE,KAAK,KAAK,CAA9D,GAAkE,KAAK,CAAvE,GAA2EA,EAAE,CAACd,IAA3F;EACA,IAAMe,UAAU,GAAGrB,UAAU,CAACC,UAAD,CAA7B;EACA,IAAMqB,eAAe,GAAGvB,OAAO,CAAC,YAAM;IAClC,uCAAYO,IAAZ;MAAkBiB,OAAO,EAAEF,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACZ;IAA9F;EACH,CAF8B,EAE5B,CAACH,IAAD,EAAOe,UAAP,CAF4B,CAA/B;EAGA,OAAOC,eAAP;AACH","names":["React","useState","useCallback","useMemo","useContext","MapContext","MountedMapsContext","createContext","MapProvider","maps","setMaps","onMapMount","map","id","Error","currMaps","onMapUnmount","nextMaps","Provider","value","props","children","useMap","_a","currentMap","mapsWithCurrent","current"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/react-map-gl/src/components/use-map.tsx"],"sourcesContent":["import * as React from 'react';\nimport {useState, useCallback, useMemo, useContext} from 'react';\n\nimport {MapRef} from '../mapbox/create-ref';\nimport {MapContext} from './map';\n\ntype MountedMapsContextValue = {\n  maps: {[id: string]: MapRef};\n  onMapMount: (map: MapRef, id: string) => void;\n  onMapUnmount: (id: string) => void;\n};\n\nexport const MountedMapsContext = React.createContext<MountedMapsContextValue>(null);\n\nexport const MapProvider: React.FC<{children?: React.ReactNode}> = props => {\n  const [maps, setMaps] = useState<{[id: string]: MapRef}>({});\n\n  const onMapMount = useCallback((map: MapRef, id: string = 'default') => {\n    setMaps(currMaps => {\n      if (id === 'current') {\n        throw new Error(\"'current' cannot be used as map id\");\n      }\n      if (currMaps[id]) {\n        throw new Error(`Multiple maps with the same id: ${id}`);\n      }\n      return {...currMaps, [id]: map};\n    });\n  }, []);\n\n  const onMapUnmount = useCallback((id: string = 'default') => {\n    setMaps(currMaps => {\n      if (currMaps[id]) {\n        const nextMaps = {...currMaps};\n        delete nextMaps[id];\n        return nextMaps;\n      }\n      return currMaps;\n    });\n  }, []);\n\n  return (\n    <MountedMapsContext.Provider\n      value={{\n        maps,\n        onMapMount,\n        onMapUnmount\n      }}\n    >\n      {props.children}\n    </MountedMapsContext.Provider>\n  );\n};\n\nexport function useMap(): {current?: MapRef; [id: string]: MapRef | undefined} {\n  const maps = useContext(MountedMapsContext)?.maps;\n  const currentMap = useContext(MapContext);\n\n  const mapsWithCurrent = useMemo(() => {\n    return {...maps, current: currentMap?.map};\n  }, [maps, currentMap]);\n\n  return mapsWithCurrent;\n}\n"]},"metadata":{},"sourceType":"module"}