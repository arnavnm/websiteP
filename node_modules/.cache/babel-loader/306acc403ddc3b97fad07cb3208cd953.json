{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\n\nvar isEmptyData_1 = require(\"./isEmptyData\");\n\nvar constants_1 = require(\"./constants\");\n\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\n\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\n\nvar Sha256 =\n/** @class */\nfunction () {\n  function Sha256(secret) {\n    if (secret) {\n      this.operation = getKeyPromise(secret).then(function (keyData) {\n        return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);\n      });\n      this.operation.catch(function () {});\n    } else {\n      this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest(\"SHA-256\"));\n    }\n  }\n\n  Sha256.prototype.update = function (toHash) {\n    var _this = this;\n\n    if ((0, isEmptyData_1.isEmptyData)(toHash)) {\n      return;\n    }\n\n    this.operation = this.operation.then(function (operation) {\n      operation.onerror = function () {\n        _this.operation = Promise.reject(new Error(\"Error encountered updating hash\"));\n      };\n\n      operation.process(toArrayBufferView(toHash));\n      return operation;\n    });\n    this.operation.catch(function () {});\n  };\n\n  Sha256.prototype.digest = function () {\n    return this.operation.then(function (operation) {\n      return new Promise(function (resolve, reject) {\n        operation.onerror = function () {\n          reject(new Error(\"Error encountered finalizing hash\"));\n        };\n\n        operation.oncomplete = function () {\n          if (operation.result) {\n            resolve(new Uint8Array(operation.result));\n          }\n\n          reject(new Error(\"Error encountered finalizing hash\"));\n        };\n\n        operation.finish();\n      });\n    });\n  };\n\n  return Sha256;\n}();\n\nexports.Sha256 = Sha256;\n\nfunction getKeyPromise(secret) {\n  return new Promise(function (resolve, reject) {\n    var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey(\"raw\", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, [\"sign\"]);\n\n    keyOperation.oncomplete = function () {\n      if (keyOperation.result) {\n        resolve(keyOperation.result);\n      }\n\n      reject(new Error(\"ImportKey completed without importing key.\"));\n    };\n\n    keyOperation.onerror = function () {\n      reject(new Error(\"ImportKey failed to import key.\"));\n    };\n  });\n}\n\nfunction toArrayBufferView(data) {\n  if (typeof data === \"string\") {\n    return (0, util_utf8_browser_1.fromUtf8)(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n  }\n\n  return new Uint8Array(data);\n}","map":{"version":3,"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,IAAIC,aAAa,GAAGC,OAAO,CAAC,eAAD,CAA3B;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAIE,mBAAmB,GAAGF,OAAO,CAAC,4BAAD,CAAjC;;AACA,IAAIG,oBAAoB,GAAGH,OAAO,CAAC,6BAAD,CAAlC;;AACA,IAAIF,MAAM;AAAG;AAAe,YAAY;EACpC,SAASA,MAAT,CAAgBM,MAAhB,EAAwB;IACpB,IAAIA,MAAJ,EAAY;MACR,KAAKC,SAAL,GAAiBC,aAAa,CAACF,MAAD,CAAb,CAAsBG,IAAtB,CAA2B,UAAUC,OAAV,EAAmB;QAC3D,OAAO,CAAC,GAAGL,oBAAoB,CAACM,YAAzB,IAAyCC,QAAzC,CAAkDC,MAAlD,CAAyDC,IAAzD,CAA8DX,WAAW,CAACY,iBAA1E,EAA6FL,OAA7F,CAAP;MACH,CAFgB,CAAjB;MAGA,KAAKH,SAAL,CAAeS,KAAf,CAAqB,YAAY,CAAG,CAApC;IACH,CALD,MAMK;MACD,KAAKT,SAAL,GAAiBU,OAAO,CAACC,OAAR,CAAgB,CAAC,GAAGb,oBAAoB,CAACM,YAAzB,IAAyCC,QAAzC,CAAkDC,MAAlD,CAAyDM,MAAzD,CAAgE,SAAhE,CAAhB,CAAjB;IACH;EACJ;;EACDnB,MAAM,CAACoB,SAAP,CAAiBC,MAAjB,GAA0B,UAAUC,MAAV,EAAkB;IACxC,IAAIC,KAAK,GAAG,IAAZ;;IACA,IAAI,CAAC,GAAGtB,aAAa,CAACuB,WAAlB,EAA+BF,MAA/B,CAAJ,EAA4C;MACxC;IACH;;IACD,KAAKf,SAAL,GAAiB,KAAKA,SAAL,CAAeE,IAAf,CAAoB,UAAUF,SAAV,EAAqB;MACtDA,SAAS,CAACkB,OAAV,GAAoB,YAAY;QAC5BF,KAAK,CAAChB,SAAN,GAAkBU,OAAO,CAACS,MAAR,CAAe,IAAIC,KAAJ,CAAU,iCAAV,CAAf,CAAlB;MACH,CAFD;;MAGApB,SAAS,CAACqB,OAAV,CAAkBC,iBAAiB,CAACP,MAAD,CAAnC;MACA,OAAOf,SAAP;IACH,CANgB,CAAjB;IAOA,KAAKA,SAAL,CAAeS,KAAf,CAAqB,YAAY,CAAG,CAApC;EACH,CAbD;;EAcAhB,MAAM,CAACoB,SAAP,CAAiBD,MAAjB,GAA0B,YAAY;IAClC,OAAO,KAAKZ,SAAL,CAAeE,IAAf,CAAoB,UAAUF,SAAV,EAAqB;MAC5C,OAAO,IAAIU,OAAJ,CAAY,UAAUC,OAAV,EAAmBQ,MAAnB,EAA2B;QAC1CnB,SAAS,CAACkB,OAAV,GAAoB,YAAY;UAC5BC,MAAM,CAAC,IAAIC,KAAJ,CAAU,mCAAV,CAAD,CAAN;QACH,CAFD;;QAGApB,SAAS,CAACuB,UAAV,GAAuB,YAAY;UAC/B,IAAIvB,SAAS,CAACwB,MAAd,EAAsB;YAClBb,OAAO,CAAC,IAAIc,UAAJ,CAAezB,SAAS,CAACwB,MAAzB,CAAD,CAAP;UACH;;UACDL,MAAM,CAAC,IAAIC,KAAJ,CAAU,mCAAV,CAAD,CAAN;QACH,CALD;;QAMApB,SAAS,CAAC0B,MAAV;MACH,CAXM,CAAP;IAYH,CAbM,CAAP;EAcH,CAfD;;EAgBA,OAAOjC,MAAP;AACH,CA3C2B,EAA5B;;AA4CAF,OAAO,CAACE,MAAR,GAAiBA,MAAjB;;AACA,SAASQ,aAAT,CAAuBF,MAAvB,EAA+B;EAC3B,OAAO,IAAIW,OAAJ,CAAY,UAAUC,OAAV,EAAmBQ,MAAnB,EAA2B;IAC1C,IAAIQ,YAAY,GAAG,CAAC,GAAG7B,oBAAoB,CAACM,YAAzB,IAAyCC,QAAzC,CAAkDC,MAAlD,CAAyDsB,SAAzD,CAAmE,KAAnE,EAA0EN,iBAAiB,CAACvB,MAAD,CAA3F,EAAqGH,WAAW,CAACY,iBAAjH,EAAoI,KAApI,EAA2I,CAAC,MAAD,CAA3I,CAAnB;;IACAmB,YAAY,CAACJ,UAAb,GAA0B,YAAY;MAClC,IAAII,YAAY,CAACH,MAAjB,EAAyB;QACrBb,OAAO,CAACgB,YAAY,CAACH,MAAd,CAAP;MACH;;MACDL,MAAM,CAAC,IAAIC,KAAJ,CAAU,4CAAV,CAAD,CAAN;IACH,CALD;;IAMAO,YAAY,CAACT,OAAb,GAAuB,YAAY;MAC/BC,MAAM,CAAC,IAAIC,KAAJ,CAAU,iCAAV,CAAD,CAAN;IACH,CAFD;EAGH,CAXM,CAAP;AAYH;;AACD,SAASE,iBAAT,CAA2BO,IAA3B,EAAiC;EAC7B,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;IAC1B,OAAO,CAAC,GAAGhC,mBAAmB,CAACiC,QAAxB,EAAkCD,IAAlC,CAAP;EACH;;EACD,IAAIE,WAAW,CAACC,MAAZ,CAAmBH,IAAnB,CAAJ,EAA8B;IAC1B,OAAO,IAAIJ,UAAJ,CAAeI,IAAI,CAACI,MAApB,EAA4BJ,IAAI,CAACK,UAAjC,EAA6CL,IAAI,CAACM,UAAL,GAAkBV,UAAU,CAACW,iBAA1E,CAAP;EACH;;EACD,OAAO,IAAIX,UAAJ,CAAeI,IAAf,CAAP;AACH","names":["secret","operation","getKeyPromise","then","msCrypto","subtle","sign","constants_1","keyData","catch","Promise","resolve","digest","Sha256","toHash","onerror","_this","reject","Error","process","toArrayBufferView","oncomplete","result","Uint8Array","finish","exports","keyOperation","importKey","data","ArrayBuffer","isView","buffer","byteOffset","byteLength","BYTES_PER_ELEMENT"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/client-location/node_modules/@aws-crypto/sha256-browser/src/ie11Sha256.ts"],"sourcesContent":["import { isEmptyData } from \"./isEmptyData\";\nimport { SHA_256_HMAC_ALGO } from \"./constants\";\nimport { Hash, SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8-browser\";\nimport { CryptoOperation, Key, MsWindow } from \"@aws-crypto/ie11-detection\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha256 implements Hash {\n  private operation: Promise<CryptoOperation>;\n\n  constructor(secret?: SourceData) {\n    if (secret) {\n      this.operation = getKeyPromise(secret).then(keyData =>\n        (locateWindow() as MsWindow).msCrypto.subtle.sign(\n          SHA_256_HMAC_ALGO,\n          keyData\n        )\n      );\n      this.operation.catch(() => {});\n    } else {\n      this.operation = Promise.resolve(\n        (locateWindow() as MsWindow).msCrypto.subtle.digest(\"SHA-256\")\n      );\n    }\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash)) {\n      return;\n    }\n\n    this.operation = this.operation.then(operation => {\n      operation.onerror = () => {\n        this.operation = Promise.reject(\n          new Error(\"Error encountered updating hash\")\n        );\n      };\n      operation.process(toArrayBufferView(toHash));\n\n      return operation;\n    });\n    this.operation.catch(() => {});\n  }\n\n  digest(): Promise<Uint8Array> {\n    return this.operation.then<Uint8Array>(\n      operation =>\n        new Promise((resolve, reject) => {\n          operation.onerror = () => {\n            reject(new Error(\"Error encountered finalizing hash\"));\n          };\n          operation.oncomplete = () => {\n            if (operation.result) {\n              resolve(new Uint8Array(operation.result));\n            }\n            reject(new Error(\"Error encountered finalizing hash\"));\n          };\n\n          operation.finish();\n        })\n    );\n  }\n}\n\nfunction getKeyPromise(secret: SourceData): Promise<Key> {\n  return new Promise((resolve, reject) => {\n    const keyOperation = (locateWindow() as MsWindow).msCrypto.subtle.importKey(\n      \"raw\",\n      toArrayBufferView(secret),\n      SHA_256_HMAC_ALGO,\n      false,\n      [\"sign\"]\n    );\n\n    keyOperation.oncomplete = () => {\n      if (keyOperation.result) {\n        resolve(keyOperation.result);\n      }\n\n      reject(new Error(\"ImportKey completed without importing key.\"));\n    };\n    keyOperation.onerror = () => {\n      reject(new Error(\"ImportKey failed to import key.\"));\n    };\n  });\n}\n\nfunction toArrayBufferView(data: SourceData): Uint8Array {\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n"]},"metadata":{},"sourceType":"script"}