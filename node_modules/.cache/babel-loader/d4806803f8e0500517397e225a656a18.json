{"ast":null,"code":"/**\n * Changes object keys to camel case. If optional parameter `keys` is given, then we extract only the\n * keys specified in `keys`.\n */\nexport function makeCamelCase(obj, keys) {\n  if (!obj) return undefined;\n  var newObj = {};\n  var keysToRename = keys ? keys : Object.keys(obj);\n  keysToRename.forEach(function (key) {\n    var _a;\n\n    if (obj.hasOwnProperty(key)) {\n      // change the key to camelcase.\n      var camelCaseKey = key.charAt(0).toLowerCase() + key.substr(1);\n      Object.assign(newObj, (_a = {}, _a[camelCaseKey] = obj[key], _a));\n    }\n  });\n  return newObj;\n}\n/**\n * Given an array of object, call makeCamelCase(...) on each option.\n */\n\nexport function makeCamelCaseArray(objArr, keys) {\n  if (!objArr) return undefined;\n  return objArr.map(function (obj) {\n    return makeCamelCase(obj, keys);\n  });\n}\n/**\n * Converts blob to array buffer\n */\n\nexport function blobToArrayBuffer(blob) {\n  return new Promise(function (res, rej) {\n    var reader = new FileReader();\n\n    reader.onload = function (_event) {\n      res(reader.result);\n    };\n\n    reader.onerror = function (err) {\n      rej(err);\n    };\n\n    try {\n      reader.readAsArrayBuffer(blob);\n    } catch (err) {\n      rej(err); // in case user gives invalid type\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;EACrC,IAAI,CAACD,GAAL,EACI,OAAOE,SAAP;EACJ,IAAIC,MAAM,GAAG,EAAb;EACA,IAAIC,YAAY,GAAGH,IAAI,GAAGA,IAAH,GAAUI,MAAM,CAACJ,IAAP,CAAYD,GAAZ,CAAjC;EACAI,YAAY,CAACE,OAAb,CAAqB,UAAUC,GAAV,EAAe;IAChC,IAAIC,EAAJ;;IACA,IAAIR,GAAG,CAACS,cAAJ,CAAmBF,GAAnB,CAAJ,EAA6B;MACzB;MACA,IAAIG,YAAY,GAAGH,GAAG,CAACI,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BL,GAAG,CAACM,MAAJ,CAAW,CAAX,CAAjD;MACAR,MAAM,CAACS,MAAP,CAAcX,MAAd,GAAuBK,EAAE,GAAG,EAAL,EAASA,EAAE,CAACE,YAAD,CAAF,GAAmBV,GAAG,CAACO,GAAD,CAA/B,EAAsCC,EAA7D;IACH;EACJ,CAPD;EAQA,OAAOL,MAAP;AACH;AACD;AACA;AACA;;AACA,OAAO,SAASY,kBAAT,CAA4BC,MAA5B,EAAoCf,IAApC,EAA0C;EAC7C,IAAI,CAACe,MAAL,EACI,OAAOd,SAAP;EACJ,OAAOc,MAAM,CAACC,GAAP,CAAW,UAAUjB,GAAV,EAAe;IAAE,OAAOD,aAAa,CAACC,GAAD,EAAMC,IAAN,CAApB;EAAkC,CAA9D,CAAP;AACH;AACD;AACA;AACA;;AACA,OAAO,SAASiB,iBAAT,CAA2BC,IAA3B,EAAiC;EACpC,OAAO,IAAIC,OAAJ,CAAY,UAAUC,GAAV,EAAeC,GAAf,EAAoB;IACnC,IAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;IACAD,MAAM,CAACE,MAAP,GAAgB,UAAUC,MAAV,EAAkB;MAC9BL,GAAG,CAACE,MAAM,CAACI,MAAR,CAAH;IACH,CAFD;;IAGAJ,MAAM,CAACK,OAAP,GAAiB,UAAUC,GAAV,EAAe;MAC5BP,GAAG,CAACO,GAAD,CAAH;IACH,CAFD;;IAGA,IAAI;MACAN,MAAM,CAACO,iBAAP,CAAyBX,IAAzB;IACH,CAFD,CAGA,OAAOU,GAAP,EAAY;MACRP,GAAG,CAACO,GAAD,CAAH,CADQ,CACE;IACb;EACJ,CAdM,CAAP;AAeH","names":["makeCamelCase","obj","keys","undefined","newObj","keysToRename","Object","forEach","hasOwnProperty","key","camelCaseKey","charAt","toLowerCase","substr","assign","_a","makeCamelCaseArray","objArr","map","blobToArrayBuffer","blob","Promise","res","rej","reader","FileReader","onload","result","onerror","err","readAsArrayBuffer"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/predictions/src/Providers/Utils.ts"],"sourcesContent":["/**\n * Changes object keys to camel case. If optional parameter `keys` is given, then we extract only the\n * keys specified in `keys`.\n */\nexport function makeCamelCase(obj: object, keys?: string[]) {\n\tif (!obj) return undefined;\n\tconst newObj = {};\n\tconst keysToRename = keys ? keys : Object.keys(obj);\n\tkeysToRename.forEach(key => {\n\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t// change the key to camelcase.\n\t\t\tconst camelCaseKey = key.charAt(0).toLowerCase() + key.substr(1);\n\t\t\tObject.assign(newObj, { [camelCaseKey]: obj[key] });\n\t\t}\n\t});\n\treturn newObj;\n}\n\n/**\n * Given an array of object, call makeCamelCase(...) on each option.\n */\nexport function makeCamelCaseArray(objArr: object[], keys?: string[]) {\n\tif (!objArr) return undefined;\n\treturn objArr.map(obj => makeCamelCase(obj, keys));\n}\n\n/**\n * Converts blob to array buffer\n */\nexport function blobToArrayBuffer(blob: Blob): Promise<Uint8Array> {\n\treturn new Promise((res, rej) => {\n\t\tconst reader = new FileReader();\n\t\treader.onload = _event => {\n\t\t\tres(reader.result as Uint8Array);\n\t\t};\n\t\treader.onerror = err => {\n\t\t\trej(err);\n\t\t};\n\t\ttry {\n\t\t\treader.readAsArrayBuffer(blob);\n\t\t} catch (err) {\n\t\t\trej(err); // in case user gives invalid type\n\t\t}\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}