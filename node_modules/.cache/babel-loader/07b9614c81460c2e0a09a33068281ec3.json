{"ast":null,"code":"import { __awaiter, __generator, __rest } from \"tslib\";\nexport var loggerMiddleware = function loggerMiddleware() {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;\n              return [4\n              /*yield*/\n              , next(args)];\n\n            case 1:\n              response = _b.sent();\n\n              if (!logger) {\n                return [2\n                /*return*/\n                , response];\n              }\n\n              if (typeof logger.info === \"function\") {\n                _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest(_a, [\"$metadata\"]);\n                logger.info({\n                  clientName: clientName,\n                  commandName: commandName,\n                  input: inputFilterSensitiveLog(args.input),\n                  output: outputFilterSensitiveLog(outputWithoutMetadata),\n                  metadata: $metadata\n                });\n              }\n\n              return [2\n              /*return*/\n              , response];\n          }\n        });\n      });\n    };\n  };\n};\nexport var loggerMiddlewareOptions = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"initialize\",\n  override: true\n}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport var getLoggerPlugin = function getLoggerPlugin(options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,WAApB,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,OAAO,IAAIC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAY;EAAE,OAAO,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;IAAE,OAAO,UAAUC,IAAV,EAAgB;MAAE,OAAON,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;QACxJ,IAAIO,UAAJ,EAAgBC,WAAhB,EAA6BC,uBAA7B,EAAsDC,MAAtD,EAA8DC,wBAA9D,EAAwFC,QAAxF,EAAkGC,EAAlG,EAAsGC,SAAtG,EAAiHC,qBAAjH;;QACA,OAAOd,WAAW,CAAC,IAAD,EAAO,UAAUe,EAAV,EAAc;UACnC,QAAQA,EAAE,CAACC,KAAX;YACI,KAAK,CAAL;cACIV,UAAU,GAAGF,OAAO,CAACE,UAArB,EAAiCC,WAAW,GAAGH,OAAO,CAACG,WAAvD,EAAoEC,uBAAuB,GAAGJ,OAAO,CAACI,uBAAtG,EAA+HC,MAAM,GAAGL,OAAO,CAACK,MAAhJ,EAAwJC,wBAAwB,GAAGN,OAAO,CAACM,wBAA3L;cACA,OAAO,CAAC;cAAE;cAAH,EAAcP,IAAI,CAACE,IAAD,CAAlB,CAAP;;YACJ,KAAK,CAAL;cACIM,QAAQ,GAAGI,EAAE,CAACE,IAAH,EAAX;;cACA,IAAI,CAACR,MAAL,EAAa;gBACT,OAAO,CAAC;gBAAE;gBAAH,EAAeE,QAAf,CAAP;cACH;;cACD,IAAI,OAAOF,MAAM,CAACS,IAAd,KAAuB,UAA3B,EAAuC;gBACnCN,EAAE,GAAGD,QAAQ,CAACQ,MAAd,EAAsBN,SAAS,GAAGD,EAAE,CAACC,SAArC,EAAgDC,qBAAqB,GAAGb,MAAM,CAACW,EAAD,EAAK,CAAC,WAAD,CAAL,CAA9E;gBACAH,MAAM,CAACS,IAAP,CAAY;kBACRZ,UAAU,EAAEA,UADJ;kBAERC,WAAW,EAAEA,WAFL;kBAGRa,KAAK,EAAEZ,uBAAuB,CAACH,IAAI,CAACe,KAAN,CAHtB;kBAIRD,MAAM,EAAET,wBAAwB,CAACI,qBAAD,CAJxB;kBAKRO,QAAQ,EAAER;gBALF,CAAZ;cAOH;;cACD,OAAO,CAAC;cAAE;cAAH,EAAeF,QAAf,CAAP;UAnBR;QAqBH,CAtBiB,CAAlB;MAuBH,CAzBsH,CAAhB;IAyBlG,CAzByE;EAyBtE,CAzBoC;AAyBjC,CAzBJ;AA0BP,OAAO,IAAIW,uBAAuB,GAAG;EACjCC,IAAI,EAAE,kBAD2B;EAEjCC,IAAI,EAAE,CAAC,QAAD,CAF2B;EAGjCC,IAAI,EAAE,YAH2B;EAIjCC,QAAQ,EAAE;AAJuB,CAA9B,C,CAMP;;AACA,OAAO,IAAIC,eAAe,GAAG,SAAlBA,eAAkB,CAAUC,OAAV,EAAmB;EAAE,OAAQ;IACtDC,YAAY,EAAE,sBAAUC,WAAV,EAAuB;MACjCA,WAAW,CAACC,GAAZ,CAAgB7B,gBAAgB,EAAhC,EAAoCoB,uBAApC;IACH;EAHqD,CAAR;AAI7C,CAJE","names":["loggerMiddleware","next","context","args","clientName","commandName","inputFilterSensitiveLog","logger","outputFilterSensitiveLog","response","_b","info","_a","output","$metadata","outputWithoutMetadata","input","metadata","loggerMiddlewareOptions","name","tags","step","override","getLoggerPlugin","options","applyToStack","clientStack","add"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/middleware-logger/src/loggerMiddleware.ts"],"sourcesContent":["import { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport {\n  AbsoluteLocation,\n  HandlerExecutionContext,\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nexport const loggerMiddleware = () => <Output extends MetadataBearer = MetadataBearer>(\n  next: InitializeHandler<any, Output>,\n  context: HandlerExecutionContext\n): InitializeHandler<any, Output> => async (\n  args: InitializeHandlerArguments<any>\n): Promise<InitializeHandlerOutput<Output>> => {\n  const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;\n\n  const response = await next(args);\n\n  if (!logger) {\n    return response;\n  }\n\n  if (typeof logger.info === \"function\") {\n    const { $metadata, ...outputWithoutMetadata } = response.output;\n    logger.info({\n      clientName,\n      commandName,\n      input: inputFilterSensitiveLog(args.input),\n      output: outputFilterSensitiveLog(outputWithoutMetadata),\n      metadata: $metadata,\n    });\n  }\n\n  return response;\n};\n\nexport const loggerMiddlewareOptions: InitializeHandlerOptions & AbsoluteLocation = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"initialize\",\n  override: true,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const getLoggerPlugin = (options: any): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}