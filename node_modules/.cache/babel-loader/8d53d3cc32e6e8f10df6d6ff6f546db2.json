{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nexport var memoize = function (provider, isExpired, requiresRefresh) {\n  var result;\n  var hasResult;\n\n  if (isExpired === undefined) {\n    // This is a static memoization; no need to incorporate refreshing\n    return function () {\n      if (!hasResult) {\n        result = provider();\n        hasResult = true;\n      }\n\n      return result;\n    };\n  }\n\n  var isConstant = false;\n  return function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var resolved;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!hasResult) {\n              result = provider();\n              hasResult = true;\n            }\n\n            if (isConstant) {\n              return [2\n              /*return*/\n              , result];\n            }\n\n            return [4\n            /*yield*/\n            , result];\n\n          case 1:\n            resolved = _a.sent();\n\n            if (requiresRefresh && !requiresRefresh(resolved)) {\n              isConstant = true;\n              return [2\n              /*return*/\n              , resolved];\n            }\n\n            if (isExpired(resolved)) {\n              return [2\n              /*return*/\n              , result = provider()];\n            }\n\n            return [2\n            /*return*/\n            , resolved];\n        }\n      });\n    });\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,WAApB,QAAuC,OAAvC;AACA,OAAO,IAAIC,OAAO,GAAG,UAAUC,QAAV,EAAoBC,SAApB,EAA+BC,eAA/B,EAAgD;EACjE,IAAIC,MAAJ;EACA,IAAIC,SAAJ;;EACA,IAAIH,SAAS,KAAKI,SAAlB,EAA6B;IACzB;IACA,OAAO,YAAY;MACf,IAAI,CAACD,SAAL,EAAgB;QACZD,MAAM,GAAGH,QAAQ,EAAjB;QACAI,SAAS,GAAG,IAAZ;MACH;;MACD,OAAOD,MAAP;IACH,CAND;EAOH;;EACD,IAAIG,UAAU,GAAG,KAAjB;EACA,OAAO,YAAY;IAAE,OAAOT,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;MACtE,IAAIU,QAAJ;MACA,OAAOT,WAAW,CAAC,IAAD,EAAO,UAAUU,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACC,KAAX;UACI,KAAK,CAAL;YACI,IAAI,CAACL,SAAL,EAAgB;cACZD,MAAM,GAAGH,QAAQ,EAAjB;cACAI,SAAS,GAAG,IAAZ;YACH;;YACD,IAAIE,UAAJ,EAAgB;cACZ,OAAO,CAAC;cAAE;cAAH,EAAeH,MAAf,CAAP;YACH;;YACD,OAAO,CAAC;YAAE;YAAH,EAAcA,MAAd,CAAP;;UACJ,KAAK,CAAL;YACII,QAAQ,GAAGC,EAAE,CAACE,IAAH,EAAX;;YACA,IAAIR,eAAe,IAAI,CAACA,eAAe,CAACK,QAAD,CAAvC,EAAmD;cAC/CD,UAAU,GAAG,IAAb;cACA,OAAO,CAAC;cAAE;cAAH,EAAeC,QAAf,CAAP;YACH;;YACD,IAAIN,SAAS,CAACM,QAAD,CAAb,EAAyB;cACrB,OAAO,CAAC;cAAE;cAAH,EAAgBJ,MAAM,GAAGH,QAAQ,EAAjC,CAAP;YACH;;YACD,OAAO,CAAC;YAAE;YAAH,EAAeO,QAAf,CAAP;QAnBR;MAqBH,CAtBiB,CAAlB;IAuBH,CAzBoC,CAAhB;EAyBhB,CAzBL;AA0BH,CAxCM","names":["memoize","provider","isExpired","requiresRefresh","result","hasResult","undefined","isConstant","resolved","_a"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/property-provider/src/memoize.ts"],"sourcesContent":["import { Provider } from \"@aws-sdk/types\";\n\ninterface MemoizeOverload {\n  /**\n   *\n   * Decorates a provider function with either static memoization.\n   *\n   * To create a statically memoized provider, supply a provider as the only\n   * argument to this function. The provider will be invoked once, and all\n   * invocations of the provider returned by `memoize` will return the same\n   * promise object.\n   *\n   * @param provider The provider whose result should be cached indefinitely.\n   */\n  <T>(provider: Provider<T>): Provider<T>;\n\n  /**\n   * Decorates a provider function with refreshing memoization.\n   *\n   * @param provider          The provider whose result should be cached.\n   * @param isExpired         A function that will evaluate the resolved value and\n   *                          determine if it is expired. For example, when\n   *                          memoizing AWS credential providers, this function\n   *                          should return `true` when the credential's\n   *                          expiration is in the past (or very near future) and\n   *                          `false` otherwise.\n   * @param requiresRefresh   A function that will evaluate the resolved value and\n   *                          determine if it represents static value or one that\n   *                          will eventually need to be refreshed. For example,\n   *                          AWS credentials that have no defined expiration will\n   *                          never need to be refreshed, so this function would\n   *                          return `true` if the credentials resolved by the\n   *                          underlying provider had an expiration and `false`\n   *                          otherwise.\n   */\n  <T>(\n    provider: Provider<T>,\n    isExpired: (resolved: T) => boolean,\n    requiresRefresh?: (resolved: T) => boolean\n  ): Provider<T>;\n}\n\nexport const memoize: MemoizeOverload = <T>(\n  provider: Provider<T>,\n  isExpired?: (resolved: T) => boolean,\n  requiresRefresh?: (resolved: T) => boolean\n): Provider<T> => {\n  let result: any;\n  let hasResult: boolean;\n  if (isExpired === undefined) {\n    // This is a static memoization; no need to incorporate refreshing\n    return () => {\n      if (!hasResult) {\n        result = provider();\n        hasResult = true;\n      }\n      return result;\n    };\n  }\n\n  let isConstant = false;\n\n  return async () => {\n    if (!hasResult) {\n      result = provider();\n      hasResult = true;\n    }\n    if (isConstant) {\n      return result;\n    }\n\n    const resolved = await result;\n    if (requiresRefresh && !requiresRefresh(resolved)) {\n      isConstant = true;\n      return resolved;\n    }\n    if (isExpired(resolved)) {\n      return (result = provider());\n    }\n    return resolved;\n  };\n};\n"]},"metadata":{},"sourceType":"module"}