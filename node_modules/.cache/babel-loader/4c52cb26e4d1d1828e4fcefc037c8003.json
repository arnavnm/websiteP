{"ast":null,"code":"/**\n * Make a copy of a transform\n * @param tr\n */\nexport function cloneTransform(tr) {\n  var newTransform = tr.clone(); // Work around mapbox bug - this value is not assigned in clone(), only in resize()\n\n  newTransform.pixelsToGLUnits = tr.pixelsToGLUnits;\n  return newTransform;\n}\n/**\n * Capture a transform's current state\n * @param transform\n * @returns descriptor of the view state\n */\n\nexport function transformToViewState(tr) {\n  return {\n    longitude: tr.center.lng,\n    latitude: tr.center.lat,\n    zoom: tr.zoom,\n    pitch: tr.pitch,\n    bearing: tr.bearing,\n    padding: tr.padding\n  };\n}\n/* eslint-disable complexity */\n\n/**\n * Mutate a transform to match the given view state\n * @param transform\n * @param viewState\n * @returns true if the transform has changed\n */\n\nexport function applyViewStateToTransform(tr, props) {\n  var v = props.viewState || props;\n  var changed = false;\n\n  if ('longitude' in v && 'latitude' in v) {\n    var center = tr.center; // @ts-ignore\n\n    tr.center = new center.constructor(v.longitude, v.latitude);\n    changed = changed || center !== tr.center;\n  }\n\n  if ('zoom' in v) {\n    var zoom = tr.zoom;\n    tr.zoom = v.zoom;\n    changed = changed || zoom !== tr.zoom;\n  }\n\n  if ('bearing' in v) {\n    var bearing = tr.bearing;\n    tr.bearing = v.bearing;\n    changed = changed || bearing !== tr.bearing;\n  }\n\n  if ('pitch' in v) {\n    var pitch = tr.pitch;\n    tr.pitch = v.pitch;\n    changed = changed || pitch !== tr.pitch;\n  }\n\n  if (v.padding && !tr.isPaddingEqual(v.padding)) {\n    changed = true;\n    tr.padding = v.padding;\n  }\n\n  return changed;\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,cAAT,CAAwBC,EAAxB,EAA4B;EAC/B,IAAMC,YAAY,GAAGD,EAAE,CAACE,KAAH,EAArB,CAD+B,CAE/B;;EACAD,YAAY,CAACE,eAAb,GAA+BH,EAAE,CAACG,eAAlC;EACA,OAAOF,YAAP;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,oBAAT,CAA8BJ,EAA9B,EAAkC;EACrC,OAAO;IACHK,SAAS,EAAEL,EAAE,CAACM,MAAH,CAAUC,GADlB;IAEHC,QAAQ,EAAER,EAAE,CAACM,MAAH,CAAUG,GAFjB;IAGHC,IAAI,EAAEV,EAAE,CAACU,IAHN;IAIHC,KAAK,EAAEX,EAAE,CAACW,KAJP;IAKHC,OAAO,EAAEZ,EAAE,CAACY,OALT;IAMHC,OAAO,EAAEb,EAAE,CAACa;EANT,CAAP;AAQH;AACD;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,CAAmCd,EAAnC,EAAuCe,KAAvC,EAA8C;EACjD,IAAMC,CAAC,GAAGD,KAAK,CAACE,SAAN,IAAmBF,KAA7B;EACA,IAAIG,OAAO,GAAG,KAAd;;EACA,IAAI,eAAeF,CAAf,IAAoB,cAAcA,CAAtC,EAAyC;IACrC,IAAMV,MAAM,GAAGN,EAAE,CAACM,MAAlB,CADqC,CAErC;;IACAN,EAAE,CAACM,MAAH,GAAY,IAAIA,MAAM,CAACa,WAAX,CAAuBH,CAAC,CAACX,SAAzB,EAAoCW,CAAC,CAACR,QAAtC,CAAZ;IACAU,OAAO,GAAGA,OAAO,IAAIZ,MAAM,KAAKN,EAAE,CAACM,MAAnC;EACH;;EACD,IAAI,UAAUU,CAAd,EAAiB;IACb,IAAMN,IAAI,GAAGV,EAAE,CAACU,IAAhB;IACAV,EAAE,CAACU,IAAH,GAAUM,CAAC,CAACN,IAAZ;IACAQ,OAAO,GAAGA,OAAO,IAAIR,IAAI,KAAKV,EAAE,CAACU,IAAjC;EACH;;EACD,IAAI,aAAaM,CAAjB,EAAoB;IAChB,IAAMJ,OAAO,GAAGZ,EAAE,CAACY,OAAnB;IACAZ,EAAE,CAACY,OAAH,GAAaI,CAAC,CAACJ,OAAf;IACAM,OAAO,GAAGA,OAAO,IAAIN,OAAO,KAAKZ,EAAE,CAACY,OAApC;EACH;;EACD,IAAI,WAAWI,CAAf,EAAkB;IACd,IAAML,KAAK,GAAGX,EAAE,CAACW,KAAjB;IACAX,EAAE,CAACW,KAAH,GAAWK,CAAC,CAACL,KAAb;IACAO,OAAO,GAAGA,OAAO,IAAIP,KAAK,KAAKX,EAAE,CAACW,KAAlC;EACH;;EACD,IAAIK,CAAC,CAACH,OAAF,IAAa,CAACb,EAAE,CAACoB,cAAH,CAAkBJ,CAAC,CAACH,OAApB,CAAlB,EAAgD;IAC5CK,OAAO,GAAG,IAAV;IACAlB,EAAE,CAACa,OAAH,GAAaG,CAAC,CAACH,OAAf;EACH;;EACD,OAAOK,OAAP;AACH","names":["cloneTransform","tr","newTransform","clone","pixelsToGLUnits","transformToViewState","longitude","center","lng","latitude","lat","zoom","pitch","bearing","padding","applyViewStateToTransform","props","v","viewState","changed","constructor","isPaddingEqual"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/react-map-gl/src/utils/transform.ts"],"sourcesContent":["import type {MapboxProps} from '../mapbox/mapbox';\nimport type {Transform, ViewState} from '../types';\n\n/**\n * Make a copy of a transform\n * @param tr\n */\nexport function cloneTransform(tr: Transform): Transform {\n  const newTransform = tr.clone();\n  // Work around mapbox bug - this value is not assigned in clone(), only in resize()\n  newTransform.pixelsToGLUnits = tr.pixelsToGLUnits;\n  return newTransform;\n}\n\n/**\n * Capture a transform's current state\n * @param transform\n * @returns descriptor of the view state\n */\nexport function transformToViewState(tr: Transform): ViewState {\n  return {\n    longitude: tr.center.lng,\n    latitude: tr.center.lat,\n    zoom: tr.zoom,\n    pitch: tr.pitch,\n    bearing: tr.bearing,\n    padding: tr.padding\n  };\n}\n\n/* eslint-disable complexity */\n/**\n * Mutate a transform to match the given view state\n * @param transform\n * @param viewState\n * @returns true if the transform has changed\n */\nexport function applyViewStateToTransform(tr: Transform, props: MapboxProps): boolean {\n  const v: Partial<ViewState> = props.viewState || props;\n  let changed = false;\n\n  if ('longitude' in v && 'latitude' in v) {\n    const center = tr.center;\n    // @ts-ignore\n    tr.center = new center.constructor(v.longitude, v.latitude);\n    changed = changed || center !== tr.center;\n  }\n  if ('zoom' in v) {\n    const zoom = tr.zoom;\n    tr.zoom = v.zoom;\n    changed = changed || zoom !== tr.zoom;\n  }\n  if ('bearing' in v) {\n    const bearing = tr.bearing;\n    tr.bearing = v.bearing;\n    changed = changed || bearing !== tr.bearing;\n  }\n  if ('pitch' in v) {\n    const pitch = tr.pitch;\n    tr.pitch = v.pitch;\n    changed = changed || pitch !== tr.pitch;\n  }\n  if (v.padding && !tr.isPaddingEqual(v.padding)) {\n    changed = true;\n    tr.padding = v.padding;\n  }\n  return changed;\n}\n"]},"metadata":{},"sourceType":"module"}