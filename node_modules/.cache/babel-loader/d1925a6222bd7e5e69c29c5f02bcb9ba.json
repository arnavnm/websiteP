{"ast":null,"code":"import { useCallbackRef as e } from \"@radix-ui/react-use-callback-ref\";\nimport * as t from \"react\";\nexport function useControllableState(_ref) {\n  let {\n    prop: o,\n    defaultProp: r,\n    onChange: n = () => {}\n  } = _ref;\n\n  const [a, u] = function (_ref2) {\n    let {\n      defaultProp: o,\n      onChange: r\n    } = _ref2;\n    const n = t.useState(o),\n          [a] = n,\n          u = t.useRef(a),\n          c = e(r);\n    return t.useEffect(() => {\n      u.current !== a && (c(a), u.current = a);\n    }, [a, u, c]), n;\n  }({\n    defaultProp: r,\n    onChange: n\n  }),\n        c = void 0 !== o,\n        f = c ? o : a,\n        l = e(n);\n\n  return [f, t.useCallback(e => {\n    if (c) {\n      const t = e,\n            r = \"function\" == typeof e ? t(o) : e;\n      r !== o && l(r);\n    } else u(e);\n  }, [c, o, u, l])];\n}","map":{"version":3,"mappings":"AAAA,SAAOA,cAAc,IAAIC,CAAzB,QAA+B,kCAA/B;AAAkE,OAAM,KAAIC,CAAV,MAAgB,OAAhB;AAAwB,OAAO,SAASC,oBAAT,OAAyE;EAAA,IAA3C;IAACC,IAAI,EAACC,CAAN;IAAQC,WAAW,EAACC,CAApB;IAAsBC,QAAQ,EAACC,CAAC,GAAE,MAAI,CAAE;EAAxC,CAA2C;;EAAC,MAAK,CAACC,CAAD,EAAGC,CAAH,IAAM,iBAAoC;IAAA,IAA3B;MAACL,WAAW,EAACD,CAAb;MAAeG,QAAQ,EAACD;IAAxB,CAA2B;IAAC,MAAME,CAAC,GAACP,CAAC,CAACU,QAAF,CAAWP,CAAX,CAAR;IAAA,MAAsB,CAACK,CAAD,IAAID,CAA1B;IAAA,MAA4BE,CAAC,GAACT,CAAC,CAACW,MAAF,CAASH,CAAT,CAA9B;IAAA,MAA0CI,CAAC,GAACb,CAAC,CAACM,CAAD,CAA7C;IAAiD,OAAOL,CAAC,CAACa,SAAF,CAAa,MAAI;MAACJ,CAAC,CAACK,OAAF,KAAYN,CAAZ,KAAgBI,CAAC,CAACJ,CAAD,CAAD,EAAKC,CAAC,CAACK,OAAF,GAAUN,CAA/B;IAAkC,CAApD,EAAsD,CAACA,CAAD,EAAGC,CAAH,EAAKG,CAAL,CAAtD,GAA+DL,CAAtE;EAAwE,CAA9J,CAA+J;IAACH,WAAW,EAACC,CAAb;IAAeC,QAAQ,EAACC;EAAxB,CAA/J,CAAX;EAAA,MAAsMK,CAAC,GAAC,KAAK,CAAL,KAAST,CAAjN;EAAA,MAAmNY,CAAC,GAACH,CAAC,GAACT,CAAD,GAAGK,CAAzN;EAAA,MAA2NQ,CAAC,GAACjB,CAAC,CAACQ,CAAD,CAA9N;;EAAkO,OAAM,CAACQ,CAAD,EAAGf,CAAC,CAACiB,WAAF,CAAelB,CAAC,IAAE;IAAC,IAAGa,CAAH,EAAK;MAAC,MAAMZ,CAAC,GAACD,CAAR;MAAA,MAAUM,CAAC,GAAC,cAAY,OAAON,CAAnB,GAAqBC,CAAC,CAACG,CAAD,CAAtB,GAA0BJ,CAAtC;MAAwCM,CAAC,KAAGF,CAAJ,IAAOa,CAAC,CAACX,CAAD,CAAR;IAAY,CAA1D,MAA+DI,CAAC,CAACV,CAAD,CAAD;EAAK,CAAvF,EAAyF,CAACa,CAAD,EAAGT,CAAH,EAAKM,CAAL,EAAOO,CAAP,CAAzF,CAAH,CAAN;AAA8G","names":["useControllableState","prop","defaultProp","onChange","uncontrolledProp","setUncontrolledProp","uncontrolledState","React","useState","value","prevValueRef","useRef","handleChange","useCallbackRef","useEffect","current","useUncontrolledState","isControlled","undefined","useCallback","nextValue","setter"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@radix-ui/react-use-controllable-state/dist/packages/react/use-controllable-state/src/useControllableState.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\n    (nextValue) => {\n      if (isControlled) {\n        const setter = nextValue as SetStateFn<T>;\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n        if (value !== prop) handleChange(value as T);\n      } else {\n        setUncontrolledProp(nextValue);\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange]\n  );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n"]},"metadata":{},"sourceType":"module"}