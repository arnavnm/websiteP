{"ast":null,"code":"import _slicedToArray from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as e from \"react\";\nexport function useSize(r) {\n  var _e$useState = e.useState(void 0),\n      _e$useState2 = _slicedToArray(_e$useState, 2),\n      i = _e$useState2[0],\n      t = _e$useState2[1];\n\n  return e.useEffect(function () {\n    if (r) {\n      var _e = new ResizeObserver(function (e) {\n        if (!Array.isArray(e)) return;\n        if (!e.length) return;\n        var i = e[0];\n        var o, n;\n\n        if (\"borderBoxSize\" in i) {\n          var _e2 = i.borderBoxSize,\n              _r = Array.isArray(_e2) ? _e2[0] : _e2;\n\n          o = _r.inlineSize, n = _r.blockSize;\n        } else {\n          var _e3 = r.getBoundingClientRect();\n\n          o = _e3.width, n = _e3.height;\n        }\n\n        t({\n          width: o,\n          height: n\n        });\n      });\n\n      return _e.observe(r, {\n        box: \"border-box\"\n      }), function () {\n        return _e.unobserve(r);\n      };\n    }\n\n    t(void 0);\n  }, [r]), i;\n}","map":{"version":3,"mappings":";AAAA,OAAM,KAAIA,CAAV,MAAgB,OAAhB;AAAwB,OAAO,SAASC,OAAT,CAAiBC,CAAjB,EAAmB;EAAC,kBAAWF,CAAC,CAACG,QAAF,CAAW,KAAK,CAAhB,CAAX;EAAA;EAAA,IAAMC,CAAN;EAAA,IAAQC,CAAR;;EAA8B,OAAOL,CAAC,CAACM,SAAF,CAAa,YAAI;IAAC,IAAGJ,CAAH,EAAK;MAAC,IAAMF,EAAC,GAAC,IAAIO,cAAJ,CAAoB,UAAAP,CAAC,EAAE;QAAC,IAAG,CAACQ,KAAK,CAACC,OAAN,CAAcT,CAAd,CAAJ,EAAqB;QAAO,IAAG,CAACA,CAAC,CAACU,MAAN,EAAa;QAAO,IAAMN,CAAC,GAACJ,CAAC,CAAC,CAAD,CAAT;QAAa,IAAIW,CAAJ,EAAMC,CAAN;;QAAQ,IAAG,mBAAkBR,CAArB,EAAuB;UAAC,IAAMJ,GAAC,GAACI,CAAC,CAACS,aAAV;UAAA,IAAwBX,EAAC,GAACM,KAAK,CAACC,OAAN,CAAcT,GAAd,IAAiBA,GAAC,CAAC,CAAD,CAAlB,GAAsBA,GAAhD;;UAAkDW,CAAC,GAACT,EAAC,CAACY,UAAJ,EAAeF,CAAC,GAACV,EAAC,CAACa,SAAnB;QAA6B,CAAvG,MAA2G;UAAC,IAAMf,GAAC,GAACE,CAAC,CAACc,qBAAF,EAAR;;UAAkCL,CAAC,GAACX,GAAC,CAACiB,KAAJ,EAAUL,CAAC,GAACZ,GAAC,CAACkB,MAAd;QAAqB;;QAAAb,CAAC,CAAC;UAACY,KAAK,EAACN,CAAP;UAASO,MAAM,EAACN;QAAhB,CAAD,CAAD;MAAsB,CAAtR,CAAR;;MAAiS,OAAOZ,EAAC,CAACmB,OAAF,CAAUjB,CAAV,EAAY;QAACkB,GAAG,EAAC;MAAL,CAAZ,GAAgC;QAAA,OAAIpB,EAAC,CAACqB,SAAF,CAAYnB,CAAZ,CAAJ;MAAA,CAAvC;IAA0D;;IAAAG,CAAC,CAAC,KAAK,CAAN,CAAD;EAAU,CAA7X,EAA+X,CAACH,CAAD,CAA/X,GAAoYE,CAA3Y;AAA6Y","names":["useSize","element","React","useState","undefined","size","setSize","useEffect","resizeObserver","ResizeObserver","entries","Array","isArray","length","entry","width","height","borderSizeEntry","borderBoxSize","borderSize","inlineSize","blockSize","rect","getBoundingClientRect","observe","box","unobserve"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@radix-ui/react-use-size/dist/packages/react/use-size/src/useSize.tsx"],"sourcesContent":["/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\n\nfunction useSize(element: HTMLElement | SVGElement | null) {\n  const [size, setSize] = React.useState<{ width: number; height: number } | undefined>(undefined);\n\n  React.useEffect(() => {\n    if (element) {\n      const resizeObserver = new ResizeObserver((entries) => {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n\n        // Since we only observe the one element, we don't need to loop over the\n        // array\n        if (!entries.length) {\n          return;\n        }\n\n        const entry = entries[0];\n        let width: number;\n        let height: number;\n\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize'];\n          // iron out differences between browsers\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate a rect ourselves to get the correct border box.\n          const rect = element.getBoundingClientRect();\n          width = rect.width;\n          height = rect.height;\n        }\n\n        setSize({ width, height });\n      });\n\n      resizeObserver.observe(element, { box: 'border-box' });\n\n      return () => resizeObserver.unobserve(element);\n    } else {\n      // We only want to reset to `undefined` when the element becomes `null`,\n      // not if it changes to another element.\n      setSize(undefined);\n    }\n  }, [element]);\n\n  return size;\n}\n\nexport { useSize };\n"]},"metadata":{},"sourceType":"module"}