{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { formatUrl } from \"@aws-sdk/util-format-url\";\nimport { S3RequestPresigner } from \"./presigner\";\nexport var getSignedUrl = function getSignedUrl(client, command, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    var s3Presigner, presignInterceptMiddleware, middlewareName, presigned, output;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          s3Presigner = new S3RequestPresigner(__assign({}, client.config));\n\n          presignInterceptMiddleware = function presignInterceptMiddleware(next, context) {\n            return function (args) {\n              return __awaiter(void 0, void 0, void 0, function () {\n                var request, presigned;\n\n                var _a, _b;\n\n                return __generator(this, function (_c) {\n                  switch (_c.label) {\n                    case 0:\n                      request = args.request;\n\n                      if (!HttpRequest.isInstance(request)) {\n                        throw new Error(\"Request to be presigned is not an valid HTTP request.\");\n                      } // Retry information headers are not meaningful in presigned URLs\n\n\n                      delete request.headers[\"amz-sdk-invocation-id\"];\n                      delete request.headers[\"amz-sdk-request\"];\n                      return [4\n                      /*yield*/\n                      , s3Presigner.presign(request, __assign(__assign({}, options), {\n                        signingRegion: (_a = options.signingRegion) !== null && _a !== void 0 ? _a : context[\"signing_region\"],\n                        signingService: (_b = options.signingService) !== null && _b !== void 0 ? _b : context[\"signing_service\"]\n                      }))];\n\n                    case 1:\n                      presigned = _c.sent();\n                      return [2\n                      /*return*/\n                      , {\n                        // Intercept the middleware stack by returning fake response\n                        response: {},\n                        output: {\n                          $metadata: {\n                            httpStatusCode: 200\n                          },\n                          presigned: presigned\n                        }\n                      }];\n                  }\n                });\n              });\n            };\n          };\n\n          middlewareName = \"presignInterceptMiddleware\";\n          client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {\n            name: middlewareName,\n            relation: \"before\",\n            toMiddleware: \"awsAuthMiddleware\",\n            override: true\n          });\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1,, 3, 4]);\n\n          return [4\n          /*yield*/\n          , client.send(command)];\n\n        case 2:\n          output = _a.sent(); //@ts-ignore the output is faked, so it's not actually OutputType\n\n          presigned = output.presigned;\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          client.middlewareStack.remove(middlewareName);\n          return [7\n          /*endfinally*/\n          ];\n\n        case 4:\n          return [2\n          /*return*/\n          , formatUrl(presigned)];\n      }\n    });\n  });\n};","map":{"version":3,"mappings":"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","names":["HttpRequest","formatUrl","S3RequestPresigner","getSignedUrl","client","command","options","s3Presigner","__assign","config","presignInterceptMiddleware","next","context","args","request","isInstance","Error","headers","presign","signingRegion","_a","signingService","_b","presigned","_c","response","output","$metadata","httpStatusCode","middlewareName","middlewareStack","addRelativeTo","name","relation","toMiddleware","override","send","remove"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/s3-request-presigner/src/getSignedUrl.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { Client, Command } from \"@aws-sdk/smithy-client\";\nimport { BuildMiddleware, MetadataBearer, RequestPresigningArguments } from \"@aws-sdk/types\";\nimport { formatUrl } from \"@aws-sdk/util-format-url\";\n\nimport { S3RequestPresigner } from \"./presigner\";\n\nexport const getSignedUrl = async <\n  InputTypesUnion extends object,\n  InputType extends InputTypesUnion,\n  OutputType extends MetadataBearer = MetadataBearer\n>(\n  client: Client<any, InputTypesUnion, MetadataBearer, any>,\n  command: Command<InputType, OutputType, any, InputTypesUnion, MetadataBearer>,\n  options: RequestPresigningArguments = {}\n): Promise<string> => {\n  const s3Presigner = new S3RequestPresigner({ ...client.config });\n  const presignInterceptMiddleware: BuildMiddleware<InputTypesUnion, MetadataBearer> = (next, context) => async (\n    args\n  ) => {\n    const { request } = args;\n    if (!HttpRequest.isInstance(request)) {\n      throw new Error(\"Request to be presigned is not an valid HTTP request.\");\n    }\n    // Retry information headers are not meaningful in presigned URLs\n    delete request.headers[\"amz-sdk-invocation-id\"];\n    delete request.headers[\"amz-sdk-request\"];\n\n    const presigned = await s3Presigner.presign(request, {\n      ...options,\n      signingRegion: options.signingRegion ?? context[\"signing_region\"],\n      signingService: options.signingService ?? context[\"signing_service\"],\n    });\n    return {\n      // Intercept the middleware stack by returning fake response\n      response: {},\n      output: {\n        $metadata: { httpStatusCode: 200 },\n        presigned,\n      },\n    } as any;\n  };\n  const middlewareName = \"presignInterceptMiddleware\";\n  client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {\n    name: middlewareName,\n    relation: \"before\",\n    toMiddleware: \"awsAuthMiddleware\",\n    override: true,\n  });\n\n  let presigned: HttpRequest;\n  try {\n    const output = await client.send(command);\n    //@ts-ignore the output is faked, so it's not actually OutputType\n    presigned = output.presigned;\n  } finally {\n    client.middlewareStack.remove(middlewareName);\n  }\n\n  return formatUrl(presigned);\n};\n"]},"metadata":{},"sourceType":"module"}