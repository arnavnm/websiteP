{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport Storage from '@aws-amplify/storage';\nimport { AbstractIdentifyPredictionsProvider } from '../types/Providers';\nimport { RekognitionClient, SearchFacesByImageCommand, DetectTextCommand, DetectLabelsCommand, DetectFacesCommand, DetectModerationLabelsCommand, RecognizeCelebritiesCommand } from '@aws-sdk/client-rekognition';\nimport { isStorageSource, isFileSource, isBytesSource, isIdentifyCelebrities, isIdentifyFromCollection } from '../types';\nimport { TextractClient, DetectDocumentTextCommand, AnalyzeDocumentCommand } from '@aws-sdk/client-textract';\nimport { makeCamelCase, makeCamelCaseArray, blobToArrayBuffer } from './Utils';\nimport { categorizeRekognitionBlocks, categorizeTextractBlocks } from './IdentifyTextUtils';\n\nvar AmazonAIIdentifyPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AmazonAIIdentifyPredictionsProvider, _super);\n\n  function AmazonAIIdentifyPredictionsProvider() {\n    return _super.call(this) || this;\n  }\n\n  AmazonAIIdentifyPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIIdentifyPredictionsProvider';\n  };\n  /**\n   * Verify user input source and converts it into source object readable by Rekognition and Textract.\n   * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n   * @param {IdentifySource} source - User input source that directs to the object user wants\n   * to identify (storage, file, or bytes).\n   * @return {Promise<Image>} - Promise resolving to the converted source object.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.configureSource = function (source) {\n    return new Promise(function (res, rej) {\n      if (isStorageSource(source)) {\n        var storageConfig = {\n          level: source.level,\n          identityId: source.identityId\n        };\n        Storage.get(source.key, storageConfig).then(function (url) {\n          var parser = /https:\\/\\/([a-zA-Z0-9%-_.]+)\\.s3\\.[A-Za-z0-9%-._~]+\\/([a-zA-Z0-9%-._~/]+)\\?/;\n          var parsedURL = url.match(parser);\n          if (parsedURL.length < 3) rej('Invalid S3 key was given.');\n          res({\n            S3Object: {\n              Bucket: parsedURL[1],\n              Name: decodeURIComponent(parsedURL[2])\n            }\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isFileSource(source)) {\n        blobToArrayBuffer(source.file).then(function (buffer) {\n          res({\n            Bytes: new Uint8Array(buffer)\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isBytesSource(source)) {\n        var bytes = source.bytes;\n\n        if (bytes instanceof Blob) {\n          blobToArrayBuffer(bytes).then(function (buffer) {\n            res({\n              Bytes: new Uint8Array(buffer)\n            });\n          }).catch(function (err) {\n            return rej(err);\n          });\n        }\n\n        if (bytes instanceof ArrayBuffer || bytes instanceof Buffer) {\n          res({\n            Bytes: new Uint8Array(bytes)\n          });\n        } // everything else can be directly passed to Rekognition / Textract.\n\n\n        res({\n          Bytes: bytes\n        });\n      } else {\n        rej('Input source is not configured correctly.');\n      }\n    });\n  };\n  /**\n   * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n   * image and converts it into machine-readable text.\n   * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n   * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, region, _d, _e, configFormat, inputDocument, err_1, format, featureTypes, textractParam, rekognitionParam, detectTextCommand, rekognitionData, rekognitionResponse, detectDocumentTextCommand, Blocks, err_2, param, analyzeDocumentCommand, Blocks, err_3;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _f.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n            _a = this._config.identifyText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).format, configFormat = _e === void 0 ? 'PLAIN' : _e;\n            this.rekognitionClient = new RekognitionClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            this.textractClient = new TextractClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            _f.label = 2;\n\n          case 2:\n            _f.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this.configureSource(input.text.source)];\n\n          case 3:\n            inputDocument = _f.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            err_1 = _f.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 5:\n            format = input.text.format || configFormat;\n            featureTypes = [];\n            if (format === 'FORM' || format === 'ALL') featureTypes.push('FORMS');\n            if (format === 'TABLE' || format === 'ALL') featureTypes.push('TABLES');\n            if (!(featureTypes.length === 0)) return [3\n            /*break*/\n            , 11];\n            textractParam = {\n              Document: inputDocument\n            };\n            rekognitionParam = {\n              Image: inputDocument\n            };\n            _f.label = 6;\n\n          case 6:\n            _f.trys.push([6, 9,, 10]);\n\n            detectTextCommand = new DetectTextCommand(rekognitionParam);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectTextCommand)];\n\n          case 7:\n            rekognitionData = _f.sent();\n            rekognitionResponse = categorizeRekognitionBlocks(rekognitionData.TextDetections);\n\n            if (rekognitionResponse.text.words.length < 50) {\n              // did not hit the word limit, return the data\n              return [2\n              /*return*/\n              , rekognitionResponse];\n            }\n\n            detectDocumentTextCommand = new DetectDocumentTextCommand(textractParam);\n            return [4\n            /*yield*/\n            , this.textractClient.send(detectDocumentTextCommand)];\n\n          case 8:\n            Blocks = _f.sent().Blocks;\n\n            if (rekognitionData.TextDetections.length > Blocks.length) {\n              return [2\n              /*return*/\n              , rekognitionResponse];\n            }\n\n            return [2\n            /*return*/\n            , categorizeTextractBlocks(Blocks)];\n\n          case 9:\n            err_2 = _f.sent();\n            Promise.reject(err_2);\n            return [3\n            /*break*/\n            , 10];\n\n          case 10:\n            return [3\n            /*break*/\n            , 15];\n\n          case 11:\n            param = {\n              Document: inputDocument,\n              FeatureTypes: featureTypes\n            };\n            _f.label = 12;\n\n          case 12:\n            _f.trys.push([12, 14,, 15]);\n\n            analyzeDocumentCommand = new AnalyzeDocumentCommand(param);\n            return [4\n            /*yield*/\n            , this.textractClient.send(analyzeDocumentCommand)];\n\n          case 13:\n            Blocks = _f.sent().Blocks;\n            return [2\n            /*return*/\n            , categorizeTextractBlocks(Blocks)];\n\n          case 14:\n            err_3 = _f.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_3)];\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Identify instances of real world entities from an image and if it contains unsafe content.\n   * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, region, _d, _e, type, inputImage_1, param, servicePromises, entityType, err_4;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            _f.trys.push([0, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _f.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n            _a = this._config.identifyLabels, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, type = _e === void 0 ? 'LABELS' : _e;\n            this.rekognitionClient = new RekognitionClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            return [4\n            /*yield*/\n            , this.configureSource(input.labels.source).then(function (data) {\n              inputImage_1 = data;\n            }).catch(function (err) {\n              return Promise.reject(err);\n            })];\n\n          case 2:\n            _f.sent();\n\n            param = {\n              Image: inputImage_1\n            };\n            servicePromises = [];\n            entityType = input.labels.type || type;\n\n            if (entityType === 'LABELS' || entityType === 'ALL') {\n              servicePromises.push(this.detectLabels(param));\n            }\n\n            if (entityType === 'UNSAFE' || entityType === 'ALL') {\n              servicePromises.push(this.detectModerationLabels(param));\n            }\n\n            return [2\n            /*return*/\n            , Promise.all(servicePromises).then(function (data) {\n              var identifyResult = {}; // concatenate resolved promises to a single object\n\n              data.forEach(function (val) {\n                identifyResult = __assign(__assign({}, identifyResult), val);\n              });\n              return identifyResult;\n            }).catch(function (err) {\n              return Promise.reject(err);\n            })];\n\n          case 3:\n            err_4 = _f.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_4)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectLabels and organizes the returned data.\n   * @param {DetectLabelsInput} param - parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectLabels response.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.detectLabels = function (param) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectLabelsCommand, data, detectLabelData, err_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            detectLabelsCommand = new DetectLabelsCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectLabelsCommand)];\n\n          case 1:\n            data = _a.sent();\n            if (!data.Labels) return [2\n            /*return*/\n            , {\n              labels: null\n            }]; // no image was detected\n\n            detectLabelData = data.Labels.map(function (val) {\n              var boxes = val.Instances ? val.Instances.map(function (val) {\n                return makeCamelCase(val.BoundingBox);\n              }) : undefined;\n              return {\n                name: val.Name,\n                boundingBoxes: boxes,\n                metadata: {\n                  confidence: val.Confidence,\n                  parents: makeCamelCaseArray(val.Parents)\n                }\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              labels: detectLabelData\n            }];\n\n          case 2:\n            err_5 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_5)];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectModerationLabels and organizes the returned data.\n   * @param {Rekognition.DetectLabelsRequest} param - Parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectModerationLabels response.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.detectModerationLabels = function (param) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectModerationLabelsCommand, data, err_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            detectModerationLabelsCommand = new DetectModerationLabelsCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectModerationLabelsCommand)];\n\n          case 1:\n            data = _a.sent();\n\n            if (data.ModerationLabels.length !== 0) {\n              return [2\n              /*return*/\n              , {\n                unsafe: 'YES'\n              }];\n            } else {\n              return [2\n              /*return*/\n              , {\n                unsafe: 'NO'\n              }];\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            err_6 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_6)];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Identify faces within an image that is provided as input, and match faces from a collection\n   * or identify celebrities.\n   * @param {IdentifyEntityInput} input - object containing the source image and face match options.\n   * @return {Promise<IdentifyEntityOutput>} Promise resolving to identify results.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, region, _d, celebrityDetectionEnabled, _e, _f, _g, collectionIdConfig, _h, maxFacesConfig, inputImage, param, recognizeCelebritiesCommand, data, faces, err_7, _j, _k, collectionId, _l, maxFaces, updatedParam, searchFacesByImageCommand, data, faces, err_8, detectFacesCommand, data, faces, err_9;\n\n      var _this = this;\n\n      return __generator(this, function (_m) {\n        switch (_m.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _m.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n            _a = this._config.identifyEntities, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.celebrityDetectionEnabled, celebrityDetectionEnabled = _d === void 0 ? false : _d, _e = _b.defaults, _f = _e === void 0 ? {} : _e, _g = _f.collectionId, collectionIdConfig = _g === void 0 ? '' : _g, _h = _f.maxEntities, maxFacesConfig = _h === void 0 ? 50 : _h; // default arguments\n\n            this.rekognitionClient = new RekognitionClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            return [4\n            /*yield*/\n            , this.configureSource(input.entities.source).then(function (data) {\n              return inputImage = data;\n            }).catch(function (err) {\n              return Promise.reject(err);\n            })];\n\n          case 2:\n            _m.sent();\n\n            param = {\n              Attributes: ['ALL'],\n              Image: inputImage\n            };\n            if (!(isIdentifyCelebrities(input.entities) && input.entities.celebrityDetection)) return [3\n            /*break*/\n            , 7];\n\n            if (!celebrityDetectionEnabled) {\n              return [2\n              /*return*/\n              , Promise.reject('Error: You have to enable celebrity detection first')];\n            }\n\n            _m.label = 3;\n\n          case 3:\n            _m.trys.push([3, 5,, 6]);\n\n            recognizeCelebritiesCommand = new RecognizeCelebritiesCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(recognizeCelebritiesCommand)];\n\n          case 4:\n            data = _m.sent();\n            faces = data.CelebrityFaces.map(function (celebrity) {\n              return {\n                boundingBox: makeCamelCase(celebrity.Face.BoundingBox),\n                landmarks: makeCamelCaseArray(celebrity.Face.Landmarks),\n                metadata: __assign(__assign({}, makeCamelCase(celebrity, ['Id', 'Name', 'Urls'])), {\n                  pose: makeCamelCase(celebrity.Face.Pose)\n                })\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              entities: faces\n            }];\n\n          case 5:\n            err_7 = _m.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_7)];\n\n          case 6:\n            return [3\n            /*break*/\n            , 15];\n\n          case 7:\n            if (!(isIdentifyFromCollection(input.entities) && input.entities.collection)) return [3\n            /*break*/\n            , 12];\n            _j = input.entities, _k = _j.collectionId, collectionId = _k === void 0 ? collectionIdConfig : _k, _l = _j.maxEntities, maxFaces = _l === void 0 ? maxFacesConfig : _l;\n            updatedParam = __assign(__assign({}, param), {\n              CollectionId: collectionId,\n              MaxFaces: maxFaces\n            });\n            _m.label = 8;\n\n          case 8:\n            _m.trys.push([8, 10,, 11]);\n\n            searchFacesByImageCommand = new SearchFacesByImageCommand(updatedParam);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(searchFacesByImageCommand)];\n\n          case 9:\n            data = _m.sent();\n            faces = data.FaceMatches.map(function (val) {\n              return {\n                boundingBox: makeCamelCase(val.Face.BoundingBox),\n                metadata: {\n                  externalImageId: _this.decodeExternalImageId(val.Face.ExternalImageId),\n                  similarity: val.Similarity\n                }\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              entities: faces\n            }];\n\n          case 10:\n            err_8 = _m.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_8)];\n\n          case 11:\n            return [3\n            /*break*/\n            , 15];\n\n          case 12:\n            _m.trys.push([12, 14,, 15]);\n\n            detectFacesCommand = new DetectFacesCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectFacesCommand)];\n\n          case 13:\n            data = _m.sent();\n            faces = data.FaceDetails.map(function (detail) {\n              // face attributes keys we want to extract from Rekognition's response\n              var attributeKeys = ['Smile', 'Eyeglasses', 'Sunglasses', 'Gender', 'Beard', 'Mustache', 'EyesOpen', 'MouthOpen'];\n              var faceAttributes = makeCamelCase(detail, attributeKeys);\n\n              if (detail.Emotions) {\n                faceAttributes['emotions'] = detail.Emotions.map(function (emotion) {\n                  return emotion.Type;\n                });\n              }\n\n              return {\n                boundingBox: makeCamelCase(detail.BoundingBox),\n                landmarks: makeCamelCaseArray(detail.Landmarks),\n                ageRange: makeCamelCase(detail.AgeRange),\n                attributes: faceAttributes,\n                metadata: {\n                  confidence: detail.Confidence,\n                  pose: makeCamelCase(detail.Pose)\n                }\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              entities: faces\n            }];\n\n          case 14:\n            err_9 = _m.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_9)];\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIIdentifyPredictionsProvider.prototype.decodeExternalImageId = function (externalImageId) {\n    return ('' + externalImageId).replace(/::/g, '/');\n  };\n\n  return AmazonAIIdentifyPredictionsProvider;\n}(AbstractIdentifyPredictionsProvider);\n\nexport { AmazonAIIdentifyPredictionsProvider };\n/**\n * @deprecated use named import\n */\n\nexport default AmazonAIIdentifyPredictionsProvider;","map":{"version":3,"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;EACrD,IAAIC,cAAa,GAAG,uBAAUC,CAAV,EAAaC,CAAb,EAAgB;IAChCF,cAAa,GAAGG,MAAM,CAACC,cAAP,IACX;MAAEC,SAAS,EAAE;IAAb,aAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;MAAED,CAAC,CAACI,SAAF,GAAcH,CAAd;IAAkB,CAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;MAAE,KAAK,IAAIK,CAAT,IAAcL,CAAd;QAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;MAA1C;IAAwD,CAF9E;;IAGA,OAAOP,cAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;EACH,CALD;;EAMA,OAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;IACnBF,cAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;IACA,SAASO,EAAT,GAAc;MAAE,KAAKC,WAAL,GAAmBT,CAAnB;IAAuB;;IACvCA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;EACH,CAJD;AAKH,CAZ2C,EAA5C;;AAaA,IAAII,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;EAClDA,QAAQ,GAAGV,MAAM,CAACW,MAAP,IAAiB,UAASC,CAAT,EAAY;IACpC,KAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;MACA,KAAK,IAAIV,CAAT,IAAcS,CAAd;QAAiB,IAAIb,MAAM,CAACQ,SAAP,CAAiBH,cAAjB,CAAgCa,IAAhC,CAAqCL,CAArC,EAAwCT,CAAxC,CAAJ,EACbQ,CAAC,CAACR,CAAD,CAAD,GAAOS,CAAC,CAACT,CAAD,CAAR;MADJ;IAEH;;IACD,OAAOQ,CAAP;EACH,CAPD;;EAQA,OAAOF,QAAQ,CAACS,KAAT,CAAe,IAAf,EAAqBH,SAArB,CAAP;AACH,CAVD;;AAWA,IAAII,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;EACrF,SAASC,KAAT,CAAeC,KAAf,EAAsB;IAAE,OAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;MAAEA,OAAO,CAACD,KAAD,CAAP;IAAiB,CAA5C,CAApC;EAAoF;;EAC5G,OAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;IACvD,SAASC,SAAT,CAAmBJ,KAAnB,EAA0B;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;MAA8B,CAApC,CAAqC,OAAOO,CAAP,EAAU;QAAEJ,MAAM,CAACI,CAAD,CAAN;MAAY;IAAE;;IAC3F,SAASC,QAAT,CAAkBR,KAAlB,EAAyB;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;MAAkC,CAAxC,CAAyC,OAAOO,CAAP,EAAU;QAAEJ,MAAM,CAACI,CAAD,CAAN;MAAY;IAAE;;IAC9F,SAASF,IAAT,CAAcI,MAAd,EAAsB;MAAEA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;IAAsF;;IAC9GH,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACL,KAAV,CAAgBE,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;EACH,CALM,CAAP;AAMH,CARD;;AASA,IAAIM,WAAW,GAAI,QAAQ,KAAKA,WAAd,IAA8B,UAAUjB,OAAV,EAAmBkB,IAAnB,EAAyB;EACrE,IAAIC,CAAC,GAAG;IAAEC,KAAK,EAAE,CAAT;IAAYC,IAAI,EAAE,gBAAW;MAAE,IAAI9B,CAAC,CAAC,CAAD,CAAD,GAAO,CAAX,EAAc,MAAMA,CAAC,CAAC,CAAD,CAAP;MAAY,OAAOA,CAAC,CAAC,CAAD,CAAR;IAAc,CAAvE;IAAyE+B,IAAI,EAAE,EAA/E;IAAmFC,GAAG,EAAE;EAAxF,CAAR;EAAA,IAAsGC,CAAtG;EAAA,IAAyGC,CAAzG;EAAA,IAA4GlC,CAA5G;EAAA,IAA+GmC,CAA/G;EACA,OAAOA,CAAC,GAAG;IAAEf,IAAI,EAAEgB,IAAI,CAAC,CAAD,CAAZ;IAAiB,SAASA,IAAI,CAAC,CAAD,CAA9B;IAAmC,UAAUA,IAAI,CAAC,CAAD;EAAjD,CAAJ,EAA4D,OAAOC,MAAP,KAAkB,UAAlB,KAAiCF,CAAC,CAACE,MAAM,CAACC,QAAR,CAAD,GAAqB,YAAW;IAAE,OAAO,IAAP;EAAc,CAAjF,CAA5D,EAAgJH,CAAvJ;;EACA,SAASC,IAAT,CAAcjC,CAAd,EAAiB;IAAE,OAAO,UAAUoC,CAAV,EAAa;MAAE,OAAOpB,IAAI,CAAC,CAAChB,CAAD,EAAIoC,CAAJ,CAAD,CAAX;IAAsB,CAA5C;EAA+C;;EAClE,SAASpB,IAAT,CAAcqB,EAAd,EAAkB;IACd,IAAIP,CAAJ,EAAO,MAAM,IAAIQ,SAAJ,CAAc,iCAAd,CAAN;;IACP,OAAOb,CAAP;MAAU,IAAI;QACV,IAAIK,CAAC,GAAG,CAAJ,EAAOC,CAAC,KAAKlC,CAAC,GAAGwC,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR,GAAYN,CAAC,CAAC,QAAD,CAAb,GAA0BM,EAAE,CAAC,CAAD,CAAF,GAAQN,CAAC,CAAC,OAAD,CAAD,KAAe,CAAClC,CAAC,GAAGkC,CAAC,CAAC,QAAD,CAAN,KAAqBlC,CAAC,CAACM,IAAF,CAAO4B,CAAP,CAArB,EAAgC,CAA/C,CAAR,GAA4DA,CAAC,CAACd,IAAjG,CAAD,IAA2G,CAAC,CAACpB,CAAC,GAAGA,CAAC,CAACM,IAAF,CAAO4B,CAAP,EAAUM,EAAE,CAAC,CAAD,CAAZ,CAAL,EAAuBhB,IAA9I,EAAoJ,OAAOxB,CAAP;QACpJ,IAAIkC,CAAC,GAAG,CAAJ,EAAOlC,CAAX,EAAcwC,EAAE,GAAG,CAACA,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAT,EAAYxC,CAAC,CAACc,KAAd,CAAL;;QACd,QAAQ0B,EAAE,CAAC,CAAD,CAAV;UACI,KAAK,CAAL;UAAQ,KAAK,CAAL;YAAQxC,CAAC,GAAGwC,EAAJ;YAAQ;;UACxB,KAAK,CAAL;YAAQZ,CAAC,CAACC,KAAF;YAAW,OAAO;cAAEf,KAAK,EAAE0B,EAAE,CAAC,CAAD,CAAX;cAAgBhB,IAAI,EAAE;YAAtB,CAAP;;UACnB,KAAK,CAAL;YAAQI,CAAC,CAACC,KAAF;YAAWK,CAAC,GAAGM,EAAE,CAAC,CAAD,CAAN;YAAWA,EAAE,GAAG,CAAC,CAAD,CAAL;YAAU;;UACxC,KAAK,CAAL;YAAQA,EAAE,GAAGZ,CAAC,CAACI,GAAF,CAAMU,GAAN,EAAL;;YAAkBd,CAAC,CAACG,IAAF,CAAOW,GAAP;;YAAc;;UACxC;YACI,IAAI,EAAE1C,CAAC,GAAG4B,CAAC,CAACG,IAAN,EAAY/B,CAAC,GAAGA,CAAC,CAACK,MAAF,GAAW,CAAX,IAAgBL,CAAC,CAACA,CAAC,CAACK,MAAF,GAAW,CAAZ,CAAnC,MAAuDmC,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,IAAeA,EAAE,CAAC,CAAD,CAAF,KAAU,CAAhF,CAAJ,EAAwF;cAAEZ,CAAC,GAAG,CAAJ;cAAO;YAAW;;YAC5G,IAAIY,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,KAAgB,CAACxC,CAAD,IAAOwC,EAAE,CAAC,CAAD,CAAF,GAAQxC,CAAC,CAAC,CAAD,CAAT,IAAgBwC,EAAE,CAAC,CAAD,CAAF,GAAQxC,CAAC,CAAC,CAAD,CAAhD,CAAJ,EAA2D;cAAE4B,CAAC,CAACC,KAAF,GAAUW,EAAE,CAAC,CAAD,CAAZ;cAAiB;YAAQ;;YACtF,IAAIA,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,IAAeZ,CAAC,CAACC,KAAF,GAAU7B,CAAC,CAAC,CAAD,CAA9B,EAAmC;cAAE4B,CAAC,CAACC,KAAF,GAAU7B,CAAC,CAAC,CAAD,CAAX;cAAgBA,CAAC,GAAGwC,EAAJ;cAAQ;YAAQ;;YACrE,IAAIxC,CAAC,IAAI4B,CAAC,CAACC,KAAF,GAAU7B,CAAC,CAAC,CAAD,CAApB,EAAyB;cAAE4B,CAAC,CAACC,KAAF,GAAU7B,CAAC,CAAC,CAAD,CAAX;;cAAgB4B,CAAC,CAACI,GAAF,CAAMW,IAAN,CAAWH,EAAX;;cAAgB;YAAQ;;YACnE,IAAIxC,CAAC,CAAC,CAAD,CAAL,EAAU4B,CAAC,CAACI,GAAF,CAAMU,GAAN;;YACVd,CAAC,CAACG,IAAF,CAAOW,GAAP;;YAAc;QAXtB;;QAaAF,EAAE,GAAGb,IAAI,CAACrB,IAAL,CAAUG,OAAV,EAAmBmB,CAAnB,CAAL;MACH,CAjBS,CAiBR,OAAOP,CAAP,EAAU;QAAEmB,EAAE,GAAG,CAAC,CAAD,EAAInB,CAAJ,CAAL;QAAaa,CAAC,GAAG,CAAJ;MAAQ,CAjBzB,SAiBkC;QAAED,CAAC,GAAGjC,CAAC,GAAG,CAAR;MAAY;IAjB1D;;IAkBA,IAAIwC,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAZ,EAAe,MAAMA,EAAE,CAAC,CAAD,CAAR;IAAa,OAAO;MAAE1B,KAAK,EAAE0B,EAAE,CAAC,CAAD,CAAF,GAAQA,EAAE,CAAC,CAAD,CAAV,GAAgB,KAAK,CAA9B;MAAiChB,IAAI,EAAE;IAAvC,CAAP;EAC/B;AACJ,CA1BD;;AA2BA,SAASoB,WAAT,EAAsBC,mBAAtB,QAAkD,mBAAlD;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,mCAAT,QAAoD,oBAApD;AACA,SAASC,iBAAT,EAA4BC,yBAA5B,EAAuDC,iBAAvD,EAA0EC,mBAA1E,EAA+FC,kBAA/F,EAAmHC,6BAAnH,EAAkJC,2BAAlJ,QAAsL,6BAAtL;AACA,SAASC,eAAT,EAA0BC,YAA1B,EAAwCC,aAAxC,EAAuDC,qBAAvD,EAA8EC,wBAA9E,QAA+G,UAA/G;AACA,SAASC,cAAT,EAAyBC,yBAAzB,EAAoDC,sBAApD,QAAmF,0BAAnF;AACA,SAASC,aAAT,EAAwBC,kBAAxB,EAA4CC,iBAA5C,QAAqE,SAArE;AACA,SAASC,2BAAT,EAAsCC,wBAAtC,QAAuE,qBAAvE;;AACA,IAAIC,mCAAmC;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACvErF,SAAS,CAACoF,mCAAD,EAAsCC,MAAtC,CAAT;;EACA,SAASD,mCAAT,GAA+C;IAC3C,OAAOC,MAAM,CAAC/D,IAAP,CAAY,IAAZ,KAAqB,IAA5B;EACH;;EACD8D,mCAAmC,CAACxE,SAApC,CAA8C0E,eAA9C,GAAgE,YAAY;IACxE,OAAO,qCAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIF,mCAAmC,CAACxE,SAApC,CAA8C2E,eAA9C,GAAgE,UAAUC,MAAV,EAAkB;IAC9E,OAAO,IAAIxD,OAAJ,CAAY,UAAUyD,GAAV,EAAeC,GAAf,EAAoB;MACnC,IAAInB,eAAe,CAACiB,MAAD,CAAnB,EAA6B;QACzB,IAAIG,aAAa,GAAG;UAChBC,KAAK,EAAEJ,MAAM,CAACI,KADE;UAEhBC,UAAU,EAAEL,MAAM,CAACK;QAFH,CAApB;QAIA/B,OAAO,CAACgC,GAAR,CAAYN,MAAM,CAACO,GAAnB,EAAwBJ,aAAxB,EACKlD,IADL,CACU,UAAUuD,GAAV,EAAe;UACrB,IAAIC,MAAM,GAAG,6EAAb;UACA,IAAIC,SAAS,GAAGF,GAAG,CAACG,KAAJ,CAAUF,MAAV,CAAhB;UACA,IAAIC,SAAS,CAAC7E,MAAV,GAAmB,CAAvB,EACIqE,GAAG,CAAC,2BAAD,CAAH;UACJD,GAAG,CAAC;YACAW,QAAQ,EAAE;cACNC,MAAM,EAAEH,SAAS,CAAC,CAAD,CADX;cAENI,IAAI,EAAEC,kBAAkB,CAACL,SAAS,CAAC,CAAD,CAAV;YAFlB;UADV,CAAD,CAAH;QAMH,CAZD,EAaKM,KAbL,CAaW,UAAUC,GAAV,EAAe;UAAE,OAAOf,GAAG,CAACe,GAAD,CAAV;QAAkB,CAb9C;MAcH,CAnBD,MAoBK,IAAIjC,YAAY,CAACgB,MAAD,CAAhB,EAA0B;QAC3BP,iBAAiB,CAACO,MAAM,CAACkB,IAAR,CAAjB,CACKjE,IADL,CACU,UAAUkE,MAAV,EAAkB;UACxBlB,GAAG,CAAC;YAAEmB,KAAK,EAAE,IAAIC,UAAJ,CAAeF,MAAf;UAAT,CAAD,CAAH;QACH,CAHD,EAIKH,KAJL,CAIW,UAAUC,GAAV,EAAe;UAAE,OAAOf,GAAG,CAACe,GAAD,CAAV;QAAkB,CAJ9C;MAKH,CANI,MAOA,IAAIhC,aAAa,CAACe,MAAD,CAAjB,EAA2B;QAC5B,IAAIsB,KAAK,GAAGtB,MAAM,CAACsB,KAAnB;;QACA,IAAIA,KAAK,YAAYC,IAArB,EAA2B;UACvB9B,iBAAiB,CAAC6B,KAAD,CAAjB,CACKrE,IADL,CACU,UAAUkE,MAAV,EAAkB;YACxBlB,GAAG,CAAC;cAAEmB,KAAK,EAAE,IAAIC,UAAJ,CAAeF,MAAf;YAAT,CAAD,CAAH;UACH,CAHD,EAIKH,KAJL,CAIW,UAAUC,GAAV,EAAe;YAAE,OAAOf,GAAG,CAACe,GAAD,CAAV;UAAkB,CAJ9C;QAKH;;QACD,IAAIK,KAAK,YAAYE,WAAjB,IAAgCF,KAAK,YAAYG,MAArD,EAA6D;UACzDxB,GAAG,CAAC;YAAEmB,KAAK,EAAE,IAAIC,UAAJ,CAAeC,KAAf;UAAT,CAAD,CAAH;QACH,CAX2B,CAY5B;;;QACArB,GAAG,CAAC;UAAEmB,KAAK,EAAEE;QAAT,CAAD,CAAH;MACH,CAdI,MAeA;QACDpB,GAAG,CAAC,2CAAD,CAAH;MACH;IACJ,CA9CM,CAAP;EA+CH,CAhDD;EAiDA;AACJ;AACA;AACA;AACA;AACA;;;EACIN,mCAAmC,CAACxE,SAApC,CAA8CsG,YAA9C,GAA6D,UAAUC,KAAV,EAAiB;IAC1E,OAAO3F,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI4F,WAAJ,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,MAA7B,EAAqCC,EAArC,EAAyCC,EAAzC,EAA6CC,YAA7C,EAA2DC,aAA3D,EAA0EC,KAA1E,EAAiFC,MAAjF,EAAyFC,YAAzF,EAAuGC,aAAvG,EAAsHC,gBAAtH,EAAwIC,iBAAxI,EAA2JC,eAA3J,EAA4KC,mBAA5K,EAAiMC,yBAAjM,EAA4NC,MAA5N,EAAoOC,KAApO,EAA2OC,KAA3O,EAAkPC,sBAAlP,EAA0QH,MAA1Q,EAAkRI,KAAlR;;MACA,OAAOhG,WAAW,CAAC,IAAD,EAAO,UAAUiG,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAC9F,KAAX;UACI,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,EAAce,WAAW,CAACkC,GAAZ,EAAd,CAAP;;UACR,KAAK,CAAL;YACIsB,WAAW,GAAGuB,EAAE,CAAC7F,IAAH,EAAd;YACA,IAAI,CAACsE,WAAL,EACI,OAAO,CAAC;YAAE;YAAH,EAAepF,OAAO,CAACC,MAAR,CAAe,gBAAf,CAAf,CAAP;YACJoF,EAAE,GAAG,KAAKuB,OAAL,CAAa1B,YAAlB,EAAgCI,EAAE,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA1D,EAA8DE,EAAE,GAAGD,EAAE,CAACE,MAAtE,EAA8EA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA5G,EAAgHE,EAAE,GAAGH,EAAE,CAACuB,QAAxH,EAAkInB,EAAE,GAAG,CAACD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAAtB,EAA0BK,MAAjK,EAAyKH,YAAY,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,OAAhB,GAA0BA,EAAlN;YACA,KAAKoB,iBAAL,GAAyB,IAAI9E,iBAAJ,CAAsB;cAC3CwD,MAAM,EAAEA,MADmC;cAE3CJ,WAAW,EAAEA,WAF8B;cAG3C2B,eAAe,EAAElF,mBAAmB;YAHO,CAAtB,CAAzB;YAKA,KAAKmF,cAAL,GAAsB,IAAIpE,cAAJ,CAAmB;cACrC4C,MAAM,EAAEA,MAD6B;cAErCJ,WAAW,EAAEA,WAFwB;cAGrC2B,eAAe,EAAElF,mBAAmB;YAHC,CAAnB,CAAtB;YAKA8E,EAAE,CAAC9F,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACI8F,EAAE,CAAC5F,IAAH,CAAQY,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK4B,eAAL,CAAqB4B,KAAK,CAAC8B,IAAN,CAAWzD,MAAhC,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIoC,aAAa,GAAGe,EAAE,CAAC7F,IAAH,EAAhB;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;UACJ,KAAK,CAAL;YACI+E,KAAK,GAAGc,EAAE,CAAC7F,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAed,OAAO,CAACC,MAAR,CAAe4F,KAAf,CAAf,CAAP;;UACJ,KAAK,CAAL;YACIC,MAAM,GAAGX,KAAK,CAAC8B,IAAN,CAAWnB,MAAX,IAAqBH,YAA9B;YACAI,YAAY,GAAG,EAAf;YACA,IAAID,MAAM,KAAK,MAAX,IAAqBA,MAAM,KAAK,KAApC,EACIC,YAAY,CAACpE,IAAb,CAAkB,OAAlB;YACJ,IAAImE,MAAM,KAAK,OAAX,IAAsBA,MAAM,KAAK,KAArC,EACIC,YAAY,CAACpE,IAAb,CAAkB,QAAlB;YACJ,IAAI,EAAEoE,YAAY,CAAC1G,MAAb,KAAwB,CAA1B,CAAJ,EAAkC,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;YAClC2G,aAAa,GAAG;cACZkB,QAAQ,EAAEtB;YADE,CAAhB;YAGAK,gBAAgB,GAAG;cACfkB,KAAK,EAAEvB;YADQ,CAAnB;YAGAe,EAAE,CAAC9F,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACI8F,EAAE,CAAC5F,IAAH,CAAQY,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,EAAT,CAAb;;YACAuE,iBAAiB,GAAG,IAAIhE,iBAAJ,CAAsB+D,gBAAtB,CAApB;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKa,iBAAL,CAAuBM,IAAvB,CAA4BlB,iBAA5B,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIC,eAAe,GAAGQ,EAAE,CAAC7F,IAAH,EAAlB;YACAsF,mBAAmB,GAAGlD,2BAA2B,CAACiD,eAAe,CAACkB,cAAjB,CAAjD;;YACA,IAAIjB,mBAAmB,CAACa,IAApB,CAAyBK,KAAzB,CAA+BjI,MAA/B,GAAwC,EAA5C,EAAgD;cAC5C;cACA,OAAO,CAAC;cAAE;cAAH,EAAe+G,mBAAf,CAAP;YACH;;YACDC,yBAAyB,GAAG,IAAIxD,yBAAJ,CAA8BmD,aAA9B,CAA5B;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKgB,cAAL,CAAoBI,IAApB,CAAyBf,yBAAzB,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIC,MAAM,GAAIK,EAAE,CAAC7F,IAAH,EAAD,CAAYwF,MAArB;;YACA,IAAIH,eAAe,CAACkB,cAAhB,CAA+BhI,MAA/B,GAAwCiH,MAAM,CAACjH,MAAnD,EAA2D;cACvD,OAAO,CAAC;cAAE;cAAH,EAAe+G,mBAAf,CAAP;YACH;;YACD,OAAO,CAAC;YAAE;YAAH,EAAejD,wBAAwB,CAACmD,MAAD,CAAvC,CAAP;;UACJ,KAAK,CAAL;YACIC,KAAK,GAAGI,EAAE,CAAC7F,IAAH,EAAR;YACAd,OAAO,CAACC,MAAR,CAAesG,KAAf;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;;UACJ,KAAK,EAAL;YAAS,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;;UACT,KAAK,EAAL;YACIC,KAAK,GAAG;cACJU,QAAQ,EAAEtB,aADN;cAEJ2B,YAAY,EAAExB;YAFV,CAAR;YAIAY,EAAE,CAAC9F,KAAH,GAAW,EAAX;;UACJ,KAAK,EAAL;YACI8F,EAAE,CAAC5F,IAAH,CAAQY,IAAR,CAAa,CAAC,EAAD,EAAK,EAAL,GAAW,EAAX,CAAb;;YACA8E,sBAAsB,GAAG,IAAI3D,sBAAJ,CAA2B0D,KAA3B,CAAzB;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKQ,cAAL,CAAoBI,IAApB,CAAyBX,sBAAzB,CAAd,CAAP;;UACJ,KAAK,EAAL;YACIH,MAAM,GAAIK,EAAE,CAAC7F,IAAH,EAAD,CAAYwF,MAArB;YACA,OAAO,CAAC;YAAE;YAAH,EAAenD,wBAAwB,CAACmD,MAAD,CAAvC,CAAP;;UACJ,KAAK,EAAL;YACII,KAAK,GAAGC,EAAE,CAAC7F,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAed,OAAO,CAACC,MAAR,CAAeyG,KAAf,CAAf,CAAP;;UACJ,KAAK,EAAL;YAAS,OAAO,CAAC;YAAE;YAAH,CAAP;QAlFb;MAoFH,CArFiB,CAAlB;IAsFH,CAxFe,CAAhB;EAyFH,CA1FD;EA2FA;AACJ;AACA;AACA;AACA;;;EACItD,mCAAmC,CAACxE,SAApC,CAA8C4I,cAA9C,GAA+D,UAAUrC,KAAV,EAAiB;IAC5E,OAAO3F,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI4F,WAAJ,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,MAA7B,EAAqCC,EAArC,EAAyCC,EAAzC,EAA6C+B,IAA7C,EAAmDC,YAAnD,EAAiElB,KAAjE,EAAwEmB,eAAxE,EAAyFC,UAAzF,EAAqGC,KAArG;;MACA,OAAOnH,WAAW,CAAC,IAAD,EAAO,UAAUiG,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAC9F,KAAX;UACI,KAAK,CAAL;YACI8F,EAAE,CAAC5F,IAAH,CAAQY,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAcC,WAAW,CAACkC,GAAZ,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIsB,WAAW,GAAGuB,EAAE,CAAC7F,IAAH,EAAd;YACA,IAAI,CAACsE,WAAL,EACI,OAAO,CAAC;YAAE;YAAH,EAAepF,OAAO,CAACC,MAAR,CAAe,gBAAf,CAAf,CAAP;YACJoF,EAAE,GAAG,KAAKuB,OAAL,CAAaY,cAAlB,EAAkClC,EAAE,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA5D,EAAgEE,EAAE,GAAGD,EAAE,CAACE,MAAxE,EAAgFA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA9G,EAAkHE,EAAE,GAAGH,EAAE,CAACuB,QAA1H,EAAoInB,EAAE,GAAG,CAACD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAAtB,EAA0BgC,IAAnK,EAAyKA,IAAI,GAAG/B,EAAE,KAAK,KAAK,CAAZ,GAAgB,QAAhB,GAA2BA,EAA3M;YACA,KAAKoB,iBAAL,GAAyB,IAAI9E,iBAAJ,CAAsB;cAC3CwD,MAAM,EAAEA,MADmC;cAE3CJ,WAAW,EAAEA,WAF8B;cAG3C2B,eAAe,EAAElF,mBAAmB;YAHO,CAAtB,CAAzB;YAKA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK0B,eAAL,CAAqB4B,KAAK,CAAC2C,MAAN,CAAatE,MAAlC,EACZ/C,IADY,CACP,UAAUsH,IAAV,EAAgB;cACtBL,YAAY,GAAGK,IAAf;YACH,CAHgB,EAIZvD,KAJY,CAIN,UAAUC,GAAV,EAAe;cACtB,OAAOzE,OAAO,CAACC,MAAR,CAAewE,GAAf,CAAP;YACH,CANgB,CAAd,CAAP;;UAOJ,KAAK,CAAL;YACIkC,EAAE,CAAC7F,IAAH;;YACA0F,KAAK,GAAG;cAAEW,KAAK,EAAEO;YAAT,CAAR;YACAC,eAAe,GAAG,EAAlB;YACAC,UAAU,GAAGzC,KAAK,CAAC2C,MAAN,CAAaL,IAAb,IAAqBA,IAAlC;;YACA,IAAIG,UAAU,KAAK,QAAf,IAA2BA,UAAU,KAAK,KAA9C,EAAqD;cACjDD,eAAe,CAAChG,IAAhB,CAAqB,KAAKqG,YAAL,CAAkBxB,KAAlB,CAArB;YACH;;YACD,IAAIoB,UAAU,KAAK,QAAf,IAA2BA,UAAU,KAAK,KAA9C,EAAqD;cACjDD,eAAe,CAAChG,IAAhB,CAAqB,KAAKsG,sBAAL,CAA4BzB,KAA5B,CAArB;YACH;;YACD,OAAO,CAAC;YAAE;YAAH,EAAexG,OAAO,CAACkI,GAAR,CAAYP,eAAZ,EACblH,IADa,CACR,UAAUsH,IAAV,EAAgB;cACtB,IAAII,cAAc,GAAG,EAArB,CADsB,CAEtB;;cACAJ,IAAI,CAACK,OAAL,CAAa,UAAUC,GAAV,EAAe;gBACxBF,cAAc,GAAGrJ,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKqJ,cAAL,CAAT,EAA+BE,GAA/B,CAAzB;cACH,CAFD;cAGA,OAAOF,cAAP;YACH,CARiB,EASb3D,KATa,CASP,UAAUC,GAAV,EAAe;cAAE,OAAOzE,OAAO,CAACC,MAAR,CAAewE,GAAf,CAAP;YAA6B,CATvC,CAAf,CAAP;;UAUJ,KAAK,CAAL;YACIoD,KAAK,GAAGlB,EAAE,CAAC7F,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAed,OAAO,CAACC,MAAR,CAAe4H,KAAf,CAAf,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QA7CZ;MA+CH,CAhDiB,CAAlB;IAiDH,CAnDe,CAAhB;EAoDH,CArDD;EAsDA;AACJ;AACA;AACA;AACA;;;EACIzE,mCAAmC,CAACxE,SAApC,CAA8CoJ,YAA9C,GAA6D,UAAUxB,KAAV,EAAiB;IAC1E,OAAOhH,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI8I,mBAAJ,EAAyBP,IAAzB,EAA+BQ,eAA/B,EAAgDC,KAAhD;MACA,OAAO9H,WAAW,CAAC,IAAD,EAAO,UAAU2E,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACxE,KAAX;UACI,KAAK,CAAL;YACIwE,EAAE,CAACtE,IAAH,CAAQY,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA2G,mBAAmB,GAAG,IAAInG,mBAAJ,CAAwBqE,KAAxB,CAAtB;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKM,iBAAL,CAAuBM,IAAvB,CAA4BkB,mBAA5B,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIP,IAAI,GAAG1C,EAAE,CAACvE,IAAH,EAAP;YACA,IAAI,CAACiH,IAAI,CAACU,MAAV,EACI,OAAO,CAAC;YAAE;YAAH,EAAe;cAAEX,MAAM,EAAE;YAAV,CAAf,CAAP,CAHR,CAGiD;;YAC7CS,eAAe,GAAGR,IAAI,CAACU,MAAL,CAAYC,GAAZ,CAAgB,UAAUL,GAAV,EAAe;cAC7C,IAAIM,KAAK,GAAGN,GAAG,CAACO,SAAJ,GACNP,GAAG,CAACO,SAAJ,CAAcF,GAAd,CAAkB,UAAUL,GAAV,EAAe;gBAAE,OAAOtF,aAAa,CAACsF,GAAG,CAACQ,WAAL,CAApB;cAAwC,CAA3E,CADM,GAENC,SAFN;cAGA,OAAO;gBACHC,IAAI,EAAEV,GAAG,CAAC/D,IADP;gBAEH0E,aAAa,EAAEL,KAFZ;gBAGHM,QAAQ,EAAE;kBACNC,UAAU,EAAEb,GAAG,CAACc,UADV;kBAENC,OAAO,EAAEpG,kBAAkB,CAACqF,GAAG,CAACgB,OAAL;gBAFrB;cAHP,CAAP;YAQH,CAZiB,CAAlB;YAaA,OAAO,CAAC;YAAE;YAAH,EAAe;cAAEvB,MAAM,EAAES;YAAV,CAAf,CAAP;;UACJ,KAAK,CAAL;YACIC,KAAK,GAAGnD,EAAE,CAACvE,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAed,OAAO,CAACC,MAAR,CAAeuI,KAAf,CAAf,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QA1BZ;MA4BH,CA7BiB,CAAlB;IA8BH,CAhCe,CAAhB;EAiCH,CAlCD;EAmCA;AACJ;AACA;AACA;AACA;;;EACIpF,mCAAmC,CAACxE,SAApC,CAA8CqJ,sBAA9C,GAAuE,UAAUzB,KAAV,EAAiB;IACpF,OAAOhH,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI8J,6BAAJ,EAAmCvB,IAAnC,EAAyCwB,KAAzC;MACA,OAAO7I,WAAW,CAAC,IAAD,EAAO,UAAU2E,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACxE,KAAX;UACI,KAAK,CAAL;YACIwE,EAAE,CAACtE,IAAH,CAAQY,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA2H,6BAA6B,GAAG,IAAIjH,6BAAJ,CAAkCmE,KAAlC,CAAhC;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKM,iBAAL,CAAuBM,IAAvB,CAA4BkC,6BAA5B,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIvB,IAAI,GAAG1C,EAAE,CAACvE,IAAH,EAAP;;YACA,IAAIiH,IAAI,CAACyB,gBAAL,CAAsBnK,MAAtB,KAAiC,CAArC,EAAwC;cACpC,OAAO,CAAC;cAAE;cAAH,EAAe;gBAAEoK,MAAM,EAAE;cAAV,CAAf,CAAP;YACH,CAFD,MAGK;cACD,OAAO,CAAC;cAAE;cAAH,EAAe;gBAAEA,MAAM,EAAE;cAAV,CAAf,CAAP;YACH;;YACD,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIF,KAAK,GAAGlE,EAAE,CAACvE,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAed,OAAO,CAACC,MAAR,CAAesJ,KAAf,CAAf,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QAjBZ;MAmBH,CApBiB,CAAlB;IAqBH,CAvBe,CAAhB;EAwBH,CAzBD;EA0BA;AACJ;AACA;AACA;AACA;AACA;;;EACInG,mCAAmC,CAACxE,SAApC,CAA8C8K,gBAA9C,GAAiE,UAAUvE,KAAV,EAAiB;IAC9E,OAAO3F,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI4F,WAAJ,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,MAA7B,EAAqCC,EAArC,EAAyCkE,yBAAzC,EAAoEjE,EAApE,EAAwEiB,EAAxE,EAA4EiD,EAA5E,EAAgFC,kBAAhF,EAAoGC,EAApG,EAAwGC,cAAxG,EAAwHC,UAAxH,EAAoIxD,KAApI,EAA2IyD,2BAA3I,EAAwKlC,IAAxK,EAA8KmC,KAA9K,EAAqLC,KAArL,EAA4LC,EAA5L,EAAgMC,EAAhM,EAAoMC,YAApM,EAAkNC,EAAlN,EAAsNC,QAAtN,EAAgOC,YAAhO,EAA8OC,yBAA9O,EAAyQ3C,IAAzQ,EAA+QmC,KAA/Q,EAAsRS,KAAtR,EAA6RC,kBAA7R,EAAiT7C,IAAjT,EAAuTmC,KAAvT,EAA8TW,KAA9T;;MACA,IAAIC,KAAK,GAAG,IAAZ;;MACA,OAAOpK,WAAW,CAAC,IAAD,EAAO,UAAUqK,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAClK,KAAX;UACI,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,EAAce,WAAW,CAACkC,GAAZ,EAAd,CAAP;;UACR,KAAK,CAAL;YACIsB,WAAW,GAAG2F,EAAE,CAACjK,IAAH,EAAd;YACA,IAAI,CAACsE,WAAL,EACI,OAAO,CAAC;YAAE;YAAH,EAAepF,OAAO,CAACC,MAAR,CAAe,gBAAf,CAAf,CAAP;YACJoF,EAAE,GAAG,KAAKuB,OAAL,CAAa8C,gBAAlB,EAAoCpE,EAAE,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA9D,EAAkEE,EAAE,GAAGD,EAAE,CAACE,MAA1E,EAAkFA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAAhH,EAAoHE,EAAE,GAAGH,EAAE,CAACqE,yBAA5H,EAAuJA,yBAAyB,GAAGlE,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAA3M,EAA+MC,EAAE,GAAGJ,EAAE,CAACuB,QAAvN,EAAiOF,EAAE,GAAGjB,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA3P,EAA+PkE,EAAE,GAAGjD,EAAE,CAAC2D,YAAvQ,EAAqRT,kBAAkB,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA/T,EAAmUE,EAAE,GAAGnD,EAAE,CAACqE,WAA3U,EAAwVjB,cAAc,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA9X,CAJJ,CAKI;;YACA,KAAKhD,iBAAL,GAAyB,IAAI9E,iBAAJ,CAAsB;cAC3CwD,MAAM,EAAEA,MADmC;cAE3CJ,WAAW,EAAEA,WAF8B;cAG3C2B,eAAe,EAAElF,mBAAmB;YAHO,CAAtB,CAAzB;YAKA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK0B,eAAL,CAAqB4B,KAAK,CAAC8F,QAAN,CAAezH,MAApC,EACZ/C,IADY,CACP,UAAUsH,IAAV,EAAgB;cAAE,OAAQiC,UAAU,GAAGjC,IAArB;YAA6B,CADxC,EAEZvD,KAFY,CAEN,UAAUC,GAAV,EAAe;cACtB,OAAOzE,OAAO,CAACC,MAAR,CAAewE,GAAf,CAAP;YACH,CAJgB,CAAd,CAAP;;UAKJ,KAAK,CAAL;YACIsG,EAAE,CAACjK,IAAH;;YACA0F,KAAK,GAAG;cAAE0E,UAAU,EAAE,CAAC,KAAD,CAAd;cAAuB/D,KAAK,EAAE6C;YAA9B,CAAR;YACA,IAAI,EAAEtH,qBAAqB,CAACyC,KAAK,CAAC8F,QAAP,CAArB,IACF9F,KAAK,CAAC8F,QAAN,CAAeE,kBADf,CAAJ,EACwC,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;YACxC,IAAI,CAACxB,yBAAL,EAAgC;cAC5B,OAAO,CAAC;cAAE;cAAH,EAAe3J,OAAO,CAACC,MAAR,CAAe,qDAAf,CAAf,CAAP;YACH;;YACD8K,EAAE,CAAClK,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACIkK,EAAE,CAAChK,IAAH,CAAQY,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACAsI,2BAA2B,GAAG,IAAI3H,2BAAJ,CAAgCkE,KAAhC,CAA9B;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKM,iBAAL,CAAuBM,IAAvB,CAA4B6C,2BAA5B,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIlC,IAAI,GAAGgD,EAAE,CAACjK,IAAH,EAAP;YACAoJ,KAAK,GAAGnC,IAAI,CAACqD,cAAL,CAAoB1C,GAApB,CAAwB,UAAU2C,SAAV,EAAqB;cACjD,OAAO;gBACHC,WAAW,EAAEvI,aAAa,CAACsI,SAAS,CAACE,IAAV,CAAe1C,WAAhB,CADvB;gBAEH2C,SAAS,EAAExI,kBAAkB,CAACqI,SAAS,CAACE,IAAV,CAAeE,SAAhB,CAF1B;gBAGHxC,QAAQ,EAAEnK,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKiE,aAAa,CAACsI,SAAD,EAAY,CAAC,IAAD,EAAO,MAAP,EAAe,MAAf,CAAZ,CAAlB,CAAT,EAAiE;kBAAEK,IAAI,EAAE3I,aAAa,CAACsI,SAAS,CAACE,IAAV,CAAeI,IAAhB;gBAArB,CAAjE;cAHf,CAAP;YAKH,CANO,CAAR;YAOA,OAAO,CAAC;YAAE;YAAH,EAAe;cAAEV,QAAQ,EAAEf;YAAZ,CAAf,CAAP;;UACJ,KAAK,CAAL;YACIC,KAAK,GAAGY,EAAE,CAACjK,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAed,OAAO,CAACC,MAAR,CAAekK,KAAf,CAAf,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;;UACR,KAAK,CAAL;YACI,IAAI,EAAExH,wBAAwB,CAACwC,KAAK,CAAC8F,QAAP,CAAxB,IACF9F,KAAK,CAAC8F,QAAN,CAAeW,UADf,CAAJ,EACgC,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;YAChCxB,EAAE,GAAGjF,KAAK,CAAC8F,QAAX,EAAqBZ,EAAE,GAAGD,EAAE,CAACE,YAA7B,EAA2CA,YAAY,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgBR,kBAAhB,GAAqCQ,EAA/F,EAAmGE,EAAE,GAAGH,EAAE,CAACY,WAA3G,EAAwHR,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgBR,cAAhB,GAAiCQ,EAApK;YACAE,YAAY,GAAG3L,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK0H,KAAL,CAAT,EAAsB;cAAEqF,YAAY,EAAEvB,YAAhB;cAA8BwB,QAAQ,EAAEtB;YAAxC,CAAtB,CAAvB;YACAO,EAAE,CAAClK,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACIkK,EAAE,CAAChK,IAAH,CAAQY,IAAR,CAAa,CAAC,CAAD,EAAI,EAAJ,GAAU,EAAV,CAAb;;YACA+I,yBAAyB,GAAG,IAAIzI,yBAAJ,CAA8BwI,YAA9B,CAA5B;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK3D,iBAAL,CAAuBM,IAAvB,CAA4BsD,yBAA5B,CAAd,CAAP;;UACJ,KAAK,CAAL;YACI3C,IAAI,GAAGgD,EAAE,CAACjK,IAAH,EAAP;YACAoJ,KAAK,GAAGnC,IAAI,CAACgE,WAAL,CAAiBrD,GAAjB,CAAqB,UAAUL,GAAV,EAAe;cACxC,OAAO;gBACHiD,WAAW,EAAEvI,aAAa,CAACsF,GAAG,CAACkD,IAAJ,CAAS1C,WAAV,CADvB;gBAEHI,QAAQ,EAAE;kBACN+C,eAAe,EAAElB,KAAK,CAACmB,qBAAN,CAA4B5D,GAAG,CAACkD,IAAJ,CAASW,eAArC,CADX;kBAENC,UAAU,EAAE9D,GAAG,CAAC+D;gBAFV;cAFP,CAAP;YAOH,CARO,CAAR;YASA,OAAO,CAAC;YAAE;YAAH,EAAe;cAAEnB,QAAQ,EAAEf;YAAZ,CAAf,CAAP;;UACJ,KAAK,EAAL;YACIS,KAAK,GAAGI,EAAE,CAACjK,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAed,OAAO,CAACC,MAAR,CAAe0K,KAAf,CAAf,CAAP;;UACJ,KAAK,EAAL;YAAS,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;;UACT,KAAK,EAAL;YACII,EAAE,CAAChK,IAAH,CAAQY,IAAR,CAAa,CAAC,EAAD,EAAK,EAAL,GAAW,EAAX,CAAb;;YACAiJ,kBAAkB,GAAG,IAAIxI,kBAAJ,CAAuBoE,KAAvB,CAArB;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKM,iBAAL,CAAuBM,IAAvB,CAA4BwD,kBAA5B,CAAd,CAAP;;UACJ,KAAK,EAAL;YACI7C,IAAI,GAAGgD,EAAE,CAACjK,IAAH,EAAP;YACAoJ,KAAK,GAAGnC,IAAI,CAACsE,WAAL,CAAiB3D,GAAjB,CAAqB,UAAU4D,MAAV,EAAkB;cAC3C;cACA,IAAIC,aAAa,GAAG,CAChB,OADgB,EAEhB,YAFgB,EAGhB,YAHgB,EAIhB,QAJgB,EAKhB,OALgB,EAMhB,UANgB,EAOhB,UAPgB,EAQhB,WARgB,CAApB;cAUA,IAAIC,cAAc,GAAGzJ,aAAa,CAACuJ,MAAD,EAASC,aAAT,CAAlC;;cACA,IAAID,MAAM,CAACG,QAAX,EAAqB;gBACjBD,cAAc,CAAC,UAAD,CAAd,GAA6BF,MAAM,CAACG,QAAP,CAAgB/D,GAAhB,CAAoB,UAAUgE,OAAV,EAAmB;kBAAE,OAAOA,OAAO,CAACC,IAAf;gBAAsB,CAA/D,CAA7B;cACH;;cACD,OAAO;gBACHrB,WAAW,EAAEvI,aAAa,CAACuJ,MAAM,CAACzD,WAAR,CADvB;gBAEH2C,SAAS,EAAExI,kBAAkB,CAACsJ,MAAM,CAACb,SAAR,CAF1B;gBAGHmB,QAAQ,EAAE7J,aAAa,CAACuJ,MAAM,CAACO,QAAR,CAHpB;gBAIHC,UAAU,EAAEN,cAJT;gBAKHvD,QAAQ,EAAE;kBACNC,UAAU,EAAEoD,MAAM,CAACnD,UADb;kBAENuC,IAAI,EAAE3I,aAAa,CAACuJ,MAAM,CAACX,IAAR;gBAFb;cALP,CAAP;YAUH,CA1BO,CAAR;YA2BA,OAAO,CAAC;YAAE;YAAH,EAAe;cAAEV,QAAQ,EAAEf;YAAZ,CAAf,CAAP;;UACJ,KAAK,EAAL;YACIW,KAAK,GAAGE,EAAE,CAACjK,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAed,OAAO,CAACC,MAAR,CAAe4K,KAAf,CAAf,CAAP;;UACJ,KAAK,EAAL;YAAS,OAAO,CAAC;YAAE;YAAH,CAAP;QA5Gb;MA8GH,CA/GiB,CAAlB;IAgHH,CAnHe,CAAhB;EAoHH,CArHD;;EAsHAzH,mCAAmC,CAACxE,SAApC,CAA8CqN,qBAA9C,GAAsE,UAAUD,eAAV,EAA2B;IAC7F,OAAO,CAAC,KAAKA,eAAN,EAAuBe,OAAvB,CAA+B,KAA/B,EAAsC,GAAtC,CAAP;EACH,CAFD;;EAGA,OAAO3J,mCAAP;AACH,CAnawD,CAmavDrB,mCAnauD,CAAzD;;AAoaA,SAASqB,mCAAT;AACA;AACA;AACA;;AACA,eAAeA,mCAAf","names":["Credentials","getAmplifyUserAgent","Storage","AbstractIdentifyPredictionsProvider","RekognitionClient","SearchFacesByImageCommand","DetectTextCommand","DetectLabelsCommand","DetectFacesCommand","DetectModerationLabelsCommand","RecognizeCelebritiesCommand","isStorageSource","isFileSource","isBytesSource","isIdentifyCelebrities","isIdentifyFromCollection","TextractClient","DetectDocumentTextCommand","AnalyzeDocumentCommand","makeCamelCase","makeCamelCaseArray","blobToArrayBuffer","categorizeRekognitionBlocks","categorizeTextractBlocks","__extends","_super","AmazonAIIdentifyPredictionsProvider","source","Promise","res","rej","storageConfig","level","identityId","get","key","then","url","parser","parsedURL","match","length","S3Object","Bucket","Name","decodeURIComponent","catch","err","file","Bytes","Uint8Array","buffer","bytes","Blob","ArrayBuffer","Buffer","input","credentials","_f","reject","_a","_config","identifyText","_c","region","_d","_e","format","configFormat","rekognitionClient","customUserAgent","textractClient","configureSource","text","inputDocument","err_1","featureTypes","push","textractParam","Document","rekognitionParam","Image","detectTextCommand","send","rekognitionData","rekognitionResponse","TextDetections","words","detectDocumentTextCommand","Blocks","err_2","param","FeatureTypes","analyzeDocumentCommand","err_3","identifyLabels","type","labels","inputImage_1","data","servicePromises","entityType","detectLabels","detectModerationLabels","all","identifyResult","forEach","val","err_4","detectLabelsCommand","Labels","detectLabelData","map","boxes","Instances","BoundingBox","undefined","name","boundingBoxes","metadata","confidence","Confidence","parents","Parents","err_5","detectModerationLabelsCommand","ModerationLabels","unsafe","err_6","_m","identifyEntities","celebrityDetectionEnabled","_g","collectionIdConfig","_h","maxFacesConfig","entities","inputImage","Attributes","celebrityDetection","recognizeCelebritiesCommand","faces","CelebrityFaces","boundingBox","celebrity","Face","landmarks","Landmarks","pose","Pose","err_7","collection","_j","_k","collectionId","_l","maxFaces","updatedParam","CollectionId","MaxFaces","searchFacesByImageCommand","FaceMatches","externalImageId","_this","decodeExternalImageId","ExternalImageId","similarity","Similarity","err_8","detectFacesCommand","FaceDetails","attributeKeys","faceAttributes","detail","Emotions","Type","ageRange","AgeRange","attributes","err_9","replace"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/predictions/src/Providers/AmazonAIIdentifyPredictionsProvider.ts"],"sourcesContent":["import {\n\tCredentials,\n\tConsoleLogger as Logger,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport Storage from '@aws-amplify/storage';\nimport { AbstractIdentifyPredictionsProvider } from '../types/Providers';\nimport {\n\tRekognitionClient,\n\tSearchFacesByImageCommand,\n\tDetectTextCommand,\n\tDetectTextCommandInput,\n\tDetectLabelsCommand,\n\tDetectLabelsCommandInput,\n\tDetectFacesCommand,\n\tDetectModerationLabelsCommand,\n\tDetectModerationLabelsCommandInput,\n\tRecognizeCelebritiesCommand,\n} from '@aws-sdk/client-rekognition';\nimport {\n\tIdentifyLabelsInput,\n\tIdentifyLabelsOutput,\n\tIdentifySource,\n\tIdentifyEntitiesInput,\n\tIdentifyEntitiesOutput,\n\tisStorageSource,\n\tisFileSource,\n\tisBytesSource,\n\tIdentifyTextInput,\n\tIdentifyTextOutput,\n\tisIdentifyCelebrities,\n\tisIdentifyFromCollection,\n\tIdentifyFromCollection,\n\tFeatureTypes,\n} from '../types';\nimport {\n\tImage,\n\tDocument,\n\tTextDetectionList,\n\tBlockList,\n} from '../types/AWSTypes';\nimport {\n\tTextractClient,\n\tDetectDocumentTextCommand,\n\tDetectDocumentTextCommandInput,\n\tAnalyzeDocumentCommand,\n\tAnalyzeDocumentCommandInput,\n} from '@aws-sdk/client-textract';\nimport { makeCamelCase, makeCamelCaseArray, blobToArrayBuffer } from './Utils';\nimport {\n\tcategorizeRekognitionBlocks,\n\tcategorizeTextractBlocks,\n} from './IdentifyTextUtils';\n\nexport class AmazonAIIdentifyPredictionsProvider extends AbstractIdentifyPredictionsProvider {\n\tprivate rekognitionClient: RekognitionClient;\n\tprivate textractClient: TextractClient;\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AmazonAIIdentifyPredictionsProvider';\n\t}\n\n\t/**\n\t * Verify user input source and converts it into source object readable by Rekognition and Textract.\n\t * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n\t * @param {IdentifySource} source - User input source that directs to the object user wants\n\t * to identify (storage, file, or bytes).\n\t * @return {Promise<Image>} - Promise resolving to the converted source object.\n\t */\n\tprivate configureSource(source: IdentifySource): Promise<Image> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tif (isStorageSource(source)) {\n\t\t\t\tconst storageConfig = {\n\t\t\t\t\tlevel: source.level,\n\t\t\t\t\tidentityId: source.identityId,\n\t\t\t\t};\n\t\t\t\tStorage.get(source.key, storageConfig)\n\t\t\t\t\t.then((url: string) => {\n\t\t\t\t\t\tconst parser = /https:\\/\\/([a-zA-Z0-9%-_.]+)\\.s3\\.[A-Za-z0-9%-._~]+\\/([a-zA-Z0-9%-._~/]+)\\?/;\n\t\t\t\t\t\tconst parsedURL = url.match(parser);\n\t\t\t\t\t\tif (parsedURL.length < 3) rej('Invalid S3 key was given.');\n\t\t\t\t\t\tres({\n\t\t\t\t\t\t\tS3Object: {\n\t\t\t\t\t\t\t\tBucket: parsedURL[1],\n\t\t\t\t\t\t\t\tName: decodeURIComponent(parsedURL[2]),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => rej(err));\n\t\t\t} else if (isFileSource(source)) {\n\t\t\t\tblobToArrayBuffer(source.file)\n\t\t\t\t\t.then(buffer => {\n\t\t\t\t\t\tres({ Bytes: new Uint8Array(buffer) });\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => rej(err));\n\t\t\t} else if (isBytesSource(source)) {\n\t\t\t\tconst bytes = source.bytes;\n\t\t\t\tif (bytes instanceof Blob) {\n\t\t\t\t\tblobToArrayBuffer(bytes)\n\t\t\t\t\t\t.then(buffer => {\n\t\t\t\t\t\t\tres({ Bytes: new Uint8Array(buffer) });\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(err => rej(err));\n\t\t\t\t}\n\t\t\t\tif (bytes instanceof ArrayBuffer || bytes instanceof Buffer) {\n\t\t\t\t\tres({ Bytes: new Uint8Array(bytes) } as Image);\n\t\t\t\t}\n\t\t\t\t// everything else can be directly passed to Rekognition / Textract.\n\t\t\t\tres({ Bytes: bytes } as Image);\n\t\t\t} else {\n\t\t\t\trej('Input source is not configured correctly.');\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n\t * image and converts it into machine-readable text.\n\t * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n\t * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n\t */\n\tprotected async identifyText(\n\t\tinput: IdentifyTextInput\n\t): Promise<IdentifyTextOutput> {\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) return Promise.reject('No credentials');\n\t\tconst {\n\t\t\tidentifyText: {\n\t\t\t\tregion = '',\n\t\t\t\tdefaults: { format: configFormat = 'PLAIN' } = {},\n\t\t\t} = {},\n\t\t} = this._config;\n\t\tthis.rekognitionClient = new RekognitionClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tthis.textractClient = new TextractClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tlet inputDocument: Document;\n\n\t\ttry {\n\t\t\tinputDocument = await this.configureSource(input.text.source);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\n\t\t// get default value if format isn't specified in the input.\n\t\tconst format = input.text.format || configFormat;\n\t\tconst featureTypes: FeatureTypes = []; // structures we want to analyze (e.g. [TABLES, FORMS]).\n\t\tif (format === 'FORM' || format === 'ALL') featureTypes.push('FORMS');\n\t\tif (format === 'TABLE' || format === 'ALL') featureTypes.push('TABLES');\n\n\t\tif (featureTypes.length === 0) {\n\t\t\t/**\n\t\t\t * Empty featureTypes indicates that we will identify plain text. We will use rekognition (suitable\n\t\t\t * for everyday images but has 50 word limit) first and see if reaches its word limit. If it does, then\n\t\t\t * we call textract and use the data that identify more words.\n\t\t\t */\n\t\t\tconst textractParam: DetectDocumentTextCommandInput = {\n\t\t\t\tDocument: inputDocument,\n\t\t\t};\n\t\t\tconst rekognitionParam: DetectTextCommandInput = {\n\t\t\t\tImage: inputDocument,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tconst detectTextCommand = new DetectTextCommand(rekognitionParam);\n\t\t\t\tconst rekognitionData = await this.rekognitionClient.send(\n\t\t\t\t\tdetectTextCommand\n\t\t\t\t);\n\n\t\t\t\tconst rekognitionResponse = categorizeRekognitionBlocks(\n\t\t\t\t\trekognitionData.TextDetections as TextDetectionList\n\t\t\t\t);\n\t\t\t\tif (rekognitionResponse.text.words.length < 50) {\n\t\t\t\t\t// did not hit the word limit, return the data\n\t\t\t\t\treturn rekognitionResponse;\n\t\t\t\t}\n\n\t\t\t\tconst detectDocumentTextCommand = new DetectDocumentTextCommand(\n\t\t\t\t\ttextractParam\n\t\t\t\t);\n\n\t\t\t\tconst { Blocks } = await this.textractClient.send(\n\t\t\t\t\tdetectDocumentTextCommand\n\t\t\t\t);\n\n\t\t\t\tif (rekognitionData.TextDetections.length > Blocks.length) {\n\t\t\t\t\treturn rekognitionResponse;\n\t\t\t\t}\n\n\t\t\t\treturn categorizeTextractBlocks(Blocks as BlockList);\n\t\t\t} catch (err) {\n\t\t\t\tPromise.reject(err);\n\t\t\t}\n\t\t} else {\n\t\t\tconst param: AnalyzeDocumentCommandInput = {\n\t\t\t\tDocument: inputDocument,\n\t\t\t\tFeatureTypes: featureTypes,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tconst analyzeDocumentCommand = new AnalyzeDocumentCommand(param);\n\t\t\t\tconst { Blocks } = await this.textractClient.send(\n\t\t\t\t\tanalyzeDocumentCommand\n\t\t\t\t);\n\t\t\t\treturn categorizeTextractBlocks(Blocks as BlockList);\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Identify instances of real world entities from an image and if it contains unsafe content.\n\t * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n\t * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n\t */\n\tprotected async identifyLabels(\n\t\tinput: IdentifyLabelsInput\n\t): Promise<IdentifyLabelsOutput> {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return Promise.reject('No credentials');\n\t\t\tconst {\n\t\t\t\tidentifyLabels: {\n\t\t\t\t\tregion = '',\n\t\t\t\t\tdefaults: { type = 'LABELS' } = {},\n\t\t\t\t} = {},\n\t\t\t} = this._config;\n\t\t\tthis.rekognitionClient = new RekognitionClient({\n\t\t\t\tregion,\n\t\t\t\tcredentials,\n\t\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t\t});\n\t\t\tlet inputImage: Image;\n\t\t\tawait this.configureSource(input.labels.source)\n\t\t\t\t.then(data => {\n\t\t\t\t\tinputImage = data;\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t});\n\t\t\tconst param = { Image: inputImage };\n\t\t\tconst servicePromises = [];\n\n\t\t\t// get default argument\n\t\t\tconst entityType = input.labels.type || type;\n\t\t\tif (entityType === 'LABELS' || entityType === 'ALL') {\n\t\t\t\tservicePromises.push(this.detectLabels(param));\n\t\t\t}\n\t\t\tif (entityType === 'UNSAFE' || entityType === 'ALL') {\n\t\t\t\tservicePromises.push(this.detectModerationLabels(param));\n\t\t\t}\n\n\t\t\treturn Promise.all(servicePromises)\n\t\t\t\t.then(data => {\n\t\t\t\t\tlet identifyResult: IdentifyLabelsOutput = {};\n\t\t\t\t\t// concatenate resolved promises to a single object\n\t\t\t\t\tdata.forEach(val => {\n\t\t\t\t\t\tidentifyResult = { ...identifyResult, ...val };\n\t\t\t\t\t});\n\t\t\t\t\treturn identifyResult;\n\t\t\t\t})\n\t\t\t\t.catch(err => Promise.reject(err));\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\t/**\n\t * Calls Rekognition.detectLabels and organizes the returned data.\n\t * @param {DetectLabelsInput} param - parameter to be passed onto Rekognition\n\t * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectLabels response.\n\t */\n\tprivate async detectLabels(\n\t\tparam: DetectLabelsCommandInput\n\t): Promise<IdentifyLabelsOutput> {\n\t\ttry {\n\t\t\tconst detectLabelsCommand = new DetectLabelsCommand(param);\n\t\t\tconst data = await this.rekognitionClient.send(detectLabelsCommand);\n\t\t\tif (!data.Labels) return { labels: null }; // no image was detected\n\t\t\tconst detectLabelData = data.Labels.map(val => {\n\t\t\t\tconst boxes = val.Instances\n\t\t\t\t\t? val.Instances.map(val => makeCamelCase(val.BoundingBox))\n\t\t\t\t\t: undefined;\n\t\t\t\treturn {\n\t\t\t\t\tname: val.Name,\n\t\t\t\t\tboundingBoxes: boxes,\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tconfidence: val.Confidence,\n\t\t\t\t\t\tparents: makeCamelCaseArray(val.Parents),\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t});\n\t\t\treturn { labels: detectLabelData };\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\t/**\n\t * Calls Rekognition.detectModerationLabels and organizes the returned data.\n\t * @param {Rekognition.DetectLabelsRequest} param - Parameter to be passed onto Rekognition\n\t * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectModerationLabels response.\n\t */\n\tprivate async detectModerationLabels(\n\t\tparam: DetectModerationLabelsCommandInput\n\t): Promise<IdentifyLabelsOutput> {\n\t\ttry {\n\t\t\tconst detectModerationLabelsCommand = new DetectModerationLabelsCommand(\n\t\t\t\tparam\n\t\t\t);\n\t\t\tconst data = await this.rekognitionClient.send(\n\t\t\t\tdetectModerationLabelsCommand\n\t\t\t);\n\t\t\tif (data.ModerationLabels.length !== 0) {\n\t\t\t\treturn { unsafe: 'YES' };\n\t\t\t} else {\n\t\t\t\treturn { unsafe: 'NO' };\n\t\t\t}\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n\n\t/**\n\t * Identify faces within an image that is provided as input, and match faces from a collection\n\t * or identify celebrities.\n\t * @param {IdentifyEntityInput} input - object containing the source image and face match options.\n\t * @return {Promise<IdentifyEntityOutput>} Promise resolving to identify results.\n\t */\n\tprotected async identifyEntities(\n\t\tinput: IdentifyEntitiesInput\n\t): Promise<IdentifyEntitiesOutput> {\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) return Promise.reject('No credentials');\n\t\tconst {\n\t\t\tidentifyEntities: {\n\t\t\t\tregion = '',\n\t\t\t\tcelebrityDetectionEnabled = false,\n\t\t\t\tdefaults: {\n\t\t\t\t\tcollectionId: collectionIdConfig = '',\n\t\t\t\t\tmaxEntities: maxFacesConfig = 50,\n\t\t\t\t} = {},\n\t\t\t} = {},\n\t\t} = this._config;\n\t\t// default arguments\n\n\t\tthis.rekognitionClient = new RekognitionClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tlet inputImage: Image;\n\t\tawait this.configureSource(input.entities.source)\n\t\t\t.then(data => (inputImage = data))\n\t\t\t.catch(err => {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t});\n\n\t\tconst param = { Attributes: ['ALL'], Image: inputImage };\n\n\t\tif (\n\t\t\tisIdentifyCelebrities(input.entities) &&\n\t\t\tinput.entities.celebrityDetection\n\t\t) {\n\t\t\tif (!celebrityDetectionEnabled) {\n\t\t\t\treturn Promise.reject(\n\t\t\t\t\t'Error: You have to enable celebrity detection first'\n\t\t\t\t);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst recognizeCelebritiesCommand = new RecognizeCelebritiesCommand(\n\t\t\t\t\tparam\n\t\t\t\t);\n\t\t\t\tconst data = await this.rekognitionClient.send(\n\t\t\t\t\trecognizeCelebritiesCommand\n\t\t\t\t);\n\t\t\t\tconst faces = data.CelebrityFaces.map(celebrity => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tboundingBox: makeCamelCase(celebrity.Face.BoundingBox),\n\t\t\t\t\t\tlandmarks: makeCamelCaseArray(celebrity.Face.Landmarks),\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t...makeCamelCase(celebrity, ['Id', 'Name', 'Urls']),\n\t\t\t\t\t\t\tpose: makeCamelCase(celebrity.Face.Pose),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\treturn { entities: faces };\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t} else if (\n\t\t\tisIdentifyFromCollection(input.entities) &&\n\t\t\tinput.entities.collection\n\t\t) {\n\t\t\tconst {\n\t\t\t\tcollectionId = collectionIdConfig,\n\t\t\t\tmaxEntities: maxFaces = maxFacesConfig,\n\t\t\t} = input.entities as IdentifyFromCollection;\n\t\t\t// Concatenate additional parameters\n\t\t\tconst updatedParam = {\n\t\t\t\t...param,\n\t\t\t\tCollectionId: collectionId,\n\t\t\t\tMaxFaces: maxFaces,\n\t\t\t};\n\t\t\ttry {\n\t\t\t\tconst searchFacesByImageCommand = new SearchFacesByImageCommand(\n\t\t\t\t\tupdatedParam\n\t\t\t\t);\n\t\t\t\tconst data = await this.rekognitionClient.send(\n\t\t\t\t\tsearchFacesByImageCommand\n\t\t\t\t);\n\t\t\t\tconst faces = data.FaceMatches.map(val => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tboundingBox: makeCamelCase(val.Face.BoundingBox),\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\texternalImageId: this.decodeExternalImageId(\n\t\t\t\t\t\t\t\tval.Face.ExternalImageId\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tsimilarity: val.Similarity,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\treturn { entities: faces };\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tconst detectFacesCommand = new DetectFacesCommand(param);\n\t\t\t\tconst data = await this.rekognitionClient.send(detectFacesCommand);\n\t\t\t\tconst faces = data.FaceDetails.map(detail => {\n\t\t\t\t\t// face attributes keys we want to extract from Rekognition's response\n\t\t\t\t\tconst attributeKeys = [\n\t\t\t\t\t\t'Smile',\n\t\t\t\t\t\t'Eyeglasses',\n\t\t\t\t\t\t'Sunglasses',\n\t\t\t\t\t\t'Gender',\n\t\t\t\t\t\t'Beard',\n\t\t\t\t\t\t'Mustache',\n\t\t\t\t\t\t'EyesOpen',\n\t\t\t\t\t\t'MouthOpen'\n\t\t\t\t\t];\n\t\t\t\t\tconst faceAttributes = makeCamelCase(detail, attributeKeys);\n\t\t\t\t\tif (detail.Emotions) {\n\t\t\t\t\t\tfaceAttributes['emotions'] = detail.Emotions.map(\n\t\t\t\t\t\t\temotion => emotion.Type\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\tboundingBox: makeCamelCase(detail.BoundingBox),\n\t\t\t\t\t\tlandmarks: makeCamelCaseArray(detail.Landmarks),\n\t\t\t\t\t\tageRange: makeCamelCase(detail.AgeRange),\n\t\t\t\t\t\tattributes: faceAttributes,\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\tconfidence: detail.Confidence,\n\t\t\t\t\t\t\tpose: makeCamelCase(detail.Pose),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\treturn { entities: faces };\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate decodeExternalImageId(externalImageId: string): string {\n\t\treturn ('' + externalImageId).replace(/::/g, '/');\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default AmazonAIIdentifyPredictionsProvider;\n"]},"metadata":{},"sourceType":"module"}