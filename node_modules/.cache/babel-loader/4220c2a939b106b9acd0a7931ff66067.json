{"ast":null,"code":"import { __assign, __read, __spreadArray } from './_virtual/_tslib.js';\nimport { SpecialTargets, ActionTypes } from './types.js';\nimport { init, send as send$1, raise as raise$1, update, log as log$1, cancel as cancel$1, assign as assign$1, error as error$1, stop as stop$1, pure as pure$1, choose as choose$1 } from './actionTypes.js';\nimport * as actionTypes from './actionTypes.js';\nexport { actionTypes };\nimport { toSCXMLEvent, isString, isFunction, toEventObject, getEventType, partition, updateContext, flatten, toArray, toGuard, evaluateGuard, warn, isArray } from './utils.js';\nimport { IS_PRODUCTION } from './environment.js';\nvar initEvent = /*#__PURE__*/toSCXMLEvent({\n  type: init\n});\n\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\n\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n\n  if (isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = __assign(__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var actionType = exec.type || action.type;\n      actionObject = __assign(__assign(__assign({}, exec), action), {\n        type: actionType\n      });\n    } else {\n      actionObject = action;\n    }\n  }\n\n  return actionObject;\n}\n\nvar toActionObjects = function (action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n\n  var actions = isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\n\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return __assign(__assign({\n    id: isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\n\nfunction raise(event) {\n  if (!isString(event)) {\n    return send(event, {\n      to: SpecialTargets.Internal\n    });\n  }\n\n  return {\n    type: raise$1,\n    event: event\n  };\n}\n\nfunction resolveRaise(action) {\n  return {\n    type: raise$1,\n    _event: toSCXMLEvent(action.event)\n  };\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: send$1,\n    event: isFunction(event) ? event : toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options && options.id !== undefined ? options.id : isFunction(event) ? event.name : getEventType(event)\n  };\n}\n\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n\n  if (isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n\n  var resolvedTarget = isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return __assign(__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\n\nfunction sendParent(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */\n\n\nfunction sendTo(actor, event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: actor\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\n\nfunction sendUpdate() {\n  return sendParent(update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\n\nfunction respond(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: function (_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\n\nvar defaultLogExpr = function (context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n\n  return {\n    type: log$1,\n    label: label,\n    expr: expr\n  };\n}\n\nvar resolveLog = function (action, ctx, _event) {\n  return __assign(__assign({}, action), {\n    value: isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\n\nvar cancel = function (sendId) {\n  return {\n    type: cancel$1,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */\n\n\nfunction stop(actorRef) {\n  var activity = isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);\n  return {\n    type: ActionTypes.Stop,\n    activity: activity,\n    exec: undefined\n  };\n}\n\nfunction resolveStop(action, context, _event) {\n  var actorRefOrString = isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;\n  var resolvedActorRef = typeof actorRefOrString === 'string' ? {\n    id: actorRefOrString\n  } : actorRefOrString;\n  var actionObject = {\n    type: ActionTypes.Stop,\n    activity: resolvedActorRef\n  };\n  return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\n\nvar assign = function (assignment) {\n  return {\n    type: assign$1,\n    assignment: assignment\n  };\n};\n\nfunction isActionObject(action) {\n  return typeof action === 'object' && 'type' in action;\n}\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\".concat(id) : '';\n  return \"\".concat(ActionTypes.After, \"(\").concat(delayRef, \")\").concat(idSuffix);\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\n\nfunction done(id, data) {\n  var type = \"\".concat(ActionTypes.DoneState, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\n\nfunction doneInvoke(id, data) {\n  var type = \"\".concat(ActionTypes.DoneInvoke, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n\nfunction error(id, data) {\n  var type = \"\".concat(ActionTypes.ErrorPlatform, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n\nfunction pure(getActions) {\n  return {\n    type: ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\n\nfunction forwardTo(target, options) {\n  if (!IS_PRODUCTION && (!target || typeof target === 'function')) {\n    var originalTarget_1 = target;\n\n    target = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var resolvedTarget = typeof originalTarget_1 === 'function' ? originalTarget_1.apply(void 0, __spreadArray([], __read(args), false)) : originalTarget_1;\n\n      if (!resolvedTarget) {\n        throw new Error(\"Attempted to forward event to undefined actor. This risks an infinite loop in the sender.\");\n      }\n\n      return resolvedTarget;\n    };\n  }\n\n  return send(function (_, event) {\n    return event;\n  }, __assign(__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: error$1,\n      data: isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\n\nfunction choose(conds) {\n  return {\n    type: ActionTypes.Choose,\n    conds: conds\n  };\n}\n\nfunction resolveActions(machine, currentState, currentContext, _event, actions, predictableExec, preserveActionOrder) {\n  if (preserveActionOrder === void 0) {\n    preserveActionOrder = false;\n  }\n\n  var _a = __read(preserveActionOrder ? [[], actions] : partition(actions, function (action) {\n    return action.type === assign$1;\n  }), 2),\n      assignActions = _a[0],\n      otherActions = _a[1];\n\n  var updatedContext = assignActions.length ? updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;\n  var resolvedActions = flatten(otherActions.map(function (actionObject) {\n    var _a;\n\n    switch (actionObject.type) {\n      case raise$1:\n        {\n          return resolveRaise(actionObject);\n        }\n\n      case send$1:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!IS_PRODUCTION) {\n          // warn after resolving as we can create better contextual message here\n          warn(!isString(actionObject.delay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\".concat(actionObject.delay, \"' was found on machine '\").concat(machine.id, \"'\"));\n        }\n\n        if (sendAction.to !== SpecialTargets.Internal) {\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(sendAction, updatedContext, _event);\n        }\n\n        return sendAction;\n\n      case log$1:\n        {\n          var resolved = resolveLog(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);\n          return resolved;\n        }\n\n      case choose$1:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = toGuard(condition.cond, machine.options.guards);\n            return !guard || evaluateGuard(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _b = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), predictableExec, preserveActionOrder), 2),\n              resolvedActionsFromChoose = _b[0],\n              resolvedContextFromChoose = _b[1];\n\n          updatedContext = resolvedContextFromChoose;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromChoose;\n        }\n\n      case pure$1:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _c = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), predictableExec, preserveActionOrder), 2),\n              resolvedActionsFromPure = _c[0],\n              resolvedContext = _c[1];\n\n          updatedContext = resolvedContext;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromPure;\n        }\n\n      case stop$1:\n        {\n          var resolved = resolveStop(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);\n          return resolved;\n        }\n\n      case assign$1:\n        {\n          updatedContext = updateContext(updatedContext, _event, [actionObject], !predictableExec ? currentState : undefined);\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          break;\n        }\n\n      default:\n        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n        var exec_1 = resolvedActionObject.exec;\n\n        if (predictableExec) {\n          predictableExec(resolvedActionObject, updatedContext, _event);\n        } else if (exec_1 && preservedContexts) {\n          var contextIndex_1 = preservedContexts.length - 1;\n          resolvedActionObject = __assign(__assign({}, resolvedActionObject), {\n            exec: function (_ctx) {\n              var args = [];\n\n              for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n              }\n\n              exec_1.apply(void 0, __spreadArray([preservedContexts[contextIndex_1]], __read(args), false));\n            }\n          });\n        }\n\n        return resolvedActionObject;\n    }\n  }).filter(function (a) {\n    return !!a;\n  }));\n  return [resolvedActions, updatedContext];\n}\n\nexport { after, assign, cancel, choose, done, doneInvoke, error, escalate, forwardTo, getActionFunction, initEvent, isActionObject, log, pure, raise, resolveActions, resolveLog, resolveRaise, resolveSend, resolveStop, respond, send, sendParent, sendTo, sendUpdate, start, stop, toActionObject, toActionObjects, toActivityDefinition };","map":{"version":3,"names":["__assign","__read","__spreadArray","SpecialTargets","ActionTypes","init","send","send$1","raise","raise$1","update","log","log$1","cancel","cancel$1","assign","assign$1","error","error$1","stop","stop$1","pure","pure$1","choose","choose$1","actionTypes","toSCXMLEvent","isString","isFunction","toEventObject","getEventType","partition","updateContext","flatten","toArray","toGuard","evaluateGuard","warn","isArray","IS_PRODUCTION","initEvent","type","getActionFunction","actionType","actionFunctionMap","undefined","toActionObject","action","actionObject","exec","name","toString","toActionObjects","actions","map","subAction","toActivityDefinition","id","event","to","Internal","resolveRaise","_event","options","delay","resolveSend","ctx","delaysMap","meta","resolvedEvent","data","resolvedDelay","configDelay","resolvedTarget","sendParent","Parent","sendTo","actor","sendUpdate","respond","_","__","_a","origin","defaultLogExpr","context","expr","label","resolveLog","value","sendId","start","activity","activityDef","Start","actorRef","Stop","resolveStop","actorRefOrString","resolvedActorRef","assignment","isActionObject","after","delayRef","idSuffix","concat","After","done","DoneState","eventObject","doneInvoke","DoneInvoke","ErrorPlatform","getActions","Pure","get","forwardTo","target","originalTarget_1","args","_i","arguments","length","apply","Error","escalate","errorData","conds","Choose","resolveActions","machine","currentState","currentContext","predictableExec","preserveActionOrder","assignActions","otherActions","updatedContext","preservedContexts","resolvedActions","sendAction","delays","resolved","chooseAction","matchedActions","find","condition","guard","cond","guards","_b","resolvedActionsFromChoose","resolvedContextFromChoose","push","_c","resolvedActionsFromPure","resolvedContext","resolvedActionObject","exec_1","contextIndex_1","_ctx","filter","a"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/xstate/es/actions.js"],"sourcesContent":["import { __assign, __read, __spreadArray } from './_virtual/_tslib.js';\nimport { SpecialTargets, ActionTypes } from './types.js';\nimport { init, send as send$1, raise as raise$1, update, log as log$1, cancel as cancel$1, assign as assign$1, error as error$1, stop as stop$1, pure as pure$1, choose as choose$1 } from './actionTypes.js';\nimport * as actionTypes from './actionTypes.js';\nexport { actionTypes };\nimport { toSCXMLEvent, isString, isFunction, toEventObject, getEventType, partition, updateContext, flatten, toArray, toGuard, evaluateGuard, warn, isArray } from './utils.js';\nimport { IS_PRODUCTION } from './environment.js';\n\nvar initEvent = /*#__PURE__*/toSCXMLEvent({\n  type: init\n});\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n\n  if (isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = __assign(__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var actionType = exec.type || action.type;\n      actionObject = __assign(__assign(__assign({}, exec), action), {\n        type: actionType\n      });\n    } else {\n      actionObject = action;\n    }\n  }\n\n  return actionObject;\n}\nvar toActionObjects = function (action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n\n  var actions = isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return __assign(__assign({\n    id: isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\nfunction raise(event) {\n  if (!isString(event)) {\n    return send(event, {\n      to: SpecialTargets.Internal\n    });\n  }\n\n  return {\n    type: raise$1,\n    event: event\n  };\n}\nfunction resolveRaise(action) {\n  return {\n    type: raise$1,\n    _event: toSCXMLEvent(action.event)\n  };\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: send$1,\n    event: isFunction(event) ? event : toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options && options.id !== undefined ? options.id : isFunction(event) ? event.name : getEventType(event)\n  };\n}\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n\n  if (isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n\n  var resolvedTarget = isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return __assign(__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\nfunction sendParent(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */\n\nfunction sendTo(actor, event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: actor\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\nfunction sendUpdate() {\n  return sendParent(update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\nfunction respond(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: function (_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\n\nvar defaultLogExpr = function (context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n\n  return {\n    type: log$1,\n    label: label,\n    expr: expr\n  };\n}\nvar resolveLog = function (action, ctx, _event) {\n  return __assign(__assign({}, action), {\n    value: isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\nvar cancel = function (sendId) {\n  return {\n    type: cancel$1,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */\n\nfunction stop(actorRef) {\n  var activity = isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);\n  return {\n    type: ActionTypes.Stop,\n    activity: activity,\n    exec: undefined\n  };\n}\nfunction resolveStop(action, context, _event) {\n  var actorRefOrString = isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;\n  var resolvedActorRef = typeof actorRefOrString === 'string' ? {\n    id: actorRefOrString\n  } : actorRefOrString;\n  var actionObject = {\n    type: ActionTypes.Stop,\n    activity: resolvedActorRef\n  };\n  return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\nvar assign = function (assignment) {\n  return {\n    type: assign$1,\n    assignment: assignment\n  };\n};\nfunction isActionObject(action) {\n  return typeof action === 'object' && 'type' in action;\n}\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\".concat(id) : '';\n  return \"\".concat(ActionTypes.After, \"(\").concat(delayRef, \")\").concat(idSuffix);\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\nfunction done(id, data) {\n  var type = \"\".concat(ActionTypes.DoneState, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\nfunction doneInvoke(id, data) {\n  var type = \"\".concat(ActionTypes.DoneInvoke, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\nfunction error(id, data) {\n  var type = \"\".concat(ActionTypes.ErrorPlatform, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\nfunction pure(getActions) {\n  return {\n    type: ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction forwardTo(target, options) {\n  if (!IS_PRODUCTION && (!target || typeof target === 'function')) {\n    var originalTarget_1 = target;\n\n    target = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var resolvedTarget = typeof originalTarget_1 === 'function' ? originalTarget_1.apply(void 0, __spreadArray([], __read(args), false)) : originalTarget_1;\n\n      if (!resolvedTarget) {\n        throw new Error(\"Attempted to forward event to undefined actor. This risks an infinite loop in the sender.\");\n      }\n\n      return resolvedTarget;\n    };\n  }\n\n  return send(function (_, event) {\n    return event;\n  }, __assign(__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: error$1,\n      data: isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\nfunction choose(conds) {\n  return {\n    type: ActionTypes.Choose,\n    conds: conds\n  };\n}\nfunction resolveActions(machine, currentState, currentContext, _event, actions, predictableExec, preserveActionOrder) {\n  if (preserveActionOrder === void 0) {\n    preserveActionOrder = false;\n  }\n\n  var _a = __read(preserveActionOrder ? [[], actions] : partition(actions, function (action) {\n    return action.type === assign$1;\n  }), 2),\n      assignActions = _a[0],\n      otherActions = _a[1];\n\n  var updatedContext = assignActions.length ? updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;\n  var resolvedActions = flatten(otherActions.map(function (actionObject) {\n    var _a;\n\n    switch (actionObject.type) {\n      case raise$1:\n        {\n          return resolveRaise(actionObject);\n        }\n\n      case send$1:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!IS_PRODUCTION) {\n          // warn after resolving as we can create better contextual message here\n          warn(!isString(actionObject.delay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\".concat(actionObject.delay, \"' was found on machine '\").concat(machine.id, \"'\"));\n        }\n\n        if (sendAction.to !== SpecialTargets.Internal) {\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(sendAction, updatedContext, _event);\n        }\n\n        return sendAction;\n\n      case log$1:\n        {\n          var resolved = resolveLog(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);\n          return resolved;\n        }\n\n      case choose$1:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = toGuard(condition.cond, machine.options.guards);\n            return !guard || evaluateGuard(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _b = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), predictableExec, preserveActionOrder), 2),\n              resolvedActionsFromChoose = _b[0],\n              resolvedContextFromChoose = _b[1];\n\n          updatedContext = resolvedContextFromChoose;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromChoose;\n        }\n\n      case pure$1:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _c = __read(resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions), machine.options.actions), predictableExec, preserveActionOrder), 2),\n              resolvedActionsFromPure = _c[0],\n              resolvedContext = _c[1];\n\n          updatedContext = resolvedContext;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromPure;\n        }\n\n      case stop$1:\n        {\n          var resolved = resolveStop(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);\n          return resolved;\n        }\n\n      case assign$1:\n        {\n          updatedContext = updateContext(updatedContext, _event, [actionObject], !predictableExec ? currentState : undefined);\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          break;\n        }\n\n      default:\n        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n        var exec_1 = resolvedActionObject.exec;\n\n        if (predictableExec) {\n          predictableExec(resolvedActionObject, updatedContext, _event);\n        } else if (exec_1 && preservedContexts) {\n          var contextIndex_1 = preservedContexts.length - 1;\n          resolvedActionObject = __assign(__assign({}, resolvedActionObject), {\n            exec: function (_ctx) {\n              var args = [];\n\n              for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n              }\n\n              exec_1.apply(void 0, __spreadArray([preservedContexts[contextIndex_1]], __read(args), false));\n            }\n          });\n        }\n\n        return resolvedActionObject;\n    }\n  }).filter(function (a) {\n    return !!a;\n  }));\n  return [resolvedActions, updatedContext];\n}\n\nexport { after, assign, cancel, choose, done, doneInvoke, error, escalate, forwardTo, getActionFunction, initEvent, isActionObject, log, pure, raise, resolveActions, resolveLog, resolveRaise, resolveSend, resolveStop, respond, send, sendParent, sendTo, sendUpdate, start, stop, toActionObject, toActionObjects, toActivityDefinition };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}