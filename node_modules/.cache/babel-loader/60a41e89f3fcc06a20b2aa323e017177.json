{"ast":null,"code":"import { __values } from \"tslib\";\nimport { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { requestTimeout } from \"./request-timeout\";\n\nvar FetchHttpHandler =\n/** @class */\nfunction () {\n  function FetchHttpHandler(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        requestTimeout = _b.requestTimeout;\n\n    this.requestTimeout = requestTimeout;\n  }\n\n  FetchHttpHandler.prototype.destroy = function () {// Do nothing. TLS and HTTP/2 connection pooling is handled by the browser.\n  };\n\n  FetchHttpHandler.prototype.handle = function (request, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        abortSignal = _b.abortSignal;\n\n    var requestTimeoutInMs = this.requestTimeout; // if the request was already aborted, prevent doing extra work\n\n    if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n      var abortError = new Error(\"Request aborted\");\n      abortError.name = \"AbortError\";\n      return Promise.reject(abortError);\n    }\n\n    var path = request.path;\n\n    if (request.query) {\n      var queryString = buildQueryString(request.query);\n\n      if (queryString) {\n        path += \"?\" + queryString;\n      }\n    }\n\n    var port = request.port,\n        method = request.method;\n    var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : \"\") + path; // Request constructor doesn't allow GET/HEAD request with body\n    // ref: https://github.com/whatwg/fetch/issues/551\n\n    var body = method === \"GET\" || method === \"HEAD\" ? undefined : request.body;\n    var requestOptions = {\n      body: body,\n      headers: new Headers(request.headers),\n      method: method\n    }; // some browsers support abort signal\n\n    if (typeof AbortController !== \"undefined\") {\n      requestOptions[\"signal\"] = abortSignal;\n    }\n\n    var fetchRequest = new Request(url, requestOptions);\n    var raceOfPromises = [fetch(fetchRequest).then(function (response) {\n      var e_1, _a;\n\n      var fetchHeaders = response.headers;\n      var transformedHeaders = {};\n\n      try {\n        for (var _b = __values(fetchHeaders.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var pair = _c.value;\n          transformedHeaders[pair[0]] = pair[1];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      var hasReadableStream = response.body !== undefined; // Return the response with buffered body\n\n      if (!hasReadableStream) {\n        return response.blob().then(function (body) {\n          return {\n            response: new HttpResponse({\n              headers: transformedHeaders,\n              statusCode: response.status,\n              body: body\n            })\n          };\n        });\n      } // Return the response with streaming body\n\n\n      return {\n        response: new HttpResponse({\n          headers: transformedHeaders,\n          statusCode: response.status,\n          body: response.body\n        })\n      };\n    }), requestTimeout(requestTimeoutInMs)];\n\n    if (abortSignal) {\n      raceOfPromises.push(new Promise(function (resolve, reject) {\n        abortSignal.onabort = function () {\n          var abortError = new Error(\"Request aborted\");\n          abortError.name = \"AbortError\";\n          reject(abortError);\n        };\n      }));\n    }\n\n    return Promise.race(raceOfPromises);\n  };\n\n  return FetchHttpHandler;\n}();\n\nexport { FetchHttpHandler };","map":{"version":3,"mappings":"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","names":["HttpResponse","buildQueryString","requestTimeout","_a","_b","FetchHttpHandler","request","abortSignal","requestTimeoutInMs","aborted","abortError","Error","name","Promise","reject","path","query","queryString","method","url","protocol","hostname","port","body","undefined","requestOptions","headers","Headers","AbortController","fetchRequest","Request","raceOfPromises","fetch","then","response","fetchHeaders","transformedHeaders","entries","_c","pair","hasReadableStream","blob","statusCode","status","push","resolve","onabort","race"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-sdk/fetch-http-handler/src/fetch-http-handler.ts"],"sourcesContent":["import { HttpHandler, HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { HeaderBag, HttpHandlerOptions } from \"@aws-sdk/types\";\n\nimport { requestTimeout } from \"./request-timeout\";\n\ndeclare let AbortController: any;\n\n/**\n * Represents the http options that can be passed to a browser http client.\n */\nexport interface FetchHttpHandlerOptions {\n  /**\n   * The number of milliseconds a request can take before being automatically\n   * terminated.\n   */\n  requestTimeout?: number;\n}\n\nexport class FetchHttpHandler implements HttpHandler {\n  private readonly requestTimeout?: number;\n\n  constructor({ requestTimeout }: FetchHttpHandlerOptions = {}) {\n    this.requestTimeout = requestTimeout;\n  }\n\n  destroy(): void {\n    // Do nothing. TLS and HTTP/2 connection pooling is handled by the browser.\n  }\n\n  handle(request: HttpRequest, { abortSignal }: HttpHandlerOptions = {}): Promise<{ response: HttpResponse }> {\n    const requestTimeoutInMs = this.requestTimeout;\n\n    // if the request was already aborted, prevent doing extra work\n    if (abortSignal?.aborted) {\n      const abortError = new Error(\"Request aborted\");\n      abortError.name = \"AbortError\";\n      return Promise.reject(abortError);\n    }\n\n    let path = request.path;\n    if (request.query) {\n      const queryString = buildQueryString(request.query);\n      if (queryString) {\n        path += `?${queryString}`;\n      }\n    }\n\n    const { port, method } = request;\n    const url = `${request.protocol}//${request.hostname}${port ? `:${port}` : \"\"}${path}`;\n    // Request constructor doesn't allow GET/HEAD request with body\n    // ref: https://github.com/whatwg/fetch/issues/551\n    const body = method === \"GET\" || method === \"HEAD\" ? undefined : request.body;\n    const requestOptions: RequestInit = {\n      body,\n      headers: new Headers(request.headers),\n      method: method,\n    };\n\n    // some browsers support abort signal\n    if (typeof AbortController !== \"undefined\") {\n      (requestOptions as any)[\"signal\"] = abortSignal;\n    }\n\n    const fetchRequest = new Request(url, requestOptions);\n    const raceOfPromises = [\n      fetch(fetchRequest).then((response) => {\n        const fetchHeaders: any = response.headers;\n        const transformedHeaders: HeaderBag = {};\n\n        for (const pair of <Array<string[]>>fetchHeaders.entries()) {\n          transformedHeaders[pair[0]] = pair[1];\n        }\n\n        const hasReadableStream = response.body !== undefined;\n\n        // Return the response with buffered body\n        if (!hasReadableStream) {\n          return response.blob().then((body) => ({\n            response: new HttpResponse({\n              headers: transformedHeaders,\n              statusCode: response.status,\n              body,\n            }),\n          }));\n        }\n        // Return the response with streaming body\n        return {\n          response: new HttpResponse({\n            headers: transformedHeaders,\n            statusCode: response.status,\n            body: response.body,\n          }),\n        };\n      }),\n      requestTimeout(requestTimeoutInMs),\n    ];\n    if (abortSignal) {\n      raceOfPromises.push(\n        new Promise<never>((resolve, reject) => {\n          abortSignal.onabort = () => {\n            const abortError = new Error(\"Request aborted\");\n            abortError.name = \"AbortError\";\n            reject(abortError);\n          };\n        })\n      );\n    }\n    return Promise.race(raceOfPromises);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}