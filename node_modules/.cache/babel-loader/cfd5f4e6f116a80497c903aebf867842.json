{"ast":null,"code":"/**\n * Compare two points\n * @param a\n * @param b\n * @returns true if the points are equal\n */\nexport function arePointsEqual(a, b) {\n  const ax = Array.isArray(a) ? a[0] : a ? a.x : 0;\n  const ay = Array.isArray(a) ? a[1] : a ? a.y : 0;\n  const bx = Array.isArray(b) ? b[0] : b ? b.x : 0;\n  const by = Array.isArray(b) ? b[1] : b ? b.y : 0;\n  return ax === bx && ay === by;\n}\n/* eslint-disable complexity */\n\n/**\n * Compare any two objects\n * @param a\n * @param b\n * @returns true if the objects are deep equal\n */\n\nexport function deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (!a || !b) {\n    return false;\n  }\n\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b) || a.length !== b.length) {\n      return false;\n    }\n\n    for (let i = 0; i < a.length; i++) {\n      if (!deepEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  } else if (Array.isArray(b)) {\n    return false;\n  }\n\n  if (typeof a === 'object' && typeof b === 'object') {\n    const aKeys = Object.keys(a);\n    const bKeys = Object.keys(b);\n\n    if (aKeys.length !== bKeys.length) {\n      return false;\n    }\n\n    for (const key of aKeys) {\n      if (!b.hasOwnProperty(key)) {\n        return false;\n      }\n\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;EACjC,MAAMC,EAAE,GAAGC,KAAK,CAACC,OAAN,CAAcJ,CAAd,IAAmBA,CAAC,CAAC,CAAD,CAApB,GAA0BA,CAAC,GAAGA,CAAC,CAACK,CAAL,GAAS,CAA/C;EACA,MAAMC,EAAE,GAAGH,KAAK,CAACC,OAAN,CAAcJ,CAAd,IAAmBA,CAAC,CAAC,CAAD,CAApB,GAA0BA,CAAC,GAAGA,CAAC,CAACO,CAAL,GAAS,CAA/C;EACA,MAAMC,EAAE,GAAGL,KAAK,CAACC,OAAN,CAAcH,CAAd,IAAmBA,CAAC,CAAC,CAAD,CAApB,GAA0BA,CAAC,GAAGA,CAAC,CAACI,CAAL,GAAS,CAA/C;EACA,MAAMI,EAAE,GAAGN,KAAK,CAACC,OAAN,CAAcH,CAAd,IAAmBA,CAAC,CAAC,CAAD,CAApB,GAA0BA,CAAC,GAAGA,CAAC,CAACM,CAAL,GAAS,CAA/C;EACA,OAAOL,EAAE,KAAKM,EAAP,IAAaF,EAAE,KAAKG,EAA3B;AACH;AACD;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBV,CAAnB,EAAsBC,CAAtB,EAAyB;EAC5B,IAAID,CAAC,KAAKC,CAAV,EAAa;IACT,OAAO,IAAP;EACH;;EACD,IAAI,CAACD,CAAD,IAAM,CAACC,CAAX,EAAc;IACV,OAAO,KAAP;EACH;;EACD,IAAIE,KAAK,CAACC,OAAN,CAAcJ,CAAd,CAAJ,EAAsB;IAClB,IAAI,CAACG,KAAK,CAACC,OAAN,CAAcH,CAAd,CAAD,IAAqBD,CAAC,CAACW,MAAF,KAAaV,CAAC,CAACU,MAAxC,EAAgD;MAC5C,OAAO,KAAP;IACH;;IACD,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,CAAC,CAACW,MAAtB,EAA8BC,CAAC,EAA/B,EAAmC;MAC/B,IAAI,CAACF,SAAS,CAACV,CAAC,CAACY,CAAD,CAAF,EAAOX,CAAC,CAACW,CAAD,CAAR,CAAd,EAA4B;QACxB,OAAO,KAAP;MACH;IACJ;;IACD,OAAO,IAAP;EACH,CAVD,MAWK,IAAIT,KAAK,CAACC,OAAN,CAAcH,CAAd,CAAJ,EAAsB;IACvB,OAAO,KAAP;EACH;;EACD,IAAI,OAAOD,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;IAChD,MAAMY,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYf,CAAZ,CAAd;IACA,MAAMgB,KAAK,GAAGF,MAAM,CAACC,IAAP,CAAYd,CAAZ,CAAd;;IACA,IAAIY,KAAK,CAACF,MAAN,KAAiBK,KAAK,CAACL,MAA3B,EAAmC;MAC/B,OAAO,KAAP;IACH;;IACD,KAAK,MAAMM,GAAX,IAAkBJ,KAAlB,EAAyB;MACrB,IAAI,CAACZ,CAAC,CAACiB,cAAF,CAAiBD,GAAjB,CAAL,EAA4B;QACxB,OAAO,KAAP;MACH;;MACD,IAAI,CAACP,SAAS,CAACV,CAAC,CAACiB,GAAD,CAAF,EAAShB,CAAC,CAACgB,GAAD,CAAV,CAAd,EAAgC;QAC5B,OAAO,KAAP;MACH;IACJ;;IACD,OAAO,IAAP;EACH;;EACD,OAAO,KAAP;AACH","names":["arePointsEqual","a","b","ax","Array","isArray","x","ay","y","bx","by","deepEqual","length","i","aKeys","Object","keys","bKeys","key","hasOwnProperty"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/react-map-gl/src/utils/deep-equal.ts"],"sourcesContent":["import type {PointLike} from '../types';\n\n/**\n * Compare two points\n * @param a\n * @param b\n * @returns true if the points are equal\n */\nexport function arePointsEqual(a?: PointLike, b?: PointLike): boolean {\n  const ax = Array.isArray(a) ? a[0] : a ? a.x : 0;\n  const ay = Array.isArray(a) ? a[1] : a ? a.y : 0;\n  const bx = Array.isArray(b) ? b[0] : b ? b.x : 0;\n  const by = Array.isArray(b) ? b[1] : b ? b.y : 0;\n  return ax === bx && ay === by;\n}\n\n/* eslint-disable complexity */\n/**\n * Compare any two objects\n * @param a\n * @param b\n * @returns true if the objects are deep equal\n */\nexport function deepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b) || a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n      if (!deepEqual(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  } else if (Array.isArray(b)) {\n    return false;\n  }\n  if (typeof a === 'object' && typeof b === 'object') {\n    const aKeys = Object.keys(a);\n    const bKeys = Object.keys(b);\n    if (aKeys.length !== bKeys.length) {\n      return false;\n    }\n    for (const key of aKeys) {\n      if (!b.hasOwnProperty(key)) {\n        return false;\n      }\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}