{"ast":null,"code":"import { __assign, __read } from \"tslib\";\nimport { DOT_PATTERN, getArnResources, getSuffix, getSuffixForArnEndpoint, isBucketNameOptions, isDnsCompatibleBucketName, validateAccountId, validateArnEndpointOptions, validateDNSHostLabel, validateNoDualstack, validateNoFIPS, validateOutpostService, validatePartition, validateRegion, validateS3Service, validateService } from \"./bucketHostnameUtils\";\nexport var bucketHostname = function bucketHostname(options) {\n  var isCustomEndpoint = options.isCustomEndpoint,\n      baseHostname = options.baseHostname,\n      dualstackEndpoint = options.dualstackEndpoint,\n      accelerateEndpoint = options.accelerateEndpoint;\n\n  if (isCustomEndpoint) {\n    if (dualstackEndpoint) throw new Error(\"Dualstack endpoint is not supported with custom endpoint\");\n    if (accelerateEndpoint) throw new Error(\"Accelerate endpoint is not supported with custom endpoint\");\n  }\n\n  return isBucketNameOptions(options) ? // Construct endpoint when bucketName is a string referring to a bucket name\n  getEndpointFromBucketName(__assign(__assign({}, options), {\n    isCustomEndpoint: isCustomEndpoint\n  })) : // Construct endpoint when bucketName is an ARN referring to an S3 resource like Access Point\n  getEndpointFromArn(__assign(__assign({}, options), {\n    isCustomEndpoint: isCustomEndpoint\n  }));\n};\n\nvar getEndpointFromArn = function getEndpointFromArn(options) {\n  var isCustomEndpoint = options.isCustomEndpoint,\n      baseHostname = options.baseHostname;\n\n  var _a = __read(isCustomEndpoint ? [options.clientRegion, baseHostname] : // Infer client region and hostname suffix from hostname from endpoints.json, like `s3.us-west-2.amazonaws.com`\n  getSuffixForArnEndpoint(baseHostname), 2),\n      clientRegion = _a[0],\n      hostnameSuffix = _a[1];\n\n  var pathStyleEndpoint = options.pathStyleEndpoint,\n      _b = options.dualstackEndpoint,\n      dualstackEndpoint = _b === void 0 ? false : _b,\n      _c = options.accelerateEndpoint,\n      accelerateEndpoint = _c === void 0 ? false : _c,\n      _d = options.tlsCompatible,\n      tlsCompatible = _d === void 0 ? true : _d,\n      useArnRegion = options.useArnRegion,\n      bucketName = options.bucketName,\n      _e = options.clientPartition,\n      clientPartition = _e === void 0 ? \"aws\" : _e,\n      _f = options.clientSigningRegion,\n      clientSigningRegion = _f === void 0 ? clientRegion : _f;\n  validateArnEndpointOptions({\n    pathStyleEndpoint: pathStyleEndpoint,\n    accelerateEndpoint: accelerateEndpoint,\n    tlsCompatible: tlsCompatible\n  }); // Validate and parse the ARN supplied as a bucket name\n\n  var service = bucketName.service,\n      partition = bucketName.partition,\n      accountId = bucketName.accountId,\n      region = bucketName.region,\n      resource = bucketName.resource;\n  validateService(service);\n  validatePartition(partition, {\n    clientPartition: clientPartition\n  });\n  validateAccountId(accountId);\n  validateRegion(region, {\n    useArnRegion: useArnRegion,\n    clientRegion: clientRegion,\n    clientSigningRegion: clientSigningRegion\n  });\n\n  var _g = getArnResources(resource),\n      accesspointName = _g.accesspointName,\n      outpostId = _g.outpostId;\n\n  validateDNSHostLabel(accesspointName + \"-\" + accountId, {\n    tlsCompatible: tlsCompatible\n  });\n  var endpointRegion = useArnRegion ? region : clientRegion;\n  var signingRegion = useArnRegion ? region : clientSigningRegion;\n\n  if (outpostId) {\n    // if this is an Outpost ARN\n    validateOutpostService(service);\n    validateDNSHostLabel(outpostId, {\n      tlsCompatible: tlsCompatible\n    });\n    validateNoDualstack(dualstackEndpoint);\n    validateNoFIPS(endpointRegion);\n    var hostnamePrefix_1 = accesspointName + \"-\" + accountId + \".\" + outpostId;\n    return {\n      bucketEndpoint: true,\n      hostname: \"\" + hostnamePrefix_1 + (isCustomEndpoint ? \"\" : \".s3-outposts.\" + endpointRegion) + \".\" + hostnameSuffix,\n      signingRegion: signingRegion,\n      signingService: \"s3-outposts\"\n    };\n  } // construct endpoint from Accesspoint ARN\n\n\n  validateS3Service(service);\n  var hostnamePrefix = accesspointName + \"-\" + accountId;\n  return {\n    bucketEndpoint: true,\n    hostname: \"\" + hostnamePrefix + (isCustomEndpoint ? \"\" : \".s3-accesspoint\" + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + endpointRegion) + \".\" + hostnameSuffix,\n    signingRegion: signingRegion\n  };\n};\n\nvar getEndpointFromBucketName = function getEndpointFromBucketName(_a) {\n  var _b = _a.accelerateEndpoint,\n      accelerateEndpoint = _b === void 0 ? false : _b,\n      region = _a.clientRegion,\n      baseHostname = _a.baseHostname,\n      bucketName = _a.bucketName,\n      _c = _a.dualstackEndpoint,\n      dualstackEndpoint = _c === void 0 ? false : _c,\n      _d = _a.pathStyleEndpoint,\n      pathStyleEndpoint = _d === void 0 ? false : _d,\n      _e = _a.tlsCompatible,\n      tlsCompatible = _e === void 0 ? true : _e,\n      _f = _a.isCustomEndpoint,\n      isCustomEndpoint = _f === void 0 ? false : _f;\n\n  var _g = __read(isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname), 2),\n      clientRegion = _g[0],\n      hostnameSuffix = _g[1];\n\n  if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || tlsCompatible && DOT_PATTERN.test(bucketName)) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint ? \"s3.dualstack.\" + clientRegion + \".\" + hostnameSuffix : baseHostname\n    };\n  }\n\n  if (accelerateEndpoint) {\n    baseHostname = \"s3-accelerate\" + (dualstackEndpoint ? \".dualstack\" : \"\") + \".\" + hostnameSuffix;\n  } else if (dualstackEndpoint) {\n    baseHostname = \"s3.dualstack.\" + clientRegion + \".\" + hostnameSuffix;\n  }\n\n  return {\n    bucketEndpoint: true,\n    hostname: bucketName + \".\" + baseHostname\n  };\n};","map":{"version":3,"mappings":"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","names":["DOT_PATTERN","getArnResources","getSuffix","getSuffixForArnEndpoint","isBucketNameOptions","isDnsCompatibleBucketName","validateAccountId","validateArnEndpointOptions","validateDNSHostLabel","validateNoDualstack","validateNoFIPS","validateOutpostService","validatePartition","validateRegion","validateS3Service","validateService","bucketHostname","options","baseHostname","dualstackEndpoint","accelerateEndpoint","isCustomEndpoint","Error","getEndpointFromBucketName","getEndpointFromArn","clientRegion","hostnameSuffix","_b","_c","_d","tlsCompatible","useArnRegion","bucketName","_e","clientPartition","_f","clientSigningRegion","pathStyleEndpoint","partition","accountId","region","resource","service","accesspointName","outpostId","endpointRegion","signingRegion","hostnamePrefix_1","bucketEndpoint","hostname","signingService","hostnamePrefix","_a","test"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/middleware-bucket-endpoint/src/bucketHostname.ts"],"sourcesContent":["import {\n  ArnHostnameParams,\n  BucketHostnameParams,\n  DOT_PATTERN,\n  getArnResources,\n  getSuffix,\n  getSuffixForArnEndpoint,\n  isBucketNameOptions,\n  isDnsCompatibleBucketName,\n  validateAccountId,\n  validateArnEndpointOptions,\n  validateDNSHostLabel,\n  validateNoDualstack,\n  validateNoFIPS,\n  validateOutpostService,\n  validatePartition,\n  validateRegion,\n  validateS3Service,\n  validateService,\n} from \"./bucketHostnameUtils\";\n\nexport interface BucketHostname {\n  hostname: string;\n  bucketEndpoint: boolean;\n  signingRegion?: string;\n  signingService?: string;\n}\n\nexport const bucketHostname = (options: BucketHostnameParams | ArnHostnameParams): BucketHostname => {\n  const { isCustomEndpoint, baseHostname, dualstackEndpoint, accelerateEndpoint } = options;\n\n  if (isCustomEndpoint) {\n    if (dualstackEndpoint) throw new Error(\"Dualstack endpoint is not supported with custom endpoint\");\n    if (accelerateEndpoint) throw new Error(\"Accelerate endpoint is not supported with custom endpoint\");\n  }\n\n  return isBucketNameOptions(options)\n    ? // Construct endpoint when bucketName is a string referring to a bucket name\n      getEndpointFromBucketName({ ...options, isCustomEndpoint })\n    : // Construct endpoint when bucketName is an ARN referring to an S3 resource like Access Point\n      getEndpointFromArn({ ...options, isCustomEndpoint });\n};\n\nconst getEndpointFromArn = (options: ArnHostnameParams & { isCustomEndpoint: boolean }): BucketHostname => {\n  const { isCustomEndpoint, baseHostname } = options;\n  const [clientRegion, hostnameSuffix] = isCustomEndpoint\n    ? [options.clientRegion, baseHostname]\n    : // Infer client region and hostname suffix from hostname from endpoints.json, like `s3.us-west-2.amazonaws.com`\n      getSuffixForArnEndpoint(baseHostname);\n\n  const {\n    pathStyleEndpoint,\n    dualstackEndpoint = false,\n    accelerateEndpoint = false,\n    tlsCompatible = true,\n    useArnRegion,\n    bucketName,\n    clientPartition = \"aws\",\n    clientSigningRegion = clientRegion,\n  } = options;\n\n  validateArnEndpointOptions({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });\n\n  // Validate and parse the ARN supplied as a bucket name\n  const { service, partition, accountId, region, resource } = bucketName;\n  validateService(service);\n  validatePartition(partition, { clientPartition });\n  validateAccountId(accountId);\n  validateRegion(region, { useArnRegion, clientRegion, clientSigningRegion });\n  const { accesspointName, outpostId } = getArnResources(resource);\n  validateDNSHostLabel(`${accesspointName}-${accountId}`, { tlsCompatible });\n\n  const endpointRegion = useArnRegion ? region : clientRegion;\n  const signingRegion = useArnRegion ? region : clientSigningRegion;\n  if (outpostId) {\n    // if this is an Outpost ARN\n    validateOutpostService(service);\n    validateDNSHostLabel(outpostId, { tlsCompatible });\n    validateNoDualstack(dualstackEndpoint);\n    validateNoFIPS(endpointRegion);\n    const hostnamePrefix = `${accesspointName}-${accountId}.${outpostId}`;\n    return {\n      bucketEndpoint: true,\n      hostname: `${hostnamePrefix}${isCustomEndpoint ? \"\" : `.s3-outposts.${endpointRegion}`}.${hostnameSuffix}`,\n      signingRegion,\n      signingService: \"s3-outposts\",\n    };\n  }\n  // construct endpoint from Accesspoint ARN\n  validateS3Service(service);\n  const hostnamePrefix = `${accesspointName}-${accountId}`;\n  return {\n    bucketEndpoint: true,\n    hostname: `${hostnamePrefix}${\n      isCustomEndpoint ? \"\" : `.s3-accesspoint${dualstackEndpoint ? \".dualstack\" : \"\"}.${endpointRegion}`\n    }.${hostnameSuffix}`,\n    signingRegion,\n  };\n};\n\nconst getEndpointFromBucketName = ({\n  accelerateEndpoint = false,\n  clientRegion: region,\n  baseHostname,\n  bucketName,\n  dualstackEndpoint = false,\n  pathStyleEndpoint = false,\n  tlsCompatible = true,\n  isCustomEndpoint = false,\n}: BucketHostnameParams & { isCustomEndpoint: boolean }): BucketHostname => {\n  const [clientRegion, hostnameSuffix] = isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname);\n  if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || (tlsCompatible && DOT_PATTERN.test(bucketName))) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname,\n    };\n  }\n\n  if (accelerateEndpoint) {\n    baseHostname = `s3-accelerate${dualstackEndpoint ? \".dualstack\" : \"\"}.${hostnameSuffix}`;\n  } else if (dualstackEndpoint) {\n    baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;\n  }\n\n  return {\n    bucketEndpoint: true,\n    hostname: `${bucketName}.${baseHostname}`,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}