{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { isTranslateTextInput, isTextToSpeechInput, isSpeechToTextInput } from '../Predictions';\nimport { AbstractPredictionsProvider } from './AbstractPredictionsProvider';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('AbstractConvertPredictionsProvider');\n\nvar AbstractConvertPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AbstractConvertPredictionsProvider, _super);\n\n  function AbstractConvertPredictionsProvider() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AbstractConvertPredictionsProvider.prototype.getCategory = function () {\n    return 'Convert';\n  };\n\n  AbstractConvertPredictionsProvider.prototype.convert = function (input) {\n    if (isTranslateTextInput(input)) {\n      logger.debug('translateText');\n      return this.translateText(input);\n    } else if (isTextToSpeechInput(input)) {\n      logger.debug('textToSpeech');\n      return this.convertTextToSpeech(input);\n    } else if (isSpeechToTextInput(input)) {\n      logger.debug('textToSpeech');\n      return this.convertSpeechToText(input);\n    }\n  };\n\n  AbstractConvertPredictionsProvider.prototype.translateText = function (translateTextInput) {\n    throw new Error('convertText is not implemented by this provider');\n  };\n\n  AbstractConvertPredictionsProvider.prototype.convertTextToSpeech = function (textToSpeechInput) {\n    throw new Error('convertTextToSpeech is not implemented by this provider');\n  };\n\n  AbstractConvertPredictionsProvider.prototype.convertSpeechToText = function (speechToTextInput) {\n    throw new Error('convertSpeechToText is not implemented by this provider');\n  };\n\n  return AbstractConvertPredictionsProvider;\n}(AbstractPredictionsProvider);\n\nexport { AbstractConvertPredictionsProvider };","map":{"version":3,"mappings":"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","names":["isTranslateTextInput","isTextToSpeechInput","isSpeechToTextInput","AbstractPredictionsProvider","ConsoleLogger","Logger","logger","__extends","AbstractConvertPredictionsProvider","input","debug","translateText","convertTextToSpeech","convertSpeechToText","translateTextInput","Error","textToSpeechInput","speechToTextInput"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/predictions/src/types/Providers/AbstractConvertPredictionsProvider.ts"],"sourcesContent":["import {\n\tTranslateTextInput,\n\tTextToSpeechInput,\n\tSpeechToTextInput,\n\tisTranslateTextInput,\n\tisTextToSpeechInput,\n\tisSpeechToTextInput,\n\tTranslateTextOutput,\n\tTextToSpeechOutput,\n\tSpeechToTextOutput,\n} from '../Predictions';\nimport { AbstractPredictionsProvider } from './AbstractPredictionsProvider';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nconst logger = new Logger('AbstractConvertPredictionsProvider');\n\nexport abstract class AbstractConvertPredictionsProvider extends AbstractPredictionsProvider {\n\tgetCategory(): string {\n\t\treturn 'Convert';\n\t}\n\n\tconvert(\n\t\tinput: TranslateTextInput | TextToSpeechInput | SpeechToTextInput\n\t): Promise<TextToSpeechOutput | TranslateTextOutput | SpeechToTextOutput> {\n\t\tif (isTranslateTextInput(input)) {\n\t\t\tlogger.debug('translateText');\n\t\t\treturn this.translateText(input);\n\t\t} else if (isTextToSpeechInput(input)) {\n\t\t\tlogger.debug('textToSpeech');\n\t\t\treturn this.convertTextToSpeech(input);\n\t\t} else if (isSpeechToTextInput(input)) {\n\t\t\tlogger.debug('textToSpeech');\n\t\t\treturn this.convertSpeechToText(input);\n\t\t}\n\t}\n\n\tprotected translateText(\n\t\ttranslateTextInput: TranslateTextInput\n\t): Promise<TranslateTextOutput> {\n\t\tthrow new Error('convertText is not implemented by this provider');\n\t}\n\n\tprotected convertTextToSpeech(\n\t\ttextToSpeechInput: TextToSpeechInput\n\t): Promise<TextToSpeechOutput> {\n\t\tthrow new Error('convertTextToSpeech is not implemented by this provider');\n\t}\n\n\tprotected convertSpeechToText(\n\t\tspeechToTextInput: SpeechToTextInput\n\t): Promise<SpeechToTextOutput> {\n\t\tthrow new Error('convertSpeechToText is not implemented by this provider');\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}