{"ast":null,"code":"import _slicedToArray from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/regenerator/index.js\";\nimport { clear as _clear, colorToHsl, colorToRgb, deepExtend, drawConnectLine as _drawConnectLine, drawGrabLine as _drawGrabLine, drawParticle as _drawParticle, drawParticlePlugin as _drawParticlePlugin, drawPlugin as _drawPlugin, getRangeValue, getStyleFromHsl, getStyleFromRgb, gradient, paintBase as _paintBase } from \"../Utils\";\nimport { Constants } from \"./Utils\";\nexport var Canvas = /*#__PURE__*/function () {\n  function Canvas(container) {\n    _classCallCheck(this, Canvas);\n\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  _createClass(Canvas, [{\n    key: \"init\",\n    value: function init() {\n      this.resize();\n      this.initStyle();\n      this.initCover();\n      this.initTrail();\n      this.initBackground();\n      this.paint();\n    }\n  }, {\n    key: \"loadCanvas\",\n    value: function loadCanvas(canvas) {\n      var _a;\n\n      if (this.generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n\n      this.generatedCanvas = canvas.dataset && Constants.generatedAttribute in canvas.dataset ? canvas.dataset[Constants.generatedAttribute] === \"true\" : this.generatedCanvas;\n      this.element = canvas;\n      this.originalStyle = deepExtend({}, this.element.style);\n      this.size.height = canvas.offsetHeight;\n      this.size.width = canvas.offsetWidth;\n      this.context = this.element.getContext(\"2d\");\n      this.container.retina.init();\n      this.initBackground();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this = this;\n\n      var _a;\n\n      if (this.generatedCanvas) {\n        (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n      }\n\n      this.draw(function (ctx) {\n        _clear(ctx, _this.size);\n      });\n    }\n  }, {\n    key: \"paint\",\n    value: function paint() {\n      var _this2 = this;\n\n      var options = this.container.actualOptions;\n      this.draw(function (ctx) {\n        if (options.backgroundMask.enable && options.backgroundMask.cover) {\n          _clear(ctx, _this2.size);\n\n          _this2.paintBase(_this2.coverColorStyle);\n        } else {\n          _this2.paintBase();\n        }\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _this3 = this;\n\n      var options = this.container.actualOptions;\n      var trail = options.particles.move.trail;\n\n      if (options.backgroundMask.enable) {\n        this.paint();\n      } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n        this.paintBase(getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n      } else {\n        this.draw(function (ctx) {\n          _clear(ctx, _this3.size);\n        });\n      }\n    }\n  }, {\n    key: \"windowResize\",\n    value: function () {\n      var _windowResize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var container, needsRefresh, _iterator, _step, _step$value, plugin;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.element) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                container = this.container;\n                this.resize();\n                needsRefresh = container.updateActualOptions();\n                container.particles.setDensity();\n                _iterator = _createForOfIteratorHelper(container.plugins);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _step$value = _slicedToArray(_step.value, 2), plugin = _step$value[1];\n\n                    if (plugin.resize !== undefined) {\n                      plugin.resize();\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                if (!needsRefresh) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 11;\n                return container.refresh();\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function windowResize() {\n        return _windowResize.apply(this, arguments);\n      }\n\n      return windowResize;\n    }()\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      if (!this.element) {\n        return;\n      }\n\n      var container = this.container;\n      var pxRatio = container.retina.pixelRatio;\n      var size = container.canvas.size;\n      var oldSize = Object.assign({}, size);\n      size.width = this.element.offsetWidth * pxRatio;\n      size.height = this.element.offsetHeight * pxRatio;\n      this.element.width = size.width;\n      this.element.height = size.height;\n\n      if (this.container.started) {\n        this.resizeFactor = {\n          width: size.width / oldSize.width,\n          height: size.height / oldSize.height\n        };\n      }\n    }\n  }, {\n    key: \"drawConnectLine\",\n    value: function drawConnectLine(p1, p2) {\n      var _this4 = this;\n\n      this.draw(function (ctx) {\n        var _a;\n\n        var lineStyle = _this4.lineStyle(p1, p2);\n\n        if (!lineStyle) {\n          return;\n        }\n\n        var pos1 = p1.getPosition();\n        var pos2 = p2.getPosition();\n\n        _drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : _this4.container.retina.linksWidth, lineStyle, pos1, pos2);\n      });\n    }\n  }, {\n    key: \"drawGrabLine\",\n    value: function drawGrabLine(particle, lineColor, opacity, mousePos) {\n      var container = this.container;\n      this.draw(function (ctx) {\n        var _a;\n\n        var beginPos = particle.getPosition();\n\n        _drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n      });\n    }\n  }, {\n    key: \"drawParticle\",\n    value: function drawParticle(particle, delta) {\n      var _this5 = this;\n\n      var _a, _b, _c, _d, _e, _f;\n\n      if (particle.spawning || particle.destroyed) {\n        return;\n      }\n\n      var pfColor = particle.getFillColor();\n      var psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n\n      if (!pfColor && !psColor) {\n        return;\n      }\n\n      var _this$getPluginPartic = this.getPluginParticleColors(particle),\n          _this$getPluginPartic2 = _slicedToArray(_this$getPluginPartic, 2),\n          fColor = _this$getPluginPartic2[0],\n          sColor = _this$getPluginPartic2[1];\n\n      var pOptions = particle.options;\n      var twinkle = pOptions.twinkle.particles;\n      var twinkling = twinkle.enable && Math.random() < twinkle.frequency;\n\n      if (!fColor || !sColor) {\n        var twinkleRgb = colorToHsl(twinkle.color);\n\n        if (!fColor) {\n          fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : pfColor ? pfColor : undefined;\n        }\n\n        if (!sColor) {\n          sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : psColor ? psColor : undefined;\n        }\n      }\n\n      var options = this.container.actualOptions;\n      var zIndexOptions = particle.options.zIndex;\n      var zOpacityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.opacityRate);\n      var radius = particle.getRadius();\n      var opacity = twinkling ? getRangeValue(twinkle.opacity) : (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n      var strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity;\n      var zOpacity = opacity * zOpacityFactor;\n      var fillColorValue = fColor ? getStyleFromHsl(fColor, zOpacity) : undefined;\n\n      if (!fillColorValue && !sColor) {\n        return;\n      }\n\n      this.draw(function (ctx) {\n        var zSizeFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.sizeRate);\n        var zStrokeOpacity = strokeOpacity * zOpacityFactor;\n        var strokeColorValue = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : fillColorValue;\n\n        if (radius <= 0) {\n          return;\n        }\n\n        var container = _this5.container;\n\n        var _iterator2 = _createForOfIteratorHelper(container.particles.updaters),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var updater = _step2.value;\n\n            if (updater.beforeDraw) {\n              updater.beforeDraw(particle);\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        _drawParticle(_this5.container, ctx, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow, particle.gradient);\n\n        var _iterator3 = _createForOfIteratorHelper(container.particles.updaters),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _updater = _step3.value;\n\n            if (_updater.afterDraw) {\n              _updater.afterDraw(particle);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      });\n    }\n  }, {\n    key: \"drawPlugin\",\n    value: function drawPlugin(plugin, delta) {\n      this.draw(function (ctx) {\n        _drawPlugin(ctx, plugin, delta);\n      });\n    }\n  }, {\n    key: \"drawParticlePlugin\",\n    value: function drawParticlePlugin(plugin, particle, delta) {\n      this.draw(function (ctx) {\n        _drawParticlePlugin(ctx, plugin, particle, delta);\n      });\n    }\n  }, {\n    key: \"initBackground\",\n    value: function initBackground() {\n      var options = this.container.actualOptions;\n      var background = options.background;\n      var element = this.element;\n      var elementStyle = element === null || element === void 0 ? void 0 : element.style;\n\n      if (!elementStyle) {\n        return;\n      }\n\n      if (background.color) {\n        var color = colorToRgb(background.color);\n        elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n      } else {\n        elementStyle.backgroundColor = \"\";\n      }\n\n      elementStyle.backgroundImage = background.image || \"\";\n      elementStyle.backgroundPosition = background.position || \"\";\n      elementStyle.backgroundRepeat = background.repeat || \"\";\n      elementStyle.backgroundSize = background.size || \"\";\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(cb) {\n      if (!this.context) {\n        return;\n      }\n\n      return cb(this.context);\n    }\n  }, {\n    key: \"initCover\",\n    value: function initCover() {\n      var options = this.container.actualOptions;\n      var cover = options.backgroundMask.cover;\n      var color = cover.color;\n      var coverRgb = colorToRgb(color);\n\n      if (coverRgb) {\n        var coverColor = {\n          r: coverRgb.r,\n          g: coverRgb.g,\n          b: coverRgb.b,\n          a: cover.opacity\n        };\n        this.coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n        console.log(this.coverColorStyle);\n      }\n    }\n  }, {\n    key: \"initTrail\",\n    value: function initTrail() {\n      var options = this.container.actualOptions;\n      var trail = options.particles.move.trail;\n      var fillColor = colorToRgb(trail.fillColor);\n\n      if (fillColor) {\n        var _trail = options.particles.move.trail;\n        this.trailFillColor = {\n          r: fillColor.r,\n          g: fillColor.g,\n          b: fillColor.b,\n          a: 1 / _trail.length\n        };\n      }\n    }\n  }, {\n    key: \"getPluginParticleColors\",\n    value: function getPluginParticleColors(particle) {\n      var fColor;\n      var sColor;\n\n      var _iterator4 = _createForOfIteratorHelper(this.container.plugins),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _step4$value = _slicedToArray(_step4.value, 2),\n              plugin = _step4$value[1];\n\n          if (!fColor && plugin.particleFillColor) {\n            fColor = colorToHsl(plugin.particleFillColor(particle));\n          }\n\n          if (!sColor && plugin.particleStrokeColor) {\n            sColor = colorToHsl(plugin.particleStrokeColor(particle));\n          }\n\n          if (fColor && sColor) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return [fColor, sColor];\n    }\n  }, {\n    key: \"initStyle\",\n    value: function initStyle() {\n      var element = this.element,\n          options = this.container.actualOptions;\n\n      if (!element) {\n        return;\n      }\n\n      var originalStyle = this.originalStyle;\n\n      if (options.fullScreen.enable) {\n        this.originalStyle = deepExtend({}, element.style);\n        element.style.setProperty(\"position\", \"fixed\", \"important\");\n        element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n        element.style.setProperty(\"top\", \"0\", \"important\");\n        element.style.setProperty(\"left\", \"0\", \"important\");\n        element.style.setProperty(\"width\", \"100%\", \"important\");\n        element.style.setProperty(\"height\", \"100%\", \"important\");\n      } else if (originalStyle) {\n        element.style.position = originalStyle.position;\n        element.style.zIndex = originalStyle.zIndex;\n        element.style.top = originalStyle.top;\n        element.style.left = originalStyle.left;\n        element.style.width = originalStyle.width;\n        element.style.height = originalStyle.height;\n      }\n\n      for (var key in options.style) {\n        if (!key || !options.style) {\n          continue;\n        }\n\n        var value = options.style[key];\n\n        if (!value) {\n          continue;\n        }\n\n        element.style.setProperty(key, value, \"important\");\n      }\n    }\n  }, {\n    key: \"paintBase\",\n    value: function paintBase(baseColor) {\n      var _this6 = this;\n\n      this.draw(function (ctx) {\n        _paintBase(ctx, _this6.size, baseColor);\n      });\n    }\n  }, {\n    key: \"lineStyle\",\n    value: function lineStyle(p1, p2) {\n      var _this7 = this;\n\n      return this.draw(function (ctx) {\n        var options = _this7.container.actualOptions;\n        var connectOptions = options.interactivity.modes.connect;\n        return gradient(ctx, p1, p2, connectOptions.links.opacity);\n      });\n    }\n  }]);\n\n  return Canvas;\n}();","map":{"version":3,"names":["clear","colorToHsl","colorToRgb","deepExtend","drawConnectLine","drawGrabLine","drawParticle","drawParticlePlugin","drawPlugin","getRangeValue","getStyleFromHsl","getStyleFromRgb","gradient","paintBase","Constants","Canvas","container","size","height","width","context","generatedCanvas","resize","initStyle","initCover","initTrail","initBackground","paint","canvas","_a","element","remove","dataset","generatedAttribute","originalStyle","style","offsetHeight","offsetWidth","getContext","retina","init","draw","ctx","options","actualOptions","backgroundMask","enable","cover","coverColorStyle","trail","particles","move","length","trailFillColor","needsRefresh","updateActualOptions","setDensity","plugins","plugin","undefined","refresh","pxRatio","pixelRatio","oldSize","Object","assign","started","resizeFactor","p1","p2","lineStyle","pos1","getPosition","pos2","linksWidth","particle","lineColor","opacity","mousePos","beginPos","delta","_b","_c","_d","_e","_f","spawning","destroyed","pfColor","getFillColor","psColor","getStrokeColor","getPluginParticleColors","fColor","sColor","pOptions","twinkle","twinkling","Math","random","frequency","twinkleRgb","color","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","radius","getRadius","bubble","value","strokeOpacity","stroke","zOpacity","fillColorValue","zSizeFactor","sizeRate","zStrokeOpacity","strokeColorValue","updaters","updater","beforeDraw","composite","shadow","afterDraw","background","elementStyle","backgroundColor","backgroundImage","image","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","cb","coverRgb","coverColor","r","g","b","a","console","log","fillColor","particleFillColor","particleStrokeColor","fullScreen","setProperty","toString","top","left","key","baseColor","connectOptions","interactivity","modes","connect","links"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/tsparticles/esm/Core/Canvas.js"],"sourcesContent":["import { clear, colorToHsl, colorToRgb, deepExtend, drawConnectLine, drawGrabLine, drawParticle, drawParticlePlugin, drawPlugin, getRangeValue, getStyleFromHsl, getStyleFromRgb, gradient, paintBase, } from \"../Utils\";\nimport { Constants } from \"./Utils\";\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this.context = null;\n        this.generatedCanvas = false;\n    }\n    init() {\n        this.resize();\n        this.initStyle();\n        this.initCover();\n        this.initTrail();\n        this.initBackground();\n        this.paint();\n    }\n    loadCanvas(canvas) {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.generatedCanvas =\n            canvas.dataset && Constants.generatedAttribute in canvas.dataset\n                ? canvas.dataset[Constants.generatedAttribute] === \"true\"\n                : this.generatedCanvas;\n        this.element = canvas;\n        this.originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this.context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    destroy() {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.draw((ctx) => {\n            clear(ctx, this.size);\n        });\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                this.paintBase(this.coverColorStyle);\n            }\n            else {\n                this.paintBase();\n            }\n        });\n    }\n    clear() {\n        const options = this.container.actualOptions;\n        const trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n            this.paintBase(getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n        }\n        else {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    async windowResize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container;\n        this.resize();\n        const needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        for (const [, plugin] of container.plugins) {\n            if (plugin.resize !== undefined) {\n                plugin.resize();\n            }\n        }\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container;\n        const pxRatio = container.retina.pixelRatio;\n        const size = container.canvas.size;\n        const oldSize = Object.assign({}, size);\n        size.width = this.element.offsetWidth * pxRatio;\n        size.height = this.element.offsetHeight * pxRatio;\n        this.element.width = size.width;\n        this.element.height = size.height;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n    }\n    drawConnectLine(p1, p2) {\n        this.draw((ctx) => {\n            var _a;\n            const lineStyle = this.lineStyle(p1, p2);\n            if (!lineStyle) {\n                return;\n            }\n            const pos1 = p1.getPosition();\n            const pos2 = p2.getPosition();\n            drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n        });\n    }\n    drawGrabLine(particle, lineColor, opacity, mousePos) {\n        const container = this.container;\n        this.draw((ctx) => {\n            var _a;\n            const beginPos = particle.getPosition();\n            drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n        });\n    }\n    drawParticle(particle, delta) {\n        var _a, _b, _c, _d, _e, _f;\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const pfColor = particle.getFillColor();\n        const psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n        if (!pfColor && !psColor) {\n            return;\n        }\n        let [fColor, sColor] = this.getPluginParticleColors(particle);\n        const pOptions = particle.options;\n        const twinkle = pOptions.twinkle.particles;\n        const twinkling = twinkle.enable && Math.random() < twinkle.frequency;\n        if (!fColor || !sColor) {\n            const twinkleRgb = colorToHsl(twinkle.color);\n            if (!fColor) {\n                fColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : pfColor ? pfColor : undefined;\n            }\n            if (!sColor) {\n                sColor = twinkling && twinkleRgb !== undefined ? twinkleRgb : psColor ? psColor : undefined;\n            }\n        }\n        const options = this.container.actualOptions;\n        const zIndexOptions = particle.options.zIndex;\n        const zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate;\n        const radius = particle.getRadius();\n        const opacity = twinkling\n            ? getRangeValue(twinkle.opacity)\n            : (_d = (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n        const strokeOpacity = (_f = (_e = particle.stroke) === null || _e === void 0 ? void 0 : _e.opacity) !== null && _f !== void 0 ? _f : opacity;\n        const zOpacity = opacity * zOpacityFactor;\n        const fillColorValue = fColor ? getStyleFromHsl(fColor, zOpacity) : undefined;\n        if (!fillColorValue && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            const zSizeFactor = (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate;\n            const zStrokeOpacity = strokeOpacity * zOpacityFactor;\n            const strokeColorValue = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : fillColorValue;\n            if (radius <= 0) {\n                return;\n            }\n            const container = this.container;\n            for (const updater of container.particles.updaters) {\n                if (updater.beforeDraw) {\n                    updater.beforeDraw(particle);\n                }\n            }\n            drawParticle(this.container, ctx, particle, delta, fillColorValue, strokeColorValue, options.backgroundMask.enable, options.backgroundMask.composite, radius * zSizeFactor, zOpacity, particle.options.shadow, particle.gradient);\n            for (const updater of container.particles.updaters) {\n                if (updater.afterDraw) {\n                    updater.afterDraw(particle);\n                }\n            }\n        });\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => {\n            drawPlugin(ctx, plugin, delta);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => {\n            drawParticlePlugin(ctx, plugin, particle, delta);\n        });\n    }\n    initBackground() {\n        const options = this.container.actualOptions;\n        const background = options.background;\n        const element = this.element;\n        const elementStyle = element === null || element === void 0 ? void 0 : element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = colorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    draw(cb) {\n        if (!this.context) {\n            return;\n        }\n        return cb(this.context);\n    }\n    initCover() {\n        const options = this.container.actualOptions;\n        const cover = options.backgroundMask.cover;\n        const color = cover.color;\n        const coverRgb = colorToRgb(color);\n        if (coverRgb) {\n            const coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity,\n            };\n            this.coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n            console.log(this.coverColorStyle);\n        }\n    }\n    initTrail() {\n        const options = this.container.actualOptions;\n        const trail = options.particles.move.trail;\n        const fillColor = colorToRgb(trail.fillColor);\n        if (fillColor) {\n            const trail = options.particles.move.trail;\n            this.trailFillColor = {\n                r: fillColor.r,\n                g: fillColor.g,\n                b: fillColor.b,\n                a: 1 / trail.length,\n            };\n        }\n    }\n    getPluginParticleColors(particle) {\n        let fColor;\n        let sColor;\n        for (const [, plugin] of this.container.plugins) {\n            if (!fColor && plugin.particleFillColor) {\n                fColor = colorToHsl(plugin.particleFillColor(particle));\n            }\n            if (!sColor && plugin.particleStrokeColor) {\n                sColor = colorToHsl(plugin.particleStrokeColor(particle));\n            }\n            if (fColor && sColor) {\n                break;\n            }\n        }\n        return [fColor, sColor];\n    }\n    initStyle() {\n        const element = this.element, options = this.container.actualOptions;\n        if (!element) {\n            return;\n        }\n        const originalStyle = this.originalStyle;\n        if (options.fullScreen.enable) {\n            this.originalStyle = deepExtend({}, element.style);\n            element.style.setProperty(\"position\", \"fixed\", \"important\");\n            element.style.setProperty(\"z-index\", options.fullScreen.zIndex.toString(10), \"important\");\n            element.style.setProperty(\"top\", \"0\", \"important\");\n            element.style.setProperty(\"left\", \"0\", \"important\");\n            element.style.setProperty(\"width\", \"100%\", \"important\");\n            element.style.setProperty(\"height\", \"100%\", \"important\");\n        }\n        else if (originalStyle) {\n            element.style.position = originalStyle.position;\n            element.style.zIndex = originalStyle.zIndex;\n            element.style.top = originalStyle.top;\n            element.style.left = originalStyle.left;\n            element.style.width = originalStyle.width;\n            element.style.height = originalStyle.height;\n        }\n        for (const key in options.style) {\n            if (!key || !options.style) {\n                continue;\n            }\n            const value = options.style[key];\n            if (!value) {\n                continue;\n            }\n            element.style.setProperty(key, value, \"important\");\n        }\n    }\n    paintBase(baseColor) {\n        this.draw((ctx) => {\n            paintBase(ctx, this.size, baseColor);\n        });\n    }\n    lineStyle(p1, p2) {\n        return this.draw((ctx) => {\n            const options = this.container.actualOptions;\n            const connectOptions = options.interactivity.modes.connect;\n            return gradient(ctx, p1, p2, connectOptions.links.opacity);\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}