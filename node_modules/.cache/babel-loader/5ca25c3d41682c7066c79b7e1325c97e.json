{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutBucketWebsiteRequest } from \"../models/models_0\";\nimport { deserializeAws_restXmlPutBucketWebsiteCommand, serializeAws_restXmlPutBucketWebsiteCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Sets the configuration of the website that is specified in the <code>website</code>\n *          subresource. To configure a bucket as a website, you can add this subresource on the bucket\n *          with website configuration information such as the file name of the index document and any\n *          redirect rules. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html\">Hosting Websites on Amazon S3</a>.</p>\n *\n *          <p>This PUT operation requires the <code>S3:PutBucketWebsite</code> permission. By default,\n *          only the bucket owner can configure the website attached to a bucket; however, bucket\n *          owners can allow other users to set the website configuration by writing a bucket policy\n *          that grants them the <code>S3:PutBucketWebsite</code> permission.</p>\n *\n *          <p>To redirect all website requests sent to the bucket's website endpoint, you add a\n *          website configuration with the following elements. Because all requests are sent to another\n *          website, you don't need to provide index document name for the bucket.</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <code>WebsiteConfiguration</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>RedirectAllRequestsTo</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HostName</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Protocol</code>\n *                </p>\n *             </li>\n *          </ul>\n *\n *          <p>If you want granular control over redirects, you can use the following elements to add\n *          routing rules that describe conditions for redirecting requests and information about the\n *          redirect destination. In this case, the website configuration must provide an index\n *          document for the bucket, because some requests might not be redirected. </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <code>WebsiteConfiguration</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>IndexDocument</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Suffix</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>ErrorDocument</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Key</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>RoutingRules</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>RoutingRule</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Condition</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HttpErrorCodeReturnedEquals</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>KeyPrefixEquals</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Redirect</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Protocol</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HostName</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>ReplaceKeyPrefixWith</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>ReplaceKeyWith</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HttpRedirectCode</code>\n *                </p>\n *             </li>\n *          </ul>\n *\n *          <p>Amazon S3 has a limitation of 50 routing rules per website configuration. If you require more\n *          than 50 routing rules, you can use object redirect. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html\">Configuring an\n *             Object Redirect</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n */\n\nvar PutBucketWebsiteCommand =\n/** @class */\nfunction (_super) {\n  __extends(PutBucketWebsiteCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function PutBucketWebsiteCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  PutBucketWebsiteCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"PutBucketWebsiteCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutBucketWebsiteRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutBucketWebsiteCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlPutBucketWebsiteCommand(input, context);\n  };\n\n  PutBucketWebsiteCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlPutBucketWebsiteCommand(output, context);\n  };\n\n  return PutBucketWebsiteCommand;\n}($Command);\n\nexport { PutBucketWebsiteCommand };","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,uBAAT,QAAwC,oBAAxC;AACA,SAASC,6CAAT,EAAwDC,2CAAxD,QAA4G,0BAA5G;AACA,SAASC,uBAAT,QAAwC,qCAAxC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,uBAAuB;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC3DT,SAAS,CAACQ,uBAAD,EAA0BC,MAA1B,CAAT,CAD2D,CAE3D;EACA;;;EACA,SAASD,uBAAT,CAAiCE,KAAjC,EAAwC;IACpC,IAAIC,KAAK,GACT;IACAF,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;IAGAD,KAAK,CAACD,KAAN,GAAcA,KAAd;IACA,OAAOC,KAAP,CALoC,CAMpC;EACH;EACD;AACJ;AACA;;;EACIH,uBAAuB,CAACK,SAAxB,CAAkCC,iBAAlC,GAAsD,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;IACjG,KAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,KAAKH,eAAL,CAAqBC,GAArB,CAAyBf,uBAAuB,CAACY,aAAD,CAAhD;IACA,IAAIM,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;IACA,IAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;IACA,IAAIC,UAAU,GAAG,UAAjB;IACA,IAAIC,WAAW,GAAG,yBAAlB;IACA,IAAIC,uBAAuB,GAAG;MAC1BH,MAAM,EAAEA,MADkB;MAE1BC,UAAU,EAAEA,UAFc;MAG1BC,WAAW,EAAEA,WAHa;MAI1BE,uBAAuB,EAAE3B,uBAAuB,CAAC4B,kBAJvB;MAK1BC,wBAAwB,EAAE,UAAUC,MAAV,EAAkB;QAAE,OAAOA,MAAP;MAAgB;IALpC,CAA9B;IAOA,IAAIC,cAAc,GAAGhB,aAAa,CAACgB,cAAnC;IACA,OAAOV,KAAK,CAACW,OAAN,CAAc,UAAUC,OAAV,EAAmB;MACpC,OAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuCjB,OAAO,IAAI,EAAlD,CAAP;IACH,CAFM,EAEJU,uBAFI,CAAP;EAGH,CAlBD;;EAmBAnB,uBAAuB,CAACK,SAAxB,CAAkCO,SAAlC,GAA8C,UAAUV,KAAV,EAAiB0B,OAAjB,EAA0B;IACpE,OAAOjC,2CAA2C,CAACO,KAAD,EAAQ0B,OAAR,CAAlD;EACH,CAFD;;EAGA5B,uBAAuB,CAACK,SAAxB,CAAkCQ,WAAlC,GAAgD,UAAUU,MAAV,EAAkBK,OAAlB,EAA2B;IACvE,OAAOlC,6CAA6C,CAAC6B,MAAD,EAASK,OAAT,CAApD;EACH,CAFD;;EAGA,OAAO5B,uBAAP;AACH,CAzC4C,CAyC3CD,QAzC2C,CAA7C;;AA0CA,SAASC,uBAAT","names":["PutBucketWebsiteRequest","deserializeAws_restXmlPutBucketWebsiteCommand","serializeAws_restXmlPutBucketWebsiteCommand","getBucketEndpointPlugin","getSerdePlugin","Command","$Command","__extends","input","_super","_this","PutBucketWebsiteCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","resolve","request","handle","context"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-sdk/client-s3/commands/PutBucketWebsiteCommand.ts"],"sourcesContent":["import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { PutBucketWebsiteRequest } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlPutBucketWebsiteCommand,\n  serializeAws_restXmlPutBucketWebsiteCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type PutBucketWebsiteCommandInput = PutBucketWebsiteRequest;\nexport type PutBucketWebsiteCommandOutput = __MetadataBearer;\n\n/**\n * <p>Sets the configuration of the website that is specified in the <code>website</code>\n *          subresource. To configure a bucket as a website, you can add this subresource on the bucket\n *          with website configuration information such as the file name of the index document and any\n *          redirect rules. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html\">Hosting Websites on Amazon S3</a>.</p>\n *\n *          <p>This PUT operation requires the <code>S3:PutBucketWebsite</code> permission. By default,\n *          only the bucket owner can configure the website attached to a bucket; however, bucket\n *          owners can allow other users to set the website configuration by writing a bucket policy\n *          that grants them the <code>S3:PutBucketWebsite</code> permission.</p>\n *\n *          <p>To redirect all website requests sent to the bucket's website endpoint, you add a\n *          website configuration with the following elements. Because all requests are sent to another\n *          website, you don't need to provide index document name for the bucket.</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <code>WebsiteConfiguration</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>RedirectAllRequestsTo</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HostName</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Protocol</code>\n *                </p>\n *             </li>\n *          </ul>\n *\n *          <p>If you want granular control over redirects, you can use the following elements to add\n *          routing rules that describe conditions for redirecting requests and information about the\n *          redirect destination. In this case, the website configuration must provide an index\n *          document for the bucket, because some requests might not be redirected. </p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <code>WebsiteConfiguration</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>IndexDocument</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Suffix</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>ErrorDocument</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Key</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>RoutingRules</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>RoutingRule</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Condition</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HttpErrorCodeReturnedEquals</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>KeyPrefixEquals</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Redirect</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>Protocol</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HostName</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>ReplaceKeyPrefixWith</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>ReplaceKeyWith</code>\n *                </p>\n *             </li>\n *             <li>\n *                <p>\n *                   <code>HttpRedirectCode</code>\n *                </p>\n *             </li>\n *          </ul>\n *\n *          <p>Amazon S3 has a limitation of 50 routing rules per website configuration. If you require more\n *          than 50 routing rules, you can use object redirect. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html\">Configuring an\n *             Object Redirect</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>\n */\nexport class PutBucketWebsiteCommand extends $Command<\n  PutBucketWebsiteCommandInput,\n  PutBucketWebsiteCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: PutBucketWebsiteCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<PutBucketWebsiteCommandInput, PutBucketWebsiteCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"PutBucketWebsiteCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: PutBucketWebsiteRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: PutBucketWebsiteCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restXmlPutBucketWebsiteCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<PutBucketWebsiteCommandOutput> {\n    return deserializeAws_restXmlPutBucketWebsiteCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}