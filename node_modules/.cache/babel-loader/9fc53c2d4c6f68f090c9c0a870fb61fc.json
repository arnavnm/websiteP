{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n};\n\nimport { CloudWatchLogsClient, CreateLogGroupCommand, CreateLogStreamCommand, DescribeLogGroupsCommand, DescribeLogStreamsCommand, GetLogEventsCommand, PutLogEventsCommand } from '@aws-sdk/client-cloudwatch-logs';\nimport { Credentials } from '../..';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { getAmplifyUserAgent } from '../Platform';\nimport { parseMobileHubConfig } from '../Parser';\nimport { AWS_CLOUDWATCH_BASE_BUFFER_SIZE, AWS_CLOUDWATCH_CATEGORY, AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE, AWS_CLOUDWATCH_MAX_EVENT_SIZE, AWS_CLOUDWATCH_PROVIDER_NAME, NO_CREDS_ERROR_STRING, RETRY_ERROR_CODES } from '../Util/Constants';\nvar logger = new Logger('AWSCloudWatch');\n\nvar AWSCloudWatchProvider =\n/** @class */\nfunction () {\n  function AWSCloudWatchProvider(config) {\n    this.configure(config);\n    this._dataTracker = {\n      eventUploadInProgress: false,\n      logEvents: []\n    };\n    this._currentLogBatch = [];\n\n    this._initiateLogPushInterval();\n  }\n\n  AWSCloudWatchProvider.prototype.getProviderName = function () {\n    return AWSCloudWatchProvider.PROVIDER_NAME;\n  };\n\n  AWSCloudWatchProvider.prototype.getCategoryName = function () {\n    return AWSCloudWatchProvider.CATEGORY;\n  };\n\n  AWSCloudWatchProvider.prototype.getLogQueue = function () {\n    return this._dataTracker.logEvents;\n  };\n\n  AWSCloudWatchProvider.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    var conf = Object.assign({}, this._config, parseMobileHubConfig(config).Logging, config);\n    this._config = conf;\n    return this._config;\n  };\n\n  AWSCloudWatchProvider.prototype.createLogGroup = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('creating new log group in CloudWatch - ', params.logGroupName);\n            cmd = new CreateLogGroupCommand(params);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 3:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 4:\n            error_1 = _a.sent();\n            logger.error(\"error creating log group - \" + error_1);\n            throw error_1;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogGroups = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting list of log groups');\n            cmd = new DescribeLogGroupsCommand(params);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 3:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 4:\n            error_2 = _a.sent();\n            logger.error(\"error getting log group - \" + error_2);\n            throw error_2;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.createLogStream = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('creating new log stream in CloudWatch - ', params.logStreamName);\n            cmd = new CreateLogStreamCommand(params);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 3:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 4:\n            error_3 = _a.sent();\n            logger.error(\"error creating log stream - \" + error_3);\n            throw error_3;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogStreams = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting list of log streams');\n            cmd = new DescribeLogStreamsCommand(params);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 3:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 4:\n            error_4 = _a.sent();\n            logger.error(\"error getting log stream - \" + error_4);\n            throw error_4;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.getLogEvents = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cmd, credentialsOK, client, output, error_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting log events from stream - ', params.logStreamName);\n            cmd = new GetLogEventsCommand(params);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 3:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 4:\n            error_5 = _a.sent();\n            logger.error(\"error getting log events - \" + error_5);\n            throw error_5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype.pushLogs = function (logs) {\n    logger.debug('pushing log events to Cloudwatch...');\n    this._dataTracker.logEvents = __spread(this._dataTracker.logEvents, logs);\n  };\n\n  AWSCloudWatchProvider.prototype._validateLogGroupExistsAndCreate = function (logGroupName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, currGroups, foundGroups, err_1, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._dataTracker.verifiedLogGroup) {\n              return [2\n              /*return*/\n              , this._dataTracker.verifiedLogGroup];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 2:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            return [4\n            /*yield*/\n            , this.getLogGroups({\n              logGroupNamePrefix: logGroupName\n            })];\n\n          case 3:\n            currGroups = _a.sent();\n\n            if (!(typeof currGroups === 'string') && currGroups.logGroups) {\n              foundGroups = currGroups.logGroups.filter(function (group) {\n                return group.logGroupName === logGroupName;\n              });\n\n              if (foundGroups.length > 0) {\n                this._dataTracker.verifiedLogGroup = foundGroups[0];\n                return [2\n                /*return*/\n                , foundGroups[0]];\n              }\n            }\n            /**\n             * If we get to this point, it means that the specified log group does not exist\n             * and we should create it.\n             */\n\n\n            return [4\n            /*yield*/\n            , this.createLogGroup({\n              logGroupName: logGroupName\n            })];\n\n          case 4:\n            /**\n             * If we get to this point, it means that the specified log group does not exist\n             * and we should create it.\n             */\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 5:\n            err_1 = _a.sent();\n            errString = \"failure during log group search: \" + err_1;\n            logger.error(errString);\n            throw err_1;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._validateLogStreamExists = function (logGroupName, logStreamName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, currStreams, foundStreams, err_2, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            return [4\n            /*yield*/\n            , this.getLogStreams({\n              logGroupName: logGroupName,\n              logStreamNamePrefix: logStreamName\n            })];\n\n          case 2:\n            currStreams = _a.sent();\n\n            if (currStreams.logStreams) {\n              foundStreams = currStreams.logStreams.filter(function (stream) {\n                return stream.logStreamName === logStreamName;\n              });\n\n              if (foundStreams.length > 0) {\n                this._nextSequenceToken = foundStreams[0].uploadSequenceToken;\n                return [2\n                /*return*/\n                , foundStreams[0]];\n              }\n            }\n            /**\n             * If we get to this point, it means that the specified stream does not\n             * exist, and we should create it now.\n             */\n\n\n            return [4\n            /*yield*/\n            , this.createLogStream({\n              logGroupName: logGroupName,\n              logStreamName: logStreamName\n            })];\n\n          case 3:\n            /**\n             * If we get to this point, it means that the specified stream does not\n             * exist, and we should create it now.\n             */\n            _a.sent();\n\n            return [2\n            /*return*/\n            , null];\n\n          case 4:\n            err_2 = _a.sent();\n            errString = \"failure during log stream search: \" + err_2;\n            logger.error(errString);\n            throw err_2;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._sendLogEvents = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, cmd, client, output, err_3, errString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error(NO_CREDS_ERROR_STRING);\n            }\n\n            logger.debug('sending log events to stream - ', params.logStreamName);\n            cmd = new PutLogEventsCommand(params);\n            client = this._initCloudWatchLogs();\n            return [4\n            /*yield*/\n            , client.send(cmd)];\n\n          case 2:\n            output = _a.sent();\n            return [2\n            /*return*/\n            , output];\n\n          case 3:\n            err_3 = _a.sent();\n            errString = \"failure during log push: \" + err_3;\n            logger.error(errString);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._initCloudWatchLogs = function () {\n    return new CloudWatchLogsClient({\n      region: this._config.region,\n      credentials: this._config.credentials,\n      customUserAgent: getAmplifyUserAgent(),\n      endpoint: this._config.endpoint\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Credentials.get().then(function (credentials) {\n              if (!credentials) return false;\n              var cred = Credentials.shear(credentials);\n              logger.debug('set credentials for logging', cred);\n              _this._config.credentials = cred;\n              return true;\n            }).catch(function (error) {\n              logger.warn('ensure credentials error', error);\n              return false;\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._getNextSequenceToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var logStream, err_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._nextSequenceToken && this._nextSequenceToken.length > 0) {\n              return [2\n              /*return*/\n              , this._nextSequenceToken];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this._validateLogGroupExistsAndCreate(this._config.logGroupName)];\n\n          case 2:\n            _a.sent();\n\n            this._nextSequenceToken = undefined;\n            return [4\n            /*yield*/\n            , this._validateLogStreamExists(this._config.logGroupName, this._config.logStreamName)];\n\n          case 3:\n            logStream = _a.sent();\n\n            if (logStream) {\n              this._nextSequenceToken = logStream.uploadSequenceToken;\n            }\n\n            return [2\n            /*return*/\n            , this._nextSequenceToken];\n\n          case 4:\n            err_4 = _a.sent();\n            logger.error(\"failure while getting next sequence token: \" + err_4);\n            throw err_4;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._safeUploadLogEvents = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var seqToken, logBatch, putLogsPayload, sendLogEventsResponse, err_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._getNextSequenceToken()];\n\n          case 1:\n            seqToken = _a.sent();\n            logBatch = this._currentLogBatch.length === 0 ? this._getBufferedBatchOfLogs() : this._currentLogBatch;\n            putLogsPayload = {\n              logGroupName: this._config.logGroupName,\n              logStreamName: this._config.logStreamName,\n              logEvents: logBatch,\n              sequenceToken: seqToken\n            };\n            this._dataTracker.eventUploadInProgress = true;\n            return [4\n            /*yield*/\n            , this._sendLogEvents(putLogsPayload)];\n\n          case 2:\n            sendLogEventsResponse = _a.sent();\n            this._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;\n            this._dataTracker.eventUploadInProgress = false;\n            this._currentLogBatch = [];\n            return [2\n            /*return*/\n            , sendLogEventsResponse];\n\n          case 3:\n            err_5 = _a.sent();\n            logger.error(\"error during _safeUploadLogEvents: \" + err_5);\n\n            if (RETRY_ERROR_CODES.includes(err_5.name)) {\n              this._getNewSequenceTokenAndSubmit({\n                logEvents: this._currentLogBatch,\n                logGroupName: this._config.logGroupName,\n                logStreamName: this._config.logStreamName\n              });\n            } else {\n              this._dataTracker.eventUploadInProgress = false;\n              throw err_5;\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._getBufferedBatchOfLogs = function () {\n    /**\n     * CloudWatch has restrictions on the size of the log events that get sent up.\n     * We need to track both the size of each event and the total size of the batch\n     * of logs.\n     *\n     * We also need to ensure that the logs in the batch are sorted in chronological order.\n     * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n     */\n    var currentEventIdx = 0;\n    var totalByteSize = 0;\n\n    while (currentEventIdx < this._dataTracker.logEvents.length) {\n      var currentEvent = this._dataTracker.logEvents[currentEventIdx];\n      var eventSize = currentEvent ? new TextEncoder().encode(currentEvent.message).length + AWS_CLOUDWATCH_BASE_BUFFER_SIZE : 0;\n\n      if (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {\n        var errString = \"Log entry exceeds maximum size for CloudWatch logs. Log size: \" + eventSize + \". Truncating log message.\";\n        logger.warn(errString);\n        currentEvent.message = currentEvent.message.substring(0, eventSize);\n      }\n\n      if (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE) break;\n      totalByteSize += eventSize;\n      currentEventIdx++;\n    }\n\n    this._currentLogBatch = this._dataTracker.logEvents.splice(0, currentEventIdx);\n    return this._currentLogBatch;\n  };\n\n  AWSCloudWatchProvider.prototype._getNewSequenceTokenAndSubmit = function (payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var seqToken, sendLogEventsRepsonse, err_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n\n            this._nextSequenceToken = undefined;\n            this._dataTracker.eventUploadInProgress = true;\n            return [4\n            /*yield*/\n            , this._getNextSequenceToken()];\n\n          case 1:\n            seqToken = _a.sent();\n            payload.sequenceToken = seqToken;\n            return [4\n            /*yield*/\n            , this._sendLogEvents(payload)];\n\n          case 2:\n            sendLogEventsRepsonse = _a.sent();\n            this._dataTracker.eventUploadInProgress = false;\n            this._currentLogBatch = [];\n            return [2\n            /*return*/\n            , sendLogEventsRepsonse];\n\n          case 3:\n            err_6 = _a.sent();\n            logger.error(\"error when retrying log submission with new sequence token: \" + err_6);\n            this._dataTracker.eventUploadInProgress = false;\n            throw err_6;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSCloudWatchProvider.prototype._initiateLogPushInterval = function () {\n    var _this = this;\n\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n\n    this._timer = setInterval(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var err_7;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 3,, 4]);\n\n              if (!this._getDocUploadPermissibility()) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , this._safeUploadLogEvents()];\n\n            case 1:\n              _a.sent();\n\n              _a.label = 2;\n\n            case 2:\n              return [3\n              /*break*/\n              , 4];\n\n            case 3:\n              err_7 = _a.sent();\n              logger.error(\"error when calling _safeUploadLogEvents in the timer interval - \" + err_7);\n              return [3\n              /*break*/\n              , 4];\n\n            case 4:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }, 2000);\n  };\n\n  AWSCloudWatchProvider.prototype._getDocUploadPermissibility = function () {\n    return (this._dataTracker.logEvents.length !== 0 || this._currentLogBatch.length !== 0) && !this._dataTracker.eventUploadInProgress;\n  };\n\n  AWSCloudWatchProvider.PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;\n  AWSCloudWatchProvider.CATEGORY = AWS_CLOUDWATCH_CATEGORY;\n  return AWSCloudWatchProvider;\n}();\n\nexport { AWSCloudWatchProvider };","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;EACrF,SAASC,KAAT,CAAeC,KAAf,EAAsB;IAAE,OAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;MAAEA,OAAO,CAACD,KAAD,CAAP;IAAiB,CAA5C,CAApC;EAAoF;;EAC5G,OAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;IACvD,SAASC,SAAT,CAAmBJ,KAAnB,EAA0B;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;MAA8B,CAApC,CAAqC,OAAOO,CAAP,EAAU;QAAEJ,MAAM,CAACI,CAAD,CAAN;MAAY;IAAE;;IAC3F,SAASC,QAAT,CAAkBR,KAAlB,EAAyB;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;MAAkC,CAAxC,CAAyC,OAAOO,CAAP,EAAU;QAAEJ,MAAM,CAACI,CAAD,CAAN;MAAY;IAAE;;IAC9F,SAASF,IAAT,CAAcI,MAAd,EAAsB;MAAEA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;IAAsF;;IAC9GH,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;EACH,CALM,CAAP;AAMH,CARD;;AASA,IAAIO,WAAW,GAAI,QAAQ,KAAKA,WAAd,IAA8B,UAAUlB,OAAV,EAAmBmB,IAAnB,EAAyB;EACrE,IAAIC,CAAC,GAAG;IAAEC,KAAK,EAAE,CAAT;IAAYC,IAAI,EAAE,gBAAW;MAAE,IAAIC,CAAC,CAAC,CAAD,CAAD,GAAO,CAAX,EAAc,MAAMA,CAAC,CAAC,CAAD,CAAP;MAAY,OAAOA,CAAC,CAAC,CAAD,CAAR;IAAc,CAAvE;IAAyEC,IAAI,EAAE,EAA/E;IAAmFC,GAAG,EAAE;EAAxF,CAAR;EAAA,IAAsGC,CAAtG;EAAA,IAAyGC,CAAzG;EAAA,IAA4GJ,CAA5G;EAAA,IAA+GK,CAA/G;EACA,OAAOA,CAAC,GAAG;IAAEjB,IAAI,EAAEkB,IAAI,CAAC,CAAD,CAAZ;IAAiB,SAASA,IAAI,CAAC,CAAD,CAA9B;IAAmC,UAAUA,IAAI,CAAC,CAAD;EAAjD,CAAJ,EAA4D,OAAOC,MAAP,KAAkB,UAAlB,KAAiCF,CAAC,CAACE,MAAM,CAACC,QAAR,CAAD,GAAqB,YAAW;IAAE,OAAO,IAAP;EAAc,CAAjF,CAA5D,EAAgJH,CAAvJ;;EACA,SAASC,IAAT,CAAcG,CAAd,EAAiB;IAAE,OAAO,UAAUC,CAAV,EAAa;MAAE,OAAOvB,IAAI,CAAC,CAACsB,CAAD,EAAIC,CAAJ,CAAD,CAAX;IAAsB,CAA5C;EAA+C;;EAClE,SAASvB,IAAT,CAAcwB,EAAd,EAAkB;IACd,IAAIR,CAAJ,EAAO,MAAM,IAAIS,SAAJ,CAAc,iCAAd,CAAN;;IACP,OAAOf,CAAP;MAAU,IAAI;QACV,IAAIM,CAAC,GAAG,CAAJ,EAAOC,CAAC,KAAKJ,CAAC,GAAGW,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR,GAAYP,CAAC,CAAC,QAAD,CAAb,GAA0BO,EAAE,CAAC,CAAD,CAAF,GAAQP,CAAC,CAAC,OAAD,CAAD,KAAe,CAACJ,CAAC,GAAGI,CAAC,CAAC,QAAD,CAAN,KAAqBJ,CAAC,CAACa,IAAF,CAAOT,CAAP,CAArB,EAAgC,CAA/C,CAAR,GAA4DA,CAAC,CAAChB,IAAjG,CAAD,IAA2G,CAAC,CAACY,CAAC,GAAGA,CAAC,CAACa,IAAF,CAAOT,CAAP,EAAUO,EAAE,CAAC,CAAD,CAAZ,CAAL,EAAuBnB,IAA9I,EAAoJ,OAAOQ,CAAP;QACpJ,IAAII,CAAC,GAAG,CAAJ,EAAOJ,CAAX,EAAcW,EAAE,GAAG,CAACA,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAT,EAAYX,CAAC,CAAClB,KAAd,CAAL;;QACd,QAAQ6B,EAAE,CAAC,CAAD,CAAV;UACI,KAAK,CAAL;UAAQ,KAAK,CAAL;YAAQX,CAAC,GAAGW,EAAJ;YAAQ;;UACxB,KAAK,CAAL;YAAQd,CAAC,CAACC,KAAF;YAAW,OAAO;cAAEhB,KAAK,EAAE6B,EAAE,CAAC,CAAD,CAAX;cAAgBnB,IAAI,EAAE;YAAtB,CAAP;;UACnB,KAAK,CAAL;YAAQK,CAAC,CAACC,KAAF;YAAWM,CAAC,GAAGO,EAAE,CAAC,CAAD,CAAN;YAAWA,EAAE,GAAG,CAAC,CAAD,CAAL;YAAU;;UACxC,KAAK,CAAL;YAAQA,EAAE,GAAGd,CAAC,CAACK,GAAF,CAAMY,GAAN,EAAL;;YAAkBjB,CAAC,CAACI,IAAF,CAAOa,GAAP;;YAAc;;UACxC;YACI,IAAI,EAAEd,CAAC,GAAGH,CAAC,CAACI,IAAN,EAAYD,CAAC,GAAGA,CAAC,CAACe,MAAF,GAAW,CAAX,IAAgBf,CAAC,CAACA,CAAC,CAACe,MAAF,GAAW,CAAZ,CAAnC,MAAuDJ,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,IAAeA,EAAE,CAAC,CAAD,CAAF,KAAU,CAAhF,CAAJ,EAAwF;cAAEd,CAAC,GAAG,CAAJ;cAAO;YAAW;;YAC5G,IAAIc,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,KAAgB,CAACX,CAAD,IAAOW,EAAE,CAAC,CAAD,CAAF,GAAQX,CAAC,CAAC,CAAD,CAAT,IAAgBW,EAAE,CAAC,CAAD,CAAF,GAAQX,CAAC,CAAC,CAAD,CAAhD,CAAJ,EAA2D;cAAEH,CAAC,CAACC,KAAF,GAAUa,EAAE,CAAC,CAAD,CAAZ;cAAiB;YAAQ;;YACtF,IAAIA,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,IAAed,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAA9B,EAAmC;cAAEH,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAAX;cAAgBA,CAAC,GAAGW,EAAJ;cAAQ;YAAQ;;YACrE,IAAIX,CAAC,IAAIH,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAApB,EAAyB;cAAEH,CAAC,CAACC,KAAF,GAAUE,CAAC,CAAC,CAAD,CAAX;;cAAgBH,CAAC,CAACK,GAAF,CAAMc,IAAN,CAAWL,EAAX;;cAAgB;YAAQ;;YACnE,IAAIX,CAAC,CAAC,CAAD,CAAL,EAAUH,CAAC,CAACK,GAAF,CAAMY,GAAN;;YACVjB,CAAC,CAACI,IAAF,CAAOa,GAAP;;YAAc;QAXtB;;QAaAH,EAAE,GAAGf,IAAI,CAACiB,IAAL,CAAUpC,OAAV,EAAmBoB,CAAnB,CAAL;MACH,CAjBS,CAiBR,OAAOR,CAAP,EAAU;QAAEsB,EAAE,GAAG,CAAC,CAAD,EAAItB,CAAJ,CAAL;QAAae,CAAC,GAAG,CAAJ;MAAQ,CAjBzB,SAiBkC;QAAED,CAAC,GAAGH,CAAC,GAAG,CAAR;MAAY;IAjB1D;;IAkBA,IAAIW,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAZ,EAAe,MAAMA,EAAE,CAAC,CAAD,CAAR;IAAa,OAAO;MAAE7B,KAAK,EAAE6B,EAAE,CAAC,CAAD,CAAF,GAAQA,EAAE,CAAC,CAAD,CAAV,GAAgB,KAAK,CAA9B;MAAiCnB,IAAI,EAAE;IAAvC,CAAP;EAC/B;AACJ,CA1BD;;AA2BA,IAAIyB,MAAM,GAAI,QAAQ,KAAKA,MAAd,IAAyB,UAAUC,CAAV,EAAaT,CAAb,EAAgB;EAClD,IAAIU,CAAC,GAAG,OAAOZ,MAAP,KAAkB,UAAlB,IAAgCW,CAAC,CAACX,MAAM,CAACC,QAAR,CAAzC;EACA,IAAI,CAACW,CAAL,EAAQ,OAAOD,CAAP;EACR,IAAIE,CAAC,GAAGD,CAAC,CAACN,IAAF,CAAOK,CAAP,CAAR;EAAA,IAAmBG,CAAnB;EAAA,IAAsBC,EAAE,GAAG,EAA3B;EAAA,IAA+BjC,CAA/B;;EACA,IAAI;IACA,OAAO,CAACoB,CAAC,KAAK,KAAK,CAAX,IAAgBA,CAAC,KAAK,CAAvB,KAA6B,CAAC,CAACY,CAAC,GAAGD,CAAC,CAAChC,IAAF,EAAL,EAAeI,IAApD;MAA0D8B,EAAE,CAACN,IAAH,CAAQK,CAAC,CAACvC,KAAV;IAA1D;EACH,CAFD,CAGA,OAAOyC,KAAP,EAAc;IAAElC,CAAC,GAAG;MAAEkC,KAAK,EAAEA;IAAT,CAAJ;EAAuB,CAHvC,SAIQ;IACJ,IAAI;MACA,IAAIF,CAAC,IAAI,CAACA,CAAC,CAAC7B,IAAR,KAAiB2B,CAAC,GAAGC,CAAC,CAAC,QAAD,CAAtB,CAAJ,EAAuCD,CAAC,CAACN,IAAF,CAAOO,CAAP;IAC1C,CAFD,SAGQ;MAAE,IAAI/B,CAAJ,EAAO,MAAMA,CAAC,CAACkC,KAAR;IAAgB;EACpC;;EACD,OAAOD,EAAP;AACH,CAfD;;AAgBA,IAAIE,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;EAClD,KAAK,IAAIF,EAAE,GAAG,EAAT,EAAaF,CAAC,GAAG,CAAtB,EAAyBA,CAAC,GAAGK,SAAS,CAACV,MAAvC,EAA+CK,CAAC,EAAhD;IAAoDE,EAAE,GAAGA,EAAE,CAACI,MAAH,CAAUT,MAAM,CAACQ,SAAS,CAACL,CAAD,CAAV,CAAhB,CAAL;EAApD;;EACA,OAAOE,EAAP;AACH,CAHD;;AAIA,SAASK,oBAAT,EAA+BC,qBAA/B,EAAsDC,sBAAtD,EAA8EC,wBAA9E,EAAwGC,yBAAxG,EAAmIC,mBAAnI,EAAwJC,mBAAxJ,QAAoL,iCAApL;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,WAAxC;AACA,SAASC,mBAAT,QAAoC,aAApC;AACA,SAASC,oBAAT,QAAqC,WAArC;AACA,SAASC,+BAAT,EAA0CC,uBAA1C,EAAmEC,mCAAnE,EAAwGC,6BAAxG,EAAuIC,4BAAvI,EAAqKC,qBAArK,EAA4LC,iBAA5L,QAAsN,mBAAtN;AACA,IAAIC,MAAM,GAAG,IAAIV,MAAJ,CAAW,eAAX,CAAb;;AACA,IAAIW,qBAAqB;AAAG;AAAe,YAAY;EACnD,SAASA,qBAAT,CAA+BC,MAA/B,EAAuC;IACnC,KAAKC,SAAL,CAAeD,MAAf;IACA,KAAKE,YAAL,GAAoB;MAChBC,qBAAqB,EAAE,KADP;MAEhBC,SAAS,EAAE;IAFK,CAApB;IAIA,KAAKC,gBAAL,GAAwB,EAAxB;;IACA,KAAKC,wBAAL;EACH;;EACDP,qBAAqB,CAACQ,SAAtB,CAAgCC,eAAhC,GAAkD,YAAY;IAC1D,OAAOT,qBAAqB,CAACU,aAA7B;EACH,CAFD;;EAGAV,qBAAqB,CAACQ,SAAtB,CAAgCG,eAAhC,GAAkD,YAAY;IAC1D,OAAOX,qBAAqB,CAACY,QAA7B;EACH,CAFD;;EAGAZ,qBAAqB,CAACQ,SAAtB,CAAgCK,WAAhC,GAA8C,YAAY;IACtD,OAAO,KAAKV,YAAL,CAAkBE,SAAzB;EACH,CAFD;;EAGAL,qBAAqB,CAACQ,SAAtB,CAAgCN,SAAhC,GAA4C,UAAUD,MAAV,EAAkB;IAC1D,IAAI,CAACA,MAAL,EACI,OAAO,KAAKa,OAAL,IAAgB,EAAvB;IACJ,IAAIC,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKH,OAAvB,EAAgCvB,oBAAoB,CAACU,MAAD,CAApB,CAA6BiB,OAA7D,EAAsEjB,MAAtE,CAAX;IACA,KAAKa,OAAL,GAAeC,IAAf;IACA,OAAO,KAAKD,OAAZ;EACH,CAND;;EAOAd,qBAAqB,CAACQ,SAAtB,CAAgCW,cAAhC,GAAiD,UAAUC,MAAV,EAAkB;IAC/D,OAAO3F,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI4F,GAAJ,EAASC,aAAT,EAAwBC,MAAxB,EAAgCC,MAAhC,EAAwCC,OAAxC;MACA,OAAO7E,WAAW,CAAC,IAAD,EAAO,UAAU8E,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAC3E,KAAX;UACI,KAAK,CAAL;YACIgD,MAAM,CAAC4B,KAAP,CAAa,yCAAb,EAAwDP,MAAM,CAACQ,YAA/D;YACAP,GAAG,GAAG,IAAIxC,qBAAJ,CAA0BuC,MAA1B,CAAN;YACAM,EAAE,CAAC3E,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACI2E,EAAE,CAACxE,IAAH,CAAQe,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK4D,kBAAL,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIP,aAAa,GAAGI,EAAE,CAAC1E,IAAH,EAAhB;;YACA,IAAI,CAACsE,aAAL,EAAoB;cAChB,MAAM,IAAIQ,KAAJ,CAAUjC,qBAAV,CAAN;YACH;;YACD0B,MAAM,GAAG,KAAKQ,mBAAL,EAAT;YACA,OAAO,CAAC;YAAE;YAAH,EAAcR,MAAM,CAACS,IAAP,CAAYX,GAAZ,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIG,MAAM,GAAGE,EAAE,CAAC1E,IAAH,EAAT;YACA,OAAO,CAAC;YAAE;YAAH,EAAewE,MAAf,CAAP;;UACJ,KAAK,CAAL;YACIC,OAAO,GAAGC,EAAE,CAAC1E,IAAH,EAAV;YACA+C,MAAM,CAACvB,KAAP,CAAa,gCAAgCiD,OAA7C;YACA,MAAMA,OAAN;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QAtBZ;MAwBH,CAzBiB,CAAlB;IA0BH,CA5Be,CAAhB;EA6BH,CA9BD;;EA+BAzB,qBAAqB,CAACQ,SAAtB,CAAgCyB,YAAhC,GAA+C,UAAUb,MAAV,EAAkB;IAC7D,OAAO3F,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI4F,GAAJ,EAASC,aAAT,EAAwBC,MAAxB,EAAgCC,MAAhC,EAAwCU,OAAxC;MACA,OAAOtF,WAAW,CAAC,IAAD,EAAO,UAAU8E,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAC3E,KAAX;UACI,KAAK,CAAL;YACIgD,MAAM,CAAC4B,KAAP,CAAa,4BAAb;YACAN,GAAG,GAAG,IAAItC,wBAAJ,CAA6BqC,MAA7B,CAAN;YACAM,EAAE,CAAC3E,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACI2E,EAAE,CAACxE,IAAH,CAAQe,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK4D,kBAAL,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIP,aAAa,GAAGI,EAAE,CAAC1E,IAAH,EAAhB;;YACA,IAAI,CAACsE,aAAL,EAAoB;cAChB,MAAM,IAAIQ,KAAJ,CAAUjC,qBAAV,CAAN;YACH;;YACD0B,MAAM,GAAG,KAAKQ,mBAAL,EAAT;YACA,OAAO,CAAC;YAAE;YAAH,EAAcR,MAAM,CAACS,IAAP,CAAYX,GAAZ,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIG,MAAM,GAAGE,EAAE,CAAC1E,IAAH,EAAT;YACA,OAAO,CAAC;YAAE;YAAH,EAAewE,MAAf,CAAP;;UACJ,KAAK,CAAL;YACIU,OAAO,GAAGR,EAAE,CAAC1E,IAAH,EAAV;YACA+C,MAAM,CAACvB,KAAP,CAAa,+BAA+B0D,OAA5C;YACA,MAAMA,OAAN;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QAtBZ;MAwBH,CAzBiB,CAAlB;IA0BH,CA5Be,CAAhB;EA6BH,CA9BD;;EA+BAlC,qBAAqB,CAACQ,SAAtB,CAAgC2B,eAAhC,GAAkD,UAAUf,MAAV,EAAkB;IAChE,OAAO3F,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI4F,GAAJ,EAASC,aAAT,EAAwBC,MAAxB,EAAgCC,MAAhC,EAAwCY,OAAxC;MACA,OAAOxF,WAAW,CAAC,IAAD,EAAO,UAAU8E,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAC3E,KAAX;UACI,KAAK,CAAL;YACIgD,MAAM,CAAC4B,KAAP,CAAa,0CAAb,EAAyDP,MAAM,CAACiB,aAAhE;YACAhB,GAAG,GAAG,IAAIvC,sBAAJ,CAA2BsC,MAA3B,CAAN;YACAM,EAAE,CAAC3E,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACI2E,EAAE,CAACxE,IAAH,CAAQe,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK4D,kBAAL,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIP,aAAa,GAAGI,EAAE,CAAC1E,IAAH,EAAhB;;YACA,IAAI,CAACsE,aAAL,EAAoB;cAChB,MAAM,IAAIQ,KAAJ,CAAUjC,qBAAV,CAAN;YACH;;YACD0B,MAAM,GAAG,KAAKQ,mBAAL,EAAT;YACA,OAAO,CAAC;YAAE;YAAH,EAAcR,MAAM,CAACS,IAAP,CAAYX,GAAZ,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIG,MAAM,GAAGE,EAAE,CAAC1E,IAAH,EAAT;YACA,OAAO,CAAC;YAAE;YAAH,EAAewE,MAAf,CAAP;;UACJ,KAAK,CAAL;YACIY,OAAO,GAAGV,EAAE,CAAC1E,IAAH,EAAV;YACA+C,MAAM,CAACvB,KAAP,CAAa,iCAAiC4D,OAA9C;YACA,MAAMA,OAAN;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QAtBZ;MAwBH,CAzBiB,CAAlB;IA0BH,CA5Be,CAAhB;EA6BH,CA9BD;;EA+BApC,qBAAqB,CAACQ,SAAtB,CAAgC8B,aAAhC,GAAgD,UAAUlB,MAAV,EAAkB;IAC9D,OAAO3F,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI4F,GAAJ,EAASC,aAAT,EAAwBC,MAAxB,EAAgCC,MAAhC,EAAwCe,OAAxC;MACA,OAAO3F,WAAW,CAAC,IAAD,EAAO,UAAU8E,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAC3E,KAAX;UACI,KAAK,CAAL;YACIgD,MAAM,CAAC4B,KAAP,CAAa,6BAAb;YACAN,GAAG,GAAG,IAAIrC,yBAAJ,CAA8BoC,MAA9B,CAAN;YACAM,EAAE,CAAC3E,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACI2E,EAAE,CAACxE,IAAH,CAAQe,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK4D,kBAAL,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIP,aAAa,GAAGI,EAAE,CAAC1E,IAAH,EAAhB;;YACA,IAAI,CAACsE,aAAL,EAAoB;cAChB,MAAM,IAAIQ,KAAJ,CAAUjC,qBAAV,CAAN;YACH;;YACD0B,MAAM,GAAG,KAAKQ,mBAAL,EAAT;YACA,OAAO,CAAC;YAAE;YAAH,EAAcR,MAAM,CAACS,IAAP,CAAYX,GAAZ,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIG,MAAM,GAAGE,EAAE,CAAC1E,IAAH,EAAT;YACA,OAAO,CAAC;YAAE;YAAH,EAAewE,MAAf,CAAP;;UACJ,KAAK,CAAL;YACIe,OAAO,GAAGb,EAAE,CAAC1E,IAAH,EAAV;YACA+C,MAAM,CAACvB,KAAP,CAAa,gCAAgC+D,OAA7C;YACA,MAAMA,OAAN;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QAtBZ;MAwBH,CAzBiB,CAAlB;IA0BH,CA5Be,CAAhB;EA6BH,CA9BD;;EA+BAvC,qBAAqB,CAACQ,SAAtB,CAAgCgC,YAAhC,GAA+C,UAAUpB,MAAV,EAAkB;IAC7D,OAAO3F,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI4F,GAAJ,EAASC,aAAT,EAAwBC,MAAxB,EAAgCC,MAAhC,EAAwCiB,OAAxC;MACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAU8E,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAC3E,KAAX;UACI,KAAK,CAAL;YACIgD,MAAM,CAAC4B,KAAP,CAAa,mCAAb,EAAkDP,MAAM,CAACiB,aAAzD;YACAhB,GAAG,GAAG,IAAIpC,mBAAJ,CAAwBmC,MAAxB,CAAN;YACAM,EAAE,CAAC3E,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACI2E,EAAE,CAACxE,IAAH,CAAQe,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK4D,kBAAL,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIP,aAAa,GAAGI,EAAE,CAAC1E,IAAH,EAAhB;;YACA,IAAI,CAACsE,aAAL,EAAoB;cAChB,MAAM,IAAIQ,KAAJ,CAAUjC,qBAAV,CAAN;YACH;;YACD0B,MAAM,GAAG,KAAKQ,mBAAL,EAAT;YACA,OAAO,CAAC;YAAE;YAAH,EAAcR,MAAM,CAACS,IAAP,CAAYX,GAAZ,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIG,MAAM,GAAGE,EAAE,CAAC1E,IAAH,EAAT;YACA,OAAO,CAAC;YAAE;YAAH,EAAewE,MAAf,CAAP;;UACJ,KAAK,CAAL;YACIiB,OAAO,GAAGf,EAAE,CAAC1E,IAAH,EAAV;YACA+C,MAAM,CAACvB,KAAP,CAAa,gCAAgCiE,OAA7C;YACA,MAAMA,OAAN;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QAtBZ;MAwBH,CAzBiB,CAAlB;IA0BH,CA5Be,CAAhB;EA6BH,CA9BD;;EA+BAzC,qBAAqB,CAACQ,SAAtB,CAAgCkC,QAAhC,GAA2C,UAAUC,IAAV,EAAgB;IACvD5C,MAAM,CAAC4B,KAAP,CAAa,qCAAb;IACA,KAAKxB,YAAL,CAAkBE,SAAlB,GAA8B5B,QAAQ,CAAC,KAAK0B,YAAL,CAAkBE,SAAnB,EAA8BsC,IAA9B,CAAtC;EACH,CAHD;;EAIA3C,qBAAqB,CAACQ,SAAtB,CAAgCoC,gCAAhC,GAAmE,UAAUhB,YAAV,EAAwB;IACvF,OAAOnG,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI6F,aAAJ,EAAmBuB,UAAnB,EAA+BC,WAA/B,EAA4CC,KAA5C,EAAmDC,SAAnD;MACA,OAAOpG,WAAW,CAAC,IAAD,EAAO,UAAU8E,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAC3E,KAAX;UACI,KAAK,CAAL;YACI,IAAI,KAAKoD,YAAL,CAAkB8C,gBAAtB,EAAwC;cACpC,OAAO,CAAC;cAAE;cAAH,EAAe,KAAK9C,YAAL,CAAkB8C,gBAAjC,CAAP;YACH;;YACDvB,EAAE,CAAC3E,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACI2E,EAAE,CAACxE,IAAH,CAAQe,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK4D,kBAAL,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIP,aAAa,GAAGI,EAAE,CAAC1E,IAAH,EAAhB;;YACA,IAAI,CAACsE,aAAL,EAAoB;cAChB,MAAM,IAAIQ,KAAJ,CAAUjC,qBAAV,CAAN;YACH;;YACD,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKoC,YAAL,CAAkB;cAC/BiB,kBAAkB,EAAEtB;YADW,CAAlB,CAAd,CAAP;;UAGJ,KAAK,CAAL;YACIiB,UAAU,GAAGnB,EAAE,CAAC1E,IAAH,EAAb;;YACA,IAAI,EAAE,OAAO6F,UAAP,KAAsB,QAAxB,KAAqCA,UAAU,CAACM,SAApD,EAA+D;cAC3DL,WAAW,GAAGD,UAAU,CAACM,SAAX,CAAqBC,MAArB,CAA4B,UAAUC,KAAV,EAAiB;gBAAE,OAAOA,KAAK,CAACzB,YAAN,KAAuBA,YAA9B;cAA6C,CAA5F,CAAd;;cACA,IAAIkB,WAAW,CAAC9E,MAAZ,GAAqB,CAAzB,EAA4B;gBACxB,KAAKmC,YAAL,CAAkB8C,gBAAlB,GAAqCH,WAAW,CAAC,CAAD,CAAhD;gBACA,OAAO,CAAC;gBAAE;gBAAH,EAAeA,WAAW,CAAC,CAAD,CAA1B,CAAP;cACH;YACJ;YACD;AACxB;AACA;AACA;;;YACwB,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK3B,cAAL,CAAoB;cAAES,YAAY,EAAEA;YAAhB,CAApB,CAAd,CAAP;;UACJ,KAAK,CAAL;YACI;AACxB;AACA;AACA;YACwBF,EAAE,CAAC1E,IAAH;;YACA,OAAO,CAAC;YAAE;YAAH,EAAe,IAAf,CAAP;;UACJ,KAAK,CAAL;YACI+F,KAAK,GAAGrB,EAAE,CAAC1E,IAAH,EAAR;YACAgG,SAAS,GAAG,sCAAsCD,KAAlD;YACAhD,MAAM,CAACvB,KAAP,CAAawE,SAAb;YACA,MAAMD,KAAN;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QA3CZ;MA6CH,CA9CiB,CAAlB;IA+CH,CAjDe,CAAhB;EAkDH,CAnDD;;EAoDA/C,qBAAqB,CAACQ,SAAtB,CAAgC8C,wBAAhC,GAA2D,UAAU1B,YAAV,EAAwBS,aAAxB,EAAuC;IAC9F,OAAO5G,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI6F,aAAJ,EAAmBiC,WAAnB,EAAgCC,YAAhC,EAA8CC,KAA9C,EAAqDT,SAArD;MACA,OAAOpG,WAAW,CAAC,IAAD,EAAO,UAAU8E,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAC3E,KAAX;UACI,KAAK,CAAL;YACI2E,EAAE,CAACxE,IAAH,CAAQe,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK4D,kBAAL,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIP,aAAa,GAAGI,EAAE,CAAC1E,IAAH,EAAhB;;YACA,IAAI,CAACsE,aAAL,EAAoB;cAChB,MAAM,IAAIQ,KAAJ,CAAUjC,qBAAV,CAAN;YACH;;YACD,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKyC,aAAL,CAAmB;cAChCV,YAAY,EAAEA,YADkB;cAEhC8B,mBAAmB,EAAErB;YAFW,CAAnB,CAAd,CAAP;;UAIJ,KAAK,CAAL;YACIkB,WAAW,GAAG7B,EAAE,CAAC1E,IAAH,EAAd;;YACA,IAAIuG,WAAW,CAACI,UAAhB,EAA4B;cACxBH,YAAY,GAAGD,WAAW,CAACI,UAAZ,CAAuBP,MAAvB,CAA8B,UAAUQ,MAAV,EAAkB;gBAAE,OAAOA,MAAM,CAACvB,aAAP,KAAyBA,aAAhC;cAAgD,CAAlG,CAAf;;cACA,IAAImB,YAAY,CAACxF,MAAb,GAAsB,CAA1B,EAA6B;gBACzB,KAAK6F,kBAAL,GAA0BL,YAAY,CAAC,CAAD,CAAZ,CAAgBM,mBAA1C;gBACA,OAAO,CAAC;gBAAE;gBAAH,EAAeN,YAAY,CAAC,CAAD,CAA3B,CAAP;cACH;YACJ;YACD;AACxB;AACA;AACA;;;YACwB,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKrB,eAAL,CAAqB;cAClCP,YAAY,EAAEA,YADoB;cAElCS,aAAa,EAAEA;YAFmB,CAArB,CAAd,CAAP;;UAIJ,KAAK,CAAL;YACI;AACxB;AACA;AACA;YACwBX,EAAE,CAAC1E,IAAH;;YACA,OAAO,CAAC;YAAE;YAAH,EAAe,IAAf,CAAP;;UACJ,KAAK,CAAL;YACIyG,KAAK,GAAG/B,EAAE,CAAC1E,IAAH,EAAR;YACAgG,SAAS,GAAG,uCAAuCS,KAAnD;YACA1D,MAAM,CAACvB,KAAP,CAAawE,SAAb;YACA,MAAMS,KAAN;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QA1CZ;MA4CH,CA7CiB,CAAlB;IA8CH,CAhDe,CAAhB;EAiDH,CAlDD;;EAmDAzD,qBAAqB,CAACQ,SAAtB,CAAgCuD,cAAhC,GAAiD,UAAU3C,MAAV,EAAkB;IAC/D,OAAO3F,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI6F,aAAJ,EAAmBD,GAAnB,EAAwBE,MAAxB,EAAgCC,MAAhC,EAAwCwC,KAAxC,EAA+ChB,SAA/C;MACA,OAAOpG,WAAW,CAAC,IAAD,EAAO,UAAU8E,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAC3E,KAAX;UACI,KAAK,CAAL;YACI2E,EAAE,CAACxE,IAAH,CAAQe,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK4D,kBAAL,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIP,aAAa,GAAGI,EAAE,CAAC1E,IAAH,EAAhB;;YACA,IAAI,CAACsE,aAAL,EAAoB;cAChB,MAAM,IAAIQ,KAAJ,CAAUjC,qBAAV,CAAN;YACH;;YACDE,MAAM,CAAC4B,KAAP,CAAa,iCAAb,EAAgDP,MAAM,CAACiB,aAAvD;YACAhB,GAAG,GAAG,IAAInC,mBAAJ,CAAwBkC,MAAxB,CAAN;YACAG,MAAM,GAAG,KAAKQ,mBAAL,EAAT;YACA,OAAO,CAAC;YAAE;YAAH,EAAcR,MAAM,CAACS,IAAP,CAAYX,GAAZ,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIG,MAAM,GAAGE,EAAE,CAAC1E,IAAH,EAAT;YACA,OAAO,CAAC;YAAE;YAAH,EAAewE,MAAf,CAAP;;UACJ,KAAK,CAAL;YACIwC,KAAK,GAAGtC,EAAE,CAAC1E,IAAH,EAAR;YACAgG,SAAS,GAAG,8BAA8BgB,KAA1C;YACAjE,MAAM,CAACvB,KAAP,CAAawE,SAAb;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QArBZ;MAuBH,CAxBiB,CAAlB;IAyBH,CA3Be,CAAhB;EA4BH,CA7BD;;EA8BAhD,qBAAqB,CAACQ,SAAtB,CAAgCuB,mBAAhC,GAAsD,YAAY;IAC9D,OAAO,IAAInD,oBAAJ,CAAyB;MAC5BqF,MAAM,EAAE,KAAKnD,OAAL,CAAamD,MADO;MAE5BC,WAAW,EAAE,KAAKpD,OAAL,CAAaoD,WAFE;MAG5BC,eAAe,EAAE7E,mBAAmB,EAHR;MAI5B8E,QAAQ,EAAE,KAAKtD,OAAL,CAAasD;IAJK,CAAzB,CAAP;EAMH,CAPD;;EAQApE,qBAAqB,CAACQ,SAAtB,CAAgCqB,kBAAhC,GAAqD,YAAY;IAC7D,OAAOpG,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI4I,KAAK,GAAG,IAAZ;;MACA,OAAOzH,WAAW,CAAC,IAAD,EAAO,UAAU8E,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAC3E,KAAX;UACI,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,EAAcoC,WAAW,CAACmF,GAAZ,GACpB5H,IADoB,CACf,UAAUwH,WAAV,EAAuB;cAC7B,IAAI,CAACA,WAAL,EACI,OAAO,KAAP;cACJ,IAAIK,IAAI,GAAGpF,WAAW,CAACqF,KAAZ,CAAkBN,WAAlB,CAAX;cACAnE,MAAM,CAAC4B,KAAP,CAAa,6BAAb,EAA4C4C,IAA5C;cACAF,KAAK,CAACvD,OAAN,CAAcoD,WAAd,GAA4BK,IAA5B;cACA,OAAO,IAAP;YACH,CARwB,EASpBE,KAToB,CASd,UAAUjG,KAAV,EAAiB;cACxBuB,MAAM,CAAC2E,IAAP,CAAY,0BAAZ,EAAwClG,KAAxC;cACA,OAAO,KAAP;YACH,CAZwB,CAAd,CAAP;;UAaR,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,EAAekD,EAAE,CAAC1E,IAAH,EAAf,CAAP;QAdZ;MAgBH,CAjBiB,CAAlB;IAkBH,CApBe,CAAhB;EAqBH,CAtBD;;EAuBAgD,qBAAqB,CAACQ,SAAtB,CAAgCmE,qBAAhC,GAAwD,YAAY;IAChE,OAAOlJ,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAImJ,SAAJ,EAAeC,KAAf;MACA,OAAOjI,WAAW,CAAC,IAAD,EAAO,UAAU8E,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAC3E,KAAX;UACI,KAAK,CAAL;YACI,IAAI,KAAK8G,kBAAL,IAA2B,KAAKA,kBAAL,CAAwB7F,MAAxB,GAAiC,CAAhE,EAAmE;cAC/D,OAAO,CAAC;cAAE;cAAH,EAAe,KAAK6F,kBAApB,CAAP;YACH;;YACDnC,EAAE,CAAC3E,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACI2E,EAAE,CAACxE,IAAH,CAAQe,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK2E,gCAAL,CAAsC,KAAK9B,OAAL,CAAac,YAAnD,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIF,EAAE,CAAC1E,IAAH;;YACA,KAAK6G,kBAAL,GAA0BiB,SAA1B;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKxB,wBAAL,CAA8B,KAAKxC,OAAL,CAAac,YAA3C,EAAyD,KAAKd,OAAL,CAAauB,aAAtE,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIuC,SAAS,GAAGlD,EAAE,CAAC1E,IAAH,EAAZ;;YACA,IAAI4H,SAAJ,EAAe;cACX,KAAKf,kBAAL,GAA0Be,SAAS,CAACd,mBAApC;YACH;;YACD,OAAO,CAAC;YAAE;YAAH,EAAe,KAAKD,kBAApB,CAAP;;UACJ,KAAK,CAAL;YACIgB,KAAK,GAAGnD,EAAE,CAAC1E,IAAH,EAAR;YACA+C,MAAM,CAACvB,KAAP,CAAa,gDAAgDqG,KAA7D;YACA,MAAMA,KAAN;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QAvBZ;MAyBH,CA1BiB,CAAlB;IA2BH,CA7Be,CAAhB;EA8BH,CA/BD;;EAgCA7E,qBAAqB,CAACQ,SAAtB,CAAgCuE,oBAAhC,GAAuD,YAAY;IAC/D,OAAOtJ,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAIuJ,QAAJ,EAAcC,QAAd,EAAwBC,cAAxB,EAAwCC,qBAAxC,EAA+DC,KAA/D;MACA,OAAOxI,WAAW,CAAC,IAAD,EAAO,UAAU8E,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAC3E,KAAX;UACI,KAAK,CAAL;YACI2E,EAAE,CAACxE,IAAH,CAAQe,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK0G,qBAAL,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIK,QAAQ,GAAGtD,EAAE,CAAC1E,IAAH,EAAX;YACAiI,QAAQ,GAAG,KAAK3E,gBAAL,CAAsBtC,MAAtB,KAAiC,CAAjC,GACL,KAAKqH,uBAAL,EADK,GAEL,KAAK/E,gBAFX;YAGA4E,cAAc,GAAG;cACbtD,YAAY,EAAE,KAAKd,OAAL,CAAac,YADd;cAEbS,aAAa,EAAE,KAAKvB,OAAL,CAAauB,aAFf;cAGbhC,SAAS,EAAE4E,QAHE;cAIbK,aAAa,EAAEN;YAJF,CAAjB;YAMA,KAAK7E,YAAL,CAAkBC,qBAAlB,GAA0C,IAA1C;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK2D,cAAL,CAAoBmB,cAApB,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIC,qBAAqB,GAAGzD,EAAE,CAAC1E,IAAH,EAAxB;YACA,KAAK6G,kBAAL,GAA0BsB,qBAAqB,CAACI,iBAAhD;YACA,KAAKpF,YAAL,CAAkBC,qBAAlB,GAA0C,KAA1C;YACA,KAAKE,gBAAL,GAAwB,EAAxB;YACA,OAAO,CAAC;YAAE;YAAH,EAAe6E,qBAAf,CAAP;;UACJ,KAAK,CAAL;YACIC,KAAK,GAAG1D,EAAE,CAAC1E,IAAH,EAAR;YACA+C,MAAM,CAACvB,KAAP,CAAa,wCAAwC4G,KAArD;;YACA,IAAItF,iBAAiB,CAAC0F,QAAlB,CAA2BJ,KAAK,CAACK,IAAjC,CAAJ,EAA4C;cACxC,KAAKC,6BAAL,CAAmC;gBAC/BrF,SAAS,EAAE,KAAKC,gBADe;gBAE/BsB,YAAY,EAAE,KAAKd,OAAL,CAAac,YAFI;gBAG/BS,aAAa,EAAE,KAAKvB,OAAL,CAAauB;cAHG,CAAnC;YAKH,CAND,MAOK;cACD,KAAKlC,YAAL,CAAkBC,qBAAlB,GAA0C,KAA1C;cACA,MAAMgF,KAAN;YACH;;YACD,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QAtCZ;MAwCH,CAzCiB,CAAlB;IA0CH,CA5Ce,CAAhB;EA6CH,CA9CD;;EA+CApF,qBAAqB,CAACQ,SAAtB,CAAgC6E,uBAAhC,GAA0D,YAAY;IAClE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAIM,eAAe,GAAG,CAAtB;IACA,IAAIC,aAAa,GAAG,CAApB;;IACA,OAAOD,eAAe,GAAG,KAAKxF,YAAL,CAAkBE,SAAlB,CAA4BrC,MAArD,EAA6D;MACzD,IAAI6H,YAAY,GAAG,KAAK1F,YAAL,CAAkBE,SAAlB,CAA4BsF,eAA5B,CAAnB;MACA,IAAIG,SAAS,GAAGD,YAAY,GACtB,IAAIE,WAAJ,GAAkBC,MAAlB,CAAyBH,YAAY,CAACI,OAAtC,EAA+CjI,MAA/C,GACEwB,+BAFoB,GAGtB,CAHN;;MAIA,IAAIsG,SAAS,GAAGnG,6BAAhB,EAA+C;QAC3C,IAAIqD,SAAS,GAAG,mEAAmE8C,SAAnE,GAA+E,2BAA/F;QACA/F,MAAM,CAAC2E,IAAP,CAAY1B,SAAZ;QACA6C,YAAY,CAACI,OAAb,GAAuBJ,YAAY,CAACI,OAAb,CAAqBC,SAArB,CAA+B,CAA/B,EAAkCJ,SAAlC,CAAvB;MACH;;MACD,IAAIF,aAAa,GAAGE,SAAhB,GAA4BpG,mCAAhC,EACI;MACJkG,aAAa,IAAIE,SAAjB;MACAH,eAAe;IAClB;;IACD,KAAKrF,gBAAL,GAAwB,KAAKH,YAAL,CAAkBE,SAAlB,CAA4B8F,MAA5B,CAAmC,CAAnC,EAAsCR,eAAtC,CAAxB;IACA,OAAO,KAAKrF,gBAAZ;EACH,CA7BD;;EA8BAN,qBAAqB,CAACQ,SAAtB,CAAgCkF,6BAAhC,GAAgE,UAAUU,OAAV,EAAmB;IAC/E,OAAO3K,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAIuJ,QAAJ,EAAcqB,qBAAd,EAAqCC,KAArC;MACA,OAAO1J,WAAW,CAAC,IAAD,EAAO,UAAU8E,EAAV,EAAc;QACnC,QAAQA,EAAE,CAAC3E,KAAX;UACI,KAAK,CAAL;YACI2E,EAAE,CAACxE,IAAH,CAAQe,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,KAAK4F,kBAAL,GAA0BiB,SAA1B;YACA,KAAK3E,YAAL,CAAkBC,qBAAlB,GAA0C,IAA1C;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKuE,qBAAL,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIK,QAAQ,GAAGtD,EAAE,CAAC1E,IAAH,EAAX;YACAoJ,OAAO,CAACd,aAAR,GAAwBN,QAAxB;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKjB,cAAL,CAAoBqC,OAApB,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIC,qBAAqB,GAAG3E,EAAE,CAAC1E,IAAH,EAAxB;YACA,KAAKmD,YAAL,CAAkBC,qBAAlB,GAA0C,KAA1C;YACA,KAAKE,gBAAL,GAAwB,EAAxB;YACA,OAAO,CAAC;YAAE;YAAH,EAAe+F,qBAAf,CAAP;;UACJ,KAAK,CAAL;YACIC,KAAK,GAAG5E,EAAE,CAAC1E,IAAH,EAAR;YACA+C,MAAM,CAACvB,KAAP,CAAa,iEAAiE8H,KAA9E;YACA,KAAKnG,YAAL,CAAkBC,qBAAlB,GAA0C,KAA1C;YACA,MAAMkG,KAAN;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QApBZ;MAsBH,CAvBiB,CAAlB;IAwBH,CA1Be,CAAhB;EA2BH,CA5BD;;EA6BAtG,qBAAqB,CAACQ,SAAtB,CAAgCD,wBAAhC,GAA2D,YAAY;IACnE,IAAI8D,KAAK,GAAG,IAAZ;;IACA,IAAI,KAAKkC,MAAT,EAAiB;MACbC,aAAa,CAAC,KAAKD,MAAN,CAAb;IACH;;IACD,KAAKA,MAAL,GAAcE,WAAW,CAAC,YAAY;MAAE,OAAOhL,SAAS,CAAC4I,KAAD,EAAQ,KAAK,CAAb,EAAgB,KAAK,CAArB,EAAwB,YAAY;QACxF,IAAIqC,KAAJ;QACA,OAAO9J,WAAW,CAAC,IAAD,EAAO,UAAU8E,EAAV,EAAc;UACnC,QAAQA,EAAE,CAAC3E,KAAX;YACI,KAAK,CAAL;cACI2E,EAAE,CAACxE,IAAH,CAAQe,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;cACA,IAAI,CAAC,KAAK0I,2BAAL,EAAL,EAAyC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;cACzC,OAAO,CAAC;cAAE;cAAH,EAAc,KAAK5B,oBAAL,EAAd,CAAP;;YACJ,KAAK,CAAL;cACIrD,EAAE,CAAC1E,IAAH;;cACA0E,EAAE,CAAC3E,KAAH,GAAW,CAAX;;YACJ,KAAK,CAAL;cAAQ,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACR,KAAK,CAAL;cACI2J,KAAK,GAAGhF,EAAE,CAAC1E,IAAH,EAAR;cACA+C,MAAM,CAACvB,KAAP,CAAa,qEAAqEkI,KAAlF;cACA,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACJ,KAAK,CAAL;cAAQ,OAAO,CAAC;cAAE;cAAH,CAAP;UAbZ;QAeH,CAhBiB,CAAlB;MAiBH,CAnBuD,CAAhB;IAmBnC,CAnBoB,EAmBlB,IAnBkB,CAAzB;EAoBH,CAzBD;;EA0BA1G,qBAAqB,CAACQ,SAAtB,CAAgCmG,2BAAhC,GAA8D,YAAY;IACtE,OAAQ,CAAC,KAAKxG,YAAL,CAAkBE,SAAlB,CAA4BrC,MAA5B,KAAuC,CAAvC,IACL,KAAKsC,gBAAL,CAAsBtC,MAAtB,KAAiC,CAD7B,KAEJ,CAAC,KAAKmC,YAAL,CAAkBC,qBAFvB;EAGH,CAJD;;EAKAJ,qBAAqB,CAACU,aAAtB,GAAsCd,4BAAtC;EACAI,qBAAqB,CAACY,QAAtB,GAAiCnB,uBAAjC;EACA,OAAOO,qBAAP;AACH,CAzgB0C,EAA3C;;AA0gBA,SAASA,qBAAT","names":["CloudWatchLogsClient","CreateLogGroupCommand","CreateLogStreamCommand","DescribeLogGroupsCommand","DescribeLogStreamsCommand","GetLogEventsCommand","PutLogEventsCommand","Credentials","ConsoleLogger","Logger","getAmplifyUserAgent","parseMobileHubConfig","AWS_CLOUDWATCH_BASE_BUFFER_SIZE","AWS_CLOUDWATCH_CATEGORY","AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE","AWS_CLOUDWATCH_MAX_EVENT_SIZE","AWS_CLOUDWATCH_PROVIDER_NAME","NO_CREDS_ERROR_STRING","RETRY_ERROR_CODES","logger","config","configure","_dataTracker","eventUploadInProgress","logEvents","_currentLogBatch","_initiateLogPushInterval","AWSCloudWatchProvider","PROVIDER_NAME","CATEGORY","_config","conf","Object","assign","Logging","params","debug","logGroupName","cmd","_ensureCredentials","credentialsOK","_a","Error","client","_initCloudWatchLogs","send","output","error","error_1","error_2","logStreamName","error_3","error_4","error_5","logs","__spread","verifiedLogGroup","getLogGroups","logGroupNamePrefix","currGroups","logGroups","foundGroups","filter","length","createLogGroup","errString","err_1","getLogStreams","logStreamNamePrefix","currStreams","logStreams","foundStreams","_nextSequenceToken","uploadSequenceToken","createLogStream","err_2","err_3","region","credentials","customUserAgent","endpoint","get","then","cred","shear","_this","catch","warn","_validateLogGroupExistsAndCreate","undefined","_validateLogStreamExists","logStream","err_4","_getNextSequenceToken","seqToken","logBatch","_getBufferedBatchOfLogs","putLogsPayload","sequenceToken","_sendLogEvents","sendLogEventsResponse","nextSequenceToken","err_5","includes","name","_getNewSequenceTokenAndSubmit","currentEventIdx","totalByteSize","currentEvent","eventSize","TextEncoder","encode","message","substring","splice","payload","sendLogEventsRepsonse","err_6","_timer","clearInterval","setInterval","_getDocUploadPermissibility","_safeUploadLogEvents","err_7"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/core/src/Providers/AWSCloudWatchProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport {\n\tCloudWatchLogsClient,\n\tCreateLogGroupCommand,\n\tCreateLogGroupCommandInput,\n\tCreateLogGroupCommandOutput,\n\tCreateLogStreamCommand,\n\tCreateLogStreamCommandInput,\n\tCreateLogStreamCommandOutput,\n\tDescribeLogGroupsCommand,\n\tDescribeLogGroupsCommandInput,\n\tDescribeLogGroupsCommandOutput,\n\tDescribeLogStreamsCommand,\n\tDescribeLogStreamsCommandInput,\n\tDescribeLogStreamsCommandOutput,\n\tGetLogEventsCommand,\n\tGetLogEventsCommandInput,\n\tGetLogEventsCommandOutput,\n\tInputLogEvent,\n\tLogGroup,\n\tLogStream,\n\tPutLogEventsCommand,\n\tPutLogEventsCommandInput,\n\tPutLogEventsCommandOutput,\n} from '@aws-sdk/client-cloudwatch-logs';\nimport {\n\tAWSCloudWatchProviderOptions,\n\tCloudWatchDataTracker,\n\tLoggingProvider,\n} from '../types/types';\nimport { Credentials } from '../..';\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { getAmplifyUserAgent } from '../Platform';\nimport { parseMobileHubConfig } from '../Parser';\nimport {\n\tAWS_CLOUDWATCH_BASE_BUFFER_SIZE,\n\tAWS_CLOUDWATCH_CATEGORY,\n\tAWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE,\n\tAWS_CLOUDWATCH_MAX_EVENT_SIZE,\n\tAWS_CLOUDWATCH_PROVIDER_NAME,\n\tNO_CREDS_ERROR_STRING,\n\tRETRY_ERROR_CODES,\n} from '../Util/Constants';\n\nconst logger = new Logger('AWSCloudWatch');\n\nclass AWSCloudWatchProvider implements LoggingProvider {\n\tstatic readonly PROVIDER_NAME = AWS_CLOUDWATCH_PROVIDER_NAME;\n\tstatic readonly CATEGORY = AWS_CLOUDWATCH_CATEGORY;\n\n\tprivate _config: AWSCloudWatchProviderOptions;\n\tprivate _dataTracker: CloudWatchDataTracker;\n\tprivate _currentLogBatch: InputLogEvent[];\n\tprivate _timer;\n\tprivate _nextSequenceToken: string | undefined;\n\n\tconstructor(config?: AWSCloudWatchProviderOptions) {\n\t\tthis.configure(config);\n\t\tthis._dataTracker = {\n\t\t\teventUploadInProgress: false,\n\t\t\tlogEvents: [],\n\t\t};\n\t\tthis._currentLogBatch = [];\n\t\tthis._initiateLogPushInterval();\n\t}\n\n\tpublic getProviderName(): string {\n\t\treturn AWSCloudWatchProvider.PROVIDER_NAME;\n\t}\n\n\tpublic getCategoryName(): string {\n\t\treturn AWSCloudWatchProvider.CATEGORY;\n\t}\n\n\tpublic getLogQueue(): InputLogEvent[] {\n\t\treturn this._dataTracker.logEvents;\n\t}\n\n\tpublic configure(\n\t\tconfig?: AWSCloudWatchProviderOptions\n\t): AWSCloudWatchProviderOptions {\n\t\tif (!config) return this._config || {};\n\n\t\tconst conf = Object.assign(\n\t\t\t{},\n\t\t\tthis._config,\n\t\t\tparseMobileHubConfig(config).Logging,\n\t\t\tconfig\n\t\t);\n\t\tthis._config = conf;\n\n\t\treturn this._config;\n\t}\n\n\tpublic async createLogGroup(\n\t\tparams: CreateLogGroupCommandInput\n\t): Promise<CreateLogGroupCommandOutput> {\n\t\tlogger.debug(\n\t\t\t'creating new log group in CloudWatch - ',\n\t\t\tparams.logGroupName\n\t\t);\n\t\tconst cmd = new CreateLogGroupCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error creating log group - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async getLogGroups(\n\t\tparams: DescribeLogGroupsCommandInput\n\t): Promise<DescribeLogGroupsCommandOutput> {\n\t\tlogger.debug('getting list of log groups');\n\n\t\tconst cmd = new DescribeLogGroupsCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error getting log group - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async createLogStream(\n\t\tparams: CreateLogStreamCommandInput\n\t): Promise<CreateLogStreamCommandOutput> {\n\t\tlogger.debug(\n\t\t\t'creating new log stream in CloudWatch - ',\n\t\t\tparams.logStreamName\n\t\t);\n\t\tconst cmd = new CreateLogStreamCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error creating log stream - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async getLogStreams(\n\t\tparams: DescribeLogStreamsCommandInput\n\t): Promise<DescribeLogStreamsCommandOutput> {\n\t\tlogger.debug('getting list of log streams');\n\t\tconst cmd = new DescribeLogStreamsCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error getting log stream - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async getLogEvents(\n\t\tparams: GetLogEventsCommandInput\n\t): Promise<GetLogEventsCommandOutput> {\n\t\tlogger.debug('getting log events from stream - ', params.logStreamName);\n\t\tconst cmd = new GetLogEventsCommand(params);\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\t\t\treturn output;\n\t\t} catch (error) {\n\t\t\tlogger.error(`error getting log events - ${error}`);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic pushLogs(logs: InputLogEvent[]): void {\n\t\tlogger.debug('pushing log events to Cloudwatch...');\n\t\tthis._dataTracker.logEvents = [...this._dataTracker.logEvents, ...logs];\n\t}\n\n\tprivate async _validateLogGroupExistsAndCreate(\n\t\tlogGroupName: string\n\t): Promise<LogGroup> {\n\t\tif (this._dataTracker.verifiedLogGroup) {\n\t\t\treturn this._dataTracker.verifiedLogGroup;\n\t\t}\n\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst currGroups = await this.getLogGroups({\n\t\t\t\tlogGroupNamePrefix: logGroupName,\n\t\t\t});\n\n\t\t\tif (!(typeof currGroups === 'string') && currGroups.logGroups) {\n\t\t\t\tconst foundGroups = currGroups.logGroups.filter(\n\t\t\t\t\tgroup => group.logGroupName === logGroupName\n\t\t\t\t);\n\t\t\t\tif (foundGroups.length > 0) {\n\t\t\t\t\tthis._dataTracker.verifiedLogGroup = foundGroups[0];\n\n\t\t\t\t\treturn foundGroups[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * If we get to this point, it means that the specified log group does not exist\n\t\t\t * and we should create it.\n\t\t\t */\n\t\t\tawait this.createLogGroup({ logGroupName });\n\n\t\t\treturn null;\n\t\t} catch (err) {\n\t\t\tconst errString = `failure during log group search: ${err}`;\n\t\t\tlogger.error(errString);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async _validateLogStreamExists(\n\t\tlogGroupName: string,\n\t\tlogStreamName: string\n\t): Promise<LogStream> {\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tconst currStreams = await this.getLogStreams({\n\t\t\t\tlogGroupName,\n\t\t\t\tlogStreamNamePrefix: logStreamName,\n\t\t\t});\n\n\t\t\tif (currStreams.logStreams) {\n\t\t\t\tconst foundStreams = currStreams.logStreams.filter(\n\t\t\t\t\tstream => stream.logStreamName === logStreamName\n\t\t\t\t);\n\t\t\t\tif (foundStreams.length > 0) {\n\t\t\t\t\tthis._nextSequenceToken = foundStreams[0].uploadSequenceToken;\n\n\t\t\t\t\treturn foundStreams[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * If we get to this point, it means that the specified stream does not\n\t\t\t * exist, and we should create it now.\n\t\t\t */\n\t\t\tawait this.createLogStream({\n\t\t\t\tlogGroupName,\n\t\t\t\tlogStreamName,\n\t\t\t});\n\n\t\t\treturn null;\n\t\t} catch (err) {\n\t\t\tconst errString = `failure during log stream search: ${err}`;\n\t\t\tlogger.error(errString);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async _sendLogEvents(\n\t\tparams: PutLogEventsCommandInput\n\t): Promise<PutLogEventsCommandOutput> {\n\t\ttry {\n\t\t\tconst credentialsOK = await this._ensureCredentials();\n\t\t\tif (!credentialsOK) {\n\t\t\t\tthrow new Error(NO_CREDS_ERROR_STRING);\n\t\t\t}\n\n\t\t\tlogger.debug('sending log events to stream - ', params.logStreamName);\n\t\t\tconst cmd = new PutLogEventsCommand(params);\n\t\t\tconst client = this._initCloudWatchLogs();\n\t\t\tconst output = await client.send(cmd);\n\n\t\t\treturn output;\n\t\t} catch (err) {\n\t\t\tconst errString = `failure during log push: ${err}`;\n\t\t\tlogger.error(errString);\n\t\t}\n\t}\n\n\tprivate _initCloudWatchLogs() {\n\t\treturn new CloudWatchLogsClient({\n\t\t\tregion: this._config.region,\n\t\t\tcredentials: this._config.credentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t\tendpoint: this._config.endpoint,\n\t\t});\n\t}\n\n\tprivate async _ensureCredentials() {\n\t\treturn await Credentials.get()\n\t\t\t.then(credentials => {\n\t\t\t\tif (!credentials) return false;\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\tlogger.debug('set credentials for logging', cred);\n\t\t\t\tthis._config.credentials = cred;\n\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tlogger.warn('ensure credentials error', error);\n\t\t\t\treturn false;\n\t\t\t});\n\t}\n\n\tprivate async _getNextSequenceToken(): Promise<string> {\n\t\tif (this._nextSequenceToken && this._nextSequenceToken.length > 0) {\n\t\t\treturn this._nextSequenceToken;\n\t\t}\n\n\t\t/**\n\t\t * A sequence token will not exist if any of the following are true:\n\t\t *   ...the log group does not exist\n\t\t *   ...the log stream does not exist\n\t\t *   ...the log stream does exist but has no logs written to it yet\n\t\t */\n\t\ttry {\n\t\t\tawait this._validateLogGroupExistsAndCreate(this._config.logGroupName);\n\n\t\t\tthis._nextSequenceToken = undefined;\n\n\t\t\tconst logStream = await this._validateLogStreamExists(\n\t\t\t\tthis._config.logGroupName,\n\t\t\t\tthis._config.logStreamName\n\t\t\t);\n\n\t\t\tif (logStream) {\n\t\t\t\tthis._nextSequenceToken = logStream.uploadSequenceToken;\n\t\t\t}\n\n\t\t\treturn this._nextSequenceToken;\n\t\t} catch (err) {\n\t\t\tlogger.error(`failure while getting next sequence token: ${err}`);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate async _safeUploadLogEvents(): Promise<PutLogEventsCommandOutput> {\n\t\ttry {\n\t\t\t/**\n\t\t\t * CloudWatch has restrictions on the size of the log events that get sent up.\n\t\t\t * We need to track both the size of each event and the total size of the batch\n\t\t\t * of logs.\n\t\t\t *\n\t\t\t * We also need to ensure that the logs in the batch are sorted in chronological order.\n\t\t\t * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n\t\t\t */\n\t\t\tconst seqToken = await this._getNextSequenceToken();\n\t\t\tconst logBatch =\n\t\t\t\tthis._currentLogBatch.length === 0\n\t\t\t\t\t? this._getBufferedBatchOfLogs()\n\t\t\t\t\t: this._currentLogBatch;\n\n\t\t\tconst putLogsPayload: PutLogEventsCommandInput = {\n\t\t\t\tlogGroupName: this._config.logGroupName,\n\t\t\t\tlogStreamName: this._config.logStreamName,\n\t\t\t\tlogEvents: logBatch,\n\t\t\t\tsequenceToken: seqToken,\n\t\t\t};\n\n\t\t\tthis._dataTracker.eventUploadInProgress = true;\n\t\t\tconst sendLogEventsResponse = await this._sendLogEvents(putLogsPayload);\n\n\t\t\tthis._nextSequenceToken = sendLogEventsResponse.nextSequenceToken;\n\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\t\t\tthis._currentLogBatch = [];\n\n\t\t\treturn sendLogEventsResponse;\n\t\t} catch (err) {\n\t\t\tlogger.error(`error during _safeUploadLogEvents: ${err}`);\n\n\t\t\tif (RETRY_ERROR_CODES.includes(err.name)) {\n\t\t\t\tthis._getNewSequenceTokenAndSubmit({\n\t\t\t\t\tlogEvents: this._currentLogBatch,\n\t\t\t\t\tlogGroupName: this._config.logGroupName,\n\t\t\t\t\tlogStreamName: this._config.logStreamName,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _getBufferedBatchOfLogs(): InputLogEvent[] {\n\t\t/**\n\t\t * CloudWatch has restrictions on the size of the log events that get sent up.\n\t\t * We need to track both the size of each event and the total size of the batch\n\t\t * of logs.\n\t\t *\n\t\t * We also need to ensure that the logs in the batch are sorted in chronological order.\n\t\t * https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html\n\t\t */\n\t\tlet currentEventIdx = 0;\n\t\tlet totalByteSize = 0;\n\n\t\twhile (currentEventIdx < this._dataTracker.logEvents.length) {\n\t\t\tconst currentEvent = this._dataTracker.logEvents[currentEventIdx];\n\t\t\tconst eventSize = currentEvent\n\t\t\t\t? new TextEncoder().encode(currentEvent.message).length +\n\t\t\t\t  AWS_CLOUDWATCH_BASE_BUFFER_SIZE\n\t\t\t\t: 0;\n\t\t\tif (eventSize > AWS_CLOUDWATCH_MAX_EVENT_SIZE) {\n\t\t\t\tconst errString = `Log entry exceeds maximum size for CloudWatch logs. Log size: ${eventSize}. Truncating log message.`;\n\t\t\t\tlogger.warn(errString);\n\n\t\t\t\tcurrentEvent.message = currentEvent.message.substring(0, eventSize);\n\t\t\t}\n\n\t\t\tif (totalByteSize + eventSize > AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE)\n\t\t\t\tbreak;\n\t\t\ttotalByteSize += eventSize;\n\t\t\tcurrentEventIdx++;\n\t\t}\n\n\t\tthis._currentLogBatch = this._dataTracker.logEvents.splice(\n\t\t\t0,\n\t\t\tcurrentEventIdx\n\t\t);\n\n\t\treturn this._currentLogBatch;\n\t}\n\n\tprivate async _getNewSequenceTokenAndSubmit(\n\t\tpayload: PutLogEventsCommandInput\n\t): Promise<PutLogEventsCommandOutput> {\n\t\ttry {\n\t\t\tthis._nextSequenceToken = undefined;\n\t\t\tthis._dataTracker.eventUploadInProgress = true;\n\n\t\t\tconst seqToken = await this._getNextSequenceToken();\n\t\t\tpayload.sequenceToken = seqToken;\n\t\t\tconst sendLogEventsRepsonse = await this._sendLogEvents(payload);\n\n\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\t\t\tthis._currentLogBatch = [];\n\n\t\t\treturn sendLogEventsRepsonse;\n\t\t} catch (err) {\n\t\t\tlogger.error(\n\t\t\t\t`error when retrying log submission with new sequence token: ${err}`\n\t\t\t);\n\t\t\tthis._dataTracker.eventUploadInProgress = false;\n\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprivate _initiateLogPushInterval(): void {\n\t\tif (this._timer) {\n\t\t\tclearInterval(this._timer);\n\t\t}\n\n\t\tthis._timer = setInterval(async () => {\n\t\t\ttry {\n\t\t\t\tif (this._getDocUploadPermissibility()) {\n\t\t\t\t\tawait this._safeUploadLogEvents();\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error(\n\t\t\t\t\t`error when calling _safeUploadLogEvents in the timer interval - ${err}`\n\t\t\t\t);\n\t\t\t}\n\t\t}, 2000);\n\t}\n\n\tprivate _getDocUploadPermissibility(): boolean {\n\t\treturn (\n\t\t\t(this._dataTracker.logEvents.length !== 0 ||\n\t\t\t\tthis._currentLogBatch.length !== 0) &&\n\t\t\t!this._dataTracker.eventUploadInProgress\n\t\t);\n\t}\n}\n\nexport { AWSCloudWatchProvider };\n"]},"metadata":{},"sourceType":"module"}