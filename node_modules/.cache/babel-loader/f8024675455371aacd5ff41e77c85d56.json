{"ast":null,"code":"var ModelSortPredicateCreator =\n/** @class */\nfunction () {\n  function ModelSortPredicateCreator() {}\n\n  ModelSortPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function (_target, propertyKey, receiver) {\n        var field = propertyKey;\n\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n\n        var result = function (sortDirection) {\n          ModelSortPredicateCreator.sortPredicateGroupsMap.get(receiver).push({\n            field: field,\n            sortDirection: sortDirection\n          });\n          return receiver;\n        };\n\n        return result;\n      }\n    });\n    ModelSortPredicateCreator.sortPredicateGroupsMap.set(predicate, []);\n    return predicate;\n  };\n\n  ModelSortPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelSortPredicateCreator.sortPredicateGroupsMap.has(predicate);\n  };\n\n  ModelSortPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n\n    if (throwOnInvalid && !ModelSortPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n\n    return ModelSortPredicateCreator.sortPredicateGroupsMap.get(predicate);\n  }; // transforms cb-style predicate into Proxy\n\n\n  ModelSortPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n\n    return existing(ModelSortPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n\n  ModelSortPredicateCreator.sortPredicateGroupsMap = new WeakMap();\n  return ModelSortPredicateCreator;\n}();\n\nexport { ModelSortPredicateCreator };","map":{"version":3,"mappings":"AAAA,IAAIA,yBAAyB;AAAG;AAAe,YAAY;EACvD,SAASA,yBAAT,GAAqC,CACpC;;EACDA,yBAAyB,CAACC,sBAA1B,GAAmD,UAAUC,eAAV,EAA2B;IAC1E,IAAIC,SAAS,GAAGD,eAAe,CAACE,IAAhC;IACA,IAAIC,UAAU,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,IAAP,CAAYN,eAAe,CAACO,MAA5B,CAAR,CAAjB;IACA,IAAIC,OAAJ;IACA,IAAIC,SAAS,GAAG,IAAIC,KAAJ,CAAU,EAAV,EAAeF,OAAO,GAAG;MACrCG,GAAG,EAAE,UAAUC,OAAV,EAAmBC,WAAnB,EAAgCC,QAAhC,EAA0C;QAC3C,IAAIC,KAAK,GAAGF,WAAZ;;QACA,IAAI,CAACV,UAAU,CAACa,GAAX,CAAeD,KAAf,CAAL,EAA4B;UACxB,MAAM,IAAIE,KAAJ,CAAU,qCAAqCF,KAArC,GAA6C,WAA7C,GAA2Dd,SAArE,CAAN;QACH;;QACD,IAAIiB,MAAM,GAAG,UAAUC,aAAV,EAAyB;UAClCrB,yBAAyB,CAACsB,sBAA1B,CACKT,GADL,CACSG,QADT,EAEKO,IAFL,CAEU;YAAEN,KAAK,EAAEA,KAAT;YAAgBI,aAAa,EAAEA;UAA/B,CAFV;UAGA,OAAOL,QAAP;QACH,CALD;;QAMA,OAAOI,MAAP;MACH;IAboC,CAAzB,CAAhB;IAeApB,yBAAyB,CAACsB,sBAA1B,CAAiDE,GAAjD,CAAqDb,SAArD,EAAgE,EAAhE;IACA,OAAOA,SAAP;EACH,CArBD;;EAsBAX,yBAAyB,CAACyB,gBAA1B,GAA6C,UAAUd,SAAV,EAAqB;IAC9D,OAAOX,yBAAyB,CAACsB,sBAA1B,CAAiDJ,GAAjD,CAAqDP,SAArD,CAAP;EACH,CAFD;;EAGAX,yBAAyB,CAAC0B,aAA1B,GAA0C,UAAUf,SAAV,EAAqBgB,cAArB,EAAqC;IAC3E,IAAIA,cAAc,KAAK,KAAK,CAA5B,EAA+B;MAAEA,cAAc,GAAG,IAAjB;IAAwB;;IACzD,IAAIA,cAAc,IACd,CAAC3B,yBAAyB,CAACyB,gBAA1B,CAA2Cd,SAA3C,CADL,EAC4D;MACxD,MAAM,IAAIQ,KAAJ,CAAU,4BAAV,CAAN;IACH;;IACD,OAAOnB,yBAAyB,CAACsB,sBAA1B,CAAiDT,GAAjD,CAAqDF,SAArD,CAAP;EACH,CAPD,CA5BuD,CAoCvD;;;EACAX,yBAAyB,CAAC4B,kBAA1B,GAA+C,UAAU1B,eAAV,EAA2B2B,QAA3B,EAAqC;IAChF,IAAI,CAACA,QAAD,IAAa,CAAC3B,eAAlB,EAAmC;MAC/B,OAAO4B,SAAP;IACH;;IACD,OAAOD,QAAQ,CAAC7B,yBAAyB,CAACC,sBAA1B,CAAiDC,eAAjD,CAAD,CAAf;EACH,CALD;;EAMAF,yBAAyB,CAACsB,sBAA1B,GAAmD,IAAIS,OAAJ,EAAnD;EACA,OAAO/B,yBAAP;AACH,CA7C8C,EAA/C;;AA8CA,SAASA,yBAAT","names":["ModelSortPredicateCreator","modelDefinition","fieldNames","Set","Object","keys","fields","handler","predicate","Proxy","get","_target","propertyKey","receiver","field","has","Error","modelName","result","sortDirection","sortPredicateGroupsMap","push","set","throwOnInvalid","isValidPredicate","existing","undefined","createPredicateBuilder","WeakMap"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-amplify/datastore/src/predicates/sort.ts"],"sourcesContent":["import {\n\tPersistentModel,\n\tSchemaModel,\n\tSortPredicate,\n\tProducerSortPredicate,\n\tSortDirection,\n\tSortPredicatesGroup,\n} from '../types';\n\nexport class ModelSortPredicateCreator {\n\tprivate static sortPredicateGroupsMap = new WeakMap<\n\t\tSortPredicate<any>,\n\t\tSortPredicatesGroup<any>\n\t>();\n\n\tprivate static createPredicateBuilder<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel\n\t) {\n\t\tconst { name: modelName } = modelDefinition;\n\t\tconst fieldNames = new Set<keyof T>(Object.keys(modelDefinition.fields));\n\n\t\tlet handler: ProxyHandler<SortPredicate<T>>;\n\t\tconst predicate = new Proxy(\n\t\t\t{} as SortPredicate<T>,\n\t\t\t(handler = {\n\t\t\t\tget(_target, propertyKey, receiver: SortPredicate<T>) {\n\t\t\t\t\tconst field = propertyKey as keyof T;\n\n\t\t\t\t\tif (!fieldNames.has(field)) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Invalid field for model. field: ${field}, model: ${modelName}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = (sortDirection: SortDirection) => {\n\t\t\t\t\t\tModelSortPredicateCreator.sortPredicateGroupsMap\n\t\t\t\t\t\t\t.get(receiver)\n\t\t\t\t\t\t\t.push({ field, sortDirection });\n\n\t\t\t\t\t\treturn receiver;\n\t\t\t\t\t};\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\n\t\tModelSortPredicateCreator.sortPredicateGroupsMap.set(predicate, []);\n\n\t\treturn predicate;\n\t}\n\n\tstatic isValidPredicate<T extends PersistentModel>(\n\t\tpredicate: any\n\t): predicate is SortPredicate<T> {\n\t\treturn ModelSortPredicateCreator.sortPredicateGroupsMap.has(predicate);\n\t}\n\n\tstatic getPredicates<T extends PersistentModel>(\n\t\tpredicate: SortPredicate<T>,\n\t\tthrowOnInvalid: boolean = true\n\t): SortPredicatesGroup<T> {\n\t\tif (\n\t\t\tthrowOnInvalid &&\n\t\t\t!ModelSortPredicateCreator.isValidPredicate(predicate)\n\t\t) {\n\t\t\tthrow new Error('The predicate is not valid');\n\t\t}\n\n\t\treturn ModelSortPredicateCreator.sortPredicateGroupsMap.get(predicate);\n\t}\n\n\t// transforms cb-style predicate into Proxy\n\tstatic createFromExisting<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\texisting: ProducerSortPredicate<T>\n\t) {\n\t\tif (!existing || !modelDefinition) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn existing(\n\t\t\tModelSortPredicateCreator.createPredicateBuilder(modelDefinition)\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}