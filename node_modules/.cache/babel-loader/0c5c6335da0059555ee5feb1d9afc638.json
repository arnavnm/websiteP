{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetShardIteratorInput, GetShardIteratorOutput } from \"../models/models_0\";\nimport { deserializeAws_json1_1GetShardIteratorCommand, serializeAws_json1_1GetShardIteratorCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Gets an Amazon Kinesis shard iterator. A shard iterator expires 5 minutes after it\n *             is returned to the requester.</p>\n *         <p>A shard iterator specifies the shard position from which to start reading data\n *             records sequentially. The position is specified using the sequence number of a data\n *             record in a shard. A sequence number is the identifier associated with every record\n *             ingested in the stream, and is assigned when a record is put into the stream. Each\n *             stream has one or more shards.</p>\n *         <p>You must specify the shard iterator type. For example, you can set the\n *                 <code>ShardIteratorType</code> parameter to read exactly from the position denoted\n *             by a specific sequence number by using the <code>AT_SEQUENCE_NUMBER</code> shard\n *             iterator type. Alternatively, the parameter can read right after the sequence number by\n *             using the <code>AFTER_SEQUENCE_NUMBER</code> shard iterator type, using sequence numbers\n *             returned by earlier calls to <a>PutRecord</a>, <a>PutRecords</a>,\n *                 <a>GetRecords</a>, or <a>DescribeStream</a>. In the request,\n *             you can specify the shard iterator type <code>AT_TIMESTAMP</code> to read records from\n *             an arbitrary point in time, <code>TRIM_HORIZON</code> to cause\n *                 <code>ShardIterator</code> to point to the last untrimmed record in the shard in the\n *             system (the oldest data record in the shard), or <code>LATEST</code> so that you always\n *             read the most recent data in the shard. </p>\n *         <p>When you read repeatedly from a stream, use a <a>GetShardIterator</a>\n *             request to get the first shard iterator for use in your first <a>GetRecords</a> request and for subsequent reads use the shard iterator returned by the <a>GetRecords</a> request in <code>NextShardIterator</code>. A new shard\n *             iterator is returned by every <a>GetRecords</a> request in\n *                 <code>NextShardIterator</code>, which you use in the <code>ShardIterator</code>\n *             parameter of the next <a>GetRecords</a> request. </p>\n *         <p>If a <a>GetShardIterator</a> request is made too often, you receive a\n *                 <code>ProvisionedThroughputExceededException</code>. For more information about\n *             throughput limits, see <a>GetRecords</a>, and <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Streams Limits</a> in the\n *                 <i>Amazon Kinesis Data Streams Developer Guide</i>.</p>\n *         <p>If the shard is closed, <a>GetShardIterator</a> returns a valid iterator\n *             for the last sequence number of the shard. A shard can be closed as a result of using\n *                 <a>SplitShard</a> or <a>MergeShards</a>.</p>\n *         <p>\n *             <a>GetShardIterator</a> has a limit of five transactions per second per\n *             account per open shard.</p>\n */\n\nvar GetShardIteratorCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetShardIteratorCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetShardIteratorCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetShardIteratorCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"GetShardIteratorCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetShardIteratorInput.filterSensitiveLog,\n      outputFilterSensitiveLog: GetShardIteratorOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetShardIteratorCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1GetShardIteratorCommand(input, context);\n  };\n\n  GetShardIteratorCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1GetShardIteratorCommand(output, context);\n  };\n\n  return GetShardIteratorCommand;\n}($Command);\n\nexport { GetShardIteratorCommand };","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,qBAAT,EAAgCC,sBAAhC,QAA8D,oBAA9D;AACA,SAASC,6CAAT,EAAwDC,2CAAxD,QAA4G,0BAA5G;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,uBAAuB;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC3DT,SAAS,CAACQ,uBAAD,EAA0BC,MAA1B,CAAT,CAD2D,CAE3D;EACA;;;EACA,SAASD,uBAAT,CAAiCE,KAAjC,EAAwC;IACpC,IAAIC,KAAK,GACT;IACAF,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;IAGAD,KAAK,CAACD,KAAN,GAAcA,KAAd;IACA,OAAOC,KAAP,CALoC,CAMpC;EACH;EACD;AACJ;AACA;;;EACIH,uBAAuB,CAACK,SAAxB,CAAkCC,iBAAlC,GAAsD,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;IACjG,KAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,IAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;IACA,IAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;IACA,IAAIC,UAAU,GAAG,eAAjB;IACA,IAAIC,WAAW,GAAG,yBAAlB;IACA,IAAIC,uBAAuB,GAAG;MAC1BH,MAAM,EAAEA,MADkB;MAE1BC,UAAU,EAAEA,UAFc;MAG1BC,WAAW,EAAEA,WAHa;MAI1BE,uBAAuB,EAAE3B,qBAAqB,CAAC4B,kBAJrB;MAK1BC,wBAAwB,EAAE5B,sBAAsB,CAAC2B;IALvB,CAA9B;IAOA,IAAIE,cAAc,GAAGf,aAAa,CAACe,cAAnC;IACA,OAAOT,KAAK,CAACU,OAAN,CAAc,UAAUC,OAAV,EAAmB;MACpC,OAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuChB,OAAO,IAAI,EAAlD,CAAP;IACH,CAFM,EAEJU,uBAFI,CAAP;EAGH,CAjBD;;EAkBAnB,uBAAuB,CAACK,SAAxB,CAAkCO,SAAlC,GAA8C,UAAUV,KAAV,EAAiByB,OAAjB,EAA0B;IACpE,OAAO/B,2CAA2C,CAACM,KAAD,EAAQyB,OAAR,CAAlD;EACH,CAFD;;EAGA3B,uBAAuB,CAACK,SAAxB,CAAkCQ,WAAlC,GAAgD,UAAUe,MAAV,EAAkBD,OAAlB,EAA2B;IACvE,OAAOhC,6CAA6C,CAACiC,MAAD,EAASD,OAAT,CAApD;EACH,CAFD;;EAGA,OAAO3B,uBAAP;AACH,CAxC4C,CAwC3CD,QAxC2C,CAA7C;;AAyCA,SAASC,uBAAT","names":["GetShardIteratorInput","GetShardIteratorOutput","deserializeAws_json1_1GetShardIteratorCommand","serializeAws_json1_1GetShardIteratorCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","GetShardIteratorCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/client-kinesis/commands/GetShardIteratorCommand.ts"],"sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { GetShardIteratorInput, GetShardIteratorOutput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1GetShardIteratorCommand,\n  serializeAws_json1_1GetShardIteratorCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetShardIteratorCommandInput = GetShardIteratorInput;\nexport type GetShardIteratorCommandOutput = GetShardIteratorOutput & __MetadataBearer;\n\n/**\n * <p>Gets an Amazon Kinesis shard iterator. A shard iterator expires 5 minutes after it\n *             is returned to the requester.</p>\n *         <p>A shard iterator specifies the shard position from which to start reading data\n *             records sequentially. The position is specified using the sequence number of a data\n *             record in a shard. A sequence number is the identifier associated with every record\n *             ingested in the stream, and is assigned when a record is put into the stream. Each\n *             stream has one or more shards.</p>\n *         <p>You must specify the shard iterator type. For example, you can set the\n *                 <code>ShardIteratorType</code> parameter to read exactly from the position denoted\n *             by a specific sequence number by using the <code>AT_SEQUENCE_NUMBER</code> shard\n *             iterator type. Alternatively, the parameter can read right after the sequence number by\n *             using the <code>AFTER_SEQUENCE_NUMBER</code> shard iterator type, using sequence numbers\n *             returned by earlier calls to <a>PutRecord</a>, <a>PutRecords</a>,\n *                 <a>GetRecords</a>, or <a>DescribeStream</a>. In the request,\n *             you can specify the shard iterator type <code>AT_TIMESTAMP</code> to read records from\n *             an arbitrary point in time, <code>TRIM_HORIZON</code> to cause\n *                 <code>ShardIterator</code> to point to the last untrimmed record in the shard in the\n *             system (the oldest data record in the shard), or <code>LATEST</code> so that you always\n *             read the most recent data in the shard. </p>\n *         <p>When you read repeatedly from a stream, use a <a>GetShardIterator</a>\n *             request to get the first shard iterator for use in your first <a>GetRecords</a> request and for subsequent reads use the shard iterator returned by the <a>GetRecords</a> request in <code>NextShardIterator</code>. A new shard\n *             iterator is returned by every <a>GetRecords</a> request in\n *                 <code>NextShardIterator</code>, which you use in the <code>ShardIterator</code>\n *             parameter of the next <a>GetRecords</a> request. </p>\n *         <p>If a <a>GetShardIterator</a> request is made too often, you receive a\n *                 <code>ProvisionedThroughputExceededException</code>. For more information about\n *             throughput limits, see <a>GetRecords</a>, and <a href=\"https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html\">Streams Limits</a> in the\n *                 <i>Amazon Kinesis Data Streams Developer Guide</i>.</p>\n *         <p>If the shard is closed, <a>GetShardIterator</a> returns a valid iterator\n *             for the last sequence number of the shard. A shard can be closed as a result of using\n *                 <a>SplitShard</a> or <a>MergeShards</a>.</p>\n *         <p>\n *             <a>GetShardIterator</a> has a limit of five transactions per second per\n *             account per open shard.</p>\n */\nexport class GetShardIteratorCommand extends $Command<\n  GetShardIteratorCommandInput,\n  GetShardIteratorCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetShardIteratorCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetShardIteratorCommandInput, GetShardIteratorCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"GetShardIteratorCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetShardIteratorInput.filterSensitiveLog,\n      outputFilterSensitiveLog: GetShardIteratorOutput.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: GetShardIteratorCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1GetShardIteratorCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<GetShardIteratorCommandOutput> {\n    return deserializeAws_json1_1GetShardIteratorCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}