{"ast":null,"code":"import { __values } from \"tslib\";\nimport { escapeAttribute } from \"./escape-attribute\";\n/**\n * Represents an XML node.\n */\n\nvar XmlNode =\n/** @class */\nfunction () {\n  function XmlNode(name, children) {\n    if (children === void 0) {\n      children = [];\n    }\n\n    this.name = name;\n    this.children = children;\n    this.attributes = {};\n  }\n\n  XmlNode.prototype.withName = function (name) {\n    this.name = name;\n    return this;\n  };\n\n  XmlNode.prototype.addAttribute = function (name, value) {\n    this.attributes[name] = value;\n    return this;\n  };\n\n  XmlNode.prototype.addChildNode = function (child) {\n    this.children.push(child);\n    return this;\n  };\n\n  XmlNode.prototype.removeAttribute = function (name) {\n    delete this.attributes[name];\n    return this;\n  };\n\n  XmlNode.prototype.toString = function () {\n    var e_1, _a;\n\n    var hasChildren = Boolean(this.children.length);\n    var xmlText = \"<\" + this.name; // add attributes\n\n    var attributes = this.attributes;\n\n    try {\n      for (var _b = __values(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var attributeName = _c.value;\n        var attribute = attributes[attributeName];\n\n        if (typeof attribute !== \"undefined\" && attribute !== null) {\n          xmlText += \" \" + attributeName + \"=\\\"\" + escapeAttribute(\"\" + attribute) + \"\\\"\";\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return xmlText += !hasChildren ? \"/>\" : \">\" + this.children.map(function (c) {\n      return c.toString();\n    }).join(\"\") + \"</\" + this.name + \">\";\n  };\n\n  return XmlNode;\n}();\n\nexport { XmlNode };","map":{"version":3,"mappings":"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","names":["escapeAttribute","name","children","XmlNode","value","attributes","child","push","hasChildren","Boolean","length","xmlText","keys","_c","attributeName","attribute","map","c","toString","join"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-sdk/xml-builder/src/XmlNode.ts"],"sourcesContent":["import { escapeAttribute } from \"./escape-attribute\";\nimport { Stringable } from \"./stringable\";\n\n/**\n * Represents an XML node.\n */\nexport class XmlNode {\n  private attributes: { [name: string]: any } = {};\n\n  constructor(private name: string, public readonly children: Stringable[] = []) {}\n\n  withName(name: string): XmlNode {\n    this.name = name;\n    return this;\n  }\n\n  addAttribute(name: string, value: any): XmlNode {\n    this.attributes[name] = value;\n    return this;\n  }\n\n  addChildNode(child: Stringable): XmlNode {\n    this.children.push(child);\n    return this;\n  }\n\n  removeAttribute(name: string): XmlNode {\n    delete this.attributes[name];\n    return this;\n  }\n\n  toString(): string {\n    const hasChildren = Boolean(this.children.length);\n    let xmlText = `<${this.name}`;\n    // add attributes\n    const attributes = this.attributes;\n    for (const attributeName of Object.keys(attributes)) {\n      const attribute = attributes[attributeName];\n      if (typeof attribute !== \"undefined\" && attribute !== null) {\n        xmlText += ` ${attributeName}=\"${escapeAttribute(\"\" + attribute)}\"`;\n      }\n    }\n\n    return (xmlText += !hasChildren ? \"/>\" : `>${this.children.map((c) => c.toString()).join(\"\")}</${this.name}>`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}