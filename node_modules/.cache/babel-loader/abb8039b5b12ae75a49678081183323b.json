{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { StopStreamEncryptionInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1StopStreamEncryptionCommand, serializeAws_json1_1StopStreamEncryptionCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Disables server-side encryption for a specified stream. </p>\n *         <p>Stopping encryption is an asynchronous operation. Upon receiving the request,\n *             Kinesis Data Streams returns immediately and sets the status of the stream to\n *                 <code>UPDATING</code>. After the update is complete, Kinesis Data Streams sets the\n *             status of the stream back to <code>ACTIVE</code>. Stopping encryption normally takes a\n *             few seconds to complete, but it can take minutes. You can continue to read and write\n *             data to your stream while its status is <code>UPDATING</code>. Once the status of the\n *             stream is <code>ACTIVE</code>, records written to the stream are no longer encrypted by\n *             Kinesis Data Streams. </p>\n *         <p>API Limits: You can successfully disable server-side encryption 25 times in a\n *             rolling 24-hour period. </p>\n *         <p>Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code>\n *             status before all records written to the stream are no longer subject to encryption.\n *             After you disabled encryption, you can verify that encryption is not applied by\n *             inspecting the API response from <code>PutRecord</code> or\n *             <code>PutRecords</code>.</p>\n */\n\nvar StopStreamEncryptionCommand =\n/** @class */\nfunction (_super) {\n  __extends(StopStreamEncryptionCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function StopStreamEncryptionCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  StopStreamEncryptionCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"StopStreamEncryptionCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: StopStreamEncryptionInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  StopStreamEncryptionCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1StopStreamEncryptionCommand(input, context);\n  };\n\n  StopStreamEncryptionCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1StopStreamEncryptionCommand(output, context);\n  };\n\n  return StopStreamEncryptionCommand;\n}($Command);\n\nexport { StopStreamEncryptionCommand };","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,yBAAT,QAA0C,oBAA1C;AACA,SAASC,iDAAT,EAA4DC,+CAA5D,QAAoH,0BAApH;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,2BAA2B;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC/DR,SAAS,CAACO,2BAAD,EAA8BC,MAA9B,CAAT,CAD+D,CAE/D;EACA;;;EACA,SAASD,2BAAT,CAAqCE,KAArC,EAA4C;IACxC,IAAIC,KAAK,GACT;IACAF,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;IAGAD,KAAK,CAACD,KAAN,GAAcA,KAAd;IACA,OAAOC,KAAP,CALwC,CAMxC;EACH;EACD;AACJ;AACA;;;EACIH,2BAA2B,CAACK,SAA5B,CAAsCC,iBAAtC,GAA0D,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;IACrG,KAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,IAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;IACA,IAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;IACA,IAAIC,UAAU,GAAG,eAAjB;IACA,IAAIC,WAAW,GAAG,6BAAlB;IACA,IAAIC,uBAAuB,GAAG;MAC1BH,MAAM,EAAEA,MADkB;MAE1BC,UAAU,EAAEA,UAFc;MAG1BC,WAAW,EAAEA,WAHa;MAI1BE,uBAAuB,EAAE1B,yBAAyB,CAAC2B,kBAJzB;MAK1BC,wBAAwB,EAAE,UAAUC,MAAV,EAAkB;QAAE,OAAOA,MAAP;MAAgB;IALpC,CAA9B;IAOA,IAAIC,cAAc,GAAGhB,aAAa,CAACgB,cAAnC;IACA,OAAOV,KAAK,CAACW,OAAN,CAAc,UAAUC,OAAV,EAAmB;MACpC,OAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuCjB,OAAO,IAAI,EAAlD,CAAP;IACH,CAFM,EAEJU,uBAFI,CAAP;EAGH,CAjBD;;EAkBAnB,2BAA2B,CAACK,SAA5B,CAAsCO,SAAtC,GAAkD,UAAUV,KAAV,EAAiB0B,OAAjB,EAA0B;IACxE,OAAOhC,+CAA+C,CAACM,KAAD,EAAQ0B,OAAR,CAAtD;EACH,CAFD;;EAGA5B,2BAA2B,CAACK,SAA5B,CAAsCQ,WAAtC,GAAoD,UAAUU,MAAV,EAAkBK,OAAlB,EAA2B;IAC3E,OAAOjC,iDAAiD,CAAC4B,MAAD,EAASK,OAAT,CAAxD;EACH,CAFD;;EAGA,OAAO5B,2BAAP;AACH,CAxCgD,CAwC/CD,QAxC+C,CAAjD;;AAyCA,SAASC,2BAAT","names":["StopStreamEncryptionInput","deserializeAws_json1_1StopStreamEncryptionCommand","serializeAws_json1_1StopStreamEncryptionCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","StopStreamEncryptionCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","resolve","request","handle","context"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/client-kinesis/commands/StopStreamEncryptionCommand.ts"],"sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { StopStreamEncryptionInput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1StopStreamEncryptionCommand,\n  serializeAws_json1_1StopStreamEncryptionCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type StopStreamEncryptionCommandInput = StopStreamEncryptionInput;\nexport type StopStreamEncryptionCommandOutput = __MetadataBearer;\n\n/**\n * <p>Disables server-side encryption for a specified stream. </p>\n *         <p>Stopping encryption is an asynchronous operation. Upon receiving the request,\n *             Kinesis Data Streams returns immediately and sets the status of the stream to\n *                 <code>UPDATING</code>. After the update is complete, Kinesis Data Streams sets the\n *             status of the stream back to <code>ACTIVE</code>. Stopping encryption normally takes a\n *             few seconds to complete, but it can take minutes. You can continue to read and write\n *             data to your stream while its status is <code>UPDATING</code>. Once the status of the\n *             stream is <code>ACTIVE</code>, records written to the stream are no longer encrypted by\n *             Kinesis Data Streams. </p>\n *         <p>API Limits: You can successfully disable server-side encryption 25 times in a\n *             rolling 24-hour period. </p>\n *         <p>Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code>\n *             status before all records written to the stream are no longer subject to encryption.\n *             After you disabled encryption, you can verify that encryption is not applied by\n *             inspecting the API response from <code>PutRecord</code> or\n *             <code>PutRecords</code>.</p>\n */\nexport class StopStreamEncryptionCommand extends $Command<\n  StopStreamEncryptionCommandInput,\n  StopStreamEncryptionCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: StopStreamEncryptionCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<StopStreamEncryptionCommandInput, StopStreamEncryptionCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"StopStreamEncryptionCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: StopStreamEncryptionInput.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: StopStreamEncryptionCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1StopStreamEncryptionCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<StopStreamEncryptionCommandOutput> {\n    return deserializeAws_json1_1StopStreamEncryptionCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}