{"ast":null,"code":"var STORE_NAME = \"IdentityIds\";\n\nvar IndexedDbStorage =\n/** @class */\nfunction () {\n  function IndexedDbStorage(dbName) {\n    if (dbName === void 0) {\n      dbName = \"aws:cognito-identity-ids\";\n    }\n\n    this.dbName = dbName;\n  }\n\n  IndexedDbStorage.prototype.getItem = function (key) {\n    return this.withObjectStore(\"readonly\", function (store) {\n      var req = store.get(key);\n      return new Promise(function (resolve) {\n        req.onerror = function () {\n          return resolve(null);\n        };\n\n        req.onsuccess = function () {\n          return resolve(req.result ? req.result.value : null);\n        };\n      });\n    }).catch(function () {\n      return null;\n    });\n  };\n\n  IndexedDbStorage.prototype.removeItem = function (key) {\n    return this.withObjectStore(\"readwrite\", function (store) {\n      var req = store.delete(key);\n      return new Promise(function (resolve, reject) {\n        req.onerror = function () {\n          return reject(req.error);\n        };\n\n        req.onsuccess = function () {\n          return resolve();\n        };\n      });\n    });\n  };\n\n  IndexedDbStorage.prototype.setItem = function (id, value) {\n    return this.withObjectStore(\"readwrite\", function (store) {\n      var req = store.put({\n        id: id,\n        value: value\n      });\n      return new Promise(function (resolve, reject) {\n        req.onerror = function () {\n          return reject(req.error);\n        };\n\n        req.onsuccess = function () {\n          return resolve();\n        };\n      });\n    });\n  };\n\n  IndexedDbStorage.prototype.getDb = function () {\n    var openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise(function (resolve, reject) {\n      openDbRequest.onsuccess = function () {\n        resolve(openDbRequest.result);\n      };\n\n      openDbRequest.onerror = function () {\n        reject(openDbRequest.error);\n      };\n\n      openDbRequest.onblocked = function () {\n        reject(new Error(\"Unable to access DB\"));\n      };\n\n      openDbRequest.onupgradeneeded = function () {\n        var db = openDbRequest.result;\n\n        db.onerror = function () {\n          reject(new Error(\"Failed to create object store\"));\n        };\n\n        db.createObjectStore(STORE_NAME, {\n          keyPath: \"id\"\n        });\n      };\n    });\n  };\n\n  IndexedDbStorage.prototype.withObjectStore = function (mode, action) {\n    return this.getDb().then(function (db) {\n      var tx = db.transaction(STORE_NAME, mode);\n\n      tx.oncomplete = function () {\n        return db.close();\n      };\n\n      return new Promise(function (resolve, reject) {\n        tx.onerror = function () {\n          return reject(tx.error);\n        };\n\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch(function (err) {\n        db.close();\n        throw err;\n      });\n    });\n  };\n\n  return IndexedDbStorage;\n}();\n\nexport { IndexedDbStorage };","map":{"version":3,"mappings":"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","names":["STORE_NAME","dbName","IndexedDbStorage","key","withObjectStore","store","req","get","Promise","resolve","onerror","onsuccess","result","value","catch","delete","reject","error","id","put","openDbRequest","self","indexedDB","open","onblocked","Error","onupgradeneeded","db","createObjectStore","keyPath","mode","action","getDb","then","tx","transaction","oncomplete","close","objectStore","err"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/credential-provider-cognito-identity/src/IndexedDbStorage.ts"],"sourcesContent":["import { Storage } from \"./Storage\";\n\nconst STORE_NAME = \"IdentityIds\";\n\nexport class IndexedDbStorage implements Storage {\n  constructor(private readonly dbName: string = \"aws:cognito-identity-ids\") {}\n\n  getItem(key: string): Promise<string | null> {\n    return this.withObjectStore(\"readonly\", (store) => {\n      const req = store.get(key);\n\n      return new Promise<string | null>((resolve) => {\n        req.onerror = () => resolve(null);\n\n        req.onsuccess = () => resolve(req.result ? req.result.value : null);\n      });\n    }).catch(() => null);\n  }\n\n  removeItem(key: string): Promise<void> {\n    return this.withObjectStore(\"readwrite\", (store) => {\n      const req = store.delete(key);\n\n      return new Promise<void>((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n\n  setItem(id: string, value: string): Promise<void> {\n    return this.withObjectStore(\"readwrite\", (store) => {\n      const req = store.put({ id, value });\n\n      return new Promise<void>((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n\n  private getDb(): Promise<IDBDatabase> {\n    const openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise((resolve, reject) => {\n      openDbRequest.onsuccess = () => {\n        resolve(openDbRequest.result);\n      };\n\n      openDbRequest.onerror = () => {\n        reject(openDbRequest.error);\n      };\n\n      openDbRequest.onblocked = () => {\n        reject(new Error(\"Unable to access DB\"));\n      };\n\n      openDbRequest.onupgradeneeded = () => {\n        const db = openDbRequest.result;\n        db.onerror = () => {\n          reject(new Error(\"Failed to create object store\"));\n        };\n\n        db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\n      };\n    });\n  }\n\n  private withObjectStore<R>(mode: IDBTransactionMode, action: (store: IDBObjectStore) => Promise<R>): Promise<R> {\n    return this.getDb().then((db) => {\n      const tx = db.transaction(STORE_NAME, mode);\n      tx.oncomplete = () => db.close();\n\n      return new Promise<R>((resolve, reject) => {\n        tx.onerror = () => reject(tx.error);\n\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch((err) => {\n        db.close();\n        throw err;\n      });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}