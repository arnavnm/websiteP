{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport function resolveHostHeaderConfig(input) {\n  return input;\n}\nexport var hostHeaderMiddleware = function hostHeaderMiddleware(options) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var request, _a, handlerProtocol;\n\n        return __generator(this, function (_b) {\n          if (!HttpRequest.isInstance(args.request)) return [2\n          /*return*/\n          , next(args)];\n          request = args.request;\n          _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? \"\" : _a; //For H2 request, remove 'host' header and use ':authority' header instead\n          //reference: https://nodejs.org/dist/latest-v13.x/docs/api/errors.html#ERR_HTTP2_INVALID_CONNECTION_HEADERS\n\n          if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n            delete request.headers[\"host\"];\n            request.headers[\":authority\"] = \"\"; //non-H2 request and 'host' header is not set, set the 'host' header to request's hostname.\n          } else if (!request.headers[\"host\"]) {\n            request.headers[\"host\"] = request.hostname;\n          }\n\n          return [2\n          /*return*/\n          , next(args)];\n        });\n      });\n    };\n  };\n};\nexport var hostHeaderMiddlewareOptions = {\n  name: \"hostHeaderMiddleware\",\n  step: \"build\",\n  priority: \"low\",\n  tags: [\"HOST\"],\n  override: true\n};\nexport var getHostHeaderPlugin = function getHostHeaderPlugin(options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,EAAoBC,WAApB,QAAuC,OAAvC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAO,SAASC,uBAAT,CAAiCC,KAAjC,EAAwC;EAC3C,OAAOA,KAAP;AACH;AACD,OAAO,IAAIC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAUC,OAAV,EAAmB;EAAE,OAAO,UAAUC,IAAV,EAAgB;IAAE,OAAO,UAAUC,IAAV,EAAgB;MAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;QAC1J,IAAIS,OAAJ,EAAaC,EAAb,EAAiBC,eAAjB;;QACA,OAAOV,WAAW,CAAC,IAAD,EAAO,UAAUW,EAAV,EAAc;UACnC,IAAI,CAACV,WAAW,CAACW,UAAZ,CAAuBL,IAAI,CAACC,OAA5B,CAAL,EACI,OAAO,CAAC;UAAE;UAAH,EAAeF,IAAI,CAACC,IAAD,CAAnB,CAAP;UACJC,OAAO,GAAGD,IAAI,CAACC,OAAf;UACAC,EAAE,GAAG,CAACJ,OAAO,CAACQ,cAAR,CAAuBC,QAAvB,IAAmC,EAApC,EAAwCJ,eAA7C,EAA8DA,eAAe,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAArG,CAJmC,CAKnC;UACA;;UACA,IAAIC,eAAe,CAACK,OAAhB,CAAwB,IAAxB,KAAiC,CAAjC,IAAsC,CAACP,OAAO,CAACQ,OAAR,CAAgB,YAAhB,CAA3C,EAA0E;YACtE,OAAOR,OAAO,CAACQ,OAAR,CAAgB,MAAhB,CAAP;YACAR,OAAO,CAACQ,OAAR,CAAgB,YAAhB,IAAgC,EAAhC,CAFsE,CAGtE;UACH,CAJD,MAKK,IAAI,CAACR,OAAO,CAACQ,OAAR,CAAgB,MAAhB,CAAL,EAA8B;YAC/BR,OAAO,CAACQ,OAAR,CAAgB,MAAhB,IAA0BR,OAAO,CAACS,QAAlC;UACH;;UACD,OAAO,CAAC;UAAE;UAAH,EAAeX,IAAI,CAACC,IAAD,CAAnB,CAAP;QACH,CAhBiB,CAAlB;MAiBH,CAnBwH,CAAhB;IAmBpG,CAnB2E;EAmBxE,CAnB+C;AAmB5C,CAnBJ;AAoBP,OAAO,IAAIW,2BAA2B,GAAG;EACrCC,IAAI,EAAE,sBAD+B;EAErCC,IAAI,EAAE,OAF+B;EAGrCC,QAAQ,EAAE,KAH2B;EAIrCC,IAAI,EAAE,CAAC,MAAD,CAJ+B;EAKrCC,QAAQ,EAAE;AAL2B,CAAlC;AAOP,OAAO,IAAIC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAUnB,OAAV,EAAmB;EAAE,OAAQ;IAC1DoB,YAAY,EAAE,sBAAUC,WAAV,EAAuB;MACjCA,WAAW,CAACC,GAAZ,CAAgBvB,oBAAoB,CAACC,OAAD,CAApC,EAA+Ca,2BAA/C;IACH;EAHyD,CAAR;AAIjD,CAJE","names":["HttpRequest","resolveHostHeaderConfig","input","hostHeaderMiddleware","options","next","args","isInstance","request","_a","requestHandler","metadata","handlerProtocol","indexOf","headers","hostname","hostHeaderMiddlewareOptions","name","step","priority","tags","override","getHostHeaderPlugin","applyToStack","clientStack","add"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/middleware-host-header/src/index.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { AbsoluteLocation, BuildHandlerOptions, BuildMiddleware, Pluggable, RequestHandler } from \"@aws-sdk/types\";\n\nexport interface HostHeaderInputConfig {}\ninterface PreviouslyResolved {\n  requestHandler: RequestHandler<any, any>;\n}\nexport interface HostHeaderResolvedConfig {\n  requestHandler: RequestHandler<any, any>;\n}\nexport function resolveHostHeaderConfig<T>(\n  input: T & PreviouslyResolved & HostHeaderInputConfig\n): T & HostHeaderResolvedConfig {\n  return input;\n}\n\nexport const hostHeaderMiddleware = <Input extends object, Output extends object>(\n  options: HostHeaderResolvedConfig\n): BuildMiddleware<Input, Output> => (next) => async (args) => {\n  if (!HttpRequest.isInstance(args.request)) return next(args);\n  const { request } = args;\n  const { handlerProtocol = \"\" } = options.requestHandler.metadata || {};\n  //For H2 request, remove 'host' header and use ':authority' header instead\n  //reference: https://nodejs.org/dist/latest-v13.x/docs/api/errors.html#ERR_HTTP2_INVALID_CONNECTION_HEADERS\n  if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n    delete request.headers[\"host\"];\n    request.headers[\":authority\"] = \"\";\n    //non-H2 request and 'host' header is not set, set the 'host' header to request's hostname.\n  } else if (!request.headers[\"host\"]) {\n    request.headers[\"host\"] = request.hostname;\n  }\n  return next(args);\n};\n\nexport const hostHeaderMiddlewareOptions: BuildHandlerOptions & AbsoluteLocation = {\n  name: \"hostHeaderMiddleware\",\n  step: \"build\",\n  priority: \"low\",\n  tags: [\"HOST\"],\n  override: true,\n};\n\nexport const getHostHeaderPlugin = (options: HostHeaderResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}