{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport function addExpectContinueMiddleware(options) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var request;\n        return __generator(this, function (_a) {\n          request = args.request;\n\n          if (HttpRequest.isInstance(request) && request.body && options.runtime === \"node\") {\n            request.headers = __assign(__assign({}, request.headers), {\n              Expect: \"100-continue\"\n            });\n          }\n\n          return [2\n          /*return*/\n          , next(__assign(__assign({}, args), {\n            request: request\n          }))];\n        });\n      });\n    };\n  };\n}\nexport var addExpectContinueMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"SET_EXPECT_HEADER\", \"EXPECT_HEADER\"],\n  name: \"addExpectContinueMiddleware\",\n  override: true\n};\nexport var getAddExpectContinuePlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAO,SAASC,2BAAT,CAAqCC,OAArC,EAA8C;EACjD,IAAIC,KAAK,GAAG,IAAZ;;EACA,OAAO,UAAUC,IAAV,EAAgB;IAAE,OAAO,UAAUC,IAAV,EAAgB;MAAE,OAAOP,SAAS,CAACK,KAAD,EAAQ,KAAK,CAAb,EAAgB,KAAK,CAArB,EAAwB,YAAY;QAClG,IAAIG,OAAJ;QACA,OAAOP,WAAW,CAAC,IAAD,EAAO,UAAUQ,EAAV,EAAc;UACnCD,OAAO,GAAGD,IAAI,CAACC,OAAf;;UACA,IAAIN,WAAW,CAACQ,UAAZ,CAAuBF,OAAvB,KAAmCA,OAAO,CAACG,IAA3C,IAAmDP,OAAO,CAACQ,OAAR,KAAoB,MAA3E,EAAmF;YAC/EJ,OAAO,CAACK,OAAR,GAAkBd,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKS,OAAO,CAACK,OAAb,CAAT,EAAgC;cAAEC,MAAM,EAAE;YAAV,CAAhC,CAA1B;UACH;;UACD,OAAO,CAAC;UAAE;UAAH,EAAeR,IAAI,CAACP,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKQ,IAAL,CAAT,EAAqB;YAAEC,OAAO,EAAEA;UAAX,CAArB,CAAT,CAAnB,CAAP;QACH,CANiB,CAAlB;MAOH,CATiE,CAAhB;IAS7C,CAToB;EASjB,CATR;AAUH;AACD,OAAO,IAAIO,kCAAkC,GAAG;EAC5CC,IAAI,EAAE,OADsC;EAE5CC,IAAI,EAAE,CAAC,mBAAD,EAAsB,eAAtB,CAFsC;EAG5CC,IAAI,EAAE,6BAHsC;EAI5CC,QAAQ,EAAE;AAJkC,CAAzC;AAMP,OAAO,IAAIC,0BAA0B,GAAG,UAAUhB,OAAV,EAAmB;EAAE,OAAQ;IACjEiB,YAAY,EAAE,UAAUC,WAAV,EAAuB;MACjCA,WAAW,CAACC,GAAZ,CAAgBpB,2BAA2B,CAACC,OAAD,CAA3C,EAAsDW,kCAAtD;IACH;EAHgE,CAAR;AAIxD,CAJE","names":["HttpRequest","addExpectContinueMiddleware","options","next","args","request","isInstance","body","runtime","headers","__assign","Expect","addExpectContinueMiddlewareOptions","step","tags","name","override","getAddExpectContinuePlugin","applyToStack","clientStack","add"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/middleware-expect-continue/src/index.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\ninterface PreviouslyResolved {\n  runtime: string;\n}\n\nexport function addExpectContinueMiddleware(options: PreviouslyResolved): BuildMiddleware<any, any> {\n  return <Output extends MetadataBearer>(next: BuildHandler<any, Output>): BuildHandler<any, Output> => async (\n    args: BuildHandlerArguments<any>\n  ): Promise<BuildHandlerOutput<Output>> => {\n    const { request } = args;\n    if (HttpRequest.isInstance(request) && request.body && options.runtime === \"node\") {\n      request.headers = {\n        ...request.headers,\n        Expect: \"100-continue\",\n      };\n    }\n    return next({\n      ...args,\n      request,\n    });\n  };\n}\n\nexport const addExpectContinueMiddlewareOptions: BuildHandlerOptions = {\n  step: \"build\",\n  tags: [\"SET_EXPECT_HEADER\", \"EXPECT_HEADER\"],\n  name: \"addExpectContinueMiddleware\",\n  override: true,\n};\n\nexport const getAddExpectContinuePlugin = (options: PreviouslyResolved): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}