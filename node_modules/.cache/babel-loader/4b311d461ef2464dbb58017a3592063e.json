{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IncreaseStreamRetentionPeriodInput } from \"../models/models_0\";\nimport { deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand, serializeAws_json1_1IncreaseStreamRetentionPeriodCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Increases the Kinesis data stream's retention period, which is the length of time\n *             data records are accessible after they are added to the stream. The maximum value of a\n *             stream's retention period is 168 hours (7 days).</p>\n *         <p>If you choose a longer stream retention period, this operation increases the time\n *             period during which records that have not yet expired are accessible. However, it does\n *             not make previous, expired data (older than the stream's previous retention period)\n *             accessible after the operation has been called. For example, if a stream's retention\n *             period is set to 24 hours and is increased to 168 hours, any data that is older than 24\n *             hours remains inaccessible to consumer applications.</p>\n */\n\nvar IncreaseStreamRetentionPeriodCommand =\n/** @class */\nfunction (_super) {\n  __extends(IncreaseStreamRetentionPeriodCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function IncreaseStreamRetentionPeriodCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  IncreaseStreamRetentionPeriodCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"KinesisClient\";\n    var commandName = \"IncreaseStreamRetentionPeriodCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: IncreaseStreamRetentionPeriodInput.filterSensitiveLog,\n      outputFilterSensitiveLog: function (output) {\n        return output;\n      }\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  IncreaseStreamRetentionPeriodCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1IncreaseStreamRetentionPeriodCommand(input, context);\n  };\n\n  IncreaseStreamRetentionPeriodCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand(output, context);\n  };\n\n  return IncreaseStreamRetentionPeriodCommand;\n}($Command);\n\nexport { IncreaseStreamRetentionPeriodCommand };","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,kCAAT,QAAmD,oBAAnD;AACA,SAASC,0DAAT,EAAqEC,wDAArE,QAAsI,0BAAtI;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,oCAAoC;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACxER,SAAS,CAACO,oCAAD,EAAuCC,MAAvC,CAAT,CADwE,CAExE;EACA;;;EACA,SAASD,oCAAT,CAA8CE,KAA9C,EAAqD;IACjD,IAAIC,KAAK,GACT;IACAF,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;IAGAD,KAAK,CAACD,KAAN,GAAcA,KAAd;IACA,OAAOC,KAAP,CALiD,CAMjD;EACH;EACD;AACJ;AACA;;;EACIH,oCAAoC,CAACK,SAArC,CAA+CC,iBAA/C,GAAmE,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;IAC9G,KAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,IAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;IACA,IAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;IACA,IAAIC,UAAU,GAAG,eAAjB;IACA,IAAIC,WAAW,GAAG,sCAAlB;IACA,IAAIC,uBAAuB,GAAG;MAC1BH,MAAM,EAAEA,MADkB;MAE1BC,UAAU,EAAEA,UAFc;MAG1BC,WAAW,EAAEA,WAHa;MAI1BE,uBAAuB,EAAE1B,kCAAkC,CAAC2B,kBAJlC;MAK1BC,wBAAwB,EAAE,UAAUC,MAAV,EAAkB;QAAE,OAAOA,MAAP;MAAgB;IALpC,CAA9B;IAOA,IAAIC,cAAc,GAAGhB,aAAa,CAACgB,cAAnC;IACA,OAAOV,KAAK,CAACW,OAAN,CAAc,UAAUC,OAAV,EAAmB;MACpC,OAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuCjB,OAAO,IAAI,EAAlD,CAAP;IACH,CAFM,EAEJU,uBAFI,CAAP;EAGH,CAjBD;;EAkBAnB,oCAAoC,CAACK,SAArC,CAA+CO,SAA/C,GAA2D,UAAUV,KAAV,EAAiB0B,OAAjB,EAA0B;IACjF,OAAOhC,wDAAwD,CAACM,KAAD,EAAQ0B,OAAR,CAA/D;EACH,CAFD;;EAGA5B,oCAAoC,CAACK,SAArC,CAA+CQ,WAA/C,GAA6D,UAAUU,MAAV,EAAkBK,OAAlB,EAA2B;IACpF,OAAOjC,0DAA0D,CAAC4B,MAAD,EAASK,OAAT,CAAjE;EACH,CAFD;;EAGA,OAAO5B,oCAAP;AACH,CAxCyD,CAwCxDD,QAxCwD,CAA1D;;AAyCA,SAASC,oCAAT","names":["IncreaseStreamRetentionPeriodInput","deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand","serializeAws_json1_1IncreaseStreamRetentionPeriodCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","IncreaseStreamRetentionPeriodCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","output","resolve","request","handle","context"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-sdk/client-kinesis/commands/IncreaseStreamRetentionPeriodCommand.ts"],"sourcesContent":["import { KinesisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../KinesisClient\";\nimport { IncreaseStreamRetentionPeriodInput } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand,\n  serializeAws_json1_1IncreaseStreamRetentionPeriodCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type IncreaseStreamRetentionPeriodCommandInput = IncreaseStreamRetentionPeriodInput;\nexport type IncreaseStreamRetentionPeriodCommandOutput = __MetadataBearer;\n\n/**\n * <p>Increases the Kinesis data stream's retention period, which is the length of time\n *             data records are accessible after they are added to the stream. The maximum value of a\n *             stream's retention period is 168 hours (7 days).</p>\n *         <p>If you choose a longer stream retention period, this operation increases the time\n *             period during which records that have not yet expired are accessible. However, it does\n *             not make previous, expired data (older than the stream's previous retention period)\n *             accessible after the operation has been called. For example, if a stream's retention\n *             period is set to 24 hours and is increased to 168 hours, any data that is older than 24\n *             hours remains inaccessible to consumer applications.</p>\n */\nexport class IncreaseStreamRetentionPeriodCommand extends $Command<\n  IncreaseStreamRetentionPeriodCommandInput,\n  IncreaseStreamRetentionPeriodCommandOutput,\n  KinesisClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: IncreaseStreamRetentionPeriodCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: KinesisClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<IncreaseStreamRetentionPeriodCommandInput, IncreaseStreamRetentionPeriodCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"KinesisClient\";\n    const commandName = \"IncreaseStreamRetentionPeriodCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: IncreaseStreamRetentionPeriodInput.filterSensitiveLog,\n      outputFilterSensitiveLog: (output: any) => output,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: IncreaseStreamRetentionPeriodCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1IncreaseStreamRetentionPeriodCommand(input, context);\n  }\n\n  private deserialize(\n    output: __HttpResponse,\n    context: __SerdeContext\n  ): Promise<IncreaseStreamRetentionPeriodCommandOutput> {\n    return deserializeAws_json1_1IncreaseStreamRetentionPeriodCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}