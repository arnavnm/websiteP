{"ast":null,"code":"import { __assign } from \"tslib\"; // Partition default templates\n\nvar AWS_TEMPLATE = \"pinpoint.{region}.amazonaws.com\";\nvar AWS_CN_TEMPLATE = \"pinpoint.{region}.amazonaws.com.cn\";\nvar AWS_ISO_TEMPLATE = \"pinpoint.{region}.c2s.ic.gov\";\nvar AWS_ISO_B_TEMPLATE = \"pinpoint.{region}.sc2s.sgov.gov\";\nvar AWS_US_GOV_TEMPLATE = \"pinpoint.{region}.amazonaws.com\"; // Partition regions\n\nvar AWS_REGIONS = new Set([\"af-south-1\", \"ap-east-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-south-1\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"eu-central-1\", \"eu-north-1\", \"eu-south-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"me-south-1\", \"sa-east-1\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\"]);\nvar AWS_CN_REGIONS = new Set([\"cn-north-1\", \"cn-northwest-1\"]);\nvar AWS_ISO_REGIONS = new Set([\"us-iso-east-1\"]);\nvar AWS_ISO_B_REGIONS = new Set([\"us-isob-east-1\"]);\nvar AWS_US_GOV_REGIONS = new Set([\"us-gov-east-1\", \"us-gov-west-1\"]);\nexport var defaultRegionInfoProvider = function (region, options) {\n  var regionInfo = undefined;\n\n  switch (region) {\n    // First, try to match exact region names.\n    case \"ap-northeast-1\":\n      regionInfo = {\n        hostname: \"pinpoint.ap-northeast-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\"\n      };\n      break;\n\n    case \"ap-northeast-2\":\n      regionInfo = {\n        hostname: \"pinpoint.ap-northeast-2.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\"\n      };\n      break;\n\n    case \"ap-south-1\":\n      regionInfo = {\n        hostname: \"pinpoint.ap-south-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\"\n      };\n      break;\n\n    case \"ap-southeast-1\":\n      regionInfo = {\n        hostname: \"pinpoint.ap-southeast-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\"\n      };\n      break;\n\n    case \"ap-southeast-2\":\n      regionInfo = {\n        hostname: \"pinpoint.ap-southeast-2.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\"\n      };\n      break;\n\n    case \"ca-central-1\":\n      regionInfo = {\n        hostname: \"pinpoint.ca-central-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\"\n      };\n      break;\n\n    case \"eu-central-1\":\n      regionInfo = {\n        hostname: \"pinpoint.eu-central-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\"\n      };\n      break;\n\n    case \"eu-west-1\":\n      regionInfo = {\n        hostname: \"pinpoint.eu-west-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\"\n      };\n      break;\n\n    case \"eu-west-2\":\n      regionInfo = {\n        hostname: \"pinpoint.eu-west-2.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\"\n      };\n      break;\n\n    case \"fips-us-east-1\":\n      regionInfo = {\n        hostname: \"pinpoint-fips.us-east-1.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-east-1\"\n      };\n      break;\n\n    case \"fips-us-gov-west-1\":\n      regionInfo = {\n        hostname: \"pinpoint-fips.us-gov-west-1.amazonaws.com\",\n        partition: \"aws-us-gov\",\n        signingRegion: \"us-gov-west-1\"\n      };\n      break;\n\n    case \"fips-us-west-2\":\n      regionInfo = {\n        hostname: \"pinpoint-fips.us-west-2.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-west-2\"\n      };\n      break;\n\n    case \"us-east-1\":\n      regionInfo = {\n        hostname: \"pinpoint.us-east-1.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-east-1\"\n      };\n      break;\n\n    case \"us-gov-west-1\":\n      regionInfo = {\n        hostname: \"pinpoint.us-gov-west-1.amazonaws.com\",\n        partition: \"aws-us-gov\",\n        signingRegion: \"us-gov-west-1\"\n      };\n      break;\n\n    case \"us-west-2\":\n      regionInfo = {\n        hostname: \"pinpoint.us-west-2.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-west-2\"\n      };\n      break;\n    // Next, try to match partition endpoints.\n\n    default:\n      if (AWS_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n          signingService: \"mobiletargeting\"\n        };\n      }\n\n      if (AWS_CN_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_CN_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-cn\"\n        };\n      }\n\n      if (AWS_ISO_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso\"\n        };\n      }\n\n      if (AWS_ISO_B_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_B_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso-b\"\n        };\n      }\n\n      if (AWS_US_GOV_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_US_GOV_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-us-gov\",\n          signingService: \"mobiletargeting\"\n        };\n      } // Finally, assume it's an AWS partition endpoint.\n\n\n      if (regionInfo === undefined) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n          signingService: \"mobiletargeting\"\n        };\n      }\n\n  }\n\n  return Promise.resolve(__assign({\n    signingService: \"mobiletargeting\"\n  }, regionInfo));\n};","map":{"version":3,"mappings":"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","names":["AWS_TEMPLATE","AWS_CN_TEMPLATE","AWS_ISO_TEMPLATE","AWS_ISO_B_TEMPLATE","AWS_US_GOV_TEMPLATE","AWS_REGIONS","Set","AWS_CN_REGIONS","AWS_ISO_REGIONS","AWS_ISO_B_REGIONS","AWS_US_GOV_REGIONS","defaultRegionInfoProvider","region","options","regionInfo","undefined","hostname","partition","signingService","signingRegion","has","replace","Promise","resolve","__assign"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-sdk/client-pinpoint/endpoints.ts"],"sourcesContent":["import { RegionInfo, RegionInfoProvider } from \"@aws-sdk/types\";\n\n// Partition default templates\nconst AWS_TEMPLATE = \"pinpoint.{region}.amazonaws.com\";\nconst AWS_CN_TEMPLATE = \"pinpoint.{region}.amazonaws.com.cn\";\nconst AWS_ISO_TEMPLATE = \"pinpoint.{region}.c2s.ic.gov\";\nconst AWS_ISO_B_TEMPLATE = \"pinpoint.{region}.sc2s.sgov.gov\";\nconst AWS_US_GOV_TEMPLATE = \"pinpoint.{region}.amazonaws.com\";\n\n// Partition regions\nconst AWS_REGIONS = new Set([\n  \"af-south-1\",\n  \"ap-east-1\",\n  \"ap-northeast-1\",\n  \"ap-northeast-2\",\n  \"ap-south-1\",\n  \"ap-southeast-1\",\n  \"ap-southeast-2\",\n  \"ca-central-1\",\n  \"eu-central-1\",\n  \"eu-north-1\",\n  \"eu-south-1\",\n  \"eu-west-1\",\n  \"eu-west-2\",\n  \"eu-west-3\",\n  \"me-south-1\",\n  \"sa-east-1\",\n  \"us-east-1\",\n  \"us-east-2\",\n  \"us-west-1\",\n  \"us-west-2\",\n]);\nconst AWS_CN_REGIONS = new Set([\"cn-north-1\", \"cn-northwest-1\"]);\nconst AWS_ISO_REGIONS = new Set([\"us-iso-east-1\"]);\nconst AWS_ISO_B_REGIONS = new Set([\"us-isob-east-1\"]);\nconst AWS_US_GOV_REGIONS = new Set([\"us-gov-east-1\", \"us-gov-west-1\"]);\n\nexport const defaultRegionInfoProvider: RegionInfoProvider = (region: string, options?: any) => {\n  let regionInfo: RegionInfo | undefined = undefined;\n  switch (region) {\n    // First, try to match exact region names.\n    case \"ap-northeast-1\":\n      regionInfo = {\n        hostname: \"pinpoint.ap-northeast-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\",\n      };\n      break;\n    case \"ap-northeast-2\":\n      regionInfo = {\n        hostname: \"pinpoint.ap-northeast-2.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\",\n      };\n      break;\n    case \"ap-south-1\":\n      regionInfo = {\n        hostname: \"pinpoint.ap-south-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\",\n      };\n      break;\n    case \"ap-southeast-1\":\n      regionInfo = {\n        hostname: \"pinpoint.ap-southeast-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\",\n      };\n      break;\n    case \"ap-southeast-2\":\n      regionInfo = {\n        hostname: \"pinpoint.ap-southeast-2.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\",\n      };\n      break;\n    case \"ca-central-1\":\n      regionInfo = {\n        hostname: \"pinpoint.ca-central-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\",\n      };\n      break;\n    case \"eu-central-1\":\n      regionInfo = {\n        hostname: \"pinpoint.eu-central-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\",\n      };\n      break;\n    case \"eu-west-1\":\n      regionInfo = {\n        hostname: \"pinpoint.eu-west-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\",\n      };\n      break;\n    case \"eu-west-2\":\n      regionInfo = {\n        hostname: \"pinpoint.eu-west-2.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\",\n      };\n      break;\n    case \"fips-us-east-1\":\n      regionInfo = {\n        hostname: \"pinpoint-fips.us-east-1.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-east-1\",\n      };\n      break;\n    case \"fips-us-gov-west-1\":\n      regionInfo = {\n        hostname: \"pinpoint-fips.us-gov-west-1.amazonaws.com\",\n        partition: \"aws-us-gov\",\n        signingRegion: \"us-gov-west-1\",\n      };\n      break;\n    case \"fips-us-west-2\":\n      regionInfo = {\n        hostname: \"pinpoint-fips.us-west-2.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-west-2\",\n      };\n      break;\n    case \"us-east-1\":\n      regionInfo = {\n        hostname: \"pinpoint.us-east-1.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-east-1\",\n      };\n      break;\n    case \"us-gov-west-1\":\n      regionInfo = {\n        hostname: \"pinpoint.us-gov-west-1.amazonaws.com\",\n        partition: \"aws-us-gov\",\n        signingRegion: \"us-gov-west-1\",\n      };\n      break;\n    case \"us-west-2\":\n      regionInfo = {\n        hostname: \"pinpoint.us-west-2.amazonaws.com\",\n        partition: \"aws\",\n        signingRegion: \"us-west-2\",\n      };\n      break;\n    // Next, try to match partition endpoints.\n    default:\n      if (AWS_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n          signingService: \"mobiletargeting\",\n        };\n      }\n      if (AWS_CN_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_CN_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-cn\",\n        };\n      }\n      if (AWS_ISO_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso\",\n        };\n      }\n      if (AWS_ISO_B_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_B_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso-b\",\n        };\n      }\n      if (AWS_US_GOV_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_US_GOV_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-us-gov\",\n          signingService: \"mobiletargeting\",\n        };\n      }\n      // Finally, assume it's an AWS partition endpoint.\n      if (regionInfo === undefined) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n          signingService: \"mobiletargeting\",\n        };\n      }\n  }\n  return Promise.resolve({ signingService: \"mobiletargeting\", ...regionInfo });\n};\n"]},"metadata":{},"sourceType":"module"}