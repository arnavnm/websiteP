{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SearchFacesRequest, SearchFacesResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1SearchFacesCommand, serializeAws_json1_1SearchFacesCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>For a given input face ID, searches for matching faces in the collection the face\n *       belongs to. You get a face ID when you add a face to the collection using the <a>IndexFaces</a> operation. The operation compares the features of the input face with\n *       faces in the specified collection. </p>\n *          <note>\n *             <p>You can also search faces without indexing faces by using the\n *           <code>SearchFacesByImage</code> operation.</p>\n *          </note>\n *\n *          <p>\n *      The operation response returns\n *       an array of faces that match, ordered by similarity score with the highest\n *       similarity first. More specifically, it is an\n *       array of metadata for each face match that is found. Along with the metadata, the response also\n *       includes a <code>confidence</code> value for each face match, indicating the confidence\n *       that the specific face matches the input face.\n *     </p>\n *\n *          <p>For an example, see Searching for a Face Using Its Face ID in the Amazon Rekognition Developer Guide.</p>\n *\n *          <p>This operation requires permissions to perform the <code>rekognition:SearchFaces</code>\n *       action.</p>\n */\n\nvar SearchFacesCommand =\n/** @class */\nfunction (_super) {\n  __extends(SearchFacesCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function SearchFacesCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  SearchFacesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"SearchFacesCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: SearchFacesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: SearchFacesResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  SearchFacesCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1SearchFacesCommand(input, context);\n  };\n\n  SearchFacesCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1SearchFacesCommand(output, context);\n  };\n\n  return SearchFacesCommand;\n}($Command);\n\nexport { SearchFacesCommand };","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,QAAwD,oBAAxD;AACA,SAASC,wCAAT,EAAmDC,sCAAnD,QAAkG,0BAAlG;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,kBAAkB;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACtDT,SAAS,CAACQ,kBAAD,EAAqBC,MAArB,CAAT,CADsD,CAEtD;EACA;;;EACA,SAASD,kBAAT,CAA4BE,KAA5B,EAAmC;IAC/B,IAAIC,KAAK,GACT;IACAF,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;IAGAD,KAAK,CAACD,KAAN,GAAcA,KAAd;IACA,OAAOC,KAAP,CAL+B,CAM/B;EACH;EACD;AACJ;AACA;;;EACIH,kBAAkB,CAACK,SAAnB,CAA6BC,iBAA7B,GAAiD,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;IAC5F,KAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,IAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;IACA,IAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;IACA,IAAIC,UAAU,GAAG,mBAAjB;IACA,IAAIC,WAAW,GAAG,oBAAlB;IACA,IAAIC,uBAAuB,GAAG;MAC1BH,MAAM,EAAEA,MADkB;MAE1BC,UAAU,EAAEA,UAFc;MAG1BC,WAAW,EAAEA,WAHa;MAI1BE,uBAAuB,EAAE3B,kBAAkB,CAAC4B,kBAJlB;MAK1BC,wBAAwB,EAAE5B,mBAAmB,CAAC2B;IALpB,CAA9B;IAOA,IAAIE,cAAc,GAAGf,aAAa,CAACe,cAAnC;IACA,OAAOT,KAAK,CAACU,OAAN,CAAc,UAAUC,OAAV,EAAmB;MACpC,OAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuChB,OAAO,IAAI,EAAlD,CAAP;IACH,CAFM,EAEJU,uBAFI,CAAP;EAGH,CAjBD;;EAkBAnB,kBAAkB,CAACK,SAAnB,CAA6BO,SAA7B,GAAyC,UAAUV,KAAV,EAAiByB,OAAjB,EAA0B;IAC/D,OAAO/B,sCAAsC,CAACM,KAAD,EAAQyB,OAAR,CAA7C;EACH,CAFD;;EAGA3B,kBAAkB,CAACK,SAAnB,CAA6BQ,WAA7B,GAA2C,UAAUe,MAAV,EAAkBD,OAAlB,EAA2B;IAClE,OAAOhC,wCAAwC,CAACiC,MAAD,EAASD,OAAT,CAA/C;EACH,CAFD;;EAGA,OAAO3B,kBAAP;AACH,CAxCuC,CAwCtCD,QAxCsC,CAAxC;;AAyCA,SAASC,kBAAT","names":["SearchFacesRequest","SearchFacesResponse","deserializeAws_json1_1SearchFacesCommand","serializeAws_json1_1SearchFacesCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","SearchFacesCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/client-rekognition/commands/SearchFacesCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { SearchFacesRequest, SearchFacesResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1SearchFacesCommand,\n  serializeAws_json1_1SearchFacesCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type SearchFacesCommandInput = SearchFacesRequest;\nexport type SearchFacesCommandOutput = SearchFacesResponse & __MetadataBearer;\n\n/**\n * <p>For a given input face ID, searches for matching faces in the collection the face\n *       belongs to. You get a face ID when you add a face to the collection using the <a>IndexFaces</a> operation. The operation compares the features of the input face with\n *       faces in the specified collection. </p>\n *          <note>\n *             <p>You can also search faces without indexing faces by using the\n *           <code>SearchFacesByImage</code> operation.</p>\n *          </note>\n *\n *          <p>\n *      The operation response returns\n *       an array of faces that match, ordered by similarity score with the highest\n *       similarity first. More specifically, it is an\n *       array of metadata for each face match that is found. Along with the metadata, the response also\n *       includes a <code>confidence</code> value for each face match, indicating the confidence\n *       that the specific face matches the input face.\n *     </p>\n *\n *          <p>For an example, see Searching for a Face Using Its Face ID in the Amazon Rekognition Developer Guide.</p>\n *\n *          <p>This operation requires permissions to perform the <code>rekognition:SearchFaces</code>\n *       action.</p>\n */\nexport class SearchFacesCommand extends $Command<\n  SearchFacesCommandInput,\n  SearchFacesCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: SearchFacesCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<SearchFacesCommandInput, SearchFacesCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"SearchFacesCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: SearchFacesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: SearchFacesResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: SearchFacesCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1SearchFacesCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<SearchFacesCommandOutput> {\n    return deserializeAws_json1_1SearchFacesCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}