{"ast":null,"code":"import { useLayoutEffect as e } from \"@radix-ui/react-use-layout-effect\";\nimport * as t from \"react\";\nlet n,\n    o = 0;\nexport function useBodyPointerEvents(_ref) {\n  let {\n    disabled: r\n  } = _ref;\n  const i = t.useRef(!1);\n  e(() => {\n    if (r) {\n      function e() {\n        o--, 0 === o && (document.body.style.pointerEvents = n);\n      }\n\n      function t(e) {\n        i.current = \"mouse\" !== e.pointerType;\n      }\n\n      return 0 === o && (n = document.body.style.pointerEvents), document.body.style.pointerEvents = \"none\", o++, document.addEventListener(\"pointerup\", t), () => {\n        i.current ? document.addEventListener(\"click\", e, {\n          once: !0\n        }) : e(), document.removeEventListener(\"pointerup\", t);\n      };\n    }\n  }, [r]);\n}","map":{"version":3,"mappings":"AAAA,SAAOA,eAAe,IAAIC,CAA1B,QAAgC,mCAAhC;AAAoE,OAAM,KAAIC,CAAV,MAAgB,OAAhB;AAAwB,IAAIC,CAAJ;AAAA,IAAMC,CAAC,GAAC,CAAR;AAAU,OAAO,SAASC,oBAAT,OAA2C;EAAA,IAAb;IAACC,QAAQ,EAACC;EAAV,CAAa;EAAC,MAAMC,CAAC,GAACN,CAAC,CAACO,MAAF,CAAS,CAAC,CAAV,CAAR;EAAqBR,CAAC,CAAE,MAAI;IAAC,IAAGM,CAAH,EAAK;MAAC,SAASN,CAAT,GAAY;QAACG,CAAC,IAAG,MAAIA,CAAJ,KAAQM,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,aAApB,GAAkCV,CAA1C,CAAJ;MAAiD;;MAAA,SAASD,CAAT,CAAWD,CAAX,EAAa;QAACO,CAAC,CAACM,OAAF,GAAU,YAAUb,CAAC,CAACc,WAAtB;MAAkC;;MAAA,OAAO,MAAIX,CAAJ,KAAQD,CAAC,GAACO,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,aAA9B,GAA6CH,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,aAApB,GAAkC,MAA/E,EAAsFT,CAAC,EAAvF,EAA0FM,QAAQ,CAACM,gBAAT,CAA0B,WAA1B,EAAsCd,CAAtC,CAA1F,EAAmI,MAAI;QAACM,CAAC,CAACM,OAAF,GAAUJ,QAAQ,CAACM,gBAAT,CAA0B,OAA1B,EAAkCf,CAAlC,EAAoC;UAACgB,IAAI,EAAC,CAAC;QAAP,CAApC,CAAV,GAAyDhB,CAAC,EAA1D,EAA6DS,QAAQ,CAACQ,mBAAT,CAA6B,WAA7B,EAAyChB,CAAzC,CAA7D;MAAyG,CAAxP;IAAyP;EAAC,CAArX,EAAuX,CAACK,CAAD,CAAvX,CAAD;AAA6X","names":["originalBodyPointerEvents","changeCount","useBodyPointerEvents","disabled","isTouchOrPenPressedRef","React","useRef","useLayoutEffect","resetPointerEvents","document","body","style","pointerEvents","handlePointerUp","event","current","pointerType","addEventListener","once","removeEventListener"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@radix-ui/react-use-body-pointer-events/dist/packages/react/use-body-pointer-events/src/useBodyPointerEvents.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\n\nlet changeCount = 0;\nlet originalBodyPointerEvents: string;\n\nfunction useBodyPointerEvents({ disabled }: { disabled: boolean }) {\n  const isTouchOrPenPressedRef = React.useRef(false);\n\n  useLayoutEffect(() => {\n    if (disabled) {\n      if (changeCount === 0) {\n        originalBodyPointerEvents = document.body.style.pointerEvents;\n      }\n\n      function resetPointerEvents() {\n        changeCount--;\n        if (changeCount === 0) {\n          document.body.style.pointerEvents = originalBodyPointerEvents;\n        }\n      }\n\n      document.body.style.pointerEvents = 'none';\n      changeCount++;\n\n      function handlePointerUp(event: PointerEvent) {\n        isTouchOrPenPressedRef.current = event.pointerType !== 'mouse';\n      }\n\n      document.addEventListener('pointerup', handlePointerUp);\n\n      return () => {\n        if (isTouchOrPenPressedRef.current) {\n          /**\n           * We force pointer-events to remain disabled until `click` fires on touch devices\n           * because browsers implement a ~350ms delay between the time the user stops\n           * touching the display and when the browser executes events. We need to ensure we\n           * don't reactivate pointer-events within this timeframe otherwise the browser may\n           * execute events that should have been prevented.\n           *\n           * We are aware that `touch-action: manipulation` shortens this delay for events,\n           * but it isn't enough to cover all cases.\n           *\n           * When there is an input on screen:\n           * - if a click event is bound to it, it will fire after a `pointerdown` which may\n           * have re-enabled pointer-events (regardless of `touch-action: manipulation`).\n           * - if clicking it causes the page to zoom, the events will wait for the zoom to\n           * finish before executing on the input.\n           * - if long pressing it, the events will execute after the longpress delay.\n           */\n          document.addEventListener('click', resetPointerEvents, { once: true });\n        } else {\n          resetPointerEvents();\n        }\n\n        document.removeEventListener('pointerup', handlePointerUp);\n      };\n    }\n  }, [disabled]);\n}\n\nexport { useBodyPointerEvents };\n"]},"metadata":{},"sourceType":"module"}