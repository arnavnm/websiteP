{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Circle } from \"./Circle\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils\";\nexport var QuadTree = /*#__PURE__*/function () {\n  function QuadTree(rectangle, capacity) {\n    _classCallCheck(this, QuadTree);\n\n    this.rectangle = rectangle;\n    this.capacity = capacity;\n    this.points = [];\n    this.divided = false;\n  }\n\n  _createClass(QuadTree, [{\n    key: \"subdivide\",\n    value: function subdivide() {\n      var x = this.rectangle.position.x;\n      var y = this.rectangle.position.y;\n      var w = this.rectangle.size.width;\n      var h = this.rectangle.size.height;\n      var capacity = this.capacity;\n      this.northEast = new QuadTree(new Rectangle(x, y, w / 2, h / 2), capacity);\n      this.northWest = new QuadTree(new Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n      this.southEast = new QuadTree(new Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n      this.southWest = new QuadTree(new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n      this.divided = true;\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(point) {\n      var _a, _b, _c, _d, _e;\n\n      if (!this.rectangle.contains(point.position)) {\n        return false;\n      }\n\n      if (this.points.length < this.capacity) {\n        this.points.push(point);\n        return true;\n      }\n\n      if (!this.divided) {\n        this.subdivide();\n      }\n\n      return (_e = ((_a = this.northEast) === null || _a === void 0 ? void 0 : _a.insert(point)) || ((_b = this.northWest) === null || _b === void 0 ? void 0 : _b.insert(point)) || ((_c = this.southEast) === null || _c === void 0 ? void 0 : _c.insert(point)) || ((_d = this.southWest) === null || _d === void 0 ? void 0 : _d.insert(point))) !== null && _e !== void 0 ? _e : false;\n    }\n  }, {\n    key: \"queryCircle\",\n    value: function queryCircle(position, radius) {\n      return this.query(new Circle(position.x, position.y, radius));\n    }\n  }, {\n    key: \"queryCircleWarp\",\n    value: function queryCircleWarp(position, radius, containerOrSize) {\n      var container = containerOrSize;\n      var size = containerOrSize;\n      return this.query(new CircleWarp(position.x, position.y, radius, container.canvas !== undefined ? container.canvas.size : size));\n    }\n  }, {\n    key: \"queryRectangle\",\n    value: function queryRectangle(position, size) {\n      return this.query(new Rectangle(position.x, position.y, size.width, size.height));\n    }\n  }, {\n    key: \"query\",\n    value: function query(range, found) {\n      var _a, _b, _c, _d;\n\n      var res = found !== null && found !== void 0 ? found : [];\n\n      if (!range.intersects(this.rectangle)) {\n        return [];\n      } else {\n        var _iterator = _createForOfIteratorHelper(this.points),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var p = _step.value;\n\n            if (!range.contains(p.position) && getDistance(range.position, p.position) > p.particle.getRadius()) {\n              continue;\n            }\n\n            res.push(p.particle);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        if (this.divided) {\n          (_a = this.northEast) === null || _a === void 0 ? void 0 : _a.query(range, res);\n          (_b = this.northWest) === null || _b === void 0 ? void 0 : _b.query(range, res);\n          (_c = this.southEast) === null || _c === void 0 ? void 0 : _c.query(range, res);\n          (_d = this.southWest) === null || _d === void 0 ? void 0 : _d.query(range, res);\n        }\n      }\n\n      return res;\n    }\n  }]);\n\n  return QuadTree;\n}();","map":{"version":3,"names":["Circle","CircleWarp","Rectangle","getDistance","QuadTree","rectangle","capacity","points","divided","x","position","y","w","size","width","h","height","northEast","northWest","southEast","southWest","point","_a","_b","_c","_d","_e","contains","length","push","subdivide","insert","radius","query","containerOrSize","container","canvas","undefined","range","found","res","intersects","p","particle","getRadius"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/tsparticles/esm/Core/Utils/QuadTree.js"],"sourcesContent":["import { Circle } from \"./Circle\";\nimport { CircleWarp } from \"./CircleWarp\";\nimport { Rectangle } from \"./Rectangle\";\nimport { getDistance } from \"../../Utils\";\nexport class QuadTree {\n    constructor(rectangle, capacity) {\n        this.rectangle = rectangle;\n        this.capacity = capacity;\n        this.points = [];\n        this.divided = false;\n    }\n    subdivide() {\n        const x = this.rectangle.position.x;\n        const y = this.rectangle.position.y;\n        const w = this.rectangle.size.width;\n        const h = this.rectangle.size.height;\n        const capacity = this.capacity;\n        this.northEast = new QuadTree(new Rectangle(x, y, w / 2, h / 2), capacity);\n        this.northWest = new QuadTree(new Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n        this.southEast = new QuadTree(new Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n        this.southWest = new QuadTree(new Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n        this.divided = true;\n    }\n    insert(point) {\n        var _a, _b, _c, _d, _e;\n        if (!this.rectangle.contains(point.position)) {\n            return false;\n        }\n        if (this.points.length < this.capacity) {\n            this.points.push(point);\n            return true;\n        }\n        if (!this.divided) {\n            this.subdivide();\n        }\n        return ((_e = (((_a = this.northEast) === null || _a === void 0 ? void 0 : _a.insert(point)) ||\n            ((_b = this.northWest) === null || _b === void 0 ? void 0 : _b.insert(point)) ||\n            ((_c = this.southEast) === null || _c === void 0 ? void 0 : _c.insert(point)) ||\n            ((_d = this.southWest) === null || _d === void 0 ? void 0 : _d.insert(point)))) !== null && _e !== void 0 ? _e : false);\n    }\n    queryCircle(position, radius) {\n        return this.query(new Circle(position.x, position.y, radius));\n    }\n    queryCircleWarp(position, radius, containerOrSize) {\n        const container = containerOrSize;\n        const size = containerOrSize;\n        return this.query(new CircleWarp(position.x, position.y, radius, container.canvas !== undefined ? container.canvas.size : size));\n    }\n    queryRectangle(position, size) {\n        return this.query(new Rectangle(position.x, position.y, size.width, size.height));\n    }\n    query(range, found) {\n        var _a, _b, _c, _d;\n        const res = found !== null && found !== void 0 ? found : [];\n        if (!range.intersects(this.rectangle)) {\n            return [];\n        }\n        else {\n            for (const p of this.points) {\n                if (!range.contains(p.position) && getDistance(range.position, p.position) > p.particle.getRadius()) {\n                    continue;\n                }\n                res.push(p.particle);\n            }\n            if (this.divided) {\n                (_a = this.northEast) === null || _a === void 0 ? void 0 : _a.query(range, res);\n                (_b = this.northWest) === null || _b === void 0 ? void 0 : _b.query(range, res);\n                (_c = this.southEast) === null || _c === void 0 ? void 0 : _c.query(range, res);\n                (_d = this.southWest) === null || _d === void 0 ? void 0 : _d.query(range, res);\n            }\n        }\n        return res;\n    }\n}\n"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,UAAvB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,WAAaC,QAAb;EACI,kBAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;IAAA;;IAC7B,KAAKD,SAAL,GAAiBA,SAAjB;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,MAAL,GAAc,EAAd;IACA,KAAKC,OAAL,GAAe,KAAf;EACH;;EANL;IAAA;IAAA,OAOI,qBAAY;MACR,IAAMC,CAAC,GAAG,KAAKJ,SAAL,CAAeK,QAAf,CAAwBD,CAAlC;MACA,IAAME,CAAC,GAAG,KAAKN,SAAL,CAAeK,QAAf,CAAwBC,CAAlC;MACA,IAAMC,CAAC,GAAG,KAAKP,SAAL,CAAeQ,IAAf,CAAoBC,KAA9B;MACA,IAAMC,CAAC,GAAG,KAAKV,SAAL,CAAeQ,IAAf,CAAoBG,MAA9B;MACA,IAAMV,QAAQ,GAAG,KAAKA,QAAtB;MACA,KAAKW,SAAL,GAAiB,IAAIb,QAAJ,CAAa,IAAIF,SAAJ,CAAcO,CAAd,EAAiBE,CAAjB,EAAoBC,CAAC,GAAG,CAAxB,EAA2BG,CAAC,GAAG,CAA/B,CAAb,EAAgDT,QAAhD,CAAjB;MACA,KAAKY,SAAL,GAAiB,IAAId,QAAJ,CAAa,IAAIF,SAAJ,CAAcO,CAAC,GAAGG,CAAC,GAAG,CAAtB,EAAyBD,CAAzB,EAA4BC,CAAC,GAAG,CAAhC,EAAmCG,CAAC,GAAG,CAAvC,CAAb,EAAwDT,QAAxD,CAAjB;MACA,KAAKa,SAAL,GAAiB,IAAIf,QAAJ,CAAa,IAAIF,SAAJ,CAAcO,CAAd,EAAiBE,CAAC,GAAGI,CAAC,GAAG,CAAzB,EAA4BH,CAAC,GAAG,CAAhC,EAAmCG,CAAC,GAAG,CAAvC,CAAb,EAAwDT,QAAxD,CAAjB;MACA,KAAKc,SAAL,GAAiB,IAAIhB,QAAJ,CAAa,IAAIF,SAAJ,CAAcO,CAAC,GAAGG,CAAC,GAAG,CAAtB,EAAyBD,CAAC,GAAGI,CAAC,GAAG,CAAjC,EAAoCH,CAAC,GAAG,CAAxC,EAA2CG,CAAC,GAAG,CAA/C,CAAb,EAAgET,QAAhE,CAAjB;MACA,KAAKE,OAAL,GAAe,IAAf;IACH;EAlBL;IAAA;IAAA,OAmBI,gBAAOa,KAAP,EAAc;MACV,IAAIC,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB,EAAoBC,EAApB;;MACA,IAAI,CAAC,KAAKrB,SAAL,CAAesB,QAAf,CAAwBN,KAAK,CAACX,QAA9B,CAAL,EAA8C;QAC1C,OAAO,KAAP;MACH;;MACD,IAAI,KAAKH,MAAL,CAAYqB,MAAZ,GAAqB,KAAKtB,QAA9B,EAAwC;QACpC,KAAKC,MAAL,CAAYsB,IAAZ,CAAiBR,KAAjB;QACA,OAAO,IAAP;MACH;;MACD,IAAI,CAAC,KAAKb,OAAV,EAAmB;QACf,KAAKsB,SAAL;MACH;;MACD,OAAQ,CAACJ,EAAE,GAAI,CAAC,CAACJ,EAAE,GAAG,KAAKL,SAAX,MAA0B,IAA1B,IAAkCK,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACS,MAAH,CAAUV,KAAV,CAA5D,MACV,CAACE,EAAE,GAAG,KAAKL,SAAX,MAA0B,IAA1B,IAAkCK,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACQ,MAAH,CAAUV,KAAV,CADjD,MAEV,CAACG,EAAE,GAAG,KAAKL,SAAX,MAA0B,IAA1B,IAAkCK,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACO,MAAH,CAAUV,KAAV,CAFjD,MAGV,CAACI,EAAE,GAAG,KAAKL,SAAX,MAA0B,IAA1B,IAAkCK,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACM,MAAH,CAAUV,KAAV,CAHjD,CAAP,MAGgF,IAHhF,IAGwFK,EAAE,KAAK,KAAK,CAHpG,GAGwGA,EAHxG,GAG6G,KAHrH;IAIH;EAnCL;IAAA;IAAA,OAoCI,qBAAYhB,QAAZ,EAAsBsB,MAAtB,EAA8B;MAC1B,OAAO,KAAKC,KAAL,CAAW,IAAIjC,MAAJ,CAAWU,QAAQ,CAACD,CAApB,EAAuBC,QAAQ,CAACC,CAAhC,EAAmCqB,MAAnC,CAAX,CAAP;IACH;EAtCL;IAAA;IAAA,OAuCI,yBAAgBtB,QAAhB,EAA0BsB,MAA1B,EAAkCE,eAAlC,EAAmD;MAC/C,IAAMC,SAAS,GAAGD,eAAlB;MACA,IAAMrB,IAAI,GAAGqB,eAAb;MACA,OAAO,KAAKD,KAAL,CAAW,IAAIhC,UAAJ,CAAeS,QAAQ,CAACD,CAAxB,EAA2BC,QAAQ,CAACC,CAApC,EAAuCqB,MAAvC,EAA+CG,SAAS,CAACC,MAAV,KAAqBC,SAArB,GAAiCF,SAAS,CAACC,MAAV,CAAiBvB,IAAlD,GAAyDA,IAAxG,CAAX,CAAP;IACH;EA3CL;IAAA;IAAA,OA4CI,wBAAeH,QAAf,EAAyBG,IAAzB,EAA+B;MAC3B,OAAO,KAAKoB,KAAL,CAAW,IAAI/B,SAAJ,CAAcQ,QAAQ,CAACD,CAAvB,EAA0BC,QAAQ,CAACC,CAAnC,EAAsCE,IAAI,CAACC,KAA3C,EAAkDD,IAAI,CAACG,MAAvD,CAAX,CAAP;IACH;EA9CL;IAAA;IAAA,OA+CI,eAAMsB,KAAN,EAAaC,KAAb,EAAoB;MAChB,IAAIjB,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB;;MACA,IAAMe,GAAG,GAAGD,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqCA,KAArC,GAA6C,EAAzD;;MACA,IAAI,CAACD,KAAK,CAACG,UAAN,CAAiB,KAAKpC,SAAtB,CAAL,EAAuC;QACnC,OAAO,EAAP;MACH,CAFD,MAGK;QAAA,2CACe,KAAKE,MADpB;QAAA;;QAAA;UACD,oDAA6B;YAAA,IAAlBmC,CAAkB;;YACzB,IAAI,CAACJ,KAAK,CAACX,QAAN,CAAee,CAAC,CAAChC,QAAjB,CAAD,IAA+BP,WAAW,CAACmC,KAAK,CAAC5B,QAAP,EAAiBgC,CAAC,CAAChC,QAAnB,CAAX,GAA0CgC,CAAC,CAACC,QAAF,CAAWC,SAAX,EAA7E,EAAqG;cACjG;YACH;;YACDJ,GAAG,CAACX,IAAJ,CAASa,CAAC,CAACC,QAAX;UACH;QANA;UAAA;QAAA;UAAA;QAAA;;QAOD,IAAI,KAAKnC,OAAT,EAAkB;UACd,CAACc,EAAE,GAAG,KAAKL,SAAX,MAA0B,IAA1B,IAAkCK,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACW,KAAH,CAASK,KAAT,EAAgBE,GAAhB,CAA3D;UACA,CAACjB,EAAE,GAAG,KAAKL,SAAX,MAA0B,IAA1B,IAAkCK,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACU,KAAH,CAASK,KAAT,EAAgBE,GAAhB,CAA3D;UACA,CAAChB,EAAE,GAAG,KAAKL,SAAX,MAA0B,IAA1B,IAAkCK,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACS,KAAH,CAASK,KAAT,EAAgBE,GAAhB,CAA3D;UACA,CAACf,EAAE,GAAG,KAAKL,SAAX,MAA0B,IAA1B,IAAkCK,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACQ,KAAH,CAASK,KAAT,EAAgBE,GAAhB,CAA3D;QACH;MACJ;;MACD,OAAOA,GAAP;IACH;EApEL;;EAAA;AAAA"},"metadata":{},"sourceType":"module"}