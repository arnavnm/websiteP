{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { GetCredentialsForIdentityCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { resolveLogins } from \"./resolveLogins\";\n/**\n * Retrieves temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from this function call are not cached internally.\n */\n\nexport function fromCognitoIdentity(parameters) {\n  var _this = this;\n\n  return function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var _a, _b, _c, AccessKeyId, Expiration, _d, SecretKey, SessionToken, _e, _f, _g, _h;\n\n      var _j;\n\n      return __generator(this, function (_k) {\n        switch (_k.label) {\n          case 0:\n            _f = (_e = parameters.client).send;\n            _g = GetCredentialsForIdentityCommand.bind;\n            _j = {\n              CustomRoleArn: parameters.customRoleArn,\n              IdentityId: parameters.identityId\n            };\n            if (!parameters.logins) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , resolveLogins(parameters.logins)];\n\n          case 1:\n            _h = _k.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _h = undefined;\n            _k.label = 3;\n\n          case 3:\n            return [4\n            /*yield*/\n            , _f.apply(_e, [new (_g.apply(GetCredentialsForIdentityCommand, [void 0, (_j.Logins = _h, _j)]))()])];\n\n          case 4:\n            _a = _k.sent().Credentials, _b = _a === void 0 ? throwOnMissingCredentials() : _a, _c = _b.AccessKeyId, AccessKeyId = _c === void 0 ? throwOnMissingAccessKeyId() : _c, Expiration = _b.Expiration, _d = _b.SecretKey, SecretKey = _d === void 0 ? throwOnMissingSecretKey() : _d, SessionToken = _b.SessionToken;\n            return [2\n            /*return*/\n            , {\n              identityId: parameters.identityId,\n              accessKeyId: AccessKeyId,\n              secretAccessKey: SecretKey,\n              sessionToken: SessionToken,\n              expiration: Expiration\n            }];\n        }\n      });\n    });\n  };\n}\n\nfunction throwOnMissingAccessKeyId() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no access key ID\");\n}\n\nfunction throwOnMissingCredentials() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no credentials\");\n}\n\nfunction throwOnMissingSecretKey() {\n  throw new ProviderError(\"Response from Amazon Cognito contained no secret key\");\n}","map":{"version":3,"mappings":"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","names":["GetCredentialsForIdentityCommand","ProviderError","resolveLogins","fromCognitoIdentity","parameters","_f","client","send","CustomRoleArn","customRoleArn","IdentityId","identityId","logins","_h","_j","_a","_k","Credentials","throwOnMissingCredentials","_c","AccessKeyId","throwOnMissingAccessKeyId","Expiration","_d","SecretKey","throwOnMissingSecretKey","SessionToken","accessKeyId","secretAccessKey","sessionToken","expiration"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/credential-provider-cognito-identity/src/fromCognitoIdentity.ts"],"sourcesContent":["import { GetCredentialsForIdentityCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { ProviderError } from \"@aws-sdk/property-provider\";\nimport { CredentialProvider, Credentials } from \"@aws-sdk/types\";\n\nimport { CognitoProviderParameters } from \"./CognitoProviderParameters\";\nimport { resolveLogins } from \"./resolveLogins\";\n\nexport interface CognitoIdentityCredentials extends Credentials {\n  /**\n   * The Cognito ID returned by the last call to AWS.CognitoIdentity.getOpenIdToken().\n   */\n  identityId: string;\n}\n\n/**\n * Retrieves temporary AWS credentials using Amazon Cognito's\n * `GetCredentialsForIdentity` operation.\n *\n * Results from this function call are not cached internally.\n */\nexport function fromCognitoIdentity(parameters: FromCognitoIdentityParameters): CredentialProvider {\n  return async (): Promise<CognitoIdentityCredentials> => {\n    const {\n      Credentials: {\n        AccessKeyId = throwOnMissingAccessKeyId(),\n        Expiration,\n        SecretKey = throwOnMissingSecretKey(),\n        SessionToken,\n      } = throwOnMissingCredentials(),\n    } = await parameters.client.send(\n      new GetCredentialsForIdentityCommand({\n        CustomRoleArn: parameters.customRoleArn,\n        IdentityId: parameters.identityId,\n        Logins: parameters.logins ? await resolveLogins(parameters.logins) : undefined,\n      })\n    );\n\n    return {\n      identityId: parameters.identityId,\n      accessKeyId: AccessKeyId,\n      secretAccessKey: SecretKey,\n      sessionToken: SessionToken,\n      expiration: Expiration,\n    };\n  };\n}\n\nexport interface FromCognitoIdentityParameters extends CognitoProviderParameters {\n  /**\n   * The unique identifier for the identity against which credentials will be\n   * issued.\n   */\n  identityId: string;\n}\n\nfunction throwOnMissingAccessKeyId(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no access key ID\");\n}\n\nfunction throwOnMissingCredentials(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no credentials\");\n}\n\nfunction throwOnMissingSecretKey(): never {\n  throw new ProviderError(\"Response from Amazon Cognito contained no secret key\");\n}\n"]},"metadata":{},"sourceType":"module"}