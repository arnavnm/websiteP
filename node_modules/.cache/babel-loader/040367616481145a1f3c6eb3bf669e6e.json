{"ast":null,"code":"import { __asyncGenerator, __asyncValues, __await, __generator } from \"tslib\";\nexport function getUnmarshalledStream(source, options) {\n  var _a;\n\n  return _a = {}, _a[Symbol.asyncIterator] = function () {\n    return __asyncGenerator(this, arguments, function () {\n      var source_1, source_1_1, chunk, message, messageType, unmodeledError, code, exception, deserializedException, error, event, deserialized, e_1_1;\n\n      var _a, _b;\n\n      var e_1, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _d.trys.push([0, 12, 13, 18]);\n\n            source_1 = __asyncValues(source);\n            _d.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , __await(source_1.next())];\n\n          case 2:\n            if (!(source_1_1 = _d.sent(), !source_1_1.done)) return [3\n            /*break*/\n            , 11];\n            chunk = source_1_1.value;\n            message = options.eventMarshaller.unmarshall(chunk);\n            messageType = message.headers[\":message-type\"].value;\n            if (!(messageType === \"error\")) return [3\n            /*break*/\n            , 3];\n            unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n            unmodeledError.name = message.headers[\":error-code\"].value;\n            throw unmodeledError;\n\n          case 3:\n            if (!(messageType === \"exception\")) return [3\n            /*break*/\n            , 5];\n            code = message.headers[\":exception-type\"].value;\n            exception = (_a = {}, _a[code] = message, _a);\n            return [4\n            /*yield*/\n            , __await(options.deserializer(exception))];\n\n          case 4:\n            deserializedException = _d.sent();\n\n            if (deserializedException.$unknown) {\n              error = new Error(options.toUtf8(message.body));\n              error.name = code;\n              throw error;\n            }\n\n            throw deserializedException[code];\n\n          case 5:\n            if (!(messageType === \"event\")) return [3\n            /*break*/\n            , 9];\n            event = (_b = {}, _b[message.headers[\":event-type\"].value] = message, _b);\n            return [4\n            /*yield*/\n            , __await(options.deserializer(event))];\n\n          case 6:\n            deserialized = _d.sent();\n            if (deserialized.$unknown) return [3\n            /*break*/\n            , 10];\n            return [4\n            /*yield*/\n            , __await(deserialized)];\n\n          case 7:\n            return [4\n            /*yield*/\n            , _d.sent()];\n\n          case 8:\n            _d.sent();\n\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            throw Error(\"Unrecognizable event type: \" + message.headers[\":event-type\"].value);\n\n          case 10:\n            return [3\n            /*break*/\n            , 1];\n\n          case 11:\n            return [3\n            /*break*/\n            , 18];\n\n          case 12:\n            e_1_1 = _d.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 18];\n\n          case 13:\n            _d.trys.push([13,, 16, 17]);\n\n            if (!(source_1_1 && !source_1_1.done && (_c = source_1.return))) return [3\n            /*break*/\n            , 15];\n            return [4\n            /*yield*/\n            , __await(_c.call(source_1))];\n\n          case 14:\n            _d.sent();\n\n            _d.label = 15;\n\n          case 15:\n            return [3\n            /*break*/\n            , 17];\n\n          case 16:\n            if (e_1) throw e_1.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 17:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 18:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }, _a;\n}","map":{"version":3,"mappings":"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","names":["getUnmarshalledStream","source","options","_a","Symbol","asyncIterator","source_1","chunk","message","eventMarshaller","unmarshall","messageType","headers","value","unmodeledError","Error","name","code","exception","deserializer","deserializedException","_d","$unknown","error","toUtf8","body","event","_b","deserialized"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-sdk/eventstream-serde-universal/src/getUnmarshalledStream.ts"],"sourcesContent":["import { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { Encoder, Message } from \"@aws-sdk/types\";\n\nexport type UnmarshalledStreamOptions<T> = {\n  eventMarshaller: EventMarshaller;\n  deserializer: (input: { [name: string]: Message }) => Promise<T>;\n  toUtf8: Encoder;\n};\n\nexport function getUnmarshalledStream<T extends { [key: string]: any }>(\n  source: AsyncIterable<Uint8Array>,\n  options: UnmarshalledStreamOptions<T>\n): AsyncIterable<T> {\n  return {\n    [Symbol.asyncIterator]: async function* () {\n      for await (const chunk of source) {\n        const message = options.eventMarshaller.unmarshall(chunk);\n        const { value: messageType } = message.headers[\":message-type\"];\n        if (messageType === \"error\") {\n          // Unmodeled exception in event\n          const unmodeledError = new Error((message.headers[\":error-message\"].value as string) || \"UnknownError\");\n          unmodeledError.name = message.headers[\":error-code\"].value as string;\n          throw unmodeledError;\n        } else if (messageType === \"exception\") {\n          // For modeled exception, push it to deserializer and throw after deserializing\n          const code = message.headers[\":exception-type\"].value as string;\n          const exception = { [code]: message };\n          // Get parsed exception event in key(error code) value(structured error) pair.\n          const deserializedException = await options.deserializer(exception);\n          if (deserializedException.$unknown) {\n            //this is an unmodeled exception then try parsing it with best effort\n            const error = new Error(options.toUtf8(message.body));\n            error.name = code;\n            throw error;\n          }\n          throw deserializedException[code];\n        } else if (messageType === \"event\") {\n          const event = {\n            [message.headers[\":event-type\"].value as string]: message,\n          };\n          const deserialized = await options.deserializer(event);\n          if (deserialized.$unknown) continue;\n          yield deserialized;\n        } else {\n          throw Error(`Unrecognizable event type: ${message.headers[\":event-type\"].value}`);\n        }\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}