{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { ConsoleLogger as Logger } from './Logger';\nimport { Sha256 as jsSha256 } from '@aws-crypto/sha256-js';\nimport { toHex } from '@aws-sdk/util-hex-encoding';\nimport { parse, format } from 'url';\nimport { DateUtils } from './Util';\nvar logger = new Logger('Signer');\nvar DEFAULT_ALGORITHM = 'AWS4-HMAC-SHA256';\nvar IOT_SERVICE_NAME = 'iotdevicegateway';\n\nvar encrypt = function (key, src) {\n  var hash = new jsSha256(key);\n  hash.update(src);\n  return hash.digestSync();\n};\n\nvar hash = function (src) {\n  var arg = src || '';\n  var hash = new jsSha256();\n  hash.update(arg);\n  return toHex(hash.digestSync());\n};\n/**\n * @private\n * RFC 3986 compliant version of encodeURIComponent\n */\n\n\nvar escape_RFC3986 = function (component) {\n  return component.replace(/[!'()*]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n};\n/**\n * @private\n * Create canonical query string\n *\n */\n\n\nvar canonical_query = function (query) {\n  if (!query || query.length === 0) {\n    return '';\n  }\n\n  return query.split('&').map(function (e) {\n    var key_val = e.split('=');\n\n    if (key_val.length === 1) {\n      return e;\n    } else {\n      var reencoded_val = escape_RFC3986(key_val[1]);\n      return key_val[0] + '=' + reencoded_val;\n    }\n  }).sort(function (a, b) {\n    var key_a = a.split('=')[0];\n    var key_b = b.split('=')[0];\n\n    if (key_a === key_b) {\n      return a < b ? -1 : 1;\n    } else {\n      return key_a < key_b ? -1 : 1;\n    }\n  }).join('&');\n};\n/**\n* @private\n* Create canonical headers\n*\n<pre>\nCanonicalHeaders =\n    CanonicalHeadersEntry0 + CanonicalHeadersEntry1 + ... + CanonicalHeadersEntryN\nCanonicalHeadersEntry =\n    Lowercase(HeaderName) + ':' + Trimall(HeaderValue) + '\\n'\n</pre>\n*/\n\n\nvar canonical_headers = function (headers) {\n  if (!headers || Object.keys(headers).length === 0) {\n    return '';\n  }\n\n  return Object.keys(headers).map(function (key) {\n    return {\n      key: key.toLowerCase(),\n      value: headers[key] ? headers[key].trim().replace(/\\s+/g, ' ') : ''\n    };\n  }).sort(function (a, b) {\n    return a.key < b.key ? -1 : 1;\n  }).map(function (item) {\n    return item.key + ':' + item.value;\n  }).join('\\n') + '\\n';\n};\n/**\n * List of header keys included in the canonical headers.\n * @access private\n */\n\n\nvar signed_headers = function (headers) {\n  return Object.keys(headers).map(function (key) {\n    return key.toLowerCase();\n  }).sort().join(';');\n};\n/**\n* @private\n* Create canonical request\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html|Create a Canonical Request}\n*\n<pre>\nCanonicalRequest =\n    HTTPRequestMethod + '\\n' +\n    CanonicalURI + '\\n' +\n    CanonicalQueryString + '\\n' +\n    CanonicalHeaders + '\\n' +\n    SignedHeaders + '\\n' +\n    HexEncode(Hash(RequestPayload))\n</pre>\n*/\n\n\nvar canonical_request = function (request) {\n  var url_info = parse(request.url);\n  return [request.method || '/', encodeURIComponent(url_info.pathname).replace(/%2F/gi, '/'), canonical_query(url_info.query), canonical_headers(request.headers), signed_headers(request.headers), hash(request.data)].join('\\n');\n};\n\nvar parse_service_info = function (request) {\n  var url_info = parse(request.url),\n      host = url_info.host;\n  var matched = host.match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com$/);\n  var parsed = (matched || []).slice(1, 3);\n\n  if (parsed[1] === 'es') {\n    // Elastic Search\n    parsed = parsed.reverse();\n  }\n\n  return {\n    service: request.service || parsed[0],\n    region: request.region || parsed[1]\n  };\n};\n\nvar credential_scope = function (d_str, region, service) {\n  return [d_str, region, service, 'aws4_request'].join('/');\n};\n/**\n* @private\n* Create a string to sign\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html|Create String to Sign}\n*\n<pre>\nStringToSign =\n    Algorithm + \\n +\n    RequestDateTime + \\n +\n    CredentialScope + \\n +\n    HashedCanonicalRequest\n</pre>\n*/\n\n\nvar string_to_sign = function (algorithm, canonical_request, dt_str, scope) {\n  return [algorithm, dt_str, scope, hash(canonical_request)].join('\\n');\n};\n/**\n* @private\n* Create signing key\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html|Calculate Signature}\n*\n<pre>\nkSecret = your secret access key\nkDate = HMAC(\"AWS4\" + kSecret, Date)\nkRegion = HMAC(kDate, Region)\nkService = HMAC(kRegion, Service)\nkSigning = HMAC(kService, \"aws4_request\")\n</pre>\n*/\n\n\nvar get_signing_key = function (secret_key, d_str, service_info) {\n  logger.debug(service_info);\n  var k = 'AWS4' + secret_key,\n      k_date = encrypt(k, d_str),\n      k_region = encrypt(k_date, service_info.region),\n      k_service = encrypt(k_region, service_info.service),\n      k_signing = encrypt(k_service, 'aws4_request');\n  return k_signing;\n};\n\nvar get_signature = function (signing_key, str_to_sign) {\n  return toHex(encrypt(signing_key, str_to_sign));\n};\n/**\n * @private\n * Create authorization header\n * Refer to\n * {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html|Add the Signing Information}\n */\n\n\nvar get_authorization_header = function (algorithm, access_key, scope, signed_headers, signature) {\n  return [algorithm + ' ' + 'Credential=' + access_key + '/' + scope, 'SignedHeaders=' + signed_headers, 'Signature=' + signature].join(', ');\n};\n\nvar Signer =\n/** @class */\nfunction () {\n  function Signer() {}\n  /**\n  * Sign a HTTP request, add 'Authorization' header to request param\n  * @method sign\n  * @memberof Signer\n  * @static\n  *\n  * @param {object} request - HTTP request object\n  <pre>\n  request: {\n      method: GET | POST | PUT ...\n      url: ...,\n      headers: {\n          header1: ...\n      },\n      data: data\n  }\n  </pre>\n  * @param {object} access_info - AWS access credential info\n  <pre>\n  access_info: {\n      access_key: ...,\n      secret_key: ...,\n      session_token: ...\n  }\n  </pre>\n  * @param {object} [service_info] - AWS service type and region, optional,\n  *                                  if not provided then parse out from url\n  <pre>\n  service_info: {\n      service: ...,\n      region: ...\n  }\n  </pre>\n  *\n  * @returns {object} Signed HTTP request\n  */\n\n\n  Signer.sign = function (request, access_info, service_info) {\n    if (service_info === void 0) {\n      service_info = null;\n    }\n\n    request.headers = request.headers || {}; // datetime string and date string\n\n    var dt = DateUtils.getDateWithClockOffset(),\n        dt_str = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, ''),\n        d_str = dt_str.substr(0, 8);\n    var url_info = parse(request.url);\n    request.headers['host'] = url_info.host;\n    request.headers['x-amz-date'] = dt_str;\n\n    if (access_info.session_token) {\n      request.headers['X-Amz-Security-Token'] = access_info.session_token;\n    } // Task 1: Create a Canonical Request\n\n\n    var request_str = canonical_request(request);\n    logger.debug(request_str); // Task 2: Create a String to Sign\n\n    var serviceInfo = service_info || parse_service_info(request),\n        scope = credential_scope(d_str, serviceInfo.region, serviceInfo.service),\n        str_to_sign = string_to_sign(DEFAULT_ALGORITHM, request_str, dt_str, scope); // Task 3: Calculate the Signature\n\n    var signing_key = get_signing_key(access_info.secret_key, d_str, serviceInfo),\n        signature = get_signature(signing_key, str_to_sign); // Task 4: Adding the Signing information to the Request\n\n    var authorization_header = get_authorization_header(DEFAULT_ALGORITHM, access_info.access_key, scope, signed_headers(request.headers), signature);\n    request.headers['Authorization'] = authorization_header;\n    return request;\n  };\n\n  Signer.signUrl = function (urlOrRequest, accessInfo, serviceInfo, expiration) {\n    var urlToSign = typeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n    var method = typeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n    var body = typeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n    var now = DateUtils.getDateWithClockOffset().toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n    var today = now.substr(0, 8); // Intentionally discarding search\n\n    var _a = parse(urlToSign, true, true),\n        search = _a.search,\n        parsedUrl = __rest(_a, [\"search\"]);\n\n    var host = parsedUrl.host;\n    var signedHeaders = {\n      host: host\n    };\n\n    var _b = serviceInfo || parse_service_info({\n      url: format(parsedUrl)\n    }),\n        region = _b.region,\n        service = _b.service;\n\n    var credentialScope = credential_scope(today, region, service); // IoT service does not allow the session token in the canonical request\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n\n    var sessionTokenRequired = accessInfo.session_token && service !== IOT_SERVICE_NAME;\n\n    var queryParams = __assign(__assign(__assign({\n      'X-Amz-Algorithm': DEFAULT_ALGORITHM,\n      'X-Amz-Credential': [accessInfo.access_key, credentialScope].join('/'),\n      'X-Amz-Date': now.substr(0, 16)\n    }, sessionTokenRequired ? {\n      'X-Amz-Security-Token': \"\" + accessInfo.session_token\n    } : {}), expiration ? {\n      'X-Amz-Expires': \"\" + expiration\n    } : {}), {\n      'X-Amz-SignedHeaders': Object.keys(signedHeaders).join(',')\n    });\n\n    var canonicalRequest = canonical_request({\n      method: method,\n      url: format(__assign(__assign({}, parsedUrl), {\n        query: __assign(__assign({}, parsedUrl.query), queryParams)\n      })),\n      headers: signedHeaders,\n      data: body\n    });\n    var stringToSign = string_to_sign(DEFAULT_ALGORITHM, canonicalRequest, now, credentialScope);\n    var signing_key = get_signing_key(accessInfo.secret_key, today, {\n      region: region,\n      service: service\n    });\n    var signature = get_signature(signing_key, stringToSign);\n\n    var additionalQueryParams = __assign({\n      'X-Amz-Signature': signature\n    }, accessInfo.session_token && {\n      'X-Amz-Security-Token': accessInfo.session_token\n    });\n\n    var result = format({\n      protocol: parsedUrl.protocol,\n      slashes: true,\n      hostname: parsedUrl.hostname,\n      port: parsedUrl.port,\n      pathname: parsedUrl.pathname,\n      query: __assign(__assign(__assign({}, parsedUrl.query), queryParams), additionalQueryParams)\n    });\n    return result;\n  };\n\n  return Signer;\n}();\n\nexport { Signer };\n/**\n * @deprecated use per-function import\n */\n\nexport default Signer;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","Sha256","jsSha256","toHex","parse","format","DateUtils","logger","DEFAULT_ALGORITHM","IOT_SERVICE_NAME","encrypt","key","src","hash","update","digestSync","arg","escape_RFC3986","component","replace","c","charCodeAt","toString","toUpperCase","canonical_query","query","length","split","map","key_val","e","reencoded_val","sort","a","b","key_a","key_b","join","canonical_headers","headers","Object","keys","toLowerCase","value","trim","item","signed_headers","canonical_request","request","url_info","url","method","encodeURIComponent","pathname","data","parse_service_info","host","matched","match","parsed","slice","reverse","service","region","credential_scope","d_str","string_to_sign","algorithm","dt_str","scope","get_signing_key","secret_key","service_info","debug","k","k_date","k_region","k_service","k_signing","get_signature","signing_key","str_to_sign","get_authorization_header","access_key","signature","Signer","access_info","dt","getDateWithClockOffset","toISOString","substr","session_token","request_str","serviceInfo","authorization_header","urlOrRequest","accessInfo","expiration","urlToSign","body","undefined","now","today","_a","search","parsedUrl","signedHeaders","credentialScope","sessionTokenRequired","queryParams","canonicalRequest","stringToSign","additionalQueryParams","result","protocol","slashes","hostname","port"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/core/src/Signer.ts"],"sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { ConsoleLogger as Logger } from './Logger';\nimport { Sha256 as jsSha256 } from '@aws-crypto/sha256-js';\nimport { toHex } from '@aws-sdk/util-hex-encoding';\nimport { parse, format } from 'url';\nimport { DateUtils } from './Util';\n\nconst logger = new Logger('Signer');\n\nconst DEFAULT_ALGORITHM = 'AWS4-HMAC-SHA256';\nconst IOT_SERVICE_NAME = 'iotdevicegateway';\n\nconst encrypt = function(key, src) {\n\tconst hash = new jsSha256(key);\n\thash.update(src);\n\treturn hash.digestSync();\n};\n\nconst hash = function(src) {\n\tconst arg = src || '';\n\tconst hash = new jsSha256();\n\thash.update(arg);\n\treturn toHex(hash.digestSync());\n};\n\n/**\n * @private\n * RFC 3986 compliant version of encodeURIComponent\n */\nconst escape_RFC3986 = function(component) {\n\treturn component.replace(/[!'()*]/g, function(c) {\n\t\treturn (\n\t\t\t'%' +\n\t\t\tc\n\t\t\t\t.charCodeAt(0)\n\t\t\t\t.toString(16)\n\t\t\t\t.toUpperCase()\n\t\t);\n\t});\n};\n\n/**\n * @private\n * Create canonical query string\n *\n */\nconst canonical_query = function(query) {\n\tif (!query || query.length === 0) {\n\t\treturn '';\n\t}\n\n\treturn query\n\t\t.split('&')\n\t\t.map(e => {\n\t\t\tconst key_val = e.split('=');\n\n\t\t\tif (key_val.length === 1) {\n\t\t\t\treturn e;\n\t\t\t} else {\n\t\t\t\tconst reencoded_val = escape_RFC3986(key_val[1]);\n\t\t\t\treturn key_val[0] + '=' + reencoded_val;\n\t\t\t}\n\t\t})\n\t\t.sort((a, b) => {\n\t\t\tconst key_a = a.split('=')[0];\n\t\t\tconst key_b = b.split('=')[0];\n\t\t\tif (key_a === key_b) {\n\t\t\t\treturn a < b ? -1 : 1;\n\t\t\t} else {\n\t\t\t\treturn key_a < key_b ? -1 : 1;\n\t\t\t}\n\t\t})\n\t\t.join('&');\n};\n\n/**\n* @private\n* Create canonical headers\n*\n<pre>\nCanonicalHeaders =\n    CanonicalHeadersEntry0 + CanonicalHeadersEntry1 + ... + CanonicalHeadersEntryN\nCanonicalHeadersEntry =\n    Lowercase(HeaderName) + ':' + Trimall(HeaderValue) + '\\n'\n</pre>\n*/\nconst canonical_headers = function(headers) {\n\tif (!headers || Object.keys(headers).length === 0) {\n\t\treturn '';\n\t}\n\n\treturn (\n\t\tObject.keys(headers)\n\t\t\t.map(function(key) {\n\t\t\t\treturn {\n\t\t\t\t\tkey: key.toLowerCase(),\n\t\t\t\t\tvalue: headers[key] ? headers[key].trim().replace(/\\s+/g, ' ') : '',\n\t\t\t\t};\n\t\t\t})\n\t\t\t.sort(function(a, b) {\n\t\t\t\treturn a.key < b.key ? -1 : 1;\n\t\t\t})\n\t\t\t.map(function(item) {\n\t\t\t\treturn item.key + ':' + item.value;\n\t\t\t})\n\t\t\t.join('\\n') + '\\n'\n\t);\n};\n\n/**\n * List of header keys included in the canonical headers.\n * @access private\n */\nconst signed_headers = function(headers) {\n\treturn Object.keys(headers)\n\t\t.map(function(key) {\n\t\t\treturn key.toLowerCase();\n\t\t})\n\t\t.sort()\n\t\t.join(';');\n};\n\n/**\n* @private\n* Create canonical request\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html|Create a Canonical Request}\n*\n<pre>\nCanonicalRequest =\n    HTTPRequestMethod + '\\n' +\n    CanonicalURI + '\\n' +\n    CanonicalQueryString + '\\n' +\n    CanonicalHeaders + '\\n' +\n    SignedHeaders + '\\n' +\n    HexEncode(Hash(RequestPayload))\n</pre>\n*/\nconst canonical_request = function(request) {\n\tconst url_info = parse(request.url);\n\n\treturn [\n\t\trequest.method || '/',\n\t\tencodeURIComponent(url_info.pathname).replace(/%2F/gi, '/'),\n\t\tcanonical_query(url_info.query),\n\t\tcanonical_headers(request.headers),\n\t\tsigned_headers(request.headers),\n\t\thash(request.data),\n\t].join('\\n');\n};\n\nconst parse_service_info = function(request) {\n\tconst url_info = parse(request.url),\n\t\thost = url_info.host;\n\n\tconst matched = host.match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com$/);\n\tlet parsed = (matched || []).slice(1, 3);\n\n\tif (parsed[1] === 'es') {\n\t\t// Elastic Search\n\t\tparsed = parsed.reverse();\n\t}\n\n\treturn {\n\t\tservice: request.service || parsed[0],\n\t\tregion: request.region || parsed[1],\n\t};\n};\n\nconst credential_scope = function(d_str, region, service) {\n\treturn [d_str, region, service, 'aws4_request'].join('/');\n};\n\n/**\n* @private\n* Create a string to sign\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html|Create String to Sign}\n*\n<pre>\nStringToSign =\n    Algorithm + \\n +\n    RequestDateTime + \\n +\n    CredentialScope + \\n +\n    HashedCanonicalRequest\n</pre>\n*/\nconst string_to_sign = function(algorithm, canonical_request, dt_str, scope) {\n\treturn [algorithm, dt_str, scope, hash(canonical_request)].join('\\n');\n};\n\n/**\n* @private\n* Create signing key\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html|Calculate Signature}\n*\n<pre>\nkSecret = your secret access key\nkDate = HMAC(\"AWS4\" + kSecret, Date)\nkRegion = HMAC(kDate, Region)\nkService = HMAC(kRegion, Service)\nkSigning = HMAC(kService, \"aws4_request\")\n</pre>\n*/\nconst get_signing_key = function(secret_key, d_str, service_info) {\n\tlogger.debug(service_info);\n\tconst k = 'AWS4' + secret_key,\n\t\tk_date = encrypt(k, d_str),\n\t\tk_region = encrypt(k_date, service_info.region),\n\t\tk_service = encrypt(k_region, service_info.service),\n\t\tk_signing = encrypt(k_service, 'aws4_request');\n\n\treturn k_signing;\n};\n\nconst get_signature = function(signing_key, str_to_sign) {\n\treturn toHex(encrypt(signing_key, str_to_sign));\n};\n\n/**\n * @private\n * Create authorization header\n * Refer to\n * {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html|Add the Signing Information}\n */\nconst get_authorization_header = function(\n\talgorithm,\n\taccess_key,\n\tscope,\n\tsigned_headers,\n\tsignature\n) {\n\treturn [\n\t\talgorithm + ' ' + 'Credential=' + access_key + '/' + scope,\n\t\t'SignedHeaders=' + signed_headers,\n\t\t'Signature=' + signature,\n\t].join(', ');\n};\n\nexport class Signer {\n\t/**\n    * Sign a HTTP request, add 'Authorization' header to request param\n    * @method sign\n    * @memberof Signer\n    * @static\n    *\n    * @param {object} request - HTTP request object\n    <pre>\n    request: {\n        method: GET | POST | PUT ...\n        url: ...,\n        headers: {\n            header1: ...\n        },\n        data: data\n    }\n    </pre>\n    * @param {object} access_info - AWS access credential info\n    <pre>\n    access_info: {\n        access_key: ...,\n        secret_key: ...,\n        session_token: ...\n    }\n    </pre>\n    * @param {object} [service_info] - AWS service type and region, optional,\n    *                                  if not provided then parse out from url\n    <pre>\n    service_info: {\n        service: ...,\n        region: ...\n    }\n    </pre>\n    *\n    * @returns {object} Signed HTTP request\n    */\n\tstatic sign(request, access_info, service_info = null) {\n\t\trequest.headers = request.headers || {};\n\n\t\t// datetime string and date string\n\t\tconst dt = DateUtils.getDateWithClockOffset(),\n\t\t\tdt_str = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, ''),\n\t\t\td_str = dt_str.substr(0, 8);\n\n\t\tconst url_info = parse(request.url);\n\t\trequest.headers['host'] = url_info.host;\n\t\trequest.headers['x-amz-date'] = dt_str;\n\t\tif (access_info.session_token) {\n\t\t\trequest.headers['X-Amz-Security-Token'] = access_info.session_token;\n\t\t}\n\n\t\t// Task 1: Create a Canonical Request\n\t\tconst request_str = canonical_request(request);\n\t\tlogger.debug(request_str);\n\n\t\t// Task 2: Create a String to Sign\n\t\tconst serviceInfo = service_info || parse_service_info(request),\n\t\t\tscope = credential_scope(d_str, serviceInfo.region, serviceInfo.service),\n\t\t\tstr_to_sign = string_to_sign(\n\t\t\t\tDEFAULT_ALGORITHM,\n\t\t\t\trequest_str,\n\t\t\t\tdt_str,\n\t\t\t\tscope\n\t\t\t);\n\n\t\t// Task 3: Calculate the Signature\n\t\tconst signing_key = get_signing_key(\n\t\t\t\taccess_info.secret_key,\n\t\t\t\td_str,\n\t\t\t\tserviceInfo\n\t\t\t),\n\t\t\tsignature = get_signature(signing_key, str_to_sign);\n\n\t\t// Task 4: Adding the Signing information to the Request\n\t\tconst authorization_header = get_authorization_header(\n\t\t\tDEFAULT_ALGORITHM,\n\t\t\taccess_info.access_key,\n\t\t\tscope,\n\t\t\tsigned_headers(request.headers),\n\t\t\tsignature\n\t\t);\n\t\trequest.headers['Authorization'] = authorization_header;\n\n\t\treturn request;\n\t}\n\n\tstatic signUrl(\n\t\turlToSign: string,\n\t\taccessInfo: any,\n\t\tserviceInfo?: any,\n\t\texpiration?: number\n\t): string;\n\tstatic signUrl(\n\t\trequest: any,\n\t\taccessInfo: any,\n\t\tserviceInfo?: any,\n\t\texpiration?: number\n\t): string;\n\tstatic signUrl(\n\t\turlOrRequest: string | any,\n\t\taccessInfo: any,\n\t\tserviceInfo?: any,\n\t\texpiration?: number\n\t): string {\n\t\tconst urlToSign: string =\n\t\t\ttypeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n\t\tconst method: string =\n\t\t\ttypeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n\t\tconst body: any =\n\t\t\ttypeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n\n\t\tconst now = DateUtils.getDateWithClockOffset()\n\t\t\t.toISOString()\n\t\t\t.replace(/[:\\-]|\\.\\d{3}/g, '');\n\t\tconst today = now.substr(0, 8);\n\t\t// Intentionally discarding search\n\t\tconst { search, ...parsedUrl } = parse(urlToSign, true, true);\n\t\tconst { host } = parsedUrl;\n\t\tconst signedHeaders = { host };\n\n\t\tconst { region, service } =\n\t\t\tserviceInfo || parse_service_info({ url: format(parsedUrl) });\n\t\tconst credentialScope = credential_scope(today, region, service);\n\n\t\t// IoT service does not allow the session token in the canonical request\n\t\t// https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n\t\tconst sessionTokenRequired =\n\t\t\taccessInfo.session_token && service !== IOT_SERVICE_NAME;\n\t\tconst queryParams = {\n\t\t\t'X-Amz-Algorithm': DEFAULT_ALGORITHM,\n\t\t\t'X-Amz-Credential': [accessInfo.access_key, credentialScope].join('/'),\n\t\t\t'X-Amz-Date': now.substr(0, 16),\n\t\t\t...(sessionTokenRequired\n\t\t\t\t? { 'X-Amz-Security-Token': `${accessInfo.session_token}` }\n\t\t\t\t: {}),\n\t\t\t...(expiration ? { 'X-Amz-Expires': `${expiration}` } : {}),\n\t\t\t'X-Amz-SignedHeaders': Object.keys(signedHeaders).join(','),\n\t\t};\n\n\t\tconst canonicalRequest = canonical_request({\n\t\t\tmethod,\n\t\t\turl: format({\n\t\t\t\t...parsedUrl,\n\t\t\t\tquery: {\n\t\t\t\t\t...parsedUrl.query,\n\t\t\t\t\t...queryParams,\n\t\t\t\t},\n\t\t\t}),\n\t\t\theaders: signedHeaders,\n\t\t\tdata: body,\n\t\t});\n\n\t\tconst stringToSign = string_to_sign(\n\t\t\tDEFAULT_ALGORITHM,\n\t\t\tcanonicalRequest,\n\t\t\tnow,\n\t\t\tcredentialScope\n\t\t);\n\n\t\tconst signing_key = get_signing_key(accessInfo.secret_key, today, {\n\t\t\tregion,\n\t\t\tservice,\n\t\t});\n\t\tconst signature = get_signature(signing_key, stringToSign);\n\n\t\tconst additionalQueryParams = {\n\t\t\t'X-Amz-Signature': signature,\n\t\t\t...(accessInfo.session_token && {\n\t\t\t\t'X-Amz-Security-Token': accessInfo.session_token,\n\t\t\t}),\n\t\t};\n\n\t\tconst result = format({\n\t\t\tprotocol: parsedUrl.protocol,\n\t\t\tslashes: true,\n\t\t\thostname: parsedUrl.hostname,\n\t\t\tport: parsedUrl.port,\n\t\t\tpathname: parsedUrl.pathname,\n\t\t\tquery: {\n\t\t\t\t...parsedUrl.query,\n\t\t\t\t...queryParams,\n\t\t\t\t...additionalQueryParams,\n\t\t\t},\n\t\t});\n\n\t\treturn result;\n\t}\n}\n\n/**\n * @deprecated use per-function import\n */\nexport default Signer;\n"]},"metadata":{},"sourceType":"module"}