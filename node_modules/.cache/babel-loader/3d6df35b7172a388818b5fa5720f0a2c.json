{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { extendedEncodeURIComponent as __extendedEncodeURIComponent } from \"@aws-sdk/smithy-client\";\nexport var serializeAws_restJson1DeleteLexiconCommand = function serializeAws_restJson1DeleteLexiconCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/lexicons/{Name}\";\n\n          if (input.Name !== undefined) {\n            labelValue = input.Name;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Name.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Name.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1DescribeVoicesCommand = function serializeAws_restJson1DescribeVoicesCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/voices\";\n          query = __assign(__assign(__assign(__assign({}, input.Engine !== undefined && {\n            Engine: input.Engine\n          }), input.LanguageCode !== undefined && {\n            LanguageCode: input.LanguageCode\n          }), input.IncludeAdditionalLanguageCodes !== undefined && {\n            IncludeAdditionalLanguageCodes: input.IncludeAdditionalLanguageCodes.toString()\n          }), input.NextToken !== undefined && {\n            NextToken: input.NextToken\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetLexiconCommand = function serializeAws_restJson1GetLexiconCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/lexicons/{Name}\";\n\n          if (input.Name !== undefined) {\n            labelValue = input.Name;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Name.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Name.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetSpeechSynthesisTaskCommand = function serializeAws_restJson1GetSpeechSynthesisTaskCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/synthesisTasks/{TaskId}\";\n\n          if (input.TaskId !== undefined) {\n            labelValue = input.TaskId;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: TaskId.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{TaskId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: TaskId.\");\n          }\n\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListLexiconsCommand = function serializeAws_restJson1ListLexiconsCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/lexicons\";\n          query = __assign({}, input.NextToken !== undefined && {\n            NextToken: input.NextToken\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1ListSpeechSynthesisTasksCommand = function serializeAws_restJson1ListSpeechSynthesisTasksCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, query, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/v1/synthesisTasks\";\n          query = __assign(__assign(__assign({}, input.MaxResults !== undefined && {\n            MaxResults: input.MaxResults.toString()\n          }), input.NextToken !== undefined && {\n            NextToken: input.NextToken\n          }), input.Status !== undefined && {\n            Status: input.Status\n          });\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PutLexiconCommand = function serializeAws_restJson1PutLexiconCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/v1/lexicons/{Name}\";\n\n          if (input.Name !== undefined) {\n            labelValue = input.Name;\n\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: Name.\");\n            }\n\n            resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: Name.\");\n          }\n\n          body = JSON.stringify(__assign({}, input.Content !== undefined && input.Content !== null && {\n            Content: input.Content\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"PUT\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1StartSpeechSynthesisTaskCommand = function serializeAws_restJson1StartSpeechSynthesisTaskCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/v1/synthesisTasks\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.Engine !== undefined && input.Engine !== null && {\n            Engine: input.Engine\n          }), input.LanguageCode !== undefined && input.LanguageCode !== null && {\n            LanguageCode: input.LanguageCode\n          }), input.LexiconNames !== undefined && input.LexiconNames !== null && {\n            LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context)\n          }), input.OutputFormat !== undefined && input.OutputFormat !== null && {\n            OutputFormat: input.OutputFormat\n          }), input.OutputS3BucketName !== undefined && input.OutputS3BucketName !== null && {\n            OutputS3BucketName: input.OutputS3BucketName\n          }), input.OutputS3KeyPrefix !== undefined && input.OutputS3KeyPrefix !== null && {\n            OutputS3KeyPrefix: input.OutputS3KeyPrefix\n          }), input.SampleRate !== undefined && input.SampleRate !== null && {\n            SampleRate: input.SampleRate\n          }), input.SnsTopicArn !== undefined && input.SnsTopicArn !== null && {\n            SnsTopicArn: input.SnsTopicArn\n          }), input.SpeechMarkTypes !== undefined && input.SpeechMarkTypes !== null && {\n            SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context)\n          }), input.Text !== undefined && input.Text !== null && {\n            Text: input.Text\n          }), input.TextType !== undefined && input.TextType !== null && {\n            TextType: input.TextType\n          }), input.VoiceId !== undefined && input.VoiceId !== null && {\n            VoiceId: input.VoiceId\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1SynthesizeSpeechCommand = function serializeAws_restJson1SynthesizeSpeechCommand(input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, body, _a, hostname, _b, protocol, port;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/v1/speech\";\n          body = JSON.stringify(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.Engine !== undefined && input.Engine !== null && {\n            Engine: input.Engine\n          }), input.LanguageCode !== undefined && input.LanguageCode !== null && {\n            LanguageCode: input.LanguageCode\n          }), input.LexiconNames !== undefined && input.LexiconNames !== null && {\n            LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context)\n          }), input.OutputFormat !== undefined && input.OutputFormat !== null && {\n            OutputFormat: input.OutputFormat\n          }), input.SampleRate !== undefined && input.SampleRate !== null && {\n            SampleRate: input.SampleRate\n          }), input.SpeechMarkTypes !== undefined && input.SpeechMarkTypes !== null && {\n            SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context)\n          }), input.Text !== undefined && input.Text !== null && {\n            Text: input.Text\n          }), input.TextType !== undefined && input.TextType !== null && {\n            TextType: input.TextType\n          }), input.VoiceId !== undefined && input.VoiceId !== null && {\n            VoiceId: input.VoiceId\n          }));\n          return [4\n          /*yield*/\n          , context.endpoint()];\n\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2\n          /*return*/\n          , new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DeleteLexiconCommand = function deserializeAws_restJson1DeleteLexiconCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DeleteLexiconCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DeleteLexiconCommandError = function deserializeAws_restJson1DeleteLexiconCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n\n    var _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1DescribeVoicesCommand = function deserializeAws_restJson1DescribeVoicesCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1DescribeVoicesCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            NextToken: undefined,\n            Voices: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n\n          if (data.Voices !== undefined && data.Voices !== null) {\n            contents.Voices = deserializeAws_restJson1VoiceList(data.Voices, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1DescribeVoicesCommandError = function deserializeAws_restJson1DescribeVoicesCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n\n    var _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1GetLexiconCommand = function deserializeAws_restJson1GetLexiconCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1GetLexiconCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Lexicon: undefined,\n            LexiconAttributes: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Lexicon !== undefined && data.Lexicon !== null) {\n            contents.Lexicon = deserializeAws_restJson1Lexicon(data.Lexicon, context);\n          }\n\n          if (data.LexiconAttributes !== undefined && data.LexiconAttributes !== null) {\n            contents.LexiconAttributes = deserializeAws_restJson1LexiconAttributes(data.LexiconAttributes, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1GetLexiconCommandError = function deserializeAws_restJson1GetLexiconCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n\n    var _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1GetSpeechSynthesisTaskCommand = function deserializeAws_restJson1GetSpeechSynthesisTaskCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1GetSpeechSynthesisTaskCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            SynthesisTask: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n            contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1GetSpeechSynthesisTaskCommandError = function deserializeAws_restJson1GetSpeechSynthesisTaskCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;\n\n    var _f;\n\n    return __generator(this, function (_g) {\n      switch (_g.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _f = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_f.body = _g.sent(), _f)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"InvalidTaskIdException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#InvalidTaskIdException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"SynthesisTaskNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.polly#SynthesisTaskNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n          }\n\n          return [3\n          /*break*/\n          , 8];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidTaskIdExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 9];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 9];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 9];\n\n        case 8:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _g.label = 9;\n\n        case 9:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1ListLexiconsCommand = function deserializeAws_restJson1ListLexiconsCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1ListLexiconsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            Lexicons: undefined,\n            NextToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Lexicons !== undefined && data.Lexicons !== null) {\n            contents.Lexicons = deserializeAws_restJson1LexiconDescriptionList(data.Lexicons, context);\n          }\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1ListLexiconsCommandError = function deserializeAws_restJson1ListLexiconsCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n\n    var _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1ListSpeechSynthesisTasksCommand = function deserializeAws_restJson1ListSpeechSynthesisTasksCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1ListSpeechSynthesisTasksCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            NextToken: undefined,\n            SynthesisTasks: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n\n          if (data.SynthesisTasks !== undefined && data.SynthesisTasks !== null) {\n            contents.SynthesisTasks = deserializeAws_restJson1SynthesisTasks(data.SynthesisTasks, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1ListSpeechSynthesisTasksCommandError = function deserializeAws_restJson1ListSpeechSynthesisTasksCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;\n\n    var _e;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _e = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_e.body = _f.sent(), _e)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1PutLexiconCommand = function deserializeAws_restJson1PutLexiconCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1PutLexiconCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output)\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1PutLexiconCommandError = function deserializeAws_restJson1PutLexiconCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;\n\n    var _k;\n\n    return __generator(this, function (_l) {\n      switch (_l.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _k = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_k.body = _l.sent(), _k)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"InvalidLexiconException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#InvalidLexiconException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"LexiconSizeExceededException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#LexiconSizeExceededException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"MaxLexemeLengthExceededException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.polly#MaxLexemeLengthExceededException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"MaxLexiconsNumberExceededException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.polly#MaxLexiconsNumberExceededException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"UnsupportedPlsAlphabetException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.polly#UnsupportedPlsAlphabetException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"UnsupportedPlsLanguageException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"com.amazonaws.polly#UnsupportedPlsLanguageException\":\n              return [3\n              /*break*/\n              , 14];\n          }\n\n          return [3\n          /*break*/\n          , 16];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidLexiconExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LexiconSizeExceededExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 12:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 14:\n          _j = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse(parsedOutput, context)];\n\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 16:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _l.label = 17;\n\n        case 17:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1StartSpeechSynthesisTaskCommand = function deserializeAws_restJson1StartSpeechSynthesisTaskCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1StartSpeechSynthesisTaskCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            SynthesisTask: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n            contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1StartSpeechSynthesisTaskCommandError = function deserializeAws_restJson1StartSpeechSynthesisTaskCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, parsedBody, message;\n\n    var _q;\n\n    return __generator(this, function (_r) {\n      switch (_r.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _q = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_q.body = _r.sent(), _q)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InvalidS3BucketException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#InvalidS3BucketException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InvalidS3KeyException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.polly#InvalidS3KeyException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.polly#InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"InvalidSnsTopicArnException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.polly#InvalidSnsTopicArnException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.polly#InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"com.amazonaws.polly#LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 18];\n\n            case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 18];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 20];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 20];\n\n            case \"SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 22];\n\n            case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 22];\n\n            case \"TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 24];\n\n            case \"com.amazonaws.polly#TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 24];\n          }\n\n          return [3\n          /*break*/\n          , 26];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidS3BucketExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidS3KeyExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 12:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 14:\n          _j = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 16:\n          _k = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 18:\n          _l = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];\n\n        case 19:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 20:\n          _m = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 21:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 22:\n          _o = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];\n\n        case 23:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 24:\n          _p = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)];\n\n        case 25:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 26:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _r.label = 27;\n\n        case 27:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nexport var deserializeAws_restJson1SynthesizeSpeechCommand = function deserializeAws_restJson1SynthesizeSpeechCommand(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2\n        /*return*/\n        , deserializeAws_restJson1SynthesizeSpeechCommandError(output, context)];\n      }\n\n      contents = {\n        $metadata: deserializeMetadata(output),\n        AudioStream: undefined,\n        ContentType: undefined,\n        RequestCharacters: undefined\n      };\n\n      if (output.headers[\"content-type\"] !== undefined) {\n        contents.ContentType = output.headers[\"content-type\"];\n      }\n\n      if (output.headers[\"x-amzn-requestcharacters\"] !== undefined) {\n        contents.RequestCharacters = parseInt(output.headers[\"x-amzn-requestcharacters\"], 10);\n      }\n\n      data = output.body;\n      contents.AudioStream = data;\n      return [2\n      /*return*/\n      , Promise.resolve(contents)];\n    });\n  });\n};\n\nvar deserializeAws_restJson1SynthesizeSpeechCommandError = function deserializeAws_restJson1SynthesizeSpeechCommandError(output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, parsedBody, message;\n\n    var _m;\n\n    return __generator(this, function (_o) {\n      switch (_o.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _m = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_m.body = _o.sent(), _m)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n\n          switch (_b) {\n            case \"EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.polly#EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.polly#InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.polly#InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.polly#LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.polly#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"com.amazonaws.polly#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 18];\n\n            case \"com.amazonaws.polly#TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 18];\n          }\n\n          return [3\n          /*break*/\n          , 20];\n\n        case 2:\n          _c = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 4:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 6:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 8:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 10:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 12:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 14:\n          _j = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 16:\n          _k = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];\n\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 18:\n          _l = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)];\n\n        case 19:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 20:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _o.label = 21;\n\n        case 21:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\n\nvar deserializeAws_restJson1EngineNotSupportedExceptionResponse = function deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"EngineNotSupportedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidLexiconExceptionResponse = function deserializeAws_restJson1InvalidLexiconExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidLexiconException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidNextTokenExceptionResponse = function deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidNextTokenException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidS3BucketExceptionResponse = function deserializeAws_restJson1InvalidS3BucketExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidS3BucketException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidS3KeyExceptionResponse = function deserializeAws_restJson1InvalidS3KeyExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidS3KeyException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidSampleRateExceptionResponse = function deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSampleRateException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse = function deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSnsTopicArnException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidSsmlExceptionResponse = function deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSsmlException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1InvalidTaskIdExceptionResponse = function deserializeAws_restJson1InvalidTaskIdExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidTaskIdException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1LanguageNotSupportedExceptionResponse = function deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LanguageNotSupportedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1LexiconNotFoundExceptionResponse = function deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LexiconNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1LexiconSizeExceededExceptionResponse = function deserializeAws_restJson1LexiconSizeExceededExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LexiconSizeExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse = function deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MarksNotSupportedForFormatException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse = function deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MaxLexemeLengthExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse = function deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MaxLexiconsNumberExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1ServiceFailureExceptionResponse = function deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ServiceFailureException\",\n        $fault: \"server\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse = function deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"SsmlMarksNotSupportedForTextTypeException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse = function deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"SynthesisTaskNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1TextLengthExceededExceptionResponse = function deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"TextLengthExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse = function deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"UnsupportedPlsAlphabetException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse = function deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse(parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"UnsupportedPlsLanguageException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar serializeAws_restJson1LexiconNameList = function serializeAws_restJson1LexiconNameList(input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar serializeAws_restJson1SpeechMarkTypeList = function serializeAws_restJson1SpeechMarkTypeList(input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1EngineList = function deserializeAws_restJson1EngineList(output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1LanguageCodeList = function deserializeAws_restJson1LanguageCodeList(output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1Lexicon = function deserializeAws_restJson1Lexicon(output, context) {\n  return {\n    Content: output.Content !== undefined && output.Content !== null ? output.Content : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined\n  };\n};\n\nvar deserializeAws_restJson1LexiconAttributes = function deserializeAws_restJson1LexiconAttributes(output, context) {\n  return {\n    Alphabet: output.Alphabet !== undefined && output.Alphabet !== null ? output.Alphabet : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LastModified: output.LastModified !== undefined && output.LastModified !== null ? new Date(Math.round(output.LastModified * 1000)) : undefined,\n    LexemesCount: output.LexemesCount !== undefined && output.LexemesCount !== null ? output.LexemesCount : undefined,\n    LexiconArn: output.LexiconArn !== undefined && output.LexiconArn !== null ? output.LexiconArn : undefined,\n    Size: output.Size !== undefined && output.Size !== null ? output.Size : undefined\n  };\n};\n\nvar deserializeAws_restJson1LexiconDescription = function deserializeAws_restJson1LexiconDescription(output, context) {\n  return {\n    Attributes: output.Attributes !== undefined && output.Attributes !== null ? deserializeAws_restJson1LexiconAttributes(output.Attributes, context) : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined\n  };\n};\n\nvar deserializeAws_restJson1LexiconDescriptionList = function deserializeAws_restJson1LexiconDescriptionList(output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1LexiconDescription(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1LexiconNameList = function deserializeAws_restJson1LexiconNameList(output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1SpeechMarkTypeList = function deserializeAws_restJson1SpeechMarkTypeList(output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1SynthesisTask = function deserializeAws_restJson1SynthesisTask(output, context) {\n  return {\n    CreationTime: output.CreationTime !== undefined && output.CreationTime !== null ? new Date(Math.round(output.CreationTime * 1000)) : undefined,\n    Engine: output.Engine !== undefined && output.Engine !== null ? output.Engine : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LexiconNames: output.LexiconNames !== undefined && output.LexiconNames !== null ? deserializeAws_restJson1LexiconNameList(output.LexiconNames, context) : undefined,\n    OutputFormat: output.OutputFormat !== undefined && output.OutputFormat !== null ? output.OutputFormat : undefined,\n    OutputUri: output.OutputUri !== undefined && output.OutputUri !== null ? output.OutputUri : undefined,\n    RequestCharacters: output.RequestCharacters !== undefined && output.RequestCharacters !== null ? output.RequestCharacters : undefined,\n    SampleRate: output.SampleRate !== undefined && output.SampleRate !== null ? output.SampleRate : undefined,\n    SnsTopicArn: output.SnsTopicArn !== undefined && output.SnsTopicArn !== null ? output.SnsTopicArn : undefined,\n    SpeechMarkTypes: output.SpeechMarkTypes !== undefined && output.SpeechMarkTypes !== null ? deserializeAws_restJson1SpeechMarkTypeList(output.SpeechMarkTypes, context) : undefined,\n    TaskId: output.TaskId !== undefined && output.TaskId !== null ? output.TaskId : undefined,\n    TaskStatus: output.TaskStatus !== undefined && output.TaskStatus !== null ? output.TaskStatus : undefined,\n    TaskStatusReason: output.TaskStatusReason !== undefined && output.TaskStatusReason !== null ? output.TaskStatusReason : undefined,\n    TextType: output.TextType !== undefined && output.TextType !== null ? output.TextType : undefined,\n    VoiceId: output.VoiceId !== undefined && output.VoiceId !== null ? output.VoiceId : undefined\n  };\n};\n\nvar deserializeAws_restJson1SynthesisTasks = function deserializeAws_restJson1SynthesisTasks(output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1SynthesisTask(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1Voice = function deserializeAws_restJson1Voice(output, context) {\n  return {\n    AdditionalLanguageCodes: output.AdditionalLanguageCodes !== undefined && output.AdditionalLanguageCodes !== null ? deserializeAws_restJson1LanguageCodeList(output.AdditionalLanguageCodes, context) : undefined,\n    Gender: output.Gender !== undefined && output.Gender !== null ? output.Gender : undefined,\n    Id: output.Id !== undefined && output.Id !== null ? output.Id : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LanguageName: output.LanguageName !== undefined && output.LanguageName !== null ? output.LanguageName : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n    SupportedEngines: output.SupportedEngines !== undefined && output.SupportedEngines !== null ? deserializeAws_restJson1EngineList(output.SupportedEngines, context) : undefined\n  };\n};\n\nvar deserializeAws_restJson1VoiceList = function deserializeAws_restJson1VoiceList(output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n\n    return deserializeAws_restJson1Voice(entry, context);\n  });\n};\n\nvar deserializeMetadata = function deserializeMetadata(output) {\n  var _a;\n\n  return {\n    httpStatusCode: output.statusCode,\n    requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"]\n  };\n}; // Collect low-level response body stream to Uint8Array.\n\n\nvar collectBody = function collectBody(streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n}; // Encode Uint8Array data into string with utf-8.\n\n\nvar collectBodyString = function collectBodyString(streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\n\nvar isSerializableHeaderValue = function isSerializableHeaderValue(value) {\n  return value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\n\nvar parseBody = function parseBody(streamBody, context) {\n  return collectBodyString(streamBody, context).then(function (encoded) {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n\n    return {};\n  });\n};\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\n\n\nvar loadRestJsonErrorCode = function loadRestJsonErrorCode(output, data) {\n  var findKey = function findKey(object, key) {\n    return Object.keys(object).find(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    });\n  };\n\n  var sanitizeErrorCode = function sanitizeErrorCode(rawValue) {\n    var cleanValue = rawValue;\n\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n\n    return cleanValue;\n  };\n\n  var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,WAAW,IAAIC,aAAxB,QAA6C,wBAA7C;AACA,SAASC,0BAA0B,IAAIC,4BAAvC,QAA4E,wBAA5E;AACA,OAAO,IAAIC,0CAA0C,GAAG,SAA7CA,0CAA6C,CAAUC,KAAV,EAAiBC,OAAjB,EAA0B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACrI,IAAIS,OAAJ,EAAaC,YAAb,EAA2BC,UAA3B,EAAuCC,IAAvC,EAA6CC,EAA7C,EAAiDC,QAAjD,EAA2DC,EAA3D,EAA+DC,QAA/D,EAAyEC,IAAzE;;IACA,OAAOhB,WAAW,CAAC,IAAD,EAAO,UAAUiB,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACC,KAAX;QACI,KAAK,CAAL;UACIV,OAAO,GAAG,EAAV;UACAC,YAAY,GAAG,qBAAf;;UACA,IAAIH,KAAK,CAACa,IAAN,KAAeC,SAAnB,EAA8B;YAC1BV,UAAU,GAAGJ,KAAK,CAACa,IAAnB;;YACA,IAAIT,UAAU,CAACW,MAAX,IAAqB,CAAzB,EAA4B;cACxB,MAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;YACH;;YACDb,YAAY,GAAGA,YAAY,CAACc,OAAb,CAAqB,QAArB,EAA+BnB,4BAA4B,CAACM,UAAD,CAA3D,CAAf;UACH,CAND,MAOK;YACD,MAAM,IAAIY,KAAJ,CAAU,+CAAV,CAAN;UACH;;UACD,OAAO,CAAC;UAAE;UAAH,EAAcf,OAAO,CAACiB,QAAR,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIZ,EAAE,GAAGK,EAAE,CAACQ,IAAH,EAAL,EAAgBZ,QAAQ,GAAGD,EAAE,CAACC,QAA9B,EAAwCC,EAAE,GAAGF,EAAE,CAACG,QAAhD,EAA0DA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,OAAhB,GAA0BA,EAA/F,EAAmGE,IAAI,GAAGJ,EAAE,CAACI,IAA7G;UACA,OAAO,CAAC;UAAE;UAAH,EAAe,IAAId,aAAJ,CAAkB;YAChCa,QAAQ,EAAEA,QADsB;YAEhCF,QAAQ,EAAEA,QAFsB;YAGhCG,IAAI,EAAEA,IAH0B;YAIhCU,MAAM,EAAE,QAJwB;YAKhClB,OAAO,EAAEA,OALuB;YAMhCmB,IAAI,EAAElB,YAN0B;YAOhCE,IAAI,EAAEA;UAP0B,CAAlB,CAAf,CAAP;MAjBR;IA2BH,CA5BiB,CAAlB;EA6BH,CA/BmG,CAAhB;AA+B/E,CA/BE;AAgCP,OAAO,IAAIiB,2CAA2C,GAAG,SAA9CA,2CAA8C,CAAUtB,KAAV,EAAiBC,OAAjB,EAA0B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACtI,IAAIS,OAAJ,EAAaC,YAAb,EAA2BoB,KAA3B,EAAkClB,IAAlC,EAAwCC,EAAxC,EAA4CC,QAA5C,EAAsDC,EAAtD,EAA0DC,QAA1D,EAAoEC,IAApE;;IACA,OAAOhB,WAAW,CAAC,IAAD,EAAO,UAAUiB,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACC,KAAX;QACI,KAAK,CAAL;UACIV,OAAO,GAAG,EAAV;UACAC,YAAY,GAAG,YAAf;UACAoB,KAAK,GAAG/B,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAMQ,KAAK,CAACwB,MAAN,KAAiBV,SAAjB,IAA8B;YAAEU,MAAM,EAAExB,KAAK,CAACwB;UAAhB,CAApC,CAAT,EAA0ExB,KAAK,CAACyB,YAAN,KAAuBX,SAAvB,IAAoC;YAAEW,YAAY,EAAEzB,KAAK,CAACyB;UAAtB,CAA9G,CAAT,EAAgKzB,KAAK,CAAC0B,8BAAN,KAAyCZ,SAAzC,IAAsD;YAC3OY,8BAA8B,EAAE1B,KAAK,CAAC0B,8BAAN,CAAqCC,QAArC;UAD2M,CAAtN,CAAT,EAEV3B,KAAK,CAAC4B,SAAN,KAAoBd,SAApB,IAAiC;YAAEc,SAAS,EAAE5B,KAAK,CAAC4B;UAAnB,CAFvB,CAAhB;UAGA,OAAO,CAAC;UAAE;UAAH,EAAc3B,OAAO,CAACiB,QAAR,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIZ,EAAE,GAAGK,EAAE,CAACQ,IAAH,EAAL,EAAgBZ,QAAQ,GAAGD,EAAE,CAACC,QAA9B,EAAwCC,EAAE,GAAGF,EAAE,CAACG,QAAhD,EAA0DA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,OAAhB,GAA0BA,EAA/F,EAAmGE,IAAI,GAAGJ,EAAE,CAACI,IAA7G;UACA,OAAO,CAAC;UAAE;UAAH,EAAe,IAAId,aAAJ,CAAkB;YAChCa,QAAQ,EAAEA,QADsB;YAEhCF,QAAQ,EAAEA,QAFsB;YAGhCG,IAAI,EAAEA,IAH0B;YAIhCU,MAAM,EAAE,KAJwB;YAKhClB,OAAO,EAAEA,OALuB;YAMhCmB,IAAI,EAAElB,YAN0B;YAOhCoB,KAAK,EAAEA,KAPyB;YAQhClB,IAAI,EAAEA;UAR0B,CAAlB,CAAf,CAAP;MAVR;IAqBH,CAtBiB,CAAlB;EAuBH,CAzBoG,CAAhB;AAyBhF,CAzBE;AA0BP,OAAO,IAAIwB,uCAAuC,GAAG,SAA1CA,uCAA0C,CAAU7B,KAAV,EAAiBC,OAAjB,EAA0B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAClI,IAAIS,OAAJ,EAAaC,YAAb,EAA2BC,UAA3B,EAAuCC,IAAvC,EAA6CC,EAA7C,EAAiDC,QAAjD,EAA2DC,EAA3D,EAA+DC,QAA/D,EAAyEC,IAAzE;;IACA,OAAOhB,WAAW,CAAC,IAAD,EAAO,UAAUiB,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACC,KAAX;QACI,KAAK,CAAL;UACIV,OAAO,GAAG,EAAV;UACAC,YAAY,GAAG,qBAAf;;UACA,IAAIH,KAAK,CAACa,IAAN,KAAeC,SAAnB,EAA8B;YAC1BV,UAAU,GAAGJ,KAAK,CAACa,IAAnB;;YACA,IAAIT,UAAU,CAACW,MAAX,IAAqB,CAAzB,EAA4B;cACxB,MAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;YACH;;YACDb,YAAY,GAAGA,YAAY,CAACc,OAAb,CAAqB,QAArB,EAA+BnB,4BAA4B,CAACM,UAAD,CAA3D,CAAf;UACH,CAND,MAOK;YACD,MAAM,IAAIY,KAAJ,CAAU,+CAAV,CAAN;UACH;;UACD,OAAO,CAAC;UAAE;UAAH,EAAcf,OAAO,CAACiB,QAAR,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIZ,EAAE,GAAGK,EAAE,CAACQ,IAAH,EAAL,EAAgBZ,QAAQ,GAAGD,EAAE,CAACC,QAA9B,EAAwCC,EAAE,GAAGF,EAAE,CAACG,QAAhD,EAA0DA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,OAAhB,GAA0BA,EAA/F,EAAmGE,IAAI,GAAGJ,EAAE,CAACI,IAA7G;UACA,OAAO,CAAC;UAAE;UAAH,EAAe,IAAId,aAAJ,CAAkB;YAChCa,QAAQ,EAAEA,QADsB;YAEhCF,QAAQ,EAAEA,QAFsB;YAGhCG,IAAI,EAAEA,IAH0B;YAIhCU,MAAM,EAAE,KAJwB;YAKhClB,OAAO,EAAEA,OALuB;YAMhCmB,IAAI,EAAElB,YAN0B;YAOhCE,IAAI,EAAEA;UAP0B,CAAlB,CAAf,CAAP;MAjBR;IA2BH,CA5BiB,CAAlB;EA6BH,CA/BgG,CAAhB;AA+B5E,CA/BE;AAgCP,OAAO,IAAIyB,mDAAmD,GAAG,SAAtDA,mDAAsD,CAAU9B,KAAV,EAAiBC,OAAjB,EAA0B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAC9I,IAAIS,OAAJ,EAAaC,YAAb,EAA2BC,UAA3B,EAAuCC,IAAvC,EAA6CC,EAA7C,EAAiDC,QAAjD,EAA2DC,EAA3D,EAA+DC,QAA/D,EAAyEC,IAAzE;;IACA,OAAOhB,WAAW,CAAC,IAAD,EAAO,UAAUiB,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACC,KAAX;QACI,KAAK,CAAL;UACIV,OAAO,GAAG,EAAV;UACAC,YAAY,GAAG,6BAAf;;UACA,IAAIH,KAAK,CAAC+B,MAAN,KAAiBjB,SAArB,EAAgC;YAC5BV,UAAU,GAAGJ,KAAK,CAAC+B,MAAnB;;YACA,IAAI3B,UAAU,CAACW,MAAX,IAAqB,CAAzB,EAA4B;cACxB,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;YACH;;YACDb,YAAY,GAAGA,YAAY,CAACc,OAAb,CAAqB,UAArB,EAAiCnB,4BAA4B,CAACM,UAAD,CAA7D,CAAf;UACH,CAND,MAOK;YACD,MAAM,IAAIY,KAAJ,CAAU,iDAAV,CAAN;UACH;;UACD,OAAO,CAAC;UAAE;UAAH,EAAcf,OAAO,CAACiB,QAAR,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIZ,EAAE,GAAGK,EAAE,CAACQ,IAAH,EAAL,EAAgBZ,QAAQ,GAAGD,EAAE,CAACC,QAA9B,EAAwCC,EAAE,GAAGF,EAAE,CAACG,QAAhD,EAA0DA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,OAAhB,GAA0BA,EAA/F,EAAmGE,IAAI,GAAGJ,EAAE,CAACI,IAA7G;UACA,OAAO,CAAC;UAAE;UAAH,EAAe,IAAId,aAAJ,CAAkB;YAChCa,QAAQ,EAAEA,QADsB;YAEhCF,QAAQ,EAAEA,QAFsB;YAGhCG,IAAI,EAAEA,IAH0B;YAIhCU,MAAM,EAAE,KAJwB;YAKhClB,OAAO,EAAEA,OALuB;YAMhCmB,IAAI,EAAElB,YAN0B;YAOhCE,IAAI,EAAEA;UAP0B,CAAlB,CAAf,CAAP;MAjBR;IA2BH,CA5BiB,CAAlB;EA6BH,CA/B4G,CAAhB;AA+BxF,CA/BE;AAgCP,OAAO,IAAI2B,yCAAyC,GAAG,SAA5CA,yCAA4C,CAAUhC,KAAV,EAAiBC,OAAjB,EAA0B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACpI,IAAIS,OAAJ,EAAaC,YAAb,EAA2BoB,KAA3B,EAAkClB,IAAlC,EAAwCC,EAAxC,EAA4CC,QAA5C,EAAsDC,EAAtD,EAA0DC,QAA1D,EAAoEC,IAApE;;IACA,OAAOhB,WAAW,CAAC,IAAD,EAAO,UAAUiB,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACC,KAAX;QACI,KAAK,CAAL;UACIV,OAAO,GAAG,EAAV;UACAC,YAAY,GAAG,cAAf;UACAoB,KAAK,GAAG/B,QAAQ,CAAC,EAAD,EAAMQ,KAAK,CAAC4B,SAAN,KAAoBd,SAApB,IAAiC;YAAEc,SAAS,EAAE5B,KAAK,CAAC4B;UAAnB,CAAvC,CAAhB;UACA,OAAO,CAAC;UAAE;UAAH,EAAc3B,OAAO,CAACiB,QAAR,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIZ,EAAE,GAAGK,EAAE,CAACQ,IAAH,EAAL,EAAgBZ,QAAQ,GAAGD,EAAE,CAACC,QAA9B,EAAwCC,EAAE,GAAGF,EAAE,CAACG,QAAhD,EAA0DA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,OAAhB,GAA0BA,EAA/F,EAAmGE,IAAI,GAAGJ,EAAE,CAACI,IAA7G;UACA,OAAO,CAAC;UAAE;UAAH,EAAe,IAAId,aAAJ,CAAkB;YAChCa,QAAQ,EAAEA,QADsB;YAEhCF,QAAQ,EAAEA,QAFsB;YAGhCG,IAAI,EAAEA,IAH0B;YAIhCU,MAAM,EAAE,KAJwB;YAKhClB,OAAO,EAAEA,OALuB;YAMhCmB,IAAI,EAAElB,YAN0B;YAOhCoB,KAAK,EAAEA,KAPyB;YAQhClB,IAAI,EAAEA;UAR0B,CAAlB,CAAf,CAAP;MARR;IAmBH,CApBiB,CAAlB;EAqBH,CAvBkG,CAAhB;AAuB9E,CAvBE;AAwBP,OAAO,IAAI4B,qDAAqD,GAAG,SAAxDA,qDAAwD,CAAUjC,KAAV,EAAiBC,OAAjB,EAA0B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAChJ,IAAIS,OAAJ,EAAaC,YAAb,EAA2BoB,KAA3B,EAAkClB,IAAlC,EAAwCC,EAAxC,EAA4CC,QAA5C,EAAsDC,EAAtD,EAA0DC,QAA1D,EAAoEC,IAApE;;IACA,OAAOhB,WAAW,CAAC,IAAD,EAAO,UAAUiB,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACC,KAAX;QACI,KAAK,CAAL;UACIV,OAAO,GAAG,EAAV;UACAC,YAAY,GAAG,oBAAf;UACAoB,KAAK,GAAG/B,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAMQ,KAAK,CAACkC,UAAN,KAAqBpB,SAArB,IAAkC;YAAEoB,UAAU,EAAElC,KAAK,CAACkC,UAAN,CAAiBP,QAAjB;UAAd,CAAxC,CAAT,EAAiG3B,KAAK,CAAC4B,SAAN,KAAoBd,SAApB,IAAiC;YAAEc,SAAS,EAAE5B,KAAK,CAAC4B;UAAnB,CAAlI,CAAT,EAA8K5B,KAAK,CAACmC,MAAN,KAAiBrB,SAAjB,IAA8B;YAAEqB,MAAM,EAAEnC,KAAK,CAACmC;UAAhB,CAA5M,CAAhB;UACA,OAAO,CAAC;UAAE;UAAH,EAAclC,OAAO,CAACiB,QAAR,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIZ,EAAE,GAAGK,EAAE,CAACQ,IAAH,EAAL,EAAgBZ,QAAQ,GAAGD,EAAE,CAACC,QAA9B,EAAwCC,EAAE,GAAGF,EAAE,CAACG,QAAhD,EAA0DA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,OAAhB,GAA0BA,EAA/F,EAAmGE,IAAI,GAAGJ,EAAE,CAACI,IAA7G;UACA,OAAO,CAAC;UAAE;UAAH,EAAe,IAAId,aAAJ,CAAkB;YAChCa,QAAQ,EAAEA,QADsB;YAEhCF,QAAQ,EAAEA,QAFsB;YAGhCG,IAAI,EAAEA,IAH0B;YAIhCU,MAAM,EAAE,KAJwB;YAKhClB,OAAO,EAAEA,OALuB;YAMhCmB,IAAI,EAAElB,YAN0B;YAOhCoB,KAAK,EAAEA,KAPyB;YAQhClB,IAAI,EAAEA;UAR0B,CAAlB,CAAf,CAAP;MARR;IAmBH,CApBiB,CAAlB;EAqBH,CAvB8G,CAAhB;AAuB1F,CAvBE;AAwBP,OAAO,IAAI+B,uCAAuC,GAAG,SAA1CA,uCAA0C,CAAUpC,KAAV,EAAiBC,OAAjB,EAA0B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAClI,IAAIS,OAAJ,EAAaC,YAAb,EAA2BC,UAA3B,EAAuCC,IAAvC,EAA6CC,EAA7C,EAAiDC,QAAjD,EAA2DC,EAA3D,EAA+DC,QAA/D,EAAyEC,IAAzE;;IACA,OAAOhB,WAAW,CAAC,IAAD,EAAO,UAAUiB,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACC,KAAX;QACI,KAAK,CAAL;UACIV,OAAO,GAAG;YACN,gBAAgB;UADV,CAAV;UAGAC,YAAY,GAAG,qBAAf;;UACA,IAAIH,KAAK,CAACa,IAAN,KAAeC,SAAnB,EAA8B;YAC1BV,UAAU,GAAGJ,KAAK,CAACa,IAAnB;;YACA,IAAIT,UAAU,CAACW,MAAX,IAAqB,CAAzB,EAA4B;cACxB,MAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;YACH;;YACDb,YAAY,GAAGA,YAAY,CAACc,OAAb,CAAqB,QAArB,EAA+BnB,4BAA4B,CAACM,UAAD,CAA3D,CAAf;UACH,CAND,MAOK;YACD,MAAM,IAAIY,KAAJ,CAAU,+CAAV,CAAN;UACH;;UACDX,IAAI,GAAGgC,IAAI,CAACC,SAAL,CAAe9C,QAAQ,CAAC,EAAD,EAAMQ,KAAK,CAACuC,OAAN,KAAkBzB,SAAlB,IAA+Bd,KAAK,CAACuC,OAAN,KAAkB,IAAjD,IAAyD;YAAEA,OAAO,EAAEvC,KAAK,CAACuC;UAAjB,CAA/D,CAAvB,CAAP;UACA,OAAO,CAAC;UAAE;UAAH,EAActC,OAAO,CAACiB,QAAR,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIZ,EAAE,GAAGK,EAAE,CAACQ,IAAH,EAAL,EAAgBZ,QAAQ,GAAGD,EAAE,CAACC,QAA9B,EAAwCC,EAAE,GAAGF,EAAE,CAACG,QAAhD,EAA0DA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,OAAhB,GAA0BA,EAA/F,EAAmGE,IAAI,GAAGJ,EAAE,CAACI,IAA7G;UACA,OAAO,CAAC;UAAE;UAAH,EAAe,IAAId,aAAJ,CAAkB;YAChCa,QAAQ,EAAEA,QADsB;YAEhCF,QAAQ,EAAEA,QAFsB;YAGhCG,IAAI,EAAEA,IAH0B;YAIhCU,MAAM,EAAE,KAJwB;YAKhClB,OAAO,EAAEA,OALuB;YAMhCmB,IAAI,EAAElB,YAN0B;YAOhCE,IAAI,EAAEA;UAP0B,CAAlB,CAAf,CAAP;MApBR;IA8BH,CA/BiB,CAAlB;EAgCH,CAlCgG,CAAhB;AAkC5E,CAlCE;AAmCP,OAAO,IAAImC,qDAAqD,GAAG,SAAxDA,qDAAwD,CAAUxC,KAAV,EAAiBC,OAAjB,EAA0B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAChJ,IAAIS,OAAJ,EAAaC,YAAb,EAA2BE,IAA3B,EAAiCC,EAAjC,EAAqCC,QAArC,EAA+CC,EAA/C,EAAmDC,QAAnD,EAA6DC,IAA7D;;IACA,OAAOhB,WAAW,CAAC,IAAD,EAAO,UAAUiB,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACC,KAAX;QACI,KAAK,CAAL;UACIV,OAAO,GAAG;YACN,gBAAgB;UADV,CAAV;UAGAC,YAAY,GAAG,oBAAf;UACAE,IAAI,GAAGgC,IAAI,CAACC,SAAL,CAAe9C,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAMQ,KAAK,CAACwB,MAAN,KAAiBV,SAAjB,IAA8Bd,KAAK,CAACwB,MAAN,KAAiB,IAA/C,IAAuD;YAAEA,MAAM,EAAExB,KAAK,CAACwB;UAAhB,CAA7D,CAAT,EAAmGxB,KAAK,CAACyB,YAAN,KAAuBX,SAAvB,IAAoCd,KAAK,CAACyB,YAAN,KAAuB,IAA3D,IAAmE;YAAEA,YAAY,EAAEzB,KAAK,CAACyB;UAAtB,CAAtK,CAAT,EAAwNzB,KAAK,CAACyC,YAAN,KAAuB3B,SAAvB,IACnUd,KAAK,CAACyC,YAAN,KAAuB,IAD4S,IACpS;YAC/BA,YAAY,EAAEC,qCAAqC,CAAC1C,KAAK,CAACyC,YAAP,EAAqBxC,OAArB;UADpB,CAD4E,CAAT,EAGhGD,KAAK,CAAC2C,YAAN,KAAuB7B,SAAvB,IAAoCd,KAAK,CAAC2C,YAAN,KAAuB,IAA3D,IAAmE;YAAEA,YAAY,EAAE3C,KAAK,CAAC2C;UAAtB,CAH6B,CAAT,EAGqB3C,KAAK,CAAC4C,kBAAN,KAA6B9B,SAA7B,IAC9Gd,KAAK,CAAC4C,kBAAN,KAA6B,IADiF,IACzE;YAAEA,kBAAkB,EAAE5C,KAAK,CAAC4C;UAA5B,CAJoD,CAAT,EAIU5C,KAAK,CAAC6C,iBAAN,KAA4B/B,SAA5B,IAC1Fd,KAAK,CAAC6C,iBAAN,KAA4B,IAD8D,IACtD;YAAEA,iBAAiB,EAAE7C,KAAK,CAAC6C;UAA3B,CAL4C,CAAT,EAKgB7C,KAAK,CAAC8C,UAAN,KAAqBhC,SAArB,IAAkCd,KAAK,CAAC8C,UAAN,KAAqB,IAAvD,IAA+D;YAAEA,UAAU,EAAE9C,KAAK,CAAC8C;UAApB,CAL/E,CAAT,EAK6H9C,KAAK,CAAC+C,WAAN,KAAsBjC,SAAtB,IAAmCd,KAAK,CAAC+C,WAAN,KAAsB,IAAzD,IAAiE;YAAEA,WAAW,EAAE/C,KAAK,CAAC+C;UAArB,CAL9L,CAAT,EAK8O/C,KAAK,CAACgD,eAAN,KAA0BlC,SAA1B,IACnSd,KAAK,CAACgD,eAAN,KAA0B,IADyQ,IACjQ;YAClCA,eAAe,EAAEC,wCAAwC,CAACjD,KAAK,CAACgD,eAAP,EAAwB/C,OAAxB;UADvB,CANmB,CAAT,EAQ1CD,KAAK,CAACkD,IAAN,KAAepC,SAAf,IAA4Bd,KAAK,CAACkD,IAAN,KAAe,IAA3C,IAAmD;YAAEA,IAAI,EAAElD,KAAK,CAACkD;UAAd,CART,CAAT,EAQ2ClD,KAAK,CAACmD,QAAN,KAAmBrC,SAAnB,IAAgCd,KAAK,CAACmD,QAAN,KAAmB,IAAnD,IAA2D;YAAEA,QAAQ,EAAEnD,KAAK,CAACmD;UAAlB,CARtG,CAAT,EAQgJnD,KAAK,CAACoD,OAAN,KAAkBtC,SAAlB,IAA+Bd,KAAK,CAACoD,OAAN,KAAkB,IAAjD,IAAyD;YAAEA,OAAO,EAAEpD,KAAK,CAACoD;UAAjB,CARzM,CAAvB,CAAP;UASA,OAAO,CAAC;UAAE;UAAH,EAAcnD,OAAO,CAACiB,QAAR,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIZ,EAAE,GAAGK,EAAE,CAACQ,IAAH,EAAL,EAAgBZ,QAAQ,GAAGD,EAAE,CAACC,QAA9B,EAAwCC,EAAE,GAAGF,EAAE,CAACG,QAAhD,EAA0DA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,OAAhB,GAA0BA,EAA/F,EAAmGE,IAAI,GAAGJ,EAAE,CAACI,IAA7G;UACA,OAAO,CAAC;UAAE;UAAH,EAAe,IAAId,aAAJ,CAAkB;YAChCa,QAAQ,EAAEA,QADsB;YAEhCF,QAAQ,EAAEA,QAFsB;YAGhCG,IAAI,EAAEA,IAH0B;YAIhCU,MAAM,EAAE,MAJwB;YAKhClB,OAAO,EAAEA,OALuB;YAMhCmB,IAAI,EAAElB,YAN0B;YAOhCE,IAAI,EAAEA;UAP0B,CAAlB,CAAf,CAAP;MAlBR;IA4BH,CA7BiB,CAAlB;EA8BH,CAhC8G,CAAhB;AAgC1F,CAhCE;AAiCP,OAAO,IAAIgD,6CAA6C,GAAG,SAAhDA,6CAAgD,CAAUrD,KAAV,EAAiBC,OAAjB,EAA0B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACxI,IAAIS,OAAJ,EAAaC,YAAb,EAA2BE,IAA3B,EAAiCC,EAAjC,EAAqCC,QAArC,EAA+CC,EAA/C,EAAmDC,QAAnD,EAA6DC,IAA7D;;IACA,OAAOhB,WAAW,CAAC,IAAD,EAAO,UAAUiB,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACC,KAAX;QACI,KAAK,CAAL;UACIV,OAAO,GAAG;YACN,gBAAgB;UADV,CAAV;UAGAC,YAAY,GAAG,YAAf;UACAE,IAAI,GAAGgC,IAAI,CAACC,SAAL,CAAe9C,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAMQ,KAAK,CAACwB,MAAN,KAAiBV,SAAjB,IAA8Bd,KAAK,CAACwB,MAAN,KAAiB,IAA/C,IAAuD;YAAEA,MAAM,EAAExB,KAAK,CAACwB;UAAhB,CAA7D,CAAT,EAAmGxB,KAAK,CAACyB,YAAN,KAAuBX,SAAvB,IAAoCd,KAAK,CAACyB,YAAN,KAAuB,IAA3D,IAAmE;YAAEA,YAAY,EAAEzB,KAAK,CAACyB;UAAtB,CAAtK,CAAT,EAAwNzB,KAAK,CAACyC,YAAN,KAAuB3B,SAAvB,IACxSd,KAAK,CAACyC,YAAN,KAAuB,IADiR,IACzQ;YAC/BA,YAAY,EAAEC,qCAAqC,CAAC1C,KAAK,CAACyC,YAAP,EAAqBxC,OAArB;UADpB,CADiD,CAAT,EAGrED,KAAK,CAAC2C,YAAN,KAAuB7B,SAAvB,IAAoCd,KAAK,CAAC2C,YAAN,KAAuB,IAA3D,IAAmE;YAAEA,YAAY,EAAE3C,KAAK,CAAC2C;UAAtB,CAHE,CAAT,EAGgD3C,KAAK,CAAC8C,UAAN,KAAqBhC,SAArB,IAAkCd,KAAK,CAAC8C,UAAN,KAAqB,IAAvD,IAA+D;YAAEA,UAAU,EAAE9C,KAAK,CAAC8C;UAApB,CAH/G,CAAT,EAG6J9C,KAAK,CAACgD,eAAN,KAA0BlC,SAA1B,IAClNd,KAAK,CAACgD,eAAN,KAA0B,IADwL,IAChL;YAClCA,eAAe,EAAEC,wCAAwC,CAACjD,KAAK,CAACgD,eAAP,EAAwB/C,OAAxB;UADvB,CAJmB,CAAT,EAM1CD,KAAK,CAACkD,IAAN,KAAepC,SAAf,IAA4Bd,KAAK,CAACkD,IAAN,KAAe,IAA3C,IAAmD;YAAEA,IAAI,EAAElD,KAAK,CAACkD;UAAd,CANT,CAAT,EAM2ClD,KAAK,CAACmD,QAAN,KAAmBrC,SAAnB,IAAgCd,KAAK,CAACmD,QAAN,KAAmB,IAAnD,IAA2D;YAAEA,QAAQ,EAAEnD,KAAK,CAACmD;UAAlB,CANtG,CAAT,EAMgJnD,KAAK,CAACoD,OAAN,KAAkBtC,SAAlB,IAA+Bd,KAAK,CAACoD,OAAN,KAAkB,IAAjD,IAAyD;YAAEA,OAAO,EAAEpD,KAAK,CAACoD;UAAjB,CANzM,CAAvB,CAAP;UAOA,OAAO,CAAC;UAAE;UAAH,EAAcnD,OAAO,CAACiB,QAAR,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIZ,EAAE,GAAGK,EAAE,CAACQ,IAAH,EAAL,EAAgBZ,QAAQ,GAAGD,EAAE,CAACC,QAA9B,EAAwCC,EAAE,GAAGF,EAAE,CAACG,QAAhD,EAA0DA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,OAAhB,GAA0BA,EAA/F,EAAmGE,IAAI,GAAGJ,EAAE,CAACI,IAA7G;UACA,OAAO,CAAC;UAAE;UAAH,EAAe,IAAId,aAAJ,CAAkB;YAChCa,QAAQ,EAAEA,QADsB;YAEhCF,QAAQ,EAAEA,QAFsB;YAGhCG,IAAI,EAAEA,IAH0B;YAIhCU,MAAM,EAAE,MAJwB;YAKhClB,OAAO,EAAEA,OALuB;YAMhCmB,IAAI,EAAElB,YAN0B;YAOhCE,IAAI,EAAEA;UAP0B,CAAlB,CAAf,CAAP;MAhBR;IA0BH,CA3BiB,CAAlB;EA4BH,CA9BsG,CAAhB;AA8BlF,CA9BE;AA+BP,OAAO,IAAIiD,4CAA4C,GAAG,SAA/CA,4CAA+C,CAAUC,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACxI,IAAI+D,QAAJ;IACA,OAAO9D,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACM,KAAX;QACI,KAAK,CAAL;UACI,IAAI2C,MAAM,CAACE,UAAP,KAAsB,GAAtB,IAA6BF,MAAM,CAACE,UAAP,IAAqB,GAAtD,EAA2D;YACvD,OAAO,CAAC;YAAE;YAAH,EAAeC,iDAAiD,CAACH,MAAD,EAAStD,OAAT,CAAhE,CAAP;UACH;;UACDuD,QAAQ,GAAG;YACPG,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UADvB,CAAX;UAGA,OAAO,CAAC;UAAE;UAAH,EAAcM,WAAW,CAACN,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAzB,CAAP;;QACJ,KAAK,CAAL;UACIK,EAAE,CAACa,IAAH;;UACA,OAAO,CAAC;UAAE;UAAH,EAAe2C,OAAO,CAACC,OAAR,CAAgBP,QAAhB,CAAf,CAAP;MAXR;IAaH,CAdiB,CAAlB;EAeH,CAjBsG,CAAhB;AAiBlF,CAjBE;;AAkBP,IAAIE,iDAAiD,GAAG,SAApDA,iDAAoD,CAAUH,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACtI,IAAIuE,YAAJ,EAAkB1D,EAAlB,EAAsB2D,QAAtB,EAAgCC,SAAhC,EAA2C1D,EAA3C,EAA+CG,EAA/C,EAAmDwD,EAAnD,EAAuDC,UAAvD,EAAmEC,OAAnE;;IACA,IAAIC,EAAJ;;IACA,OAAO5E,WAAW,CAAC,IAAD,EAAO,UAAU6E,EAAV,EAAc;MACnC,QAAQA,EAAE,CAAC3D,KAAX;QACI,KAAK,CAAL;UACIN,EAAE,GAAG,CAACd,QAAQ,CAAC,EAAD,EAAK+D,MAAL,CAAT,CAAL;UACAe,EAAE,GAAG,EAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcE,SAAS,CAACjB,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAvB,CAAP;;QACJ,KAAK,CAAL;UACI+D,YAAY,GAAGxE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBnE,EAAE,CAACoE,MAAH,CAAU,EAAEJ,EAAE,CAACjE,IAAH,GAAUkE,EAAE,CAACpD,IAAH,EAAV,EAAqBmD,EAAvB,EAAV,CAAvB,CAAf;UACAJ,SAAS,GAAG,cAAZ;UACAA,SAAS,GAAGS,qBAAqB,CAACpB,MAAD,EAASS,YAAY,CAAC3D,IAAtB,CAAjC;UACAG,EAAE,GAAG0D,SAAL;;UACA,QAAQ1D,EAAR;YACI,KAAK,0BAAL;cAAiC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACjC,KAAK,8CAAL;cAAqD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACrD,KAAK,yBAAL;cAAgC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAChC,KAAK,6CAAL;cAAoD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;UAJxD;;UAMA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIG,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAciE,wDAAwD,CAACZ,YAAD,EAAe/D,OAAf,CAAtE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB9D,EAAE,CAAC+D,MAAH,CAAU,CAAEH,EAAE,CAACpD,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIY,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcW,uDAAuD,CAACd,YAAD,EAAe/D,OAAf,CAArE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBN,EAAE,CAACO,MAAH,CAAU,CAAEH,EAAE,CAACpD,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIa,UAAU,GAAGJ,YAAY,CAAC3D,IAA1B;UACA6D,SAAS,GAAGE,UAAU,CAACW,IAAX,IAAmBX,UAAU,CAACY,IAA9B,IAAsCd,SAAlD;UACAD,QAAQ,GAAGzE,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK4E,UAAL,CAAT,EAA2B;YAAES,IAAI,EAAE,KAAKX,SAAb;YAAwBG,OAAO,EAAED,UAAU,CAACC,OAAX,IAAsBD,UAAU,CAACa,OAAjC,IAA4Cf,SAA7E;YAAwFgB,MAAM,EAAE,QAAhG;YAA0GvB,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAxI,CAA3B,CAAnB;UACAgB,EAAE,CAAC3D,KAAH,GAAW,CAAX;;QACJ,KAAK,CAAL;UACIyD,OAAO,GAAGJ,QAAQ,CAACI,OAAT,IAAoBJ,QAAQ,CAACgB,OAA7B,IAAwCf,SAAlD;UACAD,QAAQ,CAACI,OAAT,GAAmBA,OAAnB;UACA,OAAOJ,QAAQ,CAACgB,OAAhB;UACA,OAAO,CAAC;UAAE;UAAH,EAAenB,OAAO,CAACqB,MAAR,CAAeC,MAAM,CAACC,MAAP,CAAc,IAAIrE,KAAJ,CAAUqD,OAAV,CAAd,EAAkCJ,QAAlC,CAAf,CAAf,CAAP;MAtCR;IAwCH,CAzCiB,CAAlB;EA0CH,CA7CoG,CAAhB;AA6ChF,CA7CL;;AA8CA,OAAO,IAAIqB,6CAA6C,GAAG,SAAhDA,6CAAgD,CAAU/B,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACzI,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACM,KAAX;QACI,KAAK,CAAL;UACI,IAAI2C,MAAM,CAACE,UAAP,KAAsB,GAAtB,IAA6BF,MAAM,CAACE,UAAP,IAAqB,GAAtD,EAA2D;YACvD,OAAO,CAAC;YAAE;YAAH,EAAe+B,kDAAkD,CAACjC,MAAD,EAAStD,OAAT,CAAjE,CAAP;UACH;;UACDuD,QAAQ,GAAG;YACPG,SAAS,EAAEC,mBAAmB,CAACL,MAAD,CADvB;YAEP3B,SAAS,EAAEd,SAFJ;YAGP2E,MAAM,EAAE3E;UAHD,CAAX;UAKA,OAAO,CAAC;UAAE;UAAH,EAAc0D,SAAS,CAACjB,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAvB,CAAP;;QACJ,KAAK,CAAL;UACIsF,IAAI,GAAGjF,EAAE,CAACa,IAAH,EAAP;;UACA,IAAIoE,IAAI,CAAC3D,SAAL,KAAmBd,SAAnB,IAAgCyE,IAAI,CAAC3D,SAAL,KAAmB,IAAvD,EAA6D;YACzD4B,QAAQ,CAAC5B,SAAT,GAAqB2D,IAAI,CAAC3D,SAA1B;UACH;;UACD,IAAI2D,IAAI,CAACE,MAAL,KAAgB3E,SAAhB,IAA6ByE,IAAI,CAACE,MAAL,KAAgB,IAAjD,EAAuD;YACnDjC,QAAQ,CAACiC,MAAT,GAAkBC,iCAAiC,CAACH,IAAI,CAACE,MAAN,EAAcxF,OAAd,CAAnD;UACH;;UACD,OAAO,CAAC;UAAE;UAAH,EAAe6D,OAAO,CAACC,OAAR,CAAgBP,QAAhB,CAAf,CAAP;MAnBR;IAqBH,CAtBiB,CAAlB;EAuBH,CAzBuG,CAAhB;AAyBnF,CAzBE;;AA0BP,IAAIgC,kDAAkD,GAAG,SAArDA,kDAAqD,CAAUjC,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACvI,IAAIuE,YAAJ,EAAkB1D,EAAlB,EAAsB2D,QAAtB,EAAgCC,SAAhC,EAA2C1D,EAA3C,EAA+CG,EAA/C,EAAmDwD,EAAnD,EAAuDC,UAAvD,EAAmEC,OAAnE;;IACA,IAAIC,EAAJ;;IACA,OAAO5E,WAAW,CAAC,IAAD,EAAO,UAAU6E,EAAV,EAAc;MACnC,QAAQA,EAAE,CAAC3D,KAAX;QACI,KAAK,CAAL;UACIN,EAAE,GAAG,CAACd,QAAQ,CAAC,EAAD,EAAK+D,MAAL,CAAT,CAAL;UACAe,EAAE,GAAG,EAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcE,SAAS,CAACjB,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAvB,CAAP;;QACJ,KAAK,CAAL;UACI+D,YAAY,GAAGxE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBnE,EAAE,CAACoE,MAAH,CAAU,EAAEJ,EAAE,CAACjE,IAAH,GAAUkE,EAAE,CAACpD,IAAH,EAAV,EAAqBmD,EAAvB,EAAV,CAAvB,CAAf;UACAJ,SAAS,GAAG,cAAZ;UACAA,SAAS,GAAGS,qBAAqB,CAACpB,MAAD,EAASS,YAAY,CAAC3D,IAAtB,CAAjC;UACAG,EAAE,GAAG0D,SAAL;;UACA,QAAQ1D,EAAR;YACI,KAAK,2BAAL;cAAkC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAClC,KAAK,+CAAL;cAAsD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACtD,KAAK,yBAAL;cAAgC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAChC,KAAK,6CAAL;cAAoD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;UAJxD;;UAMA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIG,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcgF,yDAAyD,CAAC3B,YAAD,EAAe/D,OAAf,CAAvE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB9D,EAAE,CAAC+D,MAAH,CAAU,CAAEH,EAAE,CAACpD,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIY,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcW,uDAAuD,CAACd,YAAD,EAAe/D,OAAf,CAArE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBN,EAAE,CAACO,MAAH,CAAU,CAAEH,EAAE,CAACpD,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIa,UAAU,GAAGJ,YAAY,CAAC3D,IAA1B;UACA6D,SAAS,GAAGE,UAAU,CAACW,IAAX,IAAmBX,UAAU,CAACY,IAA9B,IAAsCd,SAAlD;UACAD,QAAQ,GAAGzE,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK4E,UAAL,CAAT,EAA2B;YAAES,IAAI,EAAE,KAAKX,SAAb;YAAwBG,OAAO,EAAED,UAAU,CAACC,OAAX,IAAsBD,UAAU,CAACa,OAAjC,IAA4Cf,SAA7E;YAAwFgB,MAAM,EAAE,QAAhG;YAA0GvB,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAxI,CAA3B,CAAnB;UACAgB,EAAE,CAAC3D,KAAH,GAAW,CAAX;;QACJ,KAAK,CAAL;UACIyD,OAAO,GAAGJ,QAAQ,CAACI,OAAT,IAAoBJ,QAAQ,CAACgB,OAA7B,IAAwCf,SAAlD;UACAD,QAAQ,CAACI,OAAT,GAAmBA,OAAnB;UACA,OAAOJ,QAAQ,CAACgB,OAAhB;UACA,OAAO,CAAC;UAAE;UAAH,EAAenB,OAAO,CAACqB,MAAR,CAAeC,MAAM,CAACC,MAAP,CAAc,IAAIrE,KAAJ,CAAUqD,OAAV,CAAd,EAAkCJ,QAAlC,CAAf,CAAf,CAAP;MAtCR;IAwCH,CAzCiB,CAAlB;EA0CH,CA7CqG,CAAhB;AA6CjF,CA7CL;;AA8CA,OAAO,IAAI2B,yCAAyC,GAAG,SAA5CA,yCAA4C,CAAUrC,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACrI,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACM,KAAX;QACI,KAAK,CAAL;UACI,IAAI2C,MAAM,CAACE,UAAP,KAAsB,GAAtB,IAA6BF,MAAM,CAACE,UAAP,IAAqB,GAAtD,EAA2D;YACvD,OAAO,CAAC;YAAE;YAAH,EAAeoC,8CAA8C,CAACtC,MAAD,EAAStD,OAAT,CAA7D,CAAP;UACH;;UACDuD,QAAQ,GAAG;YACPG,SAAS,EAAEC,mBAAmB,CAACL,MAAD,CADvB;YAEPuC,OAAO,EAAEhF,SAFF;YAGPiF,iBAAiB,EAAEjF;UAHZ,CAAX;UAKA,OAAO,CAAC;UAAE;UAAH,EAAc0D,SAAS,CAACjB,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAvB,CAAP;;QACJ,KAAK,CAAL;UACIsF,IAAI,GAAGjF,EAAE,CAACa,IAAH,EAAP;;UACA,IAAIoE,IAAI,CAACO,OAAL,KAAiBhF,SAAjB,IAA8ByE,IAAI,CAACO,OAAL,KAAiB,IAAnD,EAAyD;YACrDtC,QAAQ,CAACsC,OAAT,GAAmBE,+BAA+B,CAACT,IAAI,CAACO,OAAN,EAAe7F,OAAf,CAAlD;UACH;;UACD,IAAIsF,IAAI,CAACQ,iBAAL,KAA2BjF,SAA3B,IAAwCyE,IAAI,CAACQ,iBAAL,KAA2B,IAAvE,EAA6E;YACzEvC,QAAQ,CAACuC,iBAAT,GAA6BE,yCAAyC,CAACV,IAAI,CAACQ,iBAAN,EAAyB9F,OAAzB,CAAtE;UACH;;UACD,OAAO,CAAC;UAAE;UAAH,EAAe6D,OAAO,CAACC,OAAR,CAAgBP,QAAhB,CAAf,CAAP;MAnBR;IAqBH,CAtBiB,CAAlB;EAuBH,CAzBmG,CAAhB;AAyB/E,CAzBE;;AA0BP,IAAIqC,8CAA8C,GAAG,SAAjDA,8CAAiD,CAAUtC,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACnI,IAAIuE,YAAJ,EAAkB1D,EAAlB,EAAsB2D,QAAtB,EAAgCC,SAAhC,EAA2C1D,EAA3C,EAA+CG,EAA/C,EAAmDwD,EAAnD,EAAuDC,UAAvD,EAAmEC,OAAnE;;IACA,IAAIC,EAAJ;;IACA,OAAO5E,WAAW,CAAC,IAAD,EAAO,UAAU6E,EAAV,EAAc;MACnC,QAAQA,EAAE,CAAC3D,KAAX;QACI,KAAK,CAAL;UACIN,EAAE,GAAG,CAACd,QAAQ,CAAC,EAAD,EAAK+D,MAAL,CAAT,CAAL;UACAe,EAAE,GAAG,EAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcE,SAAS,CAACjB,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAvB,CAAP;;QACJ,KAAK,CAAL;UACI+D,YAAY,GAAGxE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBnE,EAAE,CAACoE,MAAH,CAAU,EAAEJ,EAAE,CAACjE,IAAH,GAAUkE,EAAE,CAACpD,IAAH,EAAV,EAAqBmD,EAAvB,EAAV,CAAvB,CAAf;UACAJ,SAAS,GAAG,cAAZ;UACAA,SAAS,GAAGS,qBAAqB,CAACpB,MAAD,EAASS,YAAY,CAAC3D,IAAtB,CAAjC;UACAG,EAAE,GAAG0D,SAAL;;UACA,QAAQ1D,EAAR;YACI,KAAK,0BAAL;cAAiC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACjC,KAAK,8CAAL;cAAqD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACrD,KAAK,yBAAL;cAAgC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAChC,KAAK,6CAAL;cAAoD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;UAJxD;;UAMA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIG,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAciE,wDAAwD,CAACZ,YAAD,EAAe/D,OAAf,CAAtE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB9D,EAAE,CAAC+D,MAAH,CAAU,CAAEH,EAAE,CAACpD,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIY,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcW,uDAAuD,CAACd,YAAD,EAAe/D,OAAf,CAArE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBN,EAAE,CAACO,MAAH,CAAU,CAAEH,EAAE,CAACpD,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIa,UAAU,GAAGJ,YAAY,CAAC3D,IAA1B;UACA6D,SAAS,GAAGE,UAAU,CAACW,IAAX,IAAmBX,UAAU,CAACY,IAA9B,IAAsCd,SAAlD;UACAD,QAAQ,GAAGzE,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK4E,UAAL,CAAT,EAA2B;YAAES,IAAI,EAAE,KAAKX,SAAb;YAAwBG,OAAO,EAAED,UAAU,CAACC,OAAX,IAAsBD,UAAU,CAACa,OAAjC,IAA4Cf,SAA7E;YAAwFgB,MAAM,EAAE,QAAhG;YAA0GvB,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAxI,CAA3B,CAAnB;UACAgB,EAAE,CAAC3D,KAAH,GAAW,CAAX;;QACJ,KAAK,CAAL;UACIyD,OAAO,GAAGJ,QAAQ,CAACI,OAAT,IAAoBJ,QAAQ,CAACgB,OAA7B,IAAwCf,SAAlD;UACAD,QAAQ,CAACI,OAAT,GAAmBA,OAAnB;UACA,OAAOJ,QAAQ,CAACgB,OAAhB;UACA,OAAO,CAAC;UAAE;UAAH,EAAenB,OAAO,CAACqB,MAAR,CAAeC,MAAM,CAACC,MAAP,CAAc,IAAIrE,KAAJ,CAAUqD,OAAV,CAAd,EAAkCJ,QAAlC,CAAf,CAAf,CAAP;MAtCR;IAwCH,CAzCiB,CAAlB;EA0CH,CA7CiG,CAAhB;AA6C7E,CA7CL;;AA8CA,OAAO,IAAIiC,qDAAqD,GAAG,SAAxDA,qDAAwD,CAAU3C,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACjJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACM,KAAX;QACI,KAAK,CAAL;UACI,IAAI2C,MAAM,CAACE,UAAP,KAAsB,GAAtB,IAA6BF,MAAM,CAACE,UAAP,IAAqB,GAAtD,EAA2D;YACvD,OAAO,CAAC;YAAE;YAAH,EAAe0C,0DAA0D,CAAC5C,MAAD,EAAStD,OAAT,CAAzE,CAAP;UACH;;UACDuD,QAAQ,GAAG;YACPG,SAAS,EAAEC,mBAAmB,CAACL,MAAD,CADvB;YAEP6C,aAAa,EAAEtF;UAFR,CAAX;UAIA,OAAO,CAAC;UAAE;UAAH,EAAc0D,SAAS,CAACjB,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAvB,CAAP;;QACJ,KAAK,CAAL;UACIsF,IAAI,GAAGjF,EAAE,CAACa,IAAH,EAAP;;UACA,IAAIoE,IAAI,CAACa,aAAL,KAAuBtF,SAAvB,IAAoCyE,IAAI,CAACa,aAAL,KAAuB,IAA/D,EAAqE;YACjE5C,QAAQ,CAAC4C,aAAT,GAAyBC,qCAAqC,CAACd,IAAI,CAACa,aAAN,EAAqBnG,OAArB,CAA9D;UACH;;UACD,OAAO,CAAC;UAAE;UAAH,EAAe6D,OAAO,CAACC,OAAR,CAAgBP,QAAhB,CAAf,CAAP;MAfR;IAiBH,CAlBiB,CAAlB;EAmBH,CArB+G,CAAhB;AAqB3F,CArBE;;AAsBP,IAAI2C,0DAA0D,GAAG,SAA7DA,0DAA6D,CAAU5C,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAC/I,IAAIuE,YAAJ,EAAkB1D,EAAlB,EAAsB2D,QAAtB,EAAgCC,SAAhC,EAA2C1D,EAA3C,EAA+CG,EAA/C,EAAmDwD,EAAnD,EAAuDG,EAAvD,EAA2DF,UAA3D,EAAuEC,OAAvE;;IACA,IAAIE,EAAJ;;IACA,OAAO7E,WAAW,CAAC,IAAD,EAAO,UAAU4G,EAAV,EAAc;MACnC,QAAQA,EAAE,CAAC1F,KAAX;QACI,KAAK,CAAL;UACIN,EAAE,GAAG,CAACd,QAAQ,CAAC,EAAD,EAAK+D,MAAL,CAAT,CAAL;UACAgB,EAAE,GAAG,EAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcC,SAAS,CAACjB,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAvB,CAAP;;QACJ,KAAK,CAAL;UACI+D,YAAY,GAAGxE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBnE,EAAE,CAACoE,MAAH,CAAU,EAAEH,EAAE,CAAClE,IAAH,GAAUiG,EAAE,CAACnF,IAAH,EAAV,EAAqBoD,EAAvB,EAAV,CAAvB,CAAf;UACAL,SAAS,GAAG,cAAZ;UACAA,SAAS,GAAGS,qBAAqB,CAACpB,MAAD,EAASS,YAAY,CAAC3D,IAAtB,CAAjC;UACAG,EAAE,GAAG0D,SAAL;;UACA,QAAQ1D,EAAR;YACI,KAAK,wBAAL;cAA+B,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAC/B,KAAK,4CAAL;cAAmD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACnD,KAAK,yBAAL;cAAgC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAChC,KAAK,6CAAL;cAAoD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACpD,KAAK,gCAAL;cAAuC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACvC,KAAK,oDAAL;cAA2D,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;UAN/D;;UAQA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIG,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAc4F,sDAAsD,CAACvC,YAAD,EAAe/D,OAAf,CAApE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB9D,EAAE,CAAC+D,MAAH,CAAU,CAAE4B,EAAE,CAACnF,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIY,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcW,uDAAuD,CAACd,YAAD,EAAe/D,OAAf,CAArE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBN,EAAE,CAACO,MAAH,CAAU,CAAE4B,EAAE,CAACnF,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIe,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAckC,8DAA8D,CAACxC,YAAD,EAAe/D,OAAf,CAA5E,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBH,EAAE,CAACI,MAAH,CAAU,CAAE4B,EAAE,CAACnF,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIa,UAAU,GAAGJ,YAAY,CAAC3D,IAA1B;UACA6D,SAAS,GAAGE,UAAU,CAACW,IAAX,IAAmBX,UAAU,CAACY,IAA9B,IAAsCd,SAAlD;UACAD,QAAQ,GAAGzE,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK4E,UAAL,CAAT,EAA2B;YAAES,IAAI,EAAE,KAAKX,SAAb;YAAwBG,OAAO,EAAED,UAAU,CAACC,OAAX,IAAsBD,UAAU,CAACa,OAAjC,IAA4Cf,SAA7E;YAAwFgB,MAAM,EAAE,QAAhG;YAA0GvB,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAxI,CAA3B,CAAnB;UACA+C,EAAE,CAAC1F,KAAH,GAAW,CAAX;;QACJ,KAAK,CAAL;UACIyD,OAAO,GAAGJ,QAAQ,CAACI,OAAT,IAAoBJ,QAAQ,CAACgB,OAA7B,IAAwCf,SAAlD;UACAD,QAAQ,CAACI,OAAT,GAAmBA,OAAnB;UACA,OAAOJ,QAAQ,CAACgB,OAAhB;UACA,OAAO,CAAC;UAAE;UAAH,EAAenB,OAAO,CAACqB,MAAR,CAAeC,MAAM,CAACC,MAAP,CAAc,IAAIrE,KAAJ,CAAUqD,OAAV,CAAd,EAAkCJ,QAAlC,CAAf,CAAf,CAAP;MA9CR;IAgDH,CAjDiB,CAAlB;EAkDH,CArD6G,CAAhB;AAqDzF,CArDL;;AAsDA,OAAO,IAAIwC,2CAA2C,GAAG,SAA9CA,2CAA8C,CAAUlD,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACvI,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACM,KAAX;QACI,KAAK,CAAL;UACI,IAAI2C,MAAM,CAACE,UAAP,KAAsB,GAAtB,IAA6BF,MAAM,CAACE,UAAP,IAAqB,GAAtD,EAA2D;YACvD,OAAO,CAAC;YAAE;YAAH,EAAeiD,gDAAgD,CAACnD,MAAD,EAAStD,OAAT,CAA/D,CAAP;UACH;;UACDuD,QAAQ,GAAG;YACPG,SAAS,EAAEC,mBAAmB,CAACL,MAAD,CADvB;YAEPoD,QAAQ,EAAE7F,SAFH;YAGPc,SAAS,EAAEd;UAHJ,CAAX;UAKA,OAAO,CAAC;UAAE;UAAH,EAAc0D,SAAS,CAACjB,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAvB,CAAP;;QACJ,KAAK,CAAL;UACIsF,IAAI,GAAGjF,EAAE,CAACa,IAAH,EAAP;;UACA,IAAIoE,IAAI,CAACoB,QAAL,KAAkB7F,SAAlB,IAA+ByE,IAAI,CAACoB,QAAL,KAAkB,IAArD,EAA2D;YACvDnD,QAAQ,CAACmD,QAAT,GAAoBC,8CAA8C,CAACrB,IAAI,CAACoB,QAAN,EAAgB1G,OAAhB,CAAlE;UACH;;UACD,IAAIsF,IAAI,CAAC3D,SAAL,KAAmBd,SAAnB,IAAgCyE,IAAI,CAAC3D,SAAL,KAAmB,IAAvD,EAA6D;YACzD4B,QAAQ,CAAC5B,SAAT,GAAqB2D,IAAI,CAAC3D,SAA1B;UACH;;UACD,OAAO,CAAC;UAAE;UAAH,EAAekC,OAAO,CAACC,OAAR,CAAgBP,QAAhB,CAAf,CAAP;MAnBR;IAqBH,CAtBiB,CAAlB;EAuBH,CAzBqG,CAAhB;AAyBjF,CAzBE;;AA0BP,IAAIkD,gDAAgD,GAAG,SAAnDA,gDAAmD,CAAUnD,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACrI,IAAIuE,YAAJ,EAAkB1D,EAAlB,EAAsB2D,QAAtB,EAAgCC,SAAhC,EAA2C1D,EAA3C,EAA+CG,EAA/C,EAAmDwD,EAAnD,EAAuDC,UAAvD,EAAmEC,OAAnE;;IACA,IAAIC,EAAJ;;IACA,OAAO5E,WAAW,CAAC,IAAD,EAAO,UAAU6E,EAAV,EAAc;MACnC,QAAQA,EAAE,CAAC3D,KAAX;QACI,KAAK,CAAL;UACIN,EAAE,GAAG,CAACd,QAAQ,CAAC,EAAD,EAAK+D,MAAL,CAAT,CAAL;UACAe,EAAE,GAAG,EAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcE,SAAS,CAACjB,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAvB,CAAP;;QACJ,KAAK,CAAL;UACI+D,YAAY,GAAGxE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBnE,EAAE,CAACoE,MAAH,CAAU,EAAEJ,EAAE,CAACjE,IAAH,GAAUkE,EAAE,CAACpD,IAAH,EAAV,EAAqBmD,EAAvB,EAAV,CAAvB,CAAf;UACAJ,SAAS,GAAG,cAAZ;UACAA,SAAS,GAAGS,qBAAqB,CAACpB,MAAD,EAASS,YAAY,CAAC3D,IAAtB,CAAjC;UACAG,EAAE,GAAG0D,SAAL;;UACA,QAAQ1D,EAAR;YACI,KAAK,2BAAL;cAAkC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAClC,KAAK,+CAAL;cAAsD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACtD,KAAK,yBAAL;cAAgC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAChC,KAAK,6CAAL;cAAoD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;UAJxD;;UAMA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIG,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcgF,yDAAyD,CAAC3B,YAAD,EAAe/D,OAAf,CAAvE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB9D,EAAE,CAAC+D,MAAH,CAAU,CAAEH,EAAE,CAACpD,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIY,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcW,uDAAuD,CAACd,YAAD,EAAe/D,OAAf,CAArE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBN,EAAE,CAACO,MAAH,CAAU,CAAEH,EAAE,CAACpD,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIa,UAAU,GAAGJ,YAAY,CAAC3D,IAA1B;UACA6D,SAAS,GAAGE,UAAU,CAACW,IAAX,IAAmBX,UAAU,CAACY,IAA9B,IAAsCd,SAAlD;UACAD,QAAQ,GAAGzE,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK4E,UAAL,CAAT,EAA2B;YAAES,IAAI,EAAE,KAAKX,SAAb;YAAwBG,OAAO,EAAED,UAAU,CAACC,OAAX,IAAsBD,UAAU,CAACa,OAAjC,IAA4Cf,SAA7E;YAAwFgB,MAAM,EAAE,QAAhG;YAA0GvB,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAxI,CAA3B,CAAnB;UACAgB,EAAE,CAAC3D,KAAH,GAAW,CAAX;;QACJ,KAAK,CAAL;UACIyD,OAAO,GAAGJ,QAAQ,CAACI,OAAT,IAAoBJ,QAAQ,CAACgB,OAA7B,IAAwCf,SAAlD;UACAD,QAAQ,CAACI,OAAT,GAAmBA,OAAnB;UACA,OAAOJ,QAAQ,CAACgB,OAAhB;UACA,OAAO,CAAC;UAAE;UAAH,EAAenB,OAAO,CAACqB,MAAR,CAAeC,MAAM,CAACC,MAAP,CAAc,IAAIrE,KAAJ,CAAUqD,OAAV,CAAd,EAAkCJ,QAAlC,CAAf,CAAf,CAAP;MAtCR;IAwCH,CAzCiB,CAAlB;EA0CH,CA7CmG,CAAhB;AA6C/E,CA7CL;;AA8CA,OAAO,IAAI4C,uDAAuD,GAAG,SAA1DA,uDAA0D,CAAUtD,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACnJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACM,KAAX;QACI,KAAK,CAAL;UACI,IAAI2C,MAAM,CAACE,UAAP,KAAsB,GAAtB,IAA6BF,MAAM,CAACE,UAAP,IAAqB,GAAtD,EAA2D;YACvD,OAAO,CAAC;YAAE;YAAH,EAAeqD,4DAA4D,CAACvD,MAAD,EAAStD,OAAT,CAA3E,CAAP;UACH;;UACDuD,QAAQ,GAAG;YACPG,SAAS,EAAEC,mBAAmB,CAACL,MAAD,CADvB;YAEP3B,SAAS,EAAEd,SAFJ;YAGPiG,cAAc,EAAEjG;UAHT,CAAX;UAKA,OAAO,CAAC;UAAE;UAAH,EAAc0D,SAAS,CAACjB,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAvB,CAAP;;QACJ,KAAK,CAAL;UACIsF,IAAI,GAAGjF,EAAE,CAACa,IAAH,EAAP;;UACA,IAAIoE,IAAI,CAAC3D,SAAL,KAAmBd,SAAnB,IAAgCyE,IAAI,CAAC3D,SAAL,KAAmB,IAAvD,EAA6D;YACzD4B,QAAQ,CAAC5B,SAAT,GAAqB2D,IAAI,CAAC3D,SAA1B;UACH;;UACD,IAAI2D,IAAI,CAACwB,cAAL,KAAwBjG,SAAxB,IAAqCyE,IAAI,CAACwB,cAAL,KAAwB,IAAjE,EAAuE;YACnEvD,QAAQ,CAACuD,cAAT,GAA0BC,sCAAsC,CAACzB,IAAI,CAACwB,cAAN,EAAsB9G,OAAtB,CAAhE;UACH;;UACD,OAAO,CAAC;UAAE;UAAH,EAAe6D,OAAO,CAACC,OAAR,CAAgBP,QAAhB,CAAf,CAAP;MAnBR;IAqBH,CAtBiB,CAAlB;EAuBH,CAzBiH,CAAhB;AAyB7F,CAzBE;;AA0BP,IAAIsD,4DAA4D,GAAG,SAA/DA,4DAA+D,CAAUvD,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACjJ,IAAIuE,YAAJ,EAAkB1D,EAAlB,EAAsB2D,QAAtB,EAAgCC,SAAhC,EAA2C1D,EAA3C,EAA+CG,EAA/C,EAAmDwD,EAAnD,EAAuDC,UAAvD,EAAmEC,OAAnE;;IACA,IAAIC,EAAJ;;IACA,OAAO5E,WAAW,CAAC,IAAD,EAAO,UAAU6E,EAAV,EAAc;MACnC,QAAQA,EAAE,CAAC3D,KAAX;QACI,KAAK,CAAL;UACIN,EAAE,GAAG,CAACd,QAAQ,CAAC,EAAD,EAAK+D,MAAL,CAAT,CAAL;UACAe,EAAE,GAAG,EAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcE,SAAS,CAACjB,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAvB,CAAP;;QACJ,KAAK,CAAL;UACI+D,YAAY,GAAGxE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBnE,EAAE,CAACoE,MAAH,CAAU,EAAEJ,EAAE,CAACjE,IAAH,GAAUkE,EAAE,CAACpD,IAAH,EAAV,EAAqBmD,EAAvB,EAAV,CAAvB,CAAf;UACAJ,SAAS,GAAG,cAAZ;UACAA,SAAS,GAAGS,qBAAqB,CAACpB,MAAD,EAASS,YAAY,CAAC3D,IAAtB,CAAjC;UACAG,EAAE,GAAG0D,SAAL;;UACA,QAAQ1D,EAAR;YACI,KAAK,2BAAL;cAAkC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAClC,KAAK,+CAAL;cAAsD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACtD,KAAK,yBAAL;cAAgC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAChC,KAAK,6CAAL;cAAoD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;UAJxD;;UAMA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIG,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcgF,yDAAyD,CAAC3B,YAAD,EAAe/D,OAAf,CAAvE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB9D,EAAE,CAAC+D,MAAH,CAAU,CAAEH,EAAE,CAACpD,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIY,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcW,uDAAuD,CAACd,YAAD,EAAe/D,OAAf,CAArE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBN,EAAE,CAACO,MAAH,CAAU,CAAEH,EAAE,CAACpD,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,CAAd,CAAP;;QACJ,KAAK,CAAL;UACIa,UAAU,GAAGJ,YAAY,CAAC3D,IAA1B;UACA6D,SAAS,GAAGE,UAAU,CAACW,IAAX,IAAmBX,UAAU,CAACY,IAA9B,IAAsCd,SAAlD;UACAD,QAAQ,GAAGzE,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK4E,UAAL,CAAT,EAA2B;YAAES,IAAI,EAAE,KAAKX,SAAb;YAAwBG,OAAO,EAAED,UAAU,CAACC,OAAX,IAAsBD,UAAU,CAACa,OAAjC,IAA4Cf,SAA7E;YAAwFgB,MAAM,EAAE,QAAhG;YAA0GvB,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAxI,CAA3B,CAAnB;UACAgB,EAAE,CAAC3D,KAAH,GAAW,CAAX;;QACJ,KAAK,CAAL;UACIyD,OAAO,GAAGJ,QAAQ,CAACI,OAAT,IAAoBJ,QAAQ,CAACgB,OAA7B,IAAwCf,SAAlD;UACAD,QAAQ,CAACI,OAAT,GAAmBA,OAAnB;UACA,OAAOJ,QAAQ,CAACgB,OAAhB;UACA,OAAO,CAAC;UAAE;UAAH,EAAenB,OAAO,CAACqB,MAAR,CAAeC,MAAM,CAACC,MAAP,CAAc,IAAIrE,KAAJ,CAAUqD,OAAV,CAAd,EAAkCJ,QAAlC,CAAf,CAAf,CAAP;MAtCR;IAwCH,CAzCiB,CAAlB;EA0CH,CA7C+G,CAAhB;AA6C3F,CA7CL;;AA8CA,OAAO,IAAIgD,yCAAyC,GAAG,SAA5CA,yCAA4C,CAAU1D,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACrI,IAAI+D,QAAJ;IACA,OAAO9D,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACM,KAAX;QACI,KAAK,CAAL;UACI,IAAI2C,MAAM,CAACE,UAAP,KAAsB,GAAtB,IAA6BF,MAAM,CAACE,UAAP,IAAqB,GAAtD,EAA2D;YACvD,OAAO,CAAC;YAAE;YAAH,EAAeyD,8CAA8C,CAAC3D,MAAD,EAAStD,OAAT,CAA7D,CAAP;UACH;;UACDuD,QAAQ,GAAG;YACPG,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UADvB,CAAX;UAGA,OAAO,CAAC;UAAE;UAAH,EAAcM,WAAW,CAACN,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAzB,CAAP;;QACJ,KAAK,CAAL;UACIK,EAAE,CAACa,IAAH;;UACA,OAAO,CAAC;UAAE;UAAH,EAAe2C,OAAO,CAACC,OAAR,CAAgBP,QAAhB,CAAf,CAAP;MAXR;IAaH,CAdiB,CAAlB;EAeH,CAjBmG,CAAhB;AAiB/E,CAjBE;;AAkBP,IAAI0D,8CAA8C,GAAG,SAAjDA,8CAAiD,CAAU3D,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACnI,IAAIuE,YAAJ,EAAkB1D,EAAlB,EAAsB2D,QAAtB,EAAgCC,SAAhC,EAA2C1D,EAA3C,EAA+CG,EAA/C,EAAmDwD,EAAnD,EAAuDG,EAAvD,EAA2DC,EAA3D,EAA+D+B,EAA/D,EAAmEa,EAAnE,EAAuEC,EAAvE,EAA2EhD,UAA3E,EAAuFC,OAAvF;;IACA,IAAIgD,EAAJ;;IACA,OAAO3H,WAAW,CAAC,IAAD,EAAO,UAAU4H,EAAV,EAAc;MACnC,QAAQA,EAAE,CAAC1G,KAAX;QACI,KAAK,CAAL;UACIN,EAAE,GAAG,CAACd,QAAQ,CAAC,EAAD,EAAK+D,MAAL,CAAT,CAAL;UACA8D,EAAE,GAAG,EAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAc7C,SAAS,CAACjB,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAvB,CAAP;;QACJ,KAAK,CAAL;UACI+D,YAAY,GAAGxE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBnE,EAAE,CAACoE,MAAH,CAAU,EAAE2C,EAAE,CAAChH,IAAH,GAAUiH,EAAE,CAACnG,IAAH,EAAV,EAAqBkG,EAAvB,EAAV,CAAvB,CAAf;UACAnD,SAAS,GAAG,cAAZ;UACAA,SAAS,GAAGS,qBAAqB,CAACpB,MAAD,EAASS,YAAY,CAAC3D,IAAtB,CAAjC;UACAG,EAAE,GAAG0D,SAAL;;UACA,QAAQ1D,EAAR;YACI,KAAK,yBAAL;cAAgC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAChC,KAAK,6CAAL;cAAoD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACpD,KAAK,8BAAL;cAAqC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACrC,KAAK,kDAAL;cAAyD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACzD,KAAK,kCAAL;cAAyC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACzC,KAAK,sDAAL;cAA6D,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAC7D,KAAK,oCAAL;cAA2C,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAC3C,KAAK,wDAAL;cAA+D,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAC/D,KAAK,yBAAL;cAAgC,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YAChC,KAAK,6CAAL;cAAoD,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACpD,KAAK,iCAAL;cAAwC,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACxC,KAAK,qDAAL;cAA4D,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YAC5D,KAAK,iCAAL;cAAwC,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACxC,KAAK,qDAAL;cAA4D,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;UAdhE;;UAgBA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIG,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAc4G,uDAAuD,CAACvD,YAAD,EAAe/D,OAAf,CAArE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB9D,EAAE,CAAC+D,MAAH,CAAU,CAAE4C,EAAE,CAACnG,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIY,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcqD,4DAA4D,CAACxD,YAAD,EAAe/D,OAAf,CAA1E,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBN,EAAE,CAACO,MAAH,CAAU,CAAE4C,EAAE,CAACnG,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIe,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcmD,gEAAgE,CAACzD,YAAD,EAAe/D,OAAf,CAA9E,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBH,EAAE,CAACI,MAAH,CAAU,CAAE4C,EAAE,CAACnG,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIgB,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcmD,kEAAkE,CAAC1D,YAAD,EAAe/D,OAAf,CAAhF,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBF,EAAE,CAACG,MAAH,CAAU,CAAE4C,EAAE,CAACnG,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACI+C,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcxB,uDAAuD,CAACd,YAAD,EAAe/D,OAAf,CAArE,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB6B,EAAE,CAAC5B,MAAH,CAAU,CAAE4C,EAAE,CAACnG,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACI4D,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcQ,+DAA+D,CAAC3D,YAAD,EAAe/D,OAAf,CAA7E,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB0C,EAAE,CAACzC,MAAH,CAAU,CAAE4C,EAAE,CAACnG,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACI6D,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcQ,+DAA+D,CAAC5D,YAAD,EAAe/D,OAAf,CAA7E,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB2C,EAAE,CAAC1C,MAAH,CAAU,CAAE4C,EAAE,CAACnG,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACIa,UAAU,GAAGJ,YAAY,CAAC3D,IAA1B;UACA6D,SAAS,GAAGE,UAAU,CAACW,IAAX,IAAmBX,UAAU,CAACY,IAA9B,IAAsCd,SAAlD;UACAD,QAAQ,GAAGzE,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK4E,UAAL,CAAT,EAA2B;YAAES,IAAI,EAAE,KAAKX,SAAb;YAAwBG,OAAO,EAAED,UAAU,CAACC,OAAX,IAAsBD,UAAU,CAACa,OAAjC,IAA4Cf,SAA7E;YAAwFgB,MAAM,EAAE,QAAhG;YAA0GvB,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAxI,CAA3B,CAAnB;UACA+D,EAAE,CAAC1G,KAAH,GAAW,EAAX;;QACJ,KAAK,EAAL;UACIyD,OAAO,GAAGJ,QAAQ,CAACI,OAAT,IAAoBJ,QAAQ,CAACgB,OAA7B,IAAwCf,SAAlD;UACAD,QAAQ,CAACI,OAAT,GAAmBA,OAAnB;UACA,OAAOJ,QAAQ,CAACgB,OAAhB;UACA,OAAO,CAAC;UAAE;UAAH,EAAenB,OAAO,CAACqB,MAAR,CAAeC,MAAM,CAACC,MAAP,CAAc,IAAIrE,KAAJ,CAAUqD,OAAV,CAAd,EAAkCJ,QAAlC,CAAf,CAAf,CAAP;MA9ER;IAgFH,CAjFiB,CAAlB;EAkFH,CArFiG,CAAhB;AAqF7E,CArFL;;AAsFA,OAAO,IAAI4D,uDAAuD,GAAG,SAA1DA,uDAA0D,CAAUtE,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACnJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACM,KAAX;QACI,KAAK,CAAL;UACI,IAAI2C,MAAM,CAACE,UAAP,KAAsB,GAAtB,IAA6BF,MAAM,CAACE,UAAP,IAAqB,GAAtD,EAA2D;YACvD,OAAO,CAAC;YAAE;YAAH,EAAeqE,4DAA4D,CAACvE,MAAD,EAAStD,OAAT,CAA3E,CAAP;UACH;;UACDuD,QAAQ,GAAG;YACPG,SAAS,EAAEC,mBAAmB,CAACL,MAAD,CADvB;YAEP6C,aAAa,EAAEtF;UAFR,CAAX;UAIA,OAAO,CAAC;UAAE;UAAH,EAAc0D,SAAS,CAACjB,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAvB,CAAP;;QACJ,KAAK,CAAL;UACIsF,IAAI,GAAGjF,EAAE,CAACa,IAAH,EAAP;;UACA,IAAIoE,IAAI,CAACa,aAAL,KAAuBtF,SAAvB,IAAoCyE,IAAI,CAACa,aAAL,KAAuB,IAA/D,EAAqE;YACjE5C,QAAQ,CAAC4C,aAAT,GAAyBC,qCAAqC,CAACd,IAAI,CAACa,aAAN,EAAqBnG,OAArB,CAA9D;UACH;;UACD,OAAO,CAAC;UAAE;UAAH,EAAe6D,OAAO,CAACC,OAAR,CAAgBP,QAAhB,CAAf,CAAP;MAfR;IAiBH,CAlBiB,CAAlB;EAmBH,CArBiH,CAAhB;AAqB7F,CArBE;;AAsBP,IAAIsE,4DAA4D,GAAG,SAA/DA,4DAA+D,CAAUvE,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACjJ,IAAIuE,YAAJ,EAAkB1D,EAAlB,EAAsB2D,QAAtB,EAAgCC,SAAhC,EAA2C1D,EAA3C,EAA+CG,EAA/C,EAAmDwD,EAAnD,EAAuDG,EAAvD,EAA2DC,EAA3D,EAA+D+B,EAA/D,EAAmEa,EAAnE,EAAuEC,EAAvE,EAA2EC,EAA3E,EAA+EC,EAA/E,EAAmFS,EAAnF,EAAuFC,EAAvF,EAA2FC,EAA3F,EAA+F7D,UAA/F,EAA2GC,OAA3G;;IACA,IAAI6D,EAAJ;;IACA,OAAOxI,WAAW,CAAC,IAAD,EAAO,UAAUyI,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACvH,KAAX;QACI,KAAK,CAAL;UACIN,EAAE,GAAG,CAACd,QAAQ,CAAC,EAAD,EAAK+D,MAAL,CAAT,CAAL;UACA2E,EAAE,GAAG,EAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAc1D,SAAS,CAACjB,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAvB,CAAP;;QACJ,KAAK,CAAL;UACI+D,YAAY,GAAGxE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBnE,EAAE,CAACoE,MAAH,CAAU,EAAEwD,EAAE,CAAC7H,IAAH,GAAU8H,EAAE,CAAChH,IAAH,EAAV,EAAqB+G,EAAvB,EAAV,CAAvB,CAAf;UACAhE,SAAS,GAAG,cAAZ;UACAA,SAAS,GAAGS,qBAAqB,CAACpB,MAAD,EAASS,YAAY,CAAC3D,IAAtB,CAAjC;UACAG,EAAE,GAAG0D,SAAL;;UACA,QAAQ1D,EAAR;YACI,KAAK,6BAAL;cAAoC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACpC,KAAK,iDAAL;cAAwD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACxD,KAAK,0BAAL;cAAiC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACjC,KAAK,8CAAL;cAAqD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACrD,KAAK,uBAAL;cAA8B,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAC9B,KAAK,2CAAL;cAAkD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAClD,KAAK,4BAAL;cAAmC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACnC,KAAK,gDAAL;cAAuD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACvD,KAAK,6BAAL;cAAoC,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACpC,KAAK,iDAAL;cAAwD,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACxD,KAAK,sBAAL;cAA6B,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YAC7B,KAAK,0CAAL;cAAiD,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACjD,KAAK,+BAAL;cAAsC,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACtC,KAAK,mDAAL;cAA0D,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YAC1D,KAAK,0BAAL;cAAiC,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACjC,KAAK,8CAAL;cAAqD,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACrD,KAAK,qCAAL;cAA4C,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YAC5C,KAAK,yDAAL;cAAgE,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YAChE,KAAK,yBAAL;cAAgC,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YAChC,KAAK,6CAAL;cAAoD,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACpD,KAAK,2CAAL;cAAkD,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YAClD,KAAK,+DAAL;cAAsE,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACtE,KAAK,6BAAL;cAAoC,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACpC,KAAK,iDAAL;cAAwD,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;UAxB5D;;UA0BA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIG,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcyH,2DAA2D,CAACpE,YAAD,EAAe/D,OAAf,CAAzE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB9D,EAAE,CAAC+D,MAAH,CAAU,CAAEyD,EAAE,CAAChH,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIY,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAckE,wDAAwD,CAACrE,YAAD,EAAe/D,OAAf,CAAtE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBN,EAAE,CAACO,MAAH,CAAU,CAAEyD,EAAE,CAAChH,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIe,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcgE,qDAAqD,CAACtE,YAAD,EAAe/D,OAAf,CAAnE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBH,EAAE,CAACI,MAAH,CAAU,CAAEyD,EAAE,CAAChH,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIgB,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcgE,0DAA0D,CAACvE,YAAD,EAAe/D,OAAf,CAAxE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBF,EAAE,CAACG,MAAH,CAAU,CAAEyD,EAAE,CAAChH,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACI+C,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAckC,2DAA2D,CAACxE,YAAD,EAAe/D,OAAf,CAAzE,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB6B,EAAE,CAAC5B,MAAH,CAAU,CAAEyD,EAAE,CAAChH,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACI4D,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcsB,oDAAoD,CAACzE,YAAD,EAAe/D,OAAf,CAAlE,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB0C,EAAE,CAACzC,MAAH,CAAU,CAAEyD,EAAE,CAAChH,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACI6D,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcsB,6DAA6D,CAAC1E,YAAD,EAAe/D,OAAf,CAA3E,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB2C,EAAE,CAAC1C,MAAH,CAAU,CAAEyD,EAAE,CAAChH,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACI8D,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAczC,wDAAwD,CAACZ,YAAD,EAAe/D,OAAf,CAAtE,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB4C,EAAE,CAAC3C,MAAH,CAAU,CAAEyD,EAAE,CAAChH,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACI+D,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcqB,mEAAmE,CAAC3E,YAAD,EAAe/D,OAAf,CAAjF,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB6C,EAAE,CAAC5C,MAAH,CAAU,CAAEyD,EAAE,CAAChH,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACIwE,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcjD,uDAAuD,CAACd,YAAD,EAAe/D,OAAf,CAArE,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBsD,EAAE,CAACrD,MAAH,CAAU,CAAEyD,EAAE,CAAChH,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACIyE,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcY,yEAAyE,CAAC5E,YAAD,EAAe/D,OAAf,CAAvF,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBuD,EAAE,CAACtD,MAAH,CAAU,CAAEyD,EAAE,CAAChH,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACI0E,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcY,2DAA2D,CAAC7E,YAAD,EAAe/D,OAAf,CAAzE,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBwD,EAAE,CAACvD,MAAH,CAAU,CAAEyD,EAAE,CAAChH,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACIa,UAAU,GAAGJ,YAAY,CAAC3D,IAA1B;UACA6D,SAAS,GAAGE,UAAU,CAACW,IAAX,IAAmBX,UAAU,CAACY,IAA9B,IAAsCd,SAAlD;UACAD,QAAQ,GAAGzE,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK4E,UAAL,CAAT,EAA2B;YAAES,IAAI,EAAE,KAAKX,SAAb;YAAwBG,OAAO,EAAED,UAAU,CAACC,OAAX,IAAsBD,UAAU,CAACa,OAAjC,IAA4Cf,SAA7E;YAAwFgB,MAAM,EAAE,QAAhG;YAA0GvB,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAxI,CAA3B,CAAnB;UACA4E,EAAE,CAACvH,KAAH,GAAW,EAAX;;QACJ,KAAK,EAAL;UACIyD,OAAO,GAAGJ,QAAQ,CAACI,OAAT,IAAoBJ,QAAQ,CAACgB,OAA7B,IAAwCf,SAAlD;UACAD,QAAQ,CAACI,OAAT,GAAmBA,OAAnB;UACA,OAAOJ,QAAQ,CAACgB,OAAhB;UACA,OAAO,CAAC;UAAE;UAAH,EAAenB,OAAO,CAACqB,MAAR,CAAeC,MAAM,CAACC,MAAP,CAAc,IAAIrE,KAAJ,CAAUqD,OAAV,CAAd,EAAkCJ,QAAlC,CAAf,CAAf,CAAP;MAtHR;IAwHH,CAzHiB,CAAlB;EA0HH,CA7H+G,CAAhB;AA6H3F,CA7HL;;AA8HA,OAAO,IAAI6E,+CAA+C,GAAG,SAAlDA,+CAAkD,CAAUvF,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAC3I,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnC,IAAIiD,MAAM,CAACE,UAAP,KAAsB,GAAtB,IAA6BF,MAAM,CAACE,UAAP,IAAqB,GAAtD,EAA2D;QACvD,OAAO,CAAC;QAAE;QAAH,EAAesF,oDAAoD,CAACxF,MAAD,EAAStD,OAAT,CAAnE,CAAP;MACH;;MACDuD,QAAQ,GAAG;QACPG,SAAS,EAAEC,mBAAmB,CAACL,MAAD,CADvB;QAEPyF,WAAW,EAAElI,SAFN;QAGPmI,WAAW,EAAEnI,SAHN;QAIPoI,iBAAiB,EAAEpI;MAJZ,CAAX;;MAMA,IAAIyC,MAAM,CAACrD,OAAP,CAAe,cAAf,MAAmCY,SAAvC,EAAkD;QAC9C0C,QAAQ,CAACyF,WAAT,GAAuB1F,MAAM,CAACrD,OAAP,CAAe,cAAf,CAAvB;MACH;;MACD,IAAIqD,MAAM,CAACrD,OAAP,CAAe,0BAAf,MAA+CY,SAAnD,EAA8D;QAC1D0C,QAAQ,CAAC0F,iBAAT,GAA6BC,QAAQ,CAAC5F,MAAM,CAACrD,OAAP,CAAe,0BAAf,CAAD,EAA6C,EAA7C,CAArC;MACH;;MACDqF,IAAI,GAAGhC,MAAM,CAAClD,IAAd;MACAmD,QAAQ,CAACwF,WAAT,GAAuBzD,IAAvB;MACA,OAAO,CAAC;MAAE;MAAH,EAAezB,OAAO,CAACC,OAAR,CAAgBP,QAAhB,CAAf,CAAP;IACH,CAnBiB,CAAlB;EAoBH,CAtByG,CAAhB;AAsBrF,CAtBE;;AAuBP,IAAIuF,oDAAoD,GAAG,SAAvDA,oDAAuD,CAAUxF,MAAV,EAAkBtD,OAAlB,EAA2B;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACzI,IAAIuE,YAAJ,EAAkB1D,EAAlB,EAAsB2D,QAAtB,EAAgCC,SAAhC,EAA2C1D,EAA3C,EAA+CG,EAA/C,EAAmDwD,EAAnD,EAAuDG,EAAvD,EAA2DC,EAA3D,EAA+D+B,EAA/D,EAAmEa,EAAnE,EAAuEC,EAAvE,EAA2EC,EAA3E,EAA+EC,EAA/E,EAAmFlD,UAAnF,EAA+FC,OAA/F;;IACA,IAAI0D,EAAJ;;IACA,OAAOrI,WAAW,CAAC,IAAD,EAAO,UAAUsI,EAAV,EAAc;MACnC,QAAQA,EAAE,CAACpH,KAAX;QACI,KAAK,CAAL;UACIN,EAAE,GAAG,CAACd,QAAQ,CAAC,EAAD,EAAK+D,MAAL,CAAT,CAAL;UACAwE,EAAE,GAAG,EAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcvD,SAAS,CAACjB,MAAM,CAAClD,IAAR,EAAcJ,OAAd,CAAvB,CAAP;;QACJ,KAAK,CAAL;UACI+D,YAAY,GAAGxE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBnE,EAAE,CAACoE,MAAH,CAAU,EAAEqD,EAAE,CAAC1H,IAAH,GAAU2H,EAAE,CAAC7G,IAAH,EAAV,EAAqB4G,EAAvB,EAAV,CAAvB,CAAf;UACA7D,SAAS,GAAG,cAAZ;UACAA,SAAS,GAAGS,qBAAqB,CAACpB,MAAD,EAASS,YAAY,CAAC3D,IAAtB,CAAjC;UACAG,EAAE,GAAG0D,SAAL;;UACA,QAAQ1D,EAAR;YACI,KAAK,6BAAL;cAAoC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACpC,KAAK,iDAAL;cAAwD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACxD,KAAK,4BAAL;cAAmC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACnC,KAAK,gDAAL;cAAuD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACvD,KAAK,sBAAL;cAA6B,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAC7B,KAAK,0CAAL;cAAiD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACjD,KAAK,+BAAL;cAAsC,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACtC,KAAK,mDAAL;cAA0D,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YAC1D,KAAK,0BAAL;cAAiC,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACjC,KAAK,8CAAL;cAAqD,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACrD,KAAK,qCAAL;cAA4C,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YAC5C,KAAK,yDAAL;cAAgE,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YAChE,KAAK,yBAAL;cAAgC,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YAChC,KAAK,6CAAL;cAAoD,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACpD,KAAK,2CAAL;cAAkD,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YAClD,KAAK,+DAAL;cAAsE,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACtE,KAAK,6BAAL;cAAoC,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACpC,KAAK,iDAAL;cAAwD,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;UAlB5D;;UAoBA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIG,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcyH,2DAA2D,CAACpE,YAAD,EAAe/D,OAAf,CAAzE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB9D,EAAE,CAAC+D,MAAH,CAAU,CAAEsD,EAAE,CAAC7G,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIY,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcoE,0DAA0D,CAACvE,YAAD,EAAe/D,OAAf,CAAxE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBN,EAAE,CAACO,MAAH,CAAU,CAAEsD,EAAE,CAAC7G,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIe,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcmE,oDAAoD,CAACzE,YAAD,EAAe/D,OAAf,CAAlE,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBH,EAAE,CAACI,MAAH,CAAU,CAAEsD,EAAE,CAAC7G,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,CAAL;UACIgB,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcmE,6DAA6D,CAAC1E,YAAD,EAAe/D,OAAf,CAA3E,CAAP;;QACJ,KAAK,CAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuBF,EAAE,CAACG,MAAH,CAAU,CAAEsD,EAAE,CAAC7G,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACI+C,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAc1B,wDAAwD,CAACZ,YAAD,EAAe/D,OAAf,CAAtE,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB6B,EAAE,CAAC5B,MAAH,CAAU,CAAEsD,EAAE,CAAC7G,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACI4D,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcwB,mEAAmE,CAAC3E,YAAD,EAAe/D,OAAf,CAAjF,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB0C,EAAE,CAACzC,MAAH,CAAU,CAAEsD,EAAE,CAAC7G,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACI6D,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAActC,uDAAuD,CAACd,YAAD,EAAe/D,OAAf,CAArE,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB2C,EAAE,CAAC1C,MAAH,CAAU,CAAEsD,EAAE,CAAC7G,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACI8D,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcuB,yEAAyE,CAAC5E,YAAD,EAAe/D,OAAf,CAAvF,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB4C,EAAE,CAAC3C,MAAH,CAAU,CAAEsD,EAAE,CAAC7G,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACI+D,EAAE,GAAG,CAAC,EAAD,CAAL;UACA,OAAO,CAAC;UAAE;UAAH,EAAcuB,2DAA2D,CAAC7E,YAAD,EAAe/D,OAAf,CAAzE,CAAP;;QACJ,KAAK,EAAL;UACIgE,QAAQ,GAAGzE,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACjF,QAAQ,CAACiF,KAAT,CAAe,KAAK,CAApB,EAAuB6C,EAAE,CAAC5C,MAAH,CAAU,CAAEsD,EAAE,CAAC7G,IAAH,EAAF,CAAV,CAAvB,CAAD,EAAmD;YAAE0D,IAAI,EAAEX,SAAR;YAAmBP,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAjD,CAAnD,CAAvB,CAAX;UACA,OAAO,CAAC;UAAE;UAAH,EAAc,EAAd,CAAP;;QACJ,KAAK,EAAL;UACIa,UAAU,GAAGJ,YAAY,CAAC3D,IAA1B;UACA6D,SAAS,GAAGE,UAAU,CAACW,IAAX,IAAmBX,UAAU,CAACY,IAA9B,IAAsCd,SAAlD;UACAD,QAAQ,GAAGzE,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK4E,UAAL,CAAT,EAA2B;YAAES,IAAI,EAAE,KAAKX,SAAb;YAAwBG,OAAO,EAAED,UAAU,CAACC,OAAX,IAAsBD,UAAU,CAACa,OAAjC,IAA4Cf,SAA7E;YAAwFgB,MAAM,EAAE,QAAhG;YAA0GvB,SAAS,EAAEC,mBAAmB,CAACL,MAAD;UAAxI,CAA3B,CAAnB;UACAyE,EAAE,CAACpH,KAAH,GAAW,EAAX;;QACJ,KAAK,EAAL;UACIyD,OAAO,GAAGJ,QAAQ,CAACI,OAAT,IAAoBJ,QAAQ,CAACgB,OAA7B,IAAwCf,SAAlD;UACAD,QAAQ,CAACI,OAAT,GAAmBA,OAAnB;UACA,OAAOJ,QAAQ,CAACgB,OAAhB;UACA,OAAO,CAAC;UAAE;UAAH,EAAenB,OAAO,CAACqB,MAAR,CAAeC,MAAM,CAACC,MAAP,CAAc,IAAIrE,KAAJ,CAAUqD,OAAV,CAAd,EAAkCJ,QAAlC,CAAf,CAAf,CAAP;MA9FR;IAgGH,CAjGiB,CAAlB;EAkGH,CArGuG,CAAhB;AAqGnF,CArGL;;AAsGA,IAAImE,2DAA2D,GAAG,SAA9DA,2DAA8D,CAAUpE,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACtJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,6BADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfoH,CAAhB;AAehG,CAfL;;AAgBA,IAAI+D,uDAAuD,GAAG,SAA1DA,uDAA0D,CAAUvD,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAClJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,yBADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfgH,CAAhB;AAe5F,CAfL;;AAgBA,IAAImC,yDAAyD,GAAG,SAA5DA,yDAA4D,CAAU3B,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACpJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,2BADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfkH,CAAhB;AAe9F,CAfL;;AAgBA,IAAI6E,wDAAwD,GAAG,SAA3DA,wDAA2D,CAAUrE,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACnJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,0BADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfiH,CAAhB;AAe7F,CAfL;;AAgBA,IAAI8E,qDAAqD,GAAG,SAAxDA,qDAAwD,CAAUtE,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAChJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,uBADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAf8G,CAAhB;AAe1F,CAfL;;AAgBA,IAAI+E,0DAA0D,GAAG,SAA7DA,0DAA6D,CAAUvE,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACrJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,4BADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfmH,CAAhB;AAe/F,CAfL;;AAgBA,IAAIgF,2DAA2D,GAAG,SAA9DA,2DAA8D,CAAUxE,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACtJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,6BADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfoH,CAAhB;AAehG,CAfL;;AAgBA,IAAIiF,oDAAoD,GAAG,SAAvDA,oDAAuD,CAAUzE,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAC/I,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,sBADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAf6G,CAAhB;AAezF,CAfL;;AAgBA,IAAI+C,sDAAsD,GAAG,SAAzDA,sDAAyD,CAAUvC,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACjJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,wBADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAf+G,CAAhB;AAe3F,CAfL;;AAgBA,IAAIkF,6DAA6D,GAAG,SAAhEA,6DAAgE,CAAU1E,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACxJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,+BADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfsH,CAAhB;AAelG,CAfL;;AAgBA,IAAIoB,wDAAwD,GAAG,SAA3DA,wDAA2D,CAAUZ,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACnJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,0BADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfiH,CAAhB;AAe7F,CAfL;;AAgBA,IAAIgE,4DAA4D,GAAG,SAA/DA,4DAA+D,CAAUxD,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACvJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,8BADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfqH,CAAhB;AAejG,CAfL;;AAgBA,IAAImF,mEAAmE,GAAG,SAAtEA,mEAAsE,CAAU3E,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAC9J,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,qCADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAf4H,CAAhB;AAexG,CAfL;;AAgBA,IAAIiE,gEAAgE,GAAG,SAAnEA,gEAAmE,CAAUzD,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAC3J,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,kCADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfyH,CAAhB;AAerG,CAfL;;AAgBA,IAAIkE,kEAAkE,GAAG,SAArEA,kEAAqE,CAAU1D,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAC7J,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,oCADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAf2H,CAAhB;AAevG,CAfL;;AAgBA,IAAIsB,uDAAuD,GAAG,SAA1DA,uDAA0D,CAAUd,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAClJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,yBADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfgH,CAAhB;AAe5F,CAfL;;AAgBA,IAAIoF,yEAAyE,GAAG,SAA5EA,yEAA4E,CAAU5E,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACpK,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,2CADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfkI,CAAhB;AAe9G,CAfL;;AAgBA,IAAIgD,8DAA8D,GAAG,SAAjEA,8DAAiE,CAAUxC,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACzJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,gCADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfuH,CAAhB;AAenG,CAfL;;AAgBA,IAAIqF,2DAA2D,GAAG,SAA9DA,2DAA8D,CAAU7E,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IACtJ,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,6BADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfoH,CAAhB;AAehG,CAfL;;AAgBA,IAAImE,+DAA+D,GAAG,SAAlEA,+DAAkE,CAAU3D,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAC1J,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,iCADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfwH,CAAhB;AAepG,CAfL;;AAgBA,IAAIoE,+DAA+D,GAAG,SAAlEA,+DAAkE,CAAU5D,YAAV,EAAwB/D,OAAxB,EAAiC;EAAE,OAAOR,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;IAC1J,IAAI+D,QAAJ,EAAc+B,IAAd;IACA,OAAO7F,WAAW,CAAC,IAAD,EAAO,UAAUY,EAAV,EAAc;MACnCkD,QAAQ,GAAG;QACPqB,IAAI,EAAE,iCADC;QAEPK,MAAM,EAAE,QAFD;QAGPvB,SAAS,EAAEC,mBAAmB,CAACI,YAAD,CAHvB;QAIPK,OAAO,EAAEvD;MAJF,CAAX;MAMAyE,IAAI,GAAGvB,YAAY,CAAC3D,IAApB;;MACA,IAAIkF,IAAI,CAAClB,OAAL,KAAiBvD,SAAjB,IAA8ByE,IAAI,CAAClB,OAAL,KAAiB,IAAnD,EAAyD;QACrDb,QAAQ,CAACa,OAAT,GAAmBkB,IAAI,CAAClB,OAAxB;MACH;;MACD,OAAO,CAAC;MAAE;MAAH,EAAeb,QAAf,CAAP;IACH,CAZiB,CAAlB;EAaH,CAfwH,CAAhB;AAepG,CAfL;;AAgBA,IAAId,qCAAqC,GAAG,SAAxCA,qCAAwC,CAAU1C,KAAV,EAAiBC,OAAjB,EAA0B;EAClE,OAAOD,KAAK,CACPoJ,MADE,CACK,UAAUC,CAAV,EAAa;IAAE,OAAOA,CAAC,IAAI,IAAZ;EAAmB,CADvC,EAEFC,GAFE,CAEE,UAAUC,KAAV,EAAiB;IACtB,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAChB,OAAO,IAAP;IACH;;IACD,OAAOA,KAAP;EACH,CAPM,CAAP;AAQH,CATD;;AAUA,IAAItG,wCAAwC,GAAG,SAA3CA,wCAA2C,CAAUjD,KAAV,EAAiBC,OAAjB,EAA0B;EACrE,OAAOD,KAAK,CACPoJ,MADE,CACK,UAAUC,CAAV,EAAa;IAAE,OAAOA,CAAC,IAAI,IAAZ;EAAmB,CADvC,EAEFC,GAFE,CAEE,UAAUC,KAAV,EAAiB;IACtB,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAChB,OAAO,IAAP;IACH;;IACD,OAAOA,KAAP;EACH,CAPM,CAAP;AAQH,CATD;;AAUA,IAAIC,kCAAkC,GAAG,SAArCA,kCAAqC,CAAUjG,MAAV,EAAkBtD,OAAlB,EAA2B;EAChE,OAAO,CAACsD,MAAM,IAAI,EAAX,EACF6F,MADE,CACK,UAAUC,CAAV,EAAa;IAAE,OAAOA,CAAC,IAAI,IAAZ;EAAmB,CADvC,EAEFC,GAFE,CAEE,UAAUC,KAAV,EAAiB;IACtB,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAChB,OAAO,IAAP;IACH;;IACD,OAAOA,KAAP;EACH,CAPM,CAAP;AAQH,CATD;;AAUA,IAAIE,wCAAwC,GAAG,SAA3CA,wCAA2C,CAAUlG,MAAV,EAAkBtD,OAAlB,EAA2B;EACtE,OAAO,CAACsD,MAAM,IAAI,EAAX,EACF6F,MADE,CACK,UAAUC,CAAV,EAAa;IAAE,OAAOA,CAAC,IAAI,IAAZ;EAAmB,CADvC,EAEFC,GAFE,CAEE,UAAUC,KAAV,EAAiB;IACtB,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAChB,OAAO,IAAP;IACH;;IACD,OAAOA,KAAP;EACH,CAPM,CAAP;AAQH,CATD;;AAUA,IAAIvD,+BAA+B,GAAG,SAAlCA,+BAAkC,CAAUzC,MAAV,EAAkBtD,OAAlB,EAA2B;EAC7D,OAAO;IACHsC,OAAO,EAAEgB,MAAM,CAAChB,OAAP,KAAmBzB,SAAnB,IAAgCyC,MAAM,CAAChB,OAAP,KAAmB,IAAnD,GAA0DgB,MAAM,CAAChB,OAAjE,GAA2EzB,SADjF;IAEHD,IAAI,EAAE0C,MAAM,CAAC1C,IAAP,KAAgBC,SAAhB,IAA6ByC,MAAM,CAAC1C,IAAP,KAAgB,IAA7C,GAAoD0C,MAAM,CAAC1C,IAA3D,GAAkEC;EAFrE,CAAP;AAIH,CALD;;AAMA,IAAImF,yCAAyC,GAAG,SAA5CA,yCAA4C,CAAU1C,MAAV,EAAkBtD,OAAlB,EAA2B;EACvE,OAAO;IACHyJ,QAAQ,EAAEnG,MAAM,CAACmG,QAAP,KAAoB5I,SAApB,IAAiCyC,MAAM,CAACmG,QAAP,KAAoB,IAArD,GAA4DnG,MAAM,CAACmG,QAAnE,GAA8E5I,SADrF;IAEHW,YAAY,EAAE8B,MAAM,CAAC9B,YAAP,KAAwBX,SAAxB,IAAqCyC,MAAM,CAAC9B,YAAP,KAAwB,IAA7D,GAAoE8B,MAAM,CAAC9B,YAA3E,GAA0FX,SAFrG;IAGH6I,YAAY,EAAEpG,MAAM,CAACoG,YAAP,KAAwB7I,SAAxB,IAAqCyC,MAAM,CAACoG,YAAP,KAAwB,IAA7D,GACR,IAAIC,IAAJ,CAASC,IAAI,CAACC,KAAL,CAAWvG,MAAM,CAACoG,YAAP,GAAsB,IAAjC,CAAT,CADQ,GAER7I,SALH;IAMHiJ,YAAY,EAAExG,MAAM,CAACwG,YAAP,KAAwBjJ,SAAxB,IAAqCyC,MAAM,CAACwG,YAAP,KAAwB,IAA7D,GAAoExG,MAAM,CAACwG,YAA3E,GAA0FjJ,SANrG;IAOHkJ,UAAU,EAAEzG,MAAM,CAACyG,UAAP,KAAsBlJ,SAAtB,IAAmCyC,MAAM,CAACyG,UAAP,KAAsB,IAAzD,GAAgEzG,MAAM,CAACyG,UAAvE,GAAoFlJ,SAP7F;IAQHmJ,IAAI,EAAE1G,MAAM,CAAC0G,IAAP,KAAgBnJ,SAAhB,IAA6ByC,MAAM,CAAC0G,IAAP,KAAgB,IAA7C,GAAoD1G,MAAM,CAAC0G,IAA3D,GAAkEnJ;EARrE,CAAP;AAUH,CAXD;;AAYA,IAAIoJ,0CAA0C,GAAG,SAA7CA,0CAA6C,CAAU3G,MAAV,EAAkBtD,OAAlB,EAA2B;EACxE,OAAO;IACHkK,UAAU,EAAE5G,MAAM,CAAC4G,UAAP,KAAsBrJ,SAAtB,IAAmCyC,MAAM,CAAC4G,UAAP,KAAsB,IAAzD,GACNlE,yCAAyC,CAAC1C,MAAM,CAAC4G,UAAR,EAAoBlK,OAApB,CADnC,GAENa,SAHH;IAIHD,IAAI,EAAE0C,MAAM,CAAC1C,IAAP,KAAgBC,SAAhB,IAA6ByC,MAAM,CAAC1C,IAAP,KAAgB,IAA7C,GAAoD0C,MAAM,CAAC1C,IAA3D,GAAkEC;EAJrE,CAAP;AAMH,CAPD;;AAQA,IAAI8F,8CAA8C,GAAG,SAAjDA,8CAAiD,CAAUrD,MAAV,EAAkBtD,OAAlB,EAA2B;EAC5E,OAAO,CAACsD,MAAM,IAAI,EAAX,EACF6F,MADE,CACK,UAAUC,CAAV,EAAa;IAAE,OAAOA,CAAC,IAAI,IAAZ;EAAmB,CADvC,EAEFC,GAFE,CAEE,UAAUC,KAAV,EAAiB;IACtB,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAChB,OAAO,IAAP;IACH;;IACD,OAAOW,0CAA0C,CAACX,KAAD,EAAQtJ,OAAR,CAAjD;EACH,CAPM,CAAP;AAQH,CATD;;AAUA,IAAImK,uCAAuC,GAAG,SAA1CA,uCAA0C,CAAU7G,MAAV,EAAkBtD,OAAlB,EAA2B;EACrE,OAAO,CAACsD,MAAM,IAAI,EAAX,EACF6F,MADE,CACK,UAAUC,CAAV,EAAa;IAAE,OAAOA,CAAC,IAAI,IAAZ;EAAmB,CADvC,EAEFC,GAFE,CAEE,UAAUC,KAAV,EAAiB;IACtB,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAChB,OAAO,IAAP;IACH;;IACD,OAAOA,KAAP;EACH,CAPM,CAAP;AAQH,CATD;;AAUA,IAAIc,0CAA0C,GAAG,SAA7CA,0CAA6C,CAAU9G,MAAV,EAAkBtD,OAAlB,EAA2B;EACxE,OAAO,CAACsD,MAAM,IAAI,EAAX,EACF6F,MADE,CACK,UAAUC,CAAV,EAAa;IAAE,OAAOA,CAAC,IAAI,IAAZ;EAAmB,CADvC,EAEFC,GAFE,CAEE,UAAUC,KAAV,EAAiB;IACtB,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAChB,OAAO,IAAP;IACH;;IACD,OAAOA,KAAP;EACH,CAPM,CAAP;AAQH,CATD;;AAUA,IAAIlD,qCAAqC,GAAG,SAAxCA,qCAAwC,CAAU9C,MAAV,EAAkBtD,OAAlB,EAA2B;EACnE,OAAO;IACHqK,YAAY,EAAE/G,MAAM,CAAC+G,YAAP,KAAwBxJ,SAAxB,IAAqCyC,MAAM,CAAC+G,YAAP,KAAwB,IAA7D,GACR,IAAIV,IAAJ,CAASC,IAAI,CAACC,KAAL,CAAWvG,MAAM,CAAC+G,YAAP,GAAsB,IAAjC,CAAT,CADQ,GAERxJ,SAHH;IAIHU,MAAM,EAAE+B,MAAM,CAAC/B,MAAP,KAAkBV,SAAlB,IAA+ByC,MAAM,CAAC/B,MAAP,KAAkB,IAAjD,GAAwD+B,MAAM,CAAC/B,MAA/D,GAAwEV,SAJ7E;IAKHW,YAAY,EAAE8B,MAAM,CAAC9B,YAAP,KAAwBX,SAAxB,IAAqCyC,MAAM,CAAC9B,YAAP,KAAwB,IAA7D,GAAoE8B,MAAM,CAAC9B,YAA3E,GAA0FX,SALrG;IAMH2B,YAAY,EAAEc,MAAM,CAACd,YAAP,KAAwB3B,SAAxB,IAAqCyC,MAAM,CAACd,YAAP,KAAwB,IAA7D,GACR2H,uCAAuC,CAAC7G,MAAM,CAACd,YAAR,EAAsBxC,OAAtB,CAD/B,GAERa,SARH;IASH6B,YAAY,EAAEY,MAAM,CAACZ,YAAP,KAAwB7B,SAAxB,IAAqCyC,MAAM,CAACZ,YAAP,KAAwB,IAA7D,GAAoEY,MAAM,CAACZ,YAA3E,GAA0F7B,SATrG;IAUHyJ,SAAS,EAAEhH,MAAM,CAACgH,SAAP,KAAqBzJ,SAArB,IAAkCyC,MAAM,CAACgH,SAAP,KAAqB,IAAvD,GAA8DhH,MAAM,CAACgH,SAArE,GAAiFzJ,SAVzF;IAWHoI,iBAAiB,EAAE3F,MAAM,CAAC2F,iBAAP,KAA6BpI,SAA7B,IAA0CyC,MAAM,CAAC2F,iBAAP,KAA6B,IAAvE,GACb3F,MAAM,CAAC2F,iBADM,GAEbpI,SAbH;IAcHgC,UAAU,EAAES,MAAM,CAACT,UAAP,KAAsBhC,SAAtB,IAAmCyC,MAAM,CAACT,UAAP,KAAsB,IAAzD,GAAgES,MAAM,CAACT,UAAvE,GAAoFhC,SAd7F;IAeHiC,WAAW,EAAEQ,MAAM,CAACR,WAAP,KAAuBjC,SAAvB,IAAoCyC,MAAM,CAACR,WAAP,KAAuB,IAA3D,GAAkEQ,MAAM,CAACR,WAAzE,GAAuFjC,SAfjG;IAgBHkC,eAAe,EAAEO,MAAM,CAACP,eAAP,KAA2BlC,SAA3B,IAAwCyC,MAAM,CAACP,eAAP,KAA2B,IAAnE,GACXqH,0CAA0C,CAAC9G,MAAM,CAACP,eAAR,EAAyB/C,OAAzB,CAD/B,GAEXa,SAlBH;IAmBHiB,MAAM,EAAEwB,MAAM,CAACxB,MAAP,KAAkBjB,SAAlB,IAA+ByC,MAAM,CAACxB,MAAP,KAAkB,IAAjD,GAAwDwB,MAAM,CAACxB,MAA/D,GAAwEjB,SAnB7E;IAoBH0J,UAAU,EAAEjH,MAAM,CAACiH,UAAP,KAAsB1J,SAAtB,IAAmCyC,MAAM,CAACiH,UAAP,KAAsB,IAAzD,GAAgEjH,MAAM,CAACiH,UAAvE,GAAoF1J,SApB7F;IAqBH2J,gBAAgB,EAAElH,MAAM,CAACkH,gBAAP,KAA4B3J,SAA5B,IAAyCyC,MAAM,CAACkH,gBAAP,KAA4B,IAArE,GAA4ElH,MAAM,CAACkH,gBAAnF,GAAsG3J,SArBrH;IAsBHqC,QAAQ,EAAEI,MAAM,CAACJ,QAAP,KAAoBrC,SAApB,IAAiCyC,MAAM,CAACJ,QAAP,KAAoB,IAArD,GAA4DI,MAAM,CAACJ,QAAnE,GAA8ErC,SAtBrF;IAuBHsC,OAAO,EAAEG,MAAM,CAACH,OAAP,KAAmBtC,SAAnB,IAAgCyC,MAAM,CAACH,OAAP,KAAmB,IAAnD,GAA0DG,MAAM,CAACH,OAAjE,GAA2EtC;EAvBjF,CAAP;AAyBH,CA1BD;;AA2BA,IAAIkG,sCAAsC,GAAG,SAAzCA,sCAAyC,CAAUzD,MAAV,EAAkBtD,OAAlB,EAA2B;EACpE,OAAO,CAACsD,MAAM,IAAI,EAAX,EACF6F,MADE,CACK,UAAUC,CAAV,EAAa;IAAE,OAAOA,CAAC,IAAI,IAAZ;EAAmB,CADvC,EAEFC,GAFE,CAEE,UAAUC,KAAV,EAAiB;IACtB,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAChB,OAAO,IAAP;IACH;;IACD,OAAOlD,qCAAqC,CAACkD,KAAD,EAAQtJ,OAAR,CAA5C;EACH,CAPM,CAAP;AAQH,CATD;;AAUA,IAAIyK,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAUnH,MAAV,EAAkBtD,OAAlB,EAA2B;EAC3D,OAAO;IACH0K,uBAAuB,EAAEpH,MAAM,CAACoH,uBAAP,KAAmC7J,SAAnC,IAAgDyC,MAAM,CAACoH,uBAAP,KAAmC,IAAnF,GACnBlB,wCAAwC,CAAClG,MAAM,CAACoH,uBAAR,EAAiC1K,OAAjC,CADrB,GAEnBa,SAHH;IAIH8J,MAAM,EAAErH,MAAM,CAACqH,MAAP,KAAkB9J,SAAlB,IAA+ByC,MAAM,CAACqH,MAAP,KAAkB,IAAjD,GAAwDrH,MAAM,CAACqH,MAA/D,GAAwE9J,SAJ7E;IAKH+J,EAAE,EAAEtH,MAAM,CAACsH,EAAP,KAAc/J,SAAd,IAA2ByC,MAAM,CAACsH,EAAP,KAAc,IAAzC,GAAgDtH,MAAM,CAACsH,EAAvD,GAA4D/J,SAL7D;IAMHW,YAAY,EAAE8B,MAAM,CAAC9B,YAAP,KAAwBX,SAAxB,IAAqCyC,MAAM,CAAC9B,YAAP,KAAwB,IAA7D,GAAoE8B,MAAM,CAAC9B,YAA3E,GAA0FX,SANrG;IAOHgK,YAAY,EAAEvH,MAAM,CAACuH,YAAP,KAAwBhK,SAAxB,IAAqCyC,MAAM,CAACuH,YAAP,KAAwB,IAA7D,GAAoEvH,MAAM,CAACuH,YAA3E,GAA0FhK,SAPrG;IAQHD,IAAI,EAAE0C,MAAM,CAAC1C,IAAP,KAAgBC,SAAhB,IAA6ByC,MAAM,CAAC1C,IAAP,KAAgB,IAA7C,GAAoD0C,MAAM,CAAC1C,IAA3D,GAAkEC,SARrE;IASHiK,gBAAgB,EAAExH,MAAM,CAACwH,gBAAP,KAA4BjK,SAA5B,IAAyCyC,MAAM,CAACwH,gBAAP,KAA4B,IAArE,GACZvB,kCAAkC,CAACjG,MAAM,CAACwH,gBAAR,EAA0B9K,OAA1B,CADtB,GAEZa;EAXH,CAAP;AAaH,CAdD;;AAeA,IAAI4E,iCAAiC,GAAG,SAApCA,iCAAoC,CAAUnC,MAAV,EAAkBtD,OAAlB,EAA2B;EAC/D,OAAO,CAACsD,MAAM,IAAI,EAAX,EACF6F,MADE,CACK,UAAUC,CAAV,EAAa;IAAE,OAAOA,CAAC,IAAI,IAAZ;EAAmB,CADvC,EAEFC,GAFE,CAEE,UAAUC,KAAV,EAAiB;IACtB,IAAIA,KAAK,KAAK,IAAd,EAAoB;MAChB,OAAO,IAAP;IACH;;IACD,OAAOmB,6BAA6B,CAACnB,KAAD,EAAQtJ,OAAR,CAApC;EACH,CAPM,CAAP;AAQH,CATD;;AAUA,IAAI2D,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAUL,MAAV,EAAkB;EACxC,IAAIjD,EAAJ;;EACA,OAAQ;IACJ0K,cAAc,EAAEzH,MAAM,CAACE,UADnB;IAEJwH,SAAS,EAAE,CAAC3K,EAAE,GAAGiD,MAAM,CAACrD,OAAP,CAAe,kBAAf,CAAN,MAA8C,IAA9C,IAAsDI,EAAE,KAAK,KAAK,CAAlE,GAAsEA,EAAtE,GAA2EiD,MAAM,CAACrD,OAAP,CAAe,mBAAf,CAFlF;IAGJgL,iBAAiB,EAAE3H,MAAM,CAACrD,OAAP,CAAe,YAAf,CAHf;IAIJiL,IAAI,EAAE5H,MAAM,CAACrD,OAAP,CAAe,aAAf;EAJF,CAAR;AAMH,CARD,C,CASA;;;AACA,IAAI2D,WAAW,GAAG,SAAdA,WAAc,CAAUuH,UAAV,EAAsBnL,OAAtB,EAA+B;EAC7C,IAAImL,UAAU,KAAK,KAAK,CAAxB,EAA2B;IAAEA,UAAU,GAAG,IAAIC,UAAJ,EAAb;EAAgC;;EAC7D,IAAID,UAAU,YAAYC,UAA1B,EAAsC;IAClC,OAAOvH,OAAO,CAACC,OAAR,CAAgBqH,UAAhB,CAAP;EACH;;EACD,OAAOnL,OAAO,CAACqL,eAAR,CAAwBF,UAAxB,KAAuCtH,OAAO,CAACC,OAAR,CAAgB,IAAIsH,UAAJ,EAAhB,CAA9C;AACH,CAND,C,CAOA;;;AACA,IAAIE,iBAAiB,GAAG,SAApBA,iBAAoB,CAAUH,UAAV,EAAsBnL,OAAtB,EAA+B;EACnD,OAAO4D,WAAW,CAACuH,UAAD,EAAanL,OAAb,CAAX,CAAiCuL,IAAjC,CAAsC,UAAUnL,IAAV,EAAgB;IAAE,OAAOJ,OAAO,CAACwL,WAAR,CAAoBpL,IAApB,CAAP;EAAmC,CAA3F,CAAP;AACH,CAFD;;AAGA,IAAIqL,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAUC,KAAV,EAAiB;EAC7C,OAAOA,KAAK,KAAK7K,SAAV,IACH6K,KAAK,KAAK,IADP,IAEHA,KAAK,KAAK,EAFP,KAGF,CAACvG,MAAM,CAACwG,mBAAP,CAA2BD,KAA3B,EAAkCE,QAAlC,CAA2C,QAA3C,CAAD,IAAyDF,KAAK,CAAC5K,MAAN,IAAgB,CAHvE,MAIF,CAACqE,MAAM,CAACwG,mBAAP,CAA2BD,KAA3B,EAAkCE,QAAlC,CAA2C,MAA3C,CAAD,IAAuDF,KAAK,CAACG,IAAN,IAAc,CAJnE,CAAP;AAKH,CAND;;AAOA,IAAItH,SAAS,GAAG,SAAZA,SAAY,CAAU4G,UAAV,EAAsBnL,OAAtB,EAA+B;EAC3C,OAAOsL,iBAAiB,CAACH,UAAD,EAAanL,OAAb,CAAjB,CAAuCuL,IAAvC,CAA4C,UAAUO,OAAV,EAAmB;IAClE,IAAIA,OAAO,CAAChL,MAAZ,EAAoB;MAChB,OAAOsB,IAAI,CAAC2J,KAAL,CAAWD,OAAX,CAAP;IACH;;IACD,OAAO,EAAP;EACH,CALM,CAAP;AAMH,CAPD;AAQA;AACA;AACA;;;AACA,IAAIpH,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAUpB,MAAV,EAAkBgC,IAAlB,EAAwB;EAChD,IAAI0G,OAAO,GAAG,SAAVA,OAAU,CAAUC,MAAV,EAAkBC,GAAlB,EAAuB;IAAE,OAAO/G,MAAM,CAACgH,IAAP,CAAYF,MAAZ,EAAoBG,IAApB,CAAyB,UAAUC,CAAV,EAAa;MAAE,OAAOA,CAAC,CAACC,WAAF,OAAoBJ,GAAG,CAACI,WAAJ,EAA3B;IAA+C,CAAvF,CAAP;EAAkG,CAAzI;;EACA,IAAIC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAUC,QAAV,EAAoB;IACxC,IAAIC,UAAU,GAAGD,QAAjB;;IACA,IAAIC,UAAU,CAACC,OAAX,CAAmB,GAAnB,KAA2B,CAA/B,EAAkC;MAC9BD,UAAU,GAAGA,UAAU,CAACE,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAb;IACH;;IACD,IAAIF,UAAU,CAACC,OAAX,CAAmB,GAAnB,KAA2B,CAA/B,EAAkC;MAC9BD,UAAU,GAAGA,UAAU,CAACE,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAb;IACH;;IACD,OAAOF,UAAP;EACH,CATD;;EAUA,IAAIG,SAAS,GAAGZ,OAAO,CAAC1I,MAAM,CAACrD,OAAR,EAAiB,kBAAjB,CAAvB;;EACA,IAAI2M,SAAS,KAAK/L,SAAlB,EAA6B;IACzB,OAAO0L,iBAAiB,CAACjJ,MAAM,CAACrD,OAAP,CAAe2M,SAAf,CAAD,CAAxB;EACH;;EACD,IAAItH,IAAI,CAACR,IAAL,KAAcjE,SAAlB,EAA6B;IACzB,OAAO0L,iBAAiB,CAACjH,IAAI,CAACR,IAAN,CAAxB;EACH;;EACD,IAAIQ,IAAI,CAAC,QAAD,CAAJ,KAAmBzE,SAAvB,EAAkC;IAC9B,OAAO0L,iBAAiB,CAACjH,IAAI,CAAC,QAAD,CAAL,CAAxB;EACH;;EACD,OAAO,EAAP;AACH,CAvBD","names":["HttpRequest","__HttpRequest","extendedEncodeURIComponent","__extendedEncodeURIComponent","serializeAws_restJson1DeleteLexiconCommand","input","context","headers","resolvedPath","Name","undefined","labelValue","length","Error","replace","endpoint","_a","_c","hostname","_b","protocol","port","method","path","body","serializeAws_restJson1DescribeVoicesCommand","query","Engine","LanguageCode","IncludeAdditionalLanguageCodes","toString","NextToken","serializeAws_restJson1GetLexiconCommand","serializeAws_restJson1GetSpeechSynthesisTaskCommand","TaskId","serializeAws_restJson1ListLexiconsCommand","serializeAws_restJson1ListSpeechSynthesisTasksCommand","MaxResults","Status","serializeAws_restJson1PutLexiconCommand","JSON","stringify","__assign","Content","serializeAws_restJson1StartSpeechSynthesisTaskCommand","LexiconNames","serializeAws_restJson1LexiconNameList","OutputFormat","OutputS3BucketName","OutputS3KeyPrefix","SampleRate","SnsTopicArn","SpeechMarkTypes","serializeAws_restJson1SpeechMarkTypeList","Text","TextType","VoiceId","serializeAws_restJson1SynthesizeSpeechCommand","deserializeAws_restJson1DeleteLexiconCommand","output","statusCode","deserializeAws_restJson1DeleteLexiconCommandError","contents","$metadata","deserializeMetadata","collectBody","Promise","resolve","parseBody","parsedOutput","_e","_f","errorCode","loadRestJsonErrorCode","deserializeAws_restJson1LexiconNotFoundExceptionResponse","response","name","deserializeAws_restJson1ServiceFailureExceptionResponse","parsedBody","code","Code","message","Message","$fault","reject","Object","assign","deserializeAws_restJson1DescribeVoicesCommand","deserializeAws_restJson1DescribeVoicesCommandError","Voices","data","deserializeAws_restJson1VoiceList","deserializeAws_restJson1InvalidNextTokenExceptionResponse","deserializeAws_restJson1GetLexiconCommand","deserializeAws_restJson1GetLexiconCommandError","Lexicon","LexiconAttributes","deserializeAws_restJson1Lexicon","deserializeAws_restJson1LexiconAttributes","deserializeAws_restJson1GetSpeechSynthesisTaskCommand","deserializeAws_restJson1GetSpeechSynthesisTaskCommandError","SynthesisTask","deserializeAws_restJson1SynthesisTask","_g","deserializeAws_restJson1InvalidTaskIdExceptionResponse","deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse","deserializeAws_restJson1ListLexiconsCommand","deserializeAws_restJson1ListLexiconsCommandError","Lexicons","deserializeAws_restJson1LexiconDescriptionList","deserializeAws_restJson1ListSpeechSynthesisTasksCommand","deserializeAws_restJson1ListSpeechSynthesisTasksCommandError","SynthesisTasks","deserializeAws_restJson1SynthesisTasks","deserializeAws_restJson1PutLexiconCommand","deserializeAws_restJson1PutLexiconCommandError","_k","_l","deserializeAws_restJson1InvalidLexiconExceptionResponse","deserializeAws_restJson1LexiconSizeExceededExceptionResponse","deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse","deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse","deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse","deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse","deserializeAws_restJson1StartSpeechSynthesisTaskCommand","deserializeAws_restJson1StartSpeechSynthesisTaskCommandError","_q","_r","deserializeAws_restJson1EngineNotSupportedExceptionResponse","deserializeAws_restJson1InvalidS3BucketExceptionResponse","deserializeAws_restJson1InvalidS3KeyExceptionResponse","deserializeAws_restJson1InvalidSampleRateExceptionResponse","deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse","deserializeAws_restJson1InvalidSsmlExceptionResponse","deserializeAws_restJson1LanguageNotSupportedExceptionResponse","deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse","deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse","deserializeAws_restJson1TextLengthExceededExceptionResponse","deserializeAws_restJson1SynthesizeSpeechCommand","deserializeAws_restJson1SynthesizeSpeechCommandError","AudioStream","ContentType","RequestCharacters","parseInt","_m","_o","filter","e","map","entry","deserializeAws_restJson1EngineList","deserializeAws_restJson1LanguageCodeList","Alphabet","LastModified","Date","Math","round","LexemesCount","LexiconArn","Size","deserializeAws_restJson1LexiconDescription","Attributes","deserializeAws_restJson1LexiconNameList","deserializeAws_restJson1SpeechMarkTypeList","CreationTime","OutputUri","TaskStatus","TaskStatusReason","deserializeAws_restJson1Voice","AdditionalLanguageCodes","Gender","Id","LanguageName","SupportedEngines","httpStatusCode","requestId","extendedRequestId","cfId","streamBody","Uint8Array","streamCollector","collectBodyString","then","utf8Encoder","isSerializableHeaderValue","value","getOwnPropertyNames","includes","size","encoded","parse","findKey","object","key","keys","find","k","toLowerCase","sanitizeErrorCode","rawValue","cleanValue","indexOf","split","headerKey"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/client-polly/protocols/Aws_restJson1.ts"],"sourcesContent":["import { DeleteLexiconCommandInput, DeleteLexiconCommandOutput } from \"../commands/DeleteLexiconCommand\";\nimport { DescribeVoicesCommandInput, DescribeVoicesCommandOutput } from \"../commands/DescribeVoicesCommand\";\nimport { GetLexiconCommandInput, GetLexiconCommandOutput } from \"../commands/GetLexiconCommand\";\nimport {\n  GetSpeechSynthesisTaskCommandInput,\n  GetSpeechSynthesisTaskCommandOutput,\n} from \"../commands/GetSpeechSynthesisTaskCommand\";\nimport { ListLexiconsCommandInput, ListLexiconsCommandOutput } from \"../commands/ListLexiconsCommand\";\nimport {\n  ListSpeechSynthesisTasksCommandInput,\n  ListSpeechSynthesisTasksCommandOutput,\n} from \"../commands/ListSpeechSynthesisTasksCommand\";\nimport { PutLexiconCommandInput, PutLexiconCommandOutput } from \"../commands/PutLexiconCommand\";\nimport {\n  StartSpeechSynthesisTaskCommandInput,\n  StartSpeechSynthesisTaskCommandOutput,\n} from \"../commands/StartSpeechSynthesisTaskCommand\";\nimport { SynthesizeSpeechCommandInput, SynthesizeSpeechCommandOutput } from \"../commands/SynthesizeSpeechCommand\";\nimport {\n  Engine,\n  EngineNotSupportedException,\n  InvalidLexiconException,\n  InvalidNextTokenException,\n  InvalidS3BucketException,\n  InvalidS3KeyException,\n  InvalidSampleRateException,\n  InvalidSnsTopicArnException,\n  InvalidSsmlException,\n  InvalidTaskIdException,\n  LanguageCode,\n  LanguageNotSupportedException,\n  Lexicon,\n  LexiconAttributes,\n  LexiconDescription,\n  LexiconNotFoundException,\n  LexiconSizeExceededException,\n  MarksNotSupportedForFormatException,\n  MaxLexemeLengthExceededException,\n  MaxLexiconsNumberExceededException,\n  ServiceFailureException,\n  SpeechMarkType,\n  SsmlMarksNotSupportedForTextTypeException,\n  SynthesisTask,\n  SynthesisTaskNotFoundException,\n  TextLengthExceededException,\n  UnsupportedPlsAlphabetException,\n  UnsupportedPlsLanguageException,\n  Voice,\n} from \"../models/models_0\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport {\n  SmithyException as __SmithyException,\n  extendedEncodeURIComponent as __extendedEncodeURIComponent,\n} from \"@aws-sdk/smithy-client\";\nimport {\n  Endpoint as __Endpoint,\n  MetadataBearer as __MetadataBearer,\n  ResponseMetadata as __ResponseMetadata,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport const serializeAws_restJson1DeleteLexiconCommand = async (\n  input: DeleteLexiconCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/lexicons/{Name}\";\n  if (input.Name !== undefined) {\n    const labelValue: string = input.Name;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Name.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Name.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1DescribeVoicesCommand = async (\n  input: DescribeVoicesCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/voices\";\n  const query: any = {\n    ...(input.Engine !== undefined && { Engine: input.Engine }),\n    ...(input.LanguageCode !== undefined && { LanguageCode: input.LanguageCode }),\n    ...(input.IncludeAdditionalLanguageCodes !== undefined && {\n      IncludeAdditionalLanguageCodes: input.IncludeAdditionalLanguageCodes.toString(),\n    }),\n    ...(input.NextToken !== undefined && { NextToken: input.NextToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1GetLexiconCommand = async (\n  input: GetLexiconCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/lexicons/{Name}\";\n  if (input.Name !== undefined) {\n    const labelValue: string = input.Name;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Name.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Name.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1GetSpeechSynthesisTaskCommand = async (\n  input: GetSpeechSynthesisTaskCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/synthesisTasks/{TaskId}\";\n  if (input.TaskId !== undefined) {\n    const labelValue: string = input.TaskId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: TaskId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{TaskId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: TaskId.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1ListLexiconsCommand = async (\n  input: ListLexiconsCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/lexicons\";\n  const query: any = {\n    ...(input.NextToken !== undefined && { NextToken: input.NextToken }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1ListSpeechSynthesisTasksCommand = async (\n  input: ListSpeechSynthesisTasksCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/v1/synthesisTasks\";\n  const query: any = {\n    ...(input.MaxResults !== undefined && { MaxResults: input.MaxResults.toString() }),\n    ...(input.NextToken !== undefined && { NextToken: input.NextToken }),\n    ...(input.Status !== undefined && { Status: input.Status }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PutLexiconCommand = async (\n  input: PutLexiconCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/v1/lexicons/{Name}\";\n  if (input.Name !== undefined) {\n    const labelValue: string = input.Name;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: Name.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: Name.\");\n  }\n  let body: any;\n  body = JSON.stringify({\n    ...(input.Content !== undefined && input.Content !== null && { Content: input.Content }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"PUT\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1StartSpeechSynthesisTaskCommand = async (\n  input: StartSpeechSynthesisTaskCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/v1/synthesisTasks\";\n  let body: any;\n  body = JSON.stringify({\n    ...(input.Engine !== undefined && input.Engine !== null && { Engine: input.Engine }),\n    ...(input.LanguageCode !== undefined && input.LanguageCode !== null && { LanguageCode: input.LanguageCode }),\n    ...(input.LexiconNames !== undefined &&\n      input.LexiconNames !== null && {\n        LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context),\n      }),\n    ...(input.OutputFormat !== undefined && input.OutputFormat !== null && { OutputFormat: input.OutputFormat }),\n    ...(input.OutputS3BucketName !== undefined &&\n      input.OutputS3BucketName !== null && { OutputS3BucketName: input.OutputS3BucketName }),\n    ...(input.OutputS3KeyPrefix !== undefined &&\n      input.OutputS3KeyPrefix !== null && { OutputS3KeyPrefix: input.OutputS3KeyPrefix }),\n    ...(input.SampleRate !== undefined && input.SampleRate !== null && { SampleRate: input.SampleRate }),\n    ...(input.SnsTopicArn !== undefined && input.SnsTopicArn !== null && { SnsTopicArn: input.SnsTopicArn }),\n    ...(input.SpeechMarkTypes !== undefined &&\n      input.SpeechMarkTypes !== null && {\n        SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context),\n      }),\n    ...(input.Text !== undefined && input.Text !== null && { Text: input.Text }),\n    ...(input.TextType !== undefined && input.TextType !== null && { TextType: input.TextType }),\n    ...(input.VoiceId !== undefined && input.VoiceId !== null && { VoiceId: input.VoiceId }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1SynthesizeSpeechCommand = async (\n  input: SynthesizeSpeechCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/v1/speech\";\n  let body: any;\n  body = JSON.stringify({\n    ...(input.Engine !== undefined && input.Engine !== null && { Engine: input.Engine }),\n    ...(input.LanguageCode !== undefined && input.LanguageCode !== null && { LanguageCode: input.LanguageCode }),\n    ...(input.LexiconNames !== undefined &&\n      input.LexiconNames !== null && {\n        LexiconNames: serializeAws_restJson1LexiconNameList(input.LexiconNames, context),\n      }),\n    ...(input.OutputFormat !== undefined && input.OutputFormat !== null && { OutputFormat: input.OutputFormat }),\n    ...(input.SampleRate !== undefined && input.SampleRate !== null && { SampleRate: input.SampleRate }),\n    ...(input.SpeechMarkTypes !== undefined &&\n      input.SpeechMarkTypes !== null && {\n        SpeechMarkTypes: serializeAws_restJson1SpeechMarkTypeList(input.SpeechMarkTypes, context),\n      }),\n    ...(input.Text !== undefined && input.Text !== null && { Text: input.Text }),\n    ...(input.TextType !== undefined && input.TextType !== null && { TextType: input.TextType }),\n    ...(input.VoiceId !== undefined && input.VoiceId !== null && { VoiceId: input.VoiceId }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const deserializeAws_restJson1DeleteLexiconCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteLexiconCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1DeleteLexiconCommandError(output, context);\n  }\n  const contents: DeleteLexiconCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1DeleteLexiconCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteLexiconCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1DescribeVoicesCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DescribeVoicesCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1DescribeVoicesCommandError(output, context);\n  }\n  const contents: DescribeVoicesCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    NextToken: undefined,\n    Voices: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.NextToken !== undefined && data.NextToken !== null) {\n    contents.NextToken = data.NextToken;\n  }\n  if (data.Voices !== undefined && data.Voices !== null) {\n    contents.Voices = deserializeAws_restJson1VoiceList(data.Voices, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1DescribeVoicesCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DescribeVoicesCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidNextTokenException\":\n    case \"com.amazonaws.polly#InvalidNextTokenException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1GetLexiconCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetLexiconCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1GetLexiconCommandError(output, context);\n  }\n  const contents: GetLexiconCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Lexicon: undefined,\n    LexiconAttributes: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.Lexicon !== undefined && data.Lexicon !== null) {\n    contents.Lexicon = deserializeAws_restJson1Lexicon(data.Lexicon, context);\n  }\n  if (data.LexiconAttributes !== undefined && data.LexiconAttributes !== null) {\n    contents.LexiconAttributes = deserializeAws_restJson1LexiconAttributes(data.LexiconAttributes, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1GetLexiconCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetLexiconCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1GetSpeechSynthesisTaskCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetSpeechSynthesisTaskCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1GetSpeechSynthesisTaskCommandError(output, context);\n  }\n  const contents: GetSpeechSynthesisTaskCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    SynthesisTask: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n    contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1GetSpeechSynthesisTaskCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetSpeechSynthesisTaskCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidTaskIdException\":\n    case \"com.amazonaws.polly#InvalidTaskIdException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidTaskIdExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"SynthesisTaskNotFoundException\":\n    case \"com.amazonaws.polly#SynthesisTaskNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1ListLexiconsCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListLexiconsCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1ListLexiconsCommandError(output, context);\n  }\n  const contents: ListLexiconsCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    Lexicons: undefined,\n    NextToken: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.Lexicons !== undefined && data.Lexicons !== null) {\n    contents.Lexicons = deserializeAws_restJson1LexiconDescriptionList(data.Lexicons, context);\n  }\n  if (data.NextToken !== undefined && data.NextToken !== null) {\n    contents.NextToken = data.NextToken;\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1ListLexiconsCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListLexiconsCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidNextTokenException\":\n    case \"com.amazonaws.polly#InvalidNextTokenException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1ListSpeechSynthesisTasksCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListSpeechSynthesisTasksCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1ListSpeechSynthesisTasksCommandError(output, context);\n  }\n  const contents: ListSpeechSynthesisTasksCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    NextToken: undefined,\n    SynthesisTasks: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.NextToken !== undefined && data.NextToken !== null) {\n    contents.NextToken = data.NextToken;\n  }\n  if (data.SynthesisTasks !== undefined && data.SynthesisTasks !== null) {\n    contents.SynthesisTasks = deserializeAws_restJson1SynthesisTasks(data.SynthesisTasks, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1ListSpeechSynthesisTasksCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<ListSpeechSynthesisTasksCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidNextTokenException\":\n    case \"com.amazonaws.polly#InvalidNextTokenException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidNextTokenExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PutLexiconCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutLexiconCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PutLexiconCommandError(output, context);\n  }\n  const contents: PutLexiconCommandOutput = {\n    $metadata: deserializeMetadata(output),\n  };\n  await collectBody(output.body, context);\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PutLexiconCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutLexiconCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidLexiconException\":\n    case \"com.amazonaws.polly#InvalidLexiconException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidLexiconExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LexiconSizeExceededException\":\n    case \"com.amazonaws.polly#LexiconSizeExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconSizeExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MaxLexemeLengthExceededException\":\n    case \"com.amazonaws.polly#MaxLexemeLengthExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MaxLexiconsNumberExceededException\":\n    case \"com.amazonaws.polly#MaxLexiconsNumberExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"UnsupportedPlsAlphabetException\":\n    case \"com.amazonaws.polly#UnsupportedPlsAlphabetException\":\n      response = {\n        ...(await deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"UnsupportedPlsLanguageException\":\n    case \"com.amazonaws.polly#UnsupportedPlsLanguageException\":\n      response = {\n        ...(await deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1StartSpeechSynthesisTaskCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<StartSpeechSynthesisTaskCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1StartSpeechSynthesisTaskCommandError(output, context);\n  }\n  const contents: StartSpeechSynthesisTaskCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    SynthesisTask: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n    contents.SynthesisTask = deserializeAws_restJson1SynthesisTask(data.SynthesisTask, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1StartSpeechSynthesisTaskCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<StartSpeechSynthesisTaskCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"EngineNotSupportedException\":\n    case \"com.amazonaws.polly#EngineNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidS3BucketException\":\n    case \"com.amazonaws.polly#InvalidS3BucketException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidS3BucketExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidS3KeyException\":\n    case \"com.amazonaws.polly#InvalidS3KeyException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidS3KeyExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSampleRateException\":\n    case \"com.amazonaws.polly#InvalidSampleRateException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSnsTopicArnException\":\n    case \"com.amazonaws.polly#InvalidSnsTopicArnException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSsmlException\":\n    case \"com.amazonaws.polly#InvalidSsmlException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LanguageNotSupportedException\":\n    case \"com.amazonaws.polly#LanguageNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MarksNotSupportedForFormatException\":\n    case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n      response = {\n        ...(await deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"SsmlMarksNotSupportedForTextTypeException\":\n    case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n      response = {\n        ...(await deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"TextLengthExceededException\":\n    case \"com.amazonaws.polly#TextLengthExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1SynthesizeSpeechCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<SynthesizeSpeechCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1SynthesizeSpeechCommandError(output, context);\n  }\n  const contents: SynthesizeSpeechCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    AudioStream: undefined,\n    ContentType: undefined,\n    RequestCharacters: undefined,\n  };\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.ContentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"x-amzn-requestcharacters\"] !== undefined) {\n    contents.RequestCharacters = parseInt(output.headers[\"x-amzn-requestcharacters\"], 10);\n  }\n  const data: any = output.body;\n  contents.AudioStream = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1SynthesizeSpeechCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<SynthesizeSpeechCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"EngineNotSupportedException\":\n    case \"com.amazonaws.polly#EngineNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1EngineNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSampleRateException\":\n    case \"com.amazonaws.polly#InvalidSampleRateException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSampleRateExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InvalidSsmlException\":\n    case \"com.amazonaws.polly#InvalidSsmlException\":\n      response = {\n        ...(await deserializeAws_restJson1InvalidSsmlExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LanguageNotSupportedException\":\n    case \"com.amazonaws.polly#LanguageNotSupportedException\":\n      response = {\n        ...(await deserializeAws_restJson1LanguageNotSupportedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LexiconNotFoundException\":\n    case \"com.amazonaws.polly#LexiconNotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1LexiconNotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"MarksNotSupportedForFormatException\":\n    case \"com.amazonaws.polly#MarksNotSupportedForFormatException\":\n      response = {\n        ...(await deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ServiceFailureException\":\n    case \"com.amazonaws.polly#ServiceFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1ServiceFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"SsmlMarksNotSupportedForTextTypeException\":\n    case \"com.amazonaws.polly#SsmlMarksNotSupportedForTextTypeException\":\n      response = {\n        ...(await deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"TextLengthExceededException\":\n    case \"com.amazonaws.polly#TextLengthExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1TextLengthExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nconst deserializeAws_restJson1EngineNotSupportedExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<EngineNotSupportedException> => {\n  const contents: EngineNotSupportedException = {\n    name: \"EngineNotSupportedException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidLexiconExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidLexiconException> => {\n  const contents: InvalidLexiconException = {\n    name: \"InvalidLexiconException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidNextTokenExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidNextTokenException> => {\n  const contents: InvalidNextTokenException = {\n    name: \"InvalidNextTokenException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidS3BucketExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidS3BucketException> => {\n  const contents: InvalidS3BucketException = {\n    name: \"InvalidS3BucketException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidS3KeyExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidS3KeyException> => {\n  const contents: InvalidS3KeyException = {\n    name: \"InvalidS3KeyException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidSampleRateExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidSampleRateException> => {\n  const contents: InvalidSampleRateException = {\n    name: \"InvalidSampleRateException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidSnsTopicArnExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidSnsTopicArnException> => {\n  const contents: InvalidSnsTopicArnException = {\n    name: \"InvalidSnsTopicArnException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidSsmlExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidSsmlException> => {\n  const contents: InvalidSsmlException = {\n    name: \"InvalidSsmlException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InvalidTaskIdExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InvalidTaskIdException> => {\n  const contents: InvalidTaskIdException = {\n    name: \"InvalidTaskIdException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LanguageNotSupportedExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LanguageNotSupportedException> => {\n  const contents: LanguageNotSupportedException = {\n    name: \"LanguageNotSupportedException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LexiconNotFoundExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LexiconNotFoundException> => {\n  const contents: LexiconNotFoundException = {\n    name: \"LexiconNotFoundException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LexiconSizeExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LexiconSizeExceededException> => {\n  const contents: LexiconSizeExceededException = {\n    name: \"LexiconSizeExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1MarksNotSupportedForFormatExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<MarksNotSupportedForFormatException> => {\n  const contents: MarksNotSupportedForFormatException = {\n    name: \"MarksNotSupportedForFormatException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1MaxLexemeLengthExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<MaxLexemeLengthExceededException> => {\n  const contents: MaxLexemeLengthExceededException = {\n    name: \"MaxLexemeLengthExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1MaxLexiconsNumberExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<MaxLexiconsNumberExceededException> => {\n  const contents: MaxLexiconsNumberExceededException = {\n    name: \"MaxLexiconsNumberExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1ServiceFailureExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<ServiceFailureException> => {\n  const contents: ServiceFailureException = {\n    name: \"ServiceFailureException\",\n    $fault: \"server\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1SsmlMarksNotSupportedForTextTypeExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<SsmlMarksNotSupportedForTextTypeException> => {\n  const contents: SsmlMarksNotSupportedForTextTypeException = {\n    name: \"SsmlMarksNotSupportedForTextTypeException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1SynthesisTaskNotFoundExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<SynthesisTaskNotFoundException> => {\n  const contents: SynthesisTaskNotFoundException = {\n    name: \"SynthesisTaskNotFoundException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1TextLengthExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<TextLengthExceededException> => {\n  const contents: TextLengthExceededException = {\n    name: \"TextLengthExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1UnsupportedPlsAlphabetExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<UnsupportedPlsAlphabetException> => {\n  const contents: UnsupportedPlsAlphabetException = {\n    name: \"UnsupportedPlsAlphabetException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1UnsupportedPlsLanguageExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<UnsupportedPlsLanguageException> => {\n  const contents: UnsupportedPlsLanguageException = {\n    name: \"UnsupportedPlsLanguageException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst serializeAws_restJson1LexiconNameList = (input: string[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst serializeAws_restJson1SpeechMarkTypeList = (input: (SpeechMarkType | string)[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1EngineList = (output: any, context: __SerdeContext): (Engine | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1LanguageCodeList = (output: any, context: __SerdeContext): (LanguageCode | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1Lexicon = (output: any, context: __SerdeContext): Lexicon => {\n  return {\n    Content: output.Content !== undefined && output.Content !== null ? output.Content : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1LexiconAttributes = (output: any, context: __SerdeContext): LexiconAttributes => {\n  return {\n    Alphabet: output.Alphabet !== undefined && output.Alphabet !== null ? output.Alphabet : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LastModified:\n      output.LastModified !== undefined && output.LastModified !== null\n        ? new Date(Math.round(output.LastModified * 1000))\n        : undefined,\n    LexemesCount: output.LexemesCount !== undefined && output.LexemesCount !== null ? output.LexemesCount : undefined,\n    LexiconArn: output.LexiconArn !== undefined && output.LexiconArn !== null ? output.LexiconArn : undefined,\n    Size: output.Size !== undefined && output.Size !== null ? output.Size : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1LexiconDescription = (output: any, context: __SerdeContext): LexiconDescription => {\n  return {\n    Attributes:\n      output.Attributes !== undefined && output.Attributes !== null\n        ? deserializeAws_restJson1LexiconAttributes(output.Attributes, context)\n        : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1LexiconDescriptionList = (output: any, context: __SerdeContext): LexiconDescription[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1LexiconDescription(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1LexiconNameList = (output: any, context: __SerdeContext): string[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1SpeechMarkTypeList = (\n  output: any,\n  context: __SerdeContext\n): (SpeechMarkType | string)[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return entry;\n    });\n};\n\nconst deserializeAws_restJson1SynthesisTask = (output: any, context: __SerdeContext): SynthesisTask => {\n  return {\n    CreationTime:\n      output.CreationTime !== undefined && output.CreationTime !== null\n        ? new Date(Math.round(output.CreationTime * 1000))\n        : undefined,\n    Engine: output.Engine !== undefined && output.Engine !== null ? output.Engine : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LexiconNames:\n      output.LexiconNames !== undefined && output.LexiconNames !== null\n        ? deserializeAws_restJson1LexiconNameList(output.LexiconNames, context)\n        : undefined,\n    OutputFormat: output.OutputFormat !== undefined && output.OutputFormat !== null ? output.OutputFormat : undefined,\n    OutputUri: output.OutputUri !== undefined && output.OutputUri !== null ? output.OutputUri : undefined,\n    RequestCharacters:\n      output.RequestCharacters !== undefined && output.RequestCharacters !== null\n        ? output.RequestCharacters\n        : undefined,\n    SampleRate: output.SampleRate !== undefined && output.SampleRate !== null ? output.SampleRate : undefined,\n    SnsTopicArn: output.SnsTopicArn !== undefined && output.SnsTopicArn !== null ? output.SnsTopicArn : undefined,\n    SpeechMarkTypes:\n      output.SpeechMarkTypes !== undefined && output.SpeechMarkTypes !== null\n        ? deserializeAws_restJson1SpeechMarkTypeList(output.SpeechMarkTypes, context)\n        : undefined,\n    TaskId: output.TaskId !== undefined && output.TaskId !== null ? output.TaskId : undefined,\n    TaskStatus: output.TaskStatus !== undefined && output.TaskStatus !== null ? output.TaskStatus : undefined,\n    TaskStatusReason:\n      output.TaskStatusReason !== undefined && output.TaskStatusReason !== null ? output.TaskStatusReason : undefined,\n    TextType: output.TextType !== undefined && output.TextType !== null ? output.TextType : undefined,\n    VoiceId: output.VoiceId !== undefined && output.VoiceId !== null ? output.VoiceId : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1SynthesisTasks = (output: any, context: __SerdeContext): SynthesisTask[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1SynthesisTask(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1Voice = (output: any, context: __SerdeContext): Voice => {\n  return {\n    AdditionalLanguageCodes:\n      output.AdditionalLanguageCodes !== undefined && output.AdditionalLanguageCodes !== null\n        ? deserializeAws_restJson1LanguageCodeList(output.AdditionalLanguageCodes, context)\n        : undefined,\n    Gender: output.Gender !== undefined && output.Gender !== null ? output.Gender : undefined,\n    Id: output.Id !== undefined && output.Id !== null ? output.Id : undefined,\n    LanguageCode: output.LanguageCode !== undefined && output.LanguageCode !== null ? output.LanguageCode : undefined,\n    LanguageName: output.LanguageName !== undefined && output.LanguageName !== null ? output.LanguageName : undefined,\n    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,\n    SupportedEngines:\n      output.SupportedEngines !== undefined && output.SupportedEngines !== null\n        ? deserializeAws_restJson1EngineList(output.SupportedEngines, context)\n        : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1VoiceList = (output: any, context: __SerdeContext): Voice[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1Voice(entry, context);\n    });\n};\n\nconst deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"],\n});\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: __SerdeContext): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\nconst isSerializableHeaderValue = (value: any): boolean =>\n  value !== undefined &&\n  value !== null &&\n  value !== \"\" &&\n  (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n  (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n\nconst parseBody = (streamBody: any, context: __SerdeContext): any =>\n  collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n    return {};\n  });\n\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nconst loadRestJsonErrorCode = (output: __HttpResponse, data: any): string => {\n  const findKey = (object: any, key: string) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n\n  const sanitizeErrorCode = (rawValue: string): string => {\n    let cleanValue = rawValue;\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n\n  const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};\n"]},"metadata":{},"sourceType":"module"}