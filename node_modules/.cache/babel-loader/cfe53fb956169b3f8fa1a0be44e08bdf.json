{"ast":null,"code":"import { __asyncGenerator, __asyncValues, __await, __generator } from \"tslib\";\nimport { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { getChunkedStream } from \"./getChunkedStream\";\nimport { getUnmarshalledStream } from \"./getUnmarshalledStream\";\n\nvar EventStreamMarshaller =\n/** @class */\nfunction () {\n  function EventStreamMarshaller(_a) {\n    var utf8Encoder = _a.utf8Encoder,\n        utf8Decoder = _a.utf8Decoder;\n    this.eventMarshaller = new EventMarshaller(utf8Encoder, utf8Decoder);\n    this.utfEncoder = utf8Encoder;\n  }\n\n  EventStreamMarshaller.prototype.deserialize = function (body, deserializer) {\n    var chunkedStream = getChunkedStream(body);\n    var unmarshalledStream = getUnmarshalledStream(chunkedStream, {\n      eventMarshaller: this.eventMarshaller,\n      deserializer: deserializer,\n      toUtf8: this.utfEncoder\n    });\n    return unmarshalledStream;\n  };\n\n  EventStreamMarshaller.prototype.serialize = function (input, serializer) {\n    var _a; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n\n    var self = this;\n\n    var serializedIterator = function () {\n      return __asyncGenerator(this, arguments, function () {\n        var input_1, input_1_1, chunk, payloadBuf, e_1_1;\n\n        var e_1, _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              _b.trys.push([0, 7, 8, 13]);\n\n              input_1 = __asyncValues(input);\n              _b.label = 1;\n\n            case 1:\n              return [4\n              /*yield*/\n              , __await(input_1.next())];\n\n            case 2:\n              if (!(input_1_1 = _b.sent(), !input_1_1.done)) return [3\n              /*break*/\n              , 6];\n              chunk = input_1_1.value;\n              payloadBuf = self.eventMarshaller.marshall(serializer(chunk));\n              return [4\n              /*yield*/\n              , __await(payloadBuf)];\n\n            case 3:\n              return [4\n              /*yield*/\n              , _b.sent()];\n\n            case 4:\n              _b.sent();\n\n              _b.label = 5;\n\n            case 5:\n              return [3\n              /*break*/\n              , 1];\n\n            case 6:\n              return [3\n              /*break*/\n              , 13];\n\n            case 7:\n              e_1_1 = _b.sent();\n              e_1 = {\n                error: e_1_1\n              };\n              return [3\n              /*break*/\n              , 13];\n\n            case 8:\n              _b.trys.push([8,, 11, 12]);\n\n              if (!(input_1_1 && !input_1_1.done && (_a = input_1.return))) return [3\n              /*break*/\n              , 10];\n              return [4\n              /*yield*/\n              , __await(_a.call(input_1))];\n\n            case 9:\n              _b.sent();\n\n              _b.label = 10;\n\n            case 10:\n              return [3\n              /*break*/\n              , 12];\n\n            case 11:\n              if (e_1) throw e_1.error;\n              return [7\n              /*endfinally*/\n              ];\n\n            case 12:\n              return [7\n              /*endfinally*/\n              ];\n\n            case 13:\n              return [4\n              /*yield*/\n              , __await(new Uint8Array(0))];\n\n            case 14:\n              // Ending frame\n              return [4\n              /*yield*/\n              , _b.sent()];\n\n            case 15:\n              // Ending frame\n              _b.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    return _a = {}, _a[Symbol.asyncIterator] = serializedIterator, _a;\n  };\n\n  return EventStreamMarshaller;\n}();\n\nexport { EventStreamMarshaller };","map":{"version":3,"mappings":"AAAA,SAASA,gBAAT,EAA2BC,aAA3B,EAA0CC,OAA1C,EAAmDC,WAAnD,QAAsE,OAAtE;AACA,SAASC,qBAAqB,IAAIC,eAAlC,QAAyD,iCAAzD;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;;AACA,IAAIH,qBAAqB;AAAG;AAAe,YAAY;EACnD,SAASA,qBAAT,CAA+BI,EAA/B,EAAmC;IAC/B,IAAIC,WAAW,GAAGD,EAAE,CAACC,WAArB;IAAA,IAAkCC,WAAW,GAAGF,EAAE,CAACE,WAAnD;IACA,KAAKC,eAAL,GAAuB,IAAIN,eAAJ,CAAoBI,WAApB,EAAiCC,WAAjC,CAAvB;IACA,KAAKE,UAAL,GAAkBH,WAAlB;EACH;;EACDL,qBAAqB,CAACS,SAAtB,CAAgCC,WAAhC,GAA8C,UAAUC,IAAV,EAAgBC,YAAhB,EAA8B;IACxE,IAAIC,aAAa,GAAGX,gBAAgB,CAACS,IAAD,CAApC;IACA,IAAIG,kBAAkB,GAAGX,qBAAqB,CAACU,aAAD,EAAgB;MAC1DN,eAAe,EAAE,KAAKA,eADoC;MAE1DK,YAAY,EAAEA,YAF4C;MAG1DG,MAAM,EAAE,KAAKP;IAH6C,CAAhB,CAA9C;IAKA,OAAOM,kBAAP;EACH,CARD;;EASAd,qBAAqB,CAACS,SAAtB,CAAgCO,SAAhC,GAA4C,UAAUC,KAAV,EAAiBC,UAAjB,EAA6B;IACrE,IAAId,EAAJ,CADqE,CAErE;;;IACA,IAAIe,IAAI,GAAG,IAAX;;IACA,IAAIC,kBAAkB,GAAG,YAAY;MACjC,OAAOxB,gBAAgB,CAAC,IAAD,EAAOyB,SAAP,EAAkB,YAAY;QACjD,IAAIC,OAAJ,EAAaC,SAAb,EAAwBC,KAAxB,EAA+BC,UAA/B,EAA2CC,KAA3C;;QACA,IAAIC,GAAJ,EAASvB,EAAT;;QACA,OAAOL,WAAW,CAAC,IAAD,EAAO,UAAU6B,EAAV,EAAc;UACnC,QAAQA,EAAE,CAACC,KAAX;YACI,KAAK,CAAL;cACID,EAAE,CAACE,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,CAAb;;cACAT,OAAO,GAAGzB,aAAa,CAACoB,KAAD,CAAvB;cACAW,EAAE,CAACC,KAAH,GAAW,CAAX;;YACJ,KAAK,CAAL;cAAQ,OAAO,CAAC;cAAE;cAAH,EAAc/B,OAAO,CAACwB,OAAO,CAACU,IAAR,EAAD,CAArB,CAAP;;YACR,KAAK,CAAL;cACI,IAAI,EAAET,SAAS,GAAGK,EAAE,CAACK,IAAH,EAAZ,EAAuB,CAACV,SAAS,CAACW,IAApC,CAAJ,EAA+C,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;cAC/CV,KAAK,GAAGD,SAAS,CAACY,KAAlB;cACAV,UAAU,GAAGN,IAAI,CAACZ,eAAL,CAAqB6B,QAArB,CAA8BlB,UAAU,CAACM,KAAD,CAAxC,CAAb;cACA,OAAO,CAAC;cAAE;cAAH,EAAc1B,OAAO,CAAC2B,UAAD,CAArB,CAAP;;YACJ,KAAK,CAAL;cAAQ,OAAO,CAAC;cAAE;cAAH,EAAcG,EAAE,CAACK,IAAH,EAAd,CAAP;;YACR,KAAK,CAAL;cACIL,EAAE,CAACK,IAAH;;cACAL,EAAE,CAACC,KAAH,GAAW,CAAX;;YACJ,KAAK,CAAL;cAAQ,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACR,KAAK,CAAL;cAAQ,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACR,KAAK,CAAL;cACIH,KAAK,GAAGE,EAAE,CAACK,IAAH,EAAR;cACAN,GAAG,GAAG;gBAAEU,KAAK,EAAEX;cAAT,CAAN;cACA,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACJ,KAAK,CAAL;cACIE,EAAE,CAACE,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,GAAM,EAAN,EAAU,EAAV,CAAb;;cACA,IAAI,EAAER,SAAS,IAAI,CAACA,SAAS,CAACW,IAAxB,KAAiC9B,EAAE,GAAGkB,OAAO,CAACgB,MAA9C,CAAF,CAAJ,EAA8D,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;cAC9D,OAAO,CAAC;cAAE;cAAH,EAAcxC,OAAO,CAACM,EAAE,CAACmC,IAAH,CAAQjB,OAAR,CAAD,CAArB,CAAP;;YACJ,KAAK,CAAL;cACIM,EAAE,CAACK,IAAH;;cACAL,EAAE,CAACC,KAAH,GAAW,EAAX;;YACJ,KAAK,EAAL;cAAS,OAAO,CAAC;cAAE;cAAH,EAAc,EAAd,CAAP;;YACT,KAAK,EAAL;cACI,IAAIF,GAAJ,EAAS,MAAMA,GAAG,CAACU,KAAV;cACT,OAAO,CAAC;cAAE;cAAH,CAAP;;YACJ,KAAK,EAAL;cAAS,OAAO,CAAC;cAAE;cAAH,CAAP;;YACT,KAAK,EAAL;cAAS,OAAO,CAAC;cAAE;cAAH,EAAcvC,OAAO,CAAC,IAAI0C,UAAJ,CAAe,CAAf,CAAD,CAArB,CAAP;;YACT,KAAK,EAAL;cACA;cACA,OAAO,CAAC;cAAE;cAAH,EAAcZ,EAAE,CAACK,IAAH,EAAd,CAAP;;YACA,KAAK,EAAL;cACI;cACAL,EAAE,CAACK,IAAH;;cACA,OAAO,CAAC;cAAE;cAAH,CAAP;UAxCR;QA0CH,CA3CiB,CAAlB;MA4CH,CA/CsB,CAAvB;IAgDH,CAjDD;;IAkDA,OAAO7B,EAAE,GAAG,EAAL,EACHA,EAAE,CAACqC,MAAM,CAACC,aAAR,CAAF,GAA2BtB,kBADxB,EAEHhB,EAFJ;EAGH,CAzDD;;EA0DA,OAAOJ,qBAAP;AACH,CA1E0C,EAA3C;;AA2EA,SAASA,qBAAT","names":["EventStreamMarshaller","EventMarshaller","getChunkedStream","getUnmarshalledStream","_a","utf8Encoder","utf8Decoder","eventMarshaller","utfEncoder","body","deserializer","chunkedStream","unmarshalledStream","toUtf8","input","serializer","self","serializedIterator","input_1","chunk","payloadBuf","marshall","_b","Uint8Array","Symbol","asyncIterator"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-sdk/eventstream-serde-universal/src/EventStreamMarshaller.ts"],"sourcesContent":["import { EventStreamMarshaller as EventMarshaller } from \"@aws-sdk/eventstream-marshaller\";\nimport { Decoder, Encoder, EventStreamMarshaller as IEventStreamMarshaller, Message } from \"@aws-sdk/types\";\n\nimport { getChunkedStream } from \"./getChunkedStream\";\nimport { getUnmarshalledStream } from \"./getUnmarshalledStream\";\n\nexport interface EventStreamMarshaller extends IEventStreamMarshaller {}\n\nexport interface EventStreamMarshallerOptions {\n  utf8Encoder: Encoder;\n  utf8Decoder: Decoder;\n}\n\nexport class EventStreamMarshaller {\n  private readonly eventMarshaller: EventMarshaller;\n  private readonly utfEncoder: Encoder;\n  constructor({ utf8Encoder, utf8Decoder }: EventStreamMarshallerOptions) {\n    this.eventMarshaller = new EventMarshaller(utf8Encoder, utf8Decoder);\n    this.utfEncoder = utf8Encoder;\n  }\n\n  deserialize<T>(\n    body: AsyncIterable<Uint8Array>,\n    deserializer: (input: { [event: string]: Message }) => Promise<T>\n  ): AsyncIterable<T> {\n    const chunkedStream = getChunkedStream(body);\n    const unmarshalledStream = getUnmarshalledStream(chunkedStream, {\n      eventMarshaller: this.eventMarshaller,\n      deserializer,\n      toUtf8: this.utfEncoder,\n    });\n    return unmarshalledStream;\n  }\n\n  serialize<T>(input: AsyncIterable<T>, serializer: (event: T) => Message): AsyncIterable<Uint8Array> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    const serializedIterator = async function* () {\n      for await (const chunk of input) {\n        const payloadBuf = self.eventMarshaller.marshall(serializer(chunk));\n        yield payloadBuf;\n      }\n      // Ending frame\n      yield new Uint8Array(0);\n    };\n    return {\n      [Symbol.asyncIterator]: serializedIterator,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}