{"ast":null,"code":"export const SIDE_OPTIONS = [\"top\", \"right\", \"bottom\", \"left\"];\nexport const ALIGN_OPTIONS = [\"start\", \"center\", \"end\"];\nexport function getPlacementData(_ref) {\n  let {\n    anchorRect: p,\n    popperSize: c,\n    arrowSize: f,\n    arrowOffset: l = 0,\n    side: d,\n    sideOffset: h = 0,\n    align: x,\n    alignOffset: g = 0,\n    shouldAvoidCollisions: u = !0,\n    collisionBoundariesRect: w,\n    collisionTolerance: m = 0\n  } = _ref;\n  if (!p || !c || !w) return {\n    popperStyles: o,\n    arrowStyles: n\n  };\n\n  const y = function (e, r) {\n    let o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let i = arguments.length > 4 ? arguments[4] : undefined;\n    const p = i ? i.height : 0,\n          a = t(r, e, \"x\"),\n          s = t(r, e, \"y\"),\n          c = s.before - o - p,\n          f = s.after + o + p,\n          l = a.before - o - p,\n          d = a.after + o + p;\n    return {\n      top: {\n        start: {\n          x: a.start + n,\n          y: c\n        },\n        center: {\n          x: a.center,\n          y: c\n        },\n        end: {\n          x: a.end - n,\n          y: c\n        }\n      },\n      right: {\n        start: {\n          x: d,\n          y: s.start + n\n        },\n        center: {\n          x: d,\n          y: s.center\n        },\n        end: {\n          x: d,\n          y: s.end - n\n        }\n      },\n      bottom: {\n        start: {\n          x: a.start + n,\n          y: f\n        },\n        center: {\n          x: a.center,\n          y: f\n        },\n        end: {\n          x: a.end - n,\n          y: f\n        }\n      },\n      left: {\n        start: {\n          x: l,\n          y: s.start + n\n        },\n        center: {\n          x: l,\n          y: s.center\n        },\n        end: {\n          x: l,\n          y: s.end - n\n        }\n      }\n    };\n  }(c, p, h, g, f),\n        b = y[d][x];\n\n  if (!1 === u) {\n    const t = e(b);\n    let o = n;\n    f && (o = i({\n      popperSize: c,\n      arrowSize: f,\n      arrowOffset: l,\n      side: d,\n      align: x\n    }));\n    return {\n      popperStyles: { ...t,\n        \"--radix-popper-transform-origin\": r(c, d, x, l, f)\n      },\n      arrowStyles: o,\n      placedSide: d,\n      placedAlign: x\n    };\n  }\n\n  const S = DOMRect.fromRect({ ...c,\n    ...b\n  }),\n        $ = (O = w, z = m, DOMRect.fromRect({\n    width: O.width - 2 * z,\n    height: O.height - 2 * z,\n    x: O.left + z,\n    y: O.top + z\n  }));\n  var O, z;\n\n  const R = s(S, $),\n        M = y[a(d)][x],\n        D = function (t, e, r) {\n    const o = a(t);\n    return e[t] && !r[o] ? o : t;\n  }(d, R, s(DOMRect.fromRect({ ...c,\n    ...M\n  }), $)),\n        A = function (t, e, r, o, n) {\n    const i = \"top\" === r || \"bottom\" === r,\n          p = i ? \"left\" : \"top\",\n          a = i ? \"right\" : \"bottom\",\n          s = i ? \"width\" : \"height\",\n          c = e[s] > t[s];\n    if ((\"start\" === o || \"center\" === o) && (n[p] && c || n[a] && !c)) return \"end\";\n    if ((\"end\" === o || \"center\" === o) && (n[a] && c || n[p] && !c)) return \"start\";\n    return o;\n  }(c, p, d, x, R),\n        I = e(y[D][A]);\n\n  let C = n;\n  f && (C = i({\n    popperSize: c,\n    arrowSize: f,\n    arrowOffset: l,\n    side: D,\n    align: A\n  }));\n  return {\n    popperStyles: { ...I,\n      \"--radix-popper-transform-origin\": r(c, D, A, l, f)\n    },\n    arrowStyles: C,\n    placedSide: D,\n    placedAlign: A\n  };\n}\n\nfunction t(t, e, r) {\n  const o = t[\"x\" === r ? \"left\" : \"top\"],\n        n = \"x\" === r ? \"width\" : \"height\",\n        i = t[n],\n        p = e[n];\n  return {\n    before: o - p,\n    start: o,\n    center: o + (i - p) / 2,\n    end: o + i - p,\n    after: o + i\n  };\n}\n\nfunction e(t) {\n  return {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    minWidth: \"max-content\",\n    willChange: \"transform\",\n    transform: `translate3d(${Math.round(t.x + window.scrollX)}px, ${Math.round(t.y + window.scrollY)}px, 0)`\n  };\n}\n\nfunction r(t, e, r, o, n) {\n  const i = \"top\" === e || \"bottom\" === e,\n        p = n ? n.width : 0,\n        a = n ? n.height : 0,\n        s = p / 2 + o;\n  let c = \"\",\n      f = \"\";\n  return i ? (c = {\n    start: `${s}px`,\n    center: \"center\",\n    end: t.width - s + \"px\"\n  }[r], f = \"top\" === e ? `${t.height + a}px` : -a + \"px\") : (c = \"left\" === e ? `${t.width + a}px` : -a + \"px\", f = {\n    start: `${s}px`,\n    center: \"center\",\n    end: t.height - s + \"px\"\n  }[r]), `${c} ${f}`;\n}\n\nconst o = {\n  position: \"fixed\",\n  top: 0,\n  left: 0,\n  opacity: 0,\n  transform: \"translate3d(0, -200%, 0)\"\n},\n      n = {\n  position: \"absolute\",\n  opacity: 0\n};\n\nfunction i(_ref2) {\n  let {\n    popperSize: t,\n    arrowSize: e,\n    arrowOffset: r,\n    side: o,\n    align: n\n  } = _ref2;\n  const i = (t.width - e.width) / 2,\n        a = (t.height - e.width) / 2,\n        s = {\n    top: 0,\n    right: 90,\n    bottom: 180,\n    left: -90\n  }[o],\n        c = Math.max(e.width, e.height),\n        f = {\n    width: `${c}px`,\n    height: `${c}px`,\n    transform: `rotate(${s}deg)`,\n    willChange: \"transform\",\n    position: \"absolute\",\n    [o]: \"100%\",\n    direction: p(o, n)\n  };\n  return \"top\" !== o && \"bottom\" !== o || (\"start\" === n && (f.left = `${r}px`), \"center\" === n && (f.left = `${i}px`), \"end\" === n && (f.right = `${r}px`)), \"left\" !== o && \"right\" !== o || (\"start\" === n && (f.top = `${r}px`), \"center\" === n && (f.top = `${a}px`), \"end\" === n && (f.bottom = `${r}px`)), f;\n}\n\nfunction p(t, e) {\n  return (\"top\" !== t && \"right\" !== t || \"end\" !== e) && (\"bottom\" !== t && \"left\" !== t || \"end\" === e) ? \"ltr\" : \"rtl\";\n}\n\nfunction a(t) {\n  return {\n    top: \"bottom\",\n    right: \"left\",\n    bottom: \"top\",\n    left: \"right\"\n  }[t];\n}\n\nfunction s(t, e) {\n  return {\n    top: t.top < e.top,\n    right: t.right > e.right,\n    bottom: t.bottom > e.bottom,\n    left: t.left < e.left\n  };\n}","map":{"version":3,"mappings":"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","names":["SIDE_OPTIONS","ALIGN_OPTIONS","getPlacementData","anchorRect","popperSize","arrowSize","arrowOffset","side","sideOffset","align","alignOffset","shouldAvoidCollisions","collisionBoundariesRect","collisionTolerance","popperStyles","UNMEASURED_POPPER_STYLES","arrowStyles","UNMEASURED_ARROW_STYLES","allPlacementPoints","arrowBaseToTipLength","height","x","getPopperSlotsForAxis","y","topY","before","bottomY","after","leftX","rightX","top","start","center","end","right","bottom","left","getAllPlacementPoints","popperPoint","getPlacementStylesForPoint","getPopperArrowStyles","getTransformOrigin","placedSide","placedAlign","popperRect","DOMRect","fromRect","collisionBoundariesRectWithTolerance","rect","amount","width","popperCollisions","getCollisions","oppositeSidePopperPoint","getOppositeSide","collisions","oppositeSideCollisions","oppositeSide","getSideAccountingForCollisions","anchorSize","isHorizontalSide","startBound","endBound","dimension","isAnchorBigger","getAlignAccountingForCollisions","axis","anchorStart","anchorDimension","popperDimension","point","position","minWidth","willChange","transform","Math","round","window","scrollX","scrollY","arrowBaseLength","opacity","popperCenterX","popperCenterY","rotation","arrowMaxDimension","max","styles","direction","getArrowCssDirection"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@radix-ui/popper/dist/packages/core/popper/src/popper.ts"],"sourcesContent":["import * as CSS from 'csstype';\n\nconst SIDE_OPTIONS = ['top', 'right', 'bottom', 'left'] as const;\nconst ALIGN_OPTIONS = ['start', 'center', 'end'] as const;\n\ntype Axis = 'x' | 'y';\ntype Side = typeof SIDE_OPTIONS[number];\ntype Align = typeof ALIGN_OPTIONS[number];\ntype Point = { x: number; y: number };\ntype Size = { width: number; height: number };\n\ntype GetPlacementDataOptions = {\n  /** The rect of the anchor we are placing around */\n  anchorRect?: ClientRect;\n  /** The size of the popper to place */\n  popperSize?: Size;\n  /** An optional arrow size */\n  arrowSize?: Size;\n  /** An optional arrow offset (along the side, default: 0) */\n  arrowOffset?: number;\n  /** The desired side */\n  side: Side;\n  /** An optional side offset (distance from the side, default: 0)  */\n  sideOffset?: number;\n  /** The desired alignment */\n  align: Align;\n  /** An optional alignment offset (distance along the side, default: 0) */\n  alignOffset?: number;\n  /** An option to turn on/off the collision handling (default: true) */\n  shouldAvoidCollisions?: boolean;\n  /** The rect which represents the boundaries for collision checks */\n  collisionBoundariesRect?: ClientRect;\n  /** The tolerance used for collisions, ie. if we want them to trigger a bit earlier (default: 0) */\n  collisionTolerance?: number;\n};\n\ntype PlacementData = {\n  popperStyles: CSS.Properties;\n  arrowStyles: CSS.Properties;\n  placedSide?: Side;\n  placedAlign?: Align;\n};\n\n/**\n * Given all the information necessary to compute it,\n * this function calculates all the necessary placement data.\n *\n * It will return:\n *\n * - the styles to apply to the popper (including a custom property that is useful to set the transform origin in the right place)\n * - the styles to apply to the arrow\n * - the placed side (because it might have changed because of collisions)\n * - the placed align (because it might have changed because of collisions)\n */\nfunction getPlacementData({\n  anchorRect,\n  popperSize,\n  arrowSize,\n  arrowOffset = 0,\n  side,\n  sideOffset = 0,\n  align,\n  alignOffset = 0,\n  shouldAvoidCollisions = true,\n  collisionBoundariesRect,\n  collisionTolerance = 0,\n}: GetPlacementDataOptions): PlacementData {\n  // if we're not ready to do all the measurements yet,\n  // we return some good default styles\n  if (!anchorRect || !popperSize || !collisionBoundariesRect) {\n    return {\n      popperStyles: UNMEASURED_POPPER_STYLES,\n      arrowStyles: UNMEASURED_ARROW_STYLES,\n    };\n  }\n\n  // pre-compute points for all potential placements\n  const allPlacementPoints = getAllPlacementPoints(\n    popperSize,\n    anchorRect,\n    sideOffset,\n    alignOffset,\n    arrowSize\n  );\n\n  // get point based on side / align\n  const popperPoint = allPlacementPoints[side][align];\n\n  // if we don't need to avoid collisions, we can stop here\n  if (shouldAvoidCollisions === false) {\n    const popperStyles = getPlacementStylesForPoint(popperPoint);\n\n    let arrowStyles = UNMEASURED_ARROW_STYLES;\n    if (arrowSize) {\n      arrowStyles = getPopperArrowStyles({ popperSize, arrowSize, arrowOffset, side, align });\n    }\n\n    const transformOrigin = getTransformOrigin(popperSize, side, align, arrowOffset, arrowSize);\n\n    return {\n      popperStyles: {\n        ...popperStyles,\n        ['--radix-popper-transform-origin' as any]: transformOrigin,\n      },\n      arrowStyles,\n      placedSide: side,\n      placedAlign: align,\n    };\n  }\n\n  // create a new rect as if element had been moved to new placement\n  const popperRect = DOMRect.fromRect({ ...popperSize, ...popperPoint });\n\n  // create a new rect representing the collision boundaries but taking into account any added tolerance\n  const collisionBoundariesRectWithTolerance = getContractedRect(\n    collisionBoundariesRect,\n    collisionTolerance\n  );\n\n  // check for any collisions in new placement\n  const popperCollisions = getCollisions(popperRect, collisionBoundariesRectWithTolerance);\n\n  // do all the same calculations for the opposite side\n  // this is because we need to check for potential collisions if we were to swap side\n  const oppositeSide = getOppositeSide(side);\n  const oppositeSidePopperPoint = allPlacementPoints[oppositeSide][align];\n  const updatedOppositeSidePopperPoint = DOMRect.fromRect({\n    ...popperSize,\n    ...oppositeSidePopperPoint,\n  });\n  const oppositeSidePopperCollisions = getCollisions(\n    updatedOppositeSidePopperPoint,\n    collisionBoundariesRectWithTolerance\n  );\n\n  // adjust side accounting for collisions / opposite side collisions\n  const placedSide = getSideAccountingForCollisions(\n    side,\n    popperCollisions,\n    oppositeSidePopperCollisions\n  );\n\n  // adjust alignnment accounting for collisions\n  const placedAlign = getAlignAccountingForCollisions(\n    popperSize,\n    anchorRect,\n    side,\n    align,\n    popperCollisions\n  );\n\n  const placedPopperPoint = allPlacementPoints[placedSide][placedAlign];\n\n  // compute adjusted popper / arrow styles\n  const popperStyles = getPlacementStylesForPoint(placedPopperPoint);\n\n  let arrowStyles = UNMEASURED_ARROW_STYLES;\n  if (arrowSize) {\n    arrowStyles = getPopperArrowStyles({\n      popperSize,\n      arrowSize,\n      arrowOffset,\n      side: placedSide,\n      align: placedAlign,\n    });\n  }\n\n  const transformOrigin = getTransformOrigin(\n    popperSize,\n    placedSide,\n    placedAlign,\n    arrowOffset,\n    arrowSize\n  );\n\n  return {\n    popperStyles: {\n      ...popperStyles,\n      ['--radix-popper-transform-origin' as any]: transformOrigin,\n    },\n    arrowStyles,\n    placedSide,\n    placedAlign,\n  };\n}\n\ntype AllPlacementPoints = Record<Side, Record<Align, Point>>;\n\nfunction getAllPlacementPoints(\n  popperSize: Size,\n  anchorRect: ClientRect,\n  sideOffset: number = 0,\n  alignOffset: number = 0,\n  arrowSize?: Size\n): AllPlacementPoints {\n  const arrowBaseToTipLength = arrowSize ? arrowSize.height : 0;\n\n  const x = getPopperSlotsForAxis(anchorRect, popperSize, 'x');\n  const y = getPopperSlotsForAxis(anchorRect, popperSize, 'y');\n\n  const topY    = y.before - sideOffset - arrowBaseToTipLength; // prettier-ignore\n  const bottomY = y.after  + sideOffset + arrowBaseToTipLength; // prettier-ignore\n  const leftX   = x.before - sideOffset - arrowBaseToTipLength; // prettier-ignore\n  const rightX  = x.after  + sideOffset + arrowBaseToTipLength; // prettier-ignore\n\n  // prettier-ignore\n  const map: AllPlacementPoints = {\n    top: {\n      start:  { x: x.start + alignOffset, y: topY },\n      center: { x: x.center,              y: topY },\n      end:    { x: x.end - alignOffset,   y: topY },\n    },\n    right: {\n      start:  { x: rightX, y: y.start + alignOffset },\n      center: { x: rightX, y: y.center },\n      end:    { x: rightX, y: y.end - alignOffset },\n    },\n    bottom: {\n      start:  { x: x.start + alignOffset, y: bottomY },\n      center: { x: x.center,              y: bottomY },\n      end:    { x: x.end - alignOffset,   y: bottomY },\n    },\n    left: {\n      start:  { x: leftX, y: y.start + alignOffset },\n      center: { x: leftX, y: y.center },\n      end:    { x: leftX, y: y.end - alignOffset },\n    },\n  };\n\n  return map;\n}\n\nfunction getPopperSlotsForAxis(anchorRect: ClientRect, popperSize: Size, axis: Axis) {\n  const startSide = axis === 'x' ? 'left' : 'top';\n  const anchorStart = anchorRect[startSide];\n\n  const dimension = axis === 'x' ? 'width' : 'height';\n  const anchorDimension = anchorRect[dimension];\n  const popperDimension = popperSize[dimension];\n\n  // prettier-ignore\n  return {\n    before: anchorStart - popperDimension,\n    start:  anchorStart,\n    center: anchorStart + (anchorDimension - popperDimension) / 2,\n    end:    anchorStart + anchorDimension - popperDimension,\n    after:  anchorStart + anchorDimension,\n  };\n}\n\n/**\n * Gets an adjusted side based on collision information\n */\nfunction getSideAccountingForCollisions(\n  /** The side we want to ideally position to */\n  side: Side,\n  /** The collisions for this given side */\n  collisions: Collisions,\n  /** The collisions for the opposite side (if we were to swap side) */\n  oppositeSideCollisions: Collisions\n): Side {\n  const oppositeSide = getOppositeSide(side);\n  // in order to prevent premature jumps\n  // we only swap side if there's enough space to fit on the opposite side\n  return collisions[side] && !oppositeSideCollisions[oppositeSide] ? oppositeSide : side;\n}\n\n/**\n * Gets an adjusted alignment based on collision information\n */\nfunction getAlignAccountingForCollisions(\n  /** The size of the popper to place */\n  popperSize: Size,\n  /** The size of the anchor we are placing around */\n  anchorSize: Size,\n  /** The final side */\n  side: Side,\n  /** The desired align */\n  align: Align,\n  /** The collisions */\n  collisions: Collisions\n): Align {\n  const isHorizontalSide = side === 'top' || side === 'bottom';\n  const startBound = isHorizontalSide ? 'left' : 'top';\n  const endBound = isHorizontalSide ? 'right' : 'bottom';\n  const dimension = isHorizontalSide ? 'width' : 'height';\n  const isAnchorBigger = anchorSize[dimension] > popperSize[dimension];\n\n  if (align === 'start' || align === 'center') {\n    if ((collisions[startBound] && isAnchorBigger) || (collisions[endBound] && !isAnchorBigger)) {\n      return 'end';\n    }\n  }\n\n  if (align === 'end' || align === 'center') {\n    if ((collisions[endBound] && isAnchorBigger) || (collisions[startBound] && !isAnchorBigger)) {\n      return 'start';\n    }\n  }\n\n  return align;\n}\n\nfunction getPlacementStylesForPoint(point: Point): CSS.Properties {\n  const x = Math.round(point.x + window.scrollX);\n  const y = Math.round(point.y + window.scrollY);\n  return {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    minWidth: 'max-content',\n    willChange: 'transform',\n    transform: `translate3d(${x}px, ${y}px, 0)`,\n  };\n}\n\nfunction getTransformOrigin(\n  popperSize: Size,\n  side: Side,\n  align: Align,\n  arrowOffset: number,\n  arrowSize?: Size\n): CSS.Properties['transformOrigin'] {\n  const isHorizontalSide = side === 'top' || side === 'bottom';\n\n  const arrowBaseLength = arrowSize ? arrowSize.width : 0;\n  const arrowBaseToTipLength = arrowSize ? arrowSize.height : 0;\n  const sideOffset = arrowBaseToTipLength;\n  const alignOffset = arrowBaseLength / 2 + arrowOffset;\n\n  let x = '';\n  let y = '';\n\n  if (isHorizontalSide) {\n    x = {\n      start: `${alignOffset}px`,\n      center: 'center',\n      end: `${popperSize.width - alignOffset}px`,\n    }[align];\n\n    y = side === 'top' ? `${popperSize.height + sideOffset}px` : `${-sideOffset}px`;\n  } else {\n    x = side === 'left' ? `${popperSize.width + sideOffset}px` : `${-sideOffset}px`;\n\n    y = {\n      start: `${alignOffset}px`,\n      center: 'center',\n      end: `${popperSize.height - alignOffset}px`,\n    }[align];\n  }\n\n  return `${x} ${y}`;\n}\n\nconst UNMEASURED_POPPER_STYLES: CSS.Properties = {\n  // position: 'fixed' here is important because it will take the popper\n  // out of the flow so it does not disturb the position of the anchor\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  opacity: 0,\n  transform: 'translate3d(0, -200%, 0)',\n};\n\nconst UNMEASURED_ARROW_STYLES: CSS.Properties = {\n  // given the arrow is nested inside the popper,\n  // make sure that it is out of the flow and doesn't hinder then popper's measurement\n  position: 'absolute',\n  opacity: 0,\n};\n\ntype GetArrowStylesOptions = {\n  /** The size of the popper to place */\n  popperSize: Size;\n  /** The size of the arrow itself */\n  arrowSize: Size;\n  /** An offset for the arrow along the align axis */\n  arrowOffset: number;\n  /** The side where the arrow points to */\n  side: Side;\n  /** The alignment of the arrow along the side */\n  align: Align;\n};\n\n/**\n * Computes the styles necessary to position, rotate and align the arrow correctly.\n * It can adjust itself based on anchor/popper size, side/align and an optional offset.\n */\nfunction getPopperArrowStyles({\n  popperSize,\n  arrowSize,\n  arrowOffset,\n  side,\n  align,\n}: GetArrowStylesOptions): CSS.Properties {\n  const popperCenterX = (popperSize.width - arrowSize.width) / 2;\n  const popperCenterY = (popperSize.height - arrowSize.width) / 2;\n\n  const rotationMap = { top: 0, right: 90, bottom: 180, left: -90 };\n  const rotation = rotationMap[side];\n  const arrowMaxDimension = Math.max(arrowSize.width, arrowSize.height);\n\n  const styles: CSS.Properties = {\n    // we make sure we put the arrow inside a 1:1 ratio container\n    // this is to make the rotation handling simpler\n    // as we do no need to worry about changing the transform-origin\n    width: `${arrowMaxDimension}px`,\n    height: `${arrowMaxDimension}px`,\n\n    // rotate the arrow appropriately\n    transform: `rotate(${rotation}deg)`,\n    willChange: 'transform',\n\n    // position the arrow appropriately\n    position: 'absolute',\n    [side]: '100%',\n\n    // Because the arrow gets rotated (see `transform above`)\n    // and we are putting it inside a 1:1 ratio container\n    // we need to adjust the CSS direction from `ltr` to `rtl`\n    // in some circumstances\n    direction: getArrowCssDirection(side, align),\n  };\n\n  if (side === 'top' || side === 'bottom') {\n    if (align === 'start') {\n      styles.left = `${arrowOffset}px`;\n    }\n    if (align === 'center') {\n      styles.left = `${popperCenterX}px`;\n    }\n    if (align === 'end') {\n      styles.right = `${arrowOffset}px`;\n    }\n  }\n\n  if (side === 'left' || side === 'right') {\n    if (align === 'start') {\n      styles.top = `${arrowOffset}px`;\n    }\n    if (align === 'center') {\n      styles.top = `${popperCenterY}px`;\n    }\n    if (align === 'end') {\n      styles.bottom = `${arrowOffset}px`;\n    }\n  }\n\n  return styles;\n}\n\n/**\n * Adjusts the arrow's CSS direction (`ltr` / `rtl`)\n */\nfunction getArrowCssDirection(side: Side, align: Align): CSS.Property.Direction {\n  if ((side === 'top' || side === 'right') && align === 'end') {\n    return 'rtl';\n  }\n\n  if ((side === 'bottom' || side === 'left') && align !== 'end') {\n    return 'rtl';\n  }\n\n  return 'ltr';\n}\n\n/**\n * Gets the opposite side of a given side (ie. top => bottom, left => right, …)\n */\nfunction getOppositeSide(side: Side): Side {\n  const oppositeSides: Record<Side, Side> = {\n    top: 'bottom',\n    right: 'left',\n    bottom: 'top',\n    left: 'right',\n  };\n  return oppositeSides[side];\n}\n\n/**\n * Creates a new rect (`ClientRect`) based on a given one but contracted by\n * a given amout on each side.\n */\nfunction getContractedRect(rect: ClientRect, amount: number) {\n  return DOMRect.fromRect({\n    width: rect.width - amount * 2,\n    height: rect.height - amount * 2,\n    x: rect.left + amount,\n    y: rect.top + amount,\n  });\n}\n\n/**\n * Gets collisions for each side of a rect (top, right, bottom, left)\n */\nfunction getCollisions(\n  /** The rect to test collisions against */\n  rect: ClientRect,\n  /** The rect which represents the boundaries for collision checks */\n  collisionBoundariesRect: ClientRect\n) {\n  return {\n    top: rect.top < collisionBoundariesRect.top,\n    right: rect.right > collisionBoundariesRect.right,\n    bottom: rect.bottom > collisionBoundariesRect.bottom,\n    left: rect.left < collisionBoundariesRect.left,\n  };\n}\n\ntype Collisions = ReturnType<typeof getCollisions>;\n\nexport { getPlacementData, SIDE_OPTIONS, ALIGN_OPTIONS };\nexport type { Side, Align };\n"]},"metadata":{},"sourceType":"module"}