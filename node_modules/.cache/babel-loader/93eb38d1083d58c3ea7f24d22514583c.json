{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\nimport { StorageCache } from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('InMemoryCache');\n/**\n * Customized in-memory cache with LRU implemented\n * @member cacheObj - object which store items\n * @member cacheList - list of keys in the cache with LRU\n * @member curSizeInBytes - current size of the cache\n * @member maxPriority - max of the priority\n * @member cacheSizeLimit - the limit of cache size\n */\n\nvar InMemoryCacheClass =\n/** @class */\nfunction (_super) {\n  __extends(InMemoryCacheClass, _super);\n  /**\n   * initialize the cache\n   *\n   * @param config - the configuration of the cache\n   */\n\n\n  function InMemoryCacheClass(config) {\n    var _this = this;\n\n    var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\n    _this = _super.call(this, cacheConfig) || this;\n    logger.debug('now we start!');\n    _this.cacheList = [];\n    _this.curSizeInBytes = 0;\n    _this.maxPriority = 5;\n    _this.getItem = _this.getItem.bind(_this);\n    _this.setItem = _this.setItem.bind(_this);\n    _this.removeItem = _this.removeItem.bind(_this); // initialize list for every priority\n\n    for (var i = 0; i < _this.maxPriority; i += 1) {\n      _this.cacheList[i] = new CacheList();\n    }\n\n    return _this;\n  }\n  /**\n   * decrease current size of the cache\n   *\n   * @param amount - the amount of the cache size which needs to be decreased\n   */\n\n\n  InMemoryCacheClass.prototype._decreaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes -= amount;\n  };\n  /**\n   * increase current size of the cache\n   *\n   * @param amount - the amount of the cache szie which need to be increased\n   */\n\n\n  InMemoryCacheClass.prototype._increaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes += amount;\n  };\n  /**\n   * check whether item is expired\n   *\n   * @param key - the key of the item\n   *\n   * @return true if the item is expired.\n   */\n\n\n  InMemoryCacheClass.prototype._isExpired = function (key) {\n    var text = CacheObject.getItem(key);\n    var item = JSON.parse(text);\n\n    if (getCurrTime() >= item.expires) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * delete item from cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n\n\n  InMemoryCacheClass.prototype._removeItem = function (prefixedKey, listIdx) {\n    // delete the key from the list\n    this.cacheList[listIdx].removeItem(prefixedKey); // decrease the current size of the cache\n\n    this._decreaseCurSizeInBytes(JSON.parse(CacheObject.getItem(prefixedKey)).byteSize); // finally remove the item from memory\n\n\n    CacheObject.removeItem(prefixedKey);\n  };\n  /**\n   * put item into cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param itemData - the value of the item\n   * @param itemSizeInBytes - the byte size of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n\n\n  InMemoryCacheClass.prototype._setItem = function (prefixedKey, item, listIdx) {\n    // insert the key into the list\n    this.cacheList[listIdx].insertItem(prefixedKey); // increase the current size of the cache\n\n    this._increaseCurSizeInBytes(item.byteSize); // finally add the item into memory\n\n\n    CacheObject.setItem(prefixedKey, JSON.stringify(item));\n  };\n  /**\n   * see whether cache is full\n   *\n   * @param itemSize\n   *\n   * @return true if cache is full\n   */\n\n\n  InMemoryCacheClass.prototype._isCacheFull = function (itemSize) {\n    return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\n  };\n  /**\n   * check whether the cache contains the key\n   *\n   * @param key\n   */\n\n\n  InMemoryCacheClass.prototype.containsKey = function (key) {\n    var prefixedKey = this.config.keyPrefix + key;\n\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      if (this.cacheList[i].containsKey(prefixedKey)) {\n        return i + 1;\n      }\n    }\n\n    return -1;\n  };\n  /**\n   * * Set item into cache. You can put number, string, boolean or object.\n   * The cache will first check whether has the same key.\n   * If it has, it will delete the old item and then put the new item in\n   * The cache will pop out items if it is full\n   * You can specify the cache item options. The cache will abort and output a warning:\n   * If the key is invalid\n   * If the size of the item exceeds itemMaxSize.\n   * If the value is undefined\n   * If incorrect cache item configuration\n   * If error happened with browser storage\n   *\n   * @param key - the key of the item\n   * @param value - the value of the item\n   * @param options - optional, the specified meta-data\n   *\n   * @throws if the item is too big which exceeds the limit of single item size\n   * @throws if the key is invalid\n   */\n\n\n  InMemoryCacheClass.prototype.setItem = function (key, value, options) {\n    var prefixedKey = this.config.keyPrefix + key; // invalid keys\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return;\n    }\n\n    if (typeof value === 'undefined') {\n      logger.warn(\"The value of item should not be undefined!\");\n      return;\n    }\n\n    var cacheItemOptions = {\n      priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\n      expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + getCurrTime()\n    };\n\n    if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n      logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n      return;\n    }\n\n    var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions); // check wether this item is too big;\n\n    if (item.byteSize > this.config.itemMaxSize) {\n      logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n      return;\n    } // if key already in the cache, then delete it.\n\n\n    var presentKeyPrio = this.containsKey(key);\n\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    } // pop out items in the cache when cache is full based on LRU\n    // first start from lowest priority cache list\n\n\n    var cacheListIdx = this.maxPriority - 1;\n\n    while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\n      if (!this.cacheList[cacheListIdx].isEmpty()) {\n        var popedItemKey = this.cacheList[cacheListIdx].getLastItem();\n\n        this._removeItem(popedItemKey, cacheListIdx);\n      } else {\n        cacheListIdx -= 1;\n      }\n    }\n\n    this._setItem(prefixedKey, item, Number(item.priority) - 1);\n  };\n  /**\n   * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n   * If you specified callback function in the options,\n   * then the function will be executed if no such item in the cache\n   * and finally put the return value into cache.\n   * Please make sure the callback function will return the value you want to put into the cache.\n   * The cache will abort output a warning:\n   * If the key is invalid\n   *\n   * @param key - the key of the item\n   * @param options - the options of callback function\n   */\n\n\n  InMemoryCacheClass.prototype.getItem = function (key, options) {\n    var ret = null;\n    var prefixedKey = this.config.keyPrefix + key;\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return null;\n    } // check whether it's in the cachelist\n\n\n    var presentKeyPrio = this.containsKey(key);\n\n    if (presentKeyPrio !== -1) {\n      if (this._isExpired(prefixedKey)) {\n        // if expired, remove that item and return null\n        this._removeItem(prefixedKey, presentKeyPrio - 1);\n      } else {\n        // if not expired, great, return the value and refresh it\n        ret = CacheObject.getItem(prefixedKey);\n        var item = JSON.parse(ret);\n        this.cacheList[item.priority - 1].refresh(prefixedKey);\n        return item.data;\n      }\n    }\n\n    if (options && options.callback !== undefined) {\n      var val = options.callback();\n\n      if (val !== null) {\n        this.setItem(key, val, options);\n      }\n\n      return val;\n    }\n\n    return null;\n  };\n  /**\n   * remove item from the cache\n   *\n   * @param key - the key of the item\n   */\n\n\n  InMemoryCacheClass.prototype.removeItem = function (key) {\n    var prefixedKey = this.config.keyPrefix + key; // check if the key is in the cache\n\n    var presentKeyPrio = this.containsKey(key);\n\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    }\n  };\n  /**\n   * clear the entire cache\n   */\n\n\n  InMemoryCacheClass.prototype.clear = function () {\n    var e_1, _a;\n\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      try {\n        for (var _b = (e_1 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value;\n\n          this._removeItem(key, i);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\n   * Return all the keys in the cache.\n   */\n\n\n  InMemoryCacheClass.prototype.getAllKeys = function () {\n    var e_2, _a;\n\n    var keys = [];\n\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      try {\n        for (var _b = (e_2 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value;\n          keys.push(key.substring(this.config.keyPrefix.length));\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n\n    return keys;\n  };\n  /**\n   * return the current size of the cache\n   *\n   * @return the current size of the cache\n   */\n\n\n  InMemoryCacheClass.prototype.getCacheCurSize = function () {\n    return this.curSizeInBytes;\n  };\n  /**\n   * Return a new instance of cache with customized configuration.\n   * @param config - the customized configuration\n   */\n\n\n  InMemoryCacheClass.prototype.createInstance = function (config) {\n    return new InMemoryCacheClass(config);\n  };\n\n  return InMemoryCacheClass;\n}(StorageCache);\n\nexport { InMemoryCacheClass };\nexport var InMemoryCache = new InMemoryCacheClass();\n/**\n * @deprecated use named import\n */\n\nexport default InMemoryCache;","map":{"version":3,"mappings":"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","names":["CacheList","defaultConfig","getCurrTime","CacheObject","StorageCache","ConsoleLogger","Logger","logger","__extends","config","cacheConfig","Object","assign","_this","debug","cacheList","curSizeInBytes","maxPriority","getItem","bind","setItem","removeItem","i","InMemoryCacheClass","amount","key","text","item","JSON","parse","expires","prefixedKey","listIdx","_decreaseCurSizeInBytes","byteSize","insertItem","_increaseCurSizeInBytes","stringify","itemSize","capacityInBytes","keyPrefix","containsKey","value","options","cacheCurSizeKey","warn","cacheItemOptions","priority","undefined","defaultPriority","defaultTTL","fillCacheItem","itemMaxSize","presentKeyPrio","_removeItem","cacheListIdx","_isCacheFull","isEmpty","popedItemKey","getLastItem","_setItem","Number","ret","_isExpired","refresh","data","callback","val","getKeys","_c","keys","push","substring","length","InMemoryCache"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/cache/src/InMemoryCache.ts"],"sourcesContent":["/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\n\r\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\r\n\r\nimport { StorageCache } from './StorageCache';\r\nimport { ICache, CacheConfig, CacheItem, CacheItemOptions } from './types';\r\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\r\n\r\nconst logger = new Logger('InMemoryCache');\r\n\r\n/**\r\n * Customized in-memory cache with LRU implemented\r\n * @member cacheObj - object which store items\r\n * @member cacheList - list of keys in the cache with LRU\r\n * @member curSizeInBytes - current size of the cache\r\n * @member maxPriority - max of the priority\r\n * @member cacheSizeLimit - the limit of cache size\r\n */\r\nexport class InMemoryCacheClass extends StorageCache implements ICache {\r\n\tprivate cacheList: CacheList[];\r\n\tprivate curSizeInBytes: number;\r\n\tprivate maxPriority: number;\r\n\tprivate cacheSizeLimit: number;\r\n\r\n\t/**\r\n\t * initialize the cache\r\n\t *\r\n\t * @param config - the configuration of the cache\r\n\t */\r\n\tconstructor(config?: CacheConfig) {\r\n\t\tconst cacheConfig = config\r\n\t\t\t? Object.assign({}, defaultConfig, config)\r\n\t\t\t: defaultConfig;\r\n\t\tsuper(cacheConfig);\r\n\t\tlogger.debug('now we start!');\r\n\t\tthis.cacheList = [];\r\n\t\tthis.curSizeInBytes = 0;\r\n\t\tthis.maxPriority = 5;\r\n\r\n\t\tthis.getItem = this.getItem.bind(this);\r\n\t\tthis.setItem = this.setItem.bind(this);\r\n\t\tthis.removeItem = this.removeItem.bind(this);\r\n\r\n\t\t// initialize list for every priority\r\n\t\tfor (let i = 0; i < this.maxPriority; i += 1) {\r\n\t\t\tthis.cacheList[i] = new CacheList();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * decrease current size of the cache\r\n\t *\r\n\t * @param amount - the amount of the cache size which needs to be decreased\r\n\t */\r\n\tprivate _decreaseCurSizeInBytes(amount: number): void {\r\n\t\tthis.curSizeInBytes -= amount;\r\n\t}\r\n\r\n\t/**\r\n\t * increase current size of the cache\r\n\t *\r\n\t * @param amount - the amount of the cache szie which need to be increased\r\n\t */\r\n\tprivate _increaseCurSizeInBytes(amount: number): void {\r\n\t\tthis.curSizeInBytes += amount;\r\n\t}\r\n\r\n\t/**\r\n\t * check whether item is expired\r\n\t *\r\n\t * @param key - the key of the item\r\n\t *\r\n\t * @return true if the item is expired.\r\n\t */\r\n\tprivate _isExpired(key: string): boolean {\r\n\t\tconst text: string | null = CacheObject.getItem(key);\r\n\t\tconst item: CacheItem = JSON.parse(text);\r\n\t\tif (getCurrTime() >= item.expires) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * delete item from cache\r\n\t *\r\n\t * @param prefixedKey - the key of the item\r\n\t * @param listIdx - indicates which cache list the key belongs to\r\n\t */\r\n\tprivate _removeItem(prefixedKey: string, listIdx: number): void {\r\n\t\t// delete the key from the list\r\n\t\tthis.cacheList[listIdx].removeItem(prefixedKey);\r\n\t\t// decrease the current size of the cache\r\n\t\tthis._decreaseCurSizeInBytes(\r\n\t\t\tJSON.parse(CacheObject.getItem(prefixedKey)).byteSize\r\n\t\t);\r\n\t\t// finally remove the item from memory\r\n\t\tCacheObject.removeItem(prefixedKey);\r\n\t}\r\n\r\n\t/**\r\n\t * put item into cache\r\n\t *\r\n\t * @param prefixedKey - the key of the item\r\n\t * @param itemData - the value of the item\r\n\t * @param itemSizeInBytes - the byte size of the item\r\n\t * @param listIdx - indicates which cache list the key belongs to\r\n\t */\r\n\tprivate _setItem(\r\n\t\tprefixedKey: string,\r\n\t\titem: CacheItem,\r\n\t\tlistIdx: number\r\n\t): void {\r\n\t\t// insert the key into the list\r\n\t\tthis.cacheList[listIdx].insertItem(prefixedKey);\r\n\t\t// increase the current size of the cache\r\n\t\tthis._increaseCurSizeInBytes(item.byteSize);\r\n\t\t// finally add the item into memory\r\n\t\tCacheObject.setItem(prefixedKey, JSON.stringify(item));\r\n\t}\r\n\r\n\t/**\r\n\t * see whether cache is full\r\n\t *\r\n\t * @param itemSize\r\n\t *\r\n\t * @return true if cache is full\r\n\t */\r\n\tprivate _isCacheFull(itemSize: number): boolean {\r\n\t\treturn this.curSizeInBytes + itemSize > this.config.capacityInBytes;\r\n\t}\r\n\r\n\t/**\r\n\t * check whether the cache contains the key\r\n\t *\r\n\t * @param key\r\n\t */\r\n\tprivate containsKey(key: string): number {\r\n\t\tconst prefixedKey: string = this.config.keyPrefix + key;\r\n\t\tfor (let i = 0; i < this.maxPriority; i += 1) {\r\n\t\t\tif (this.cacheList[i].containsKey(prefixedKey)) {\r\n\t\t\t\treturn i + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n\r\n\t/**\r\n\t * * Set item into cache. You can put number, string, boolean or object.\r\n\t * The cache will first check whether has the same key.\r\n\t * If it has, it will delete the old item and then put the new item in\r\n\t * The cache will pop out items if it is full\r\n\t * You can specify the cache item options. The cache will abort and output a warning:\r\n\t * If the key is invalid\r\n\t * If the size of the item exceeds itemMaxSize.\r\n\t * If the value is undefined\r\n\t * If incorrect cache item configuration\r\n\t * If error happened with browser storage\r\n\t *\r\n\t * @param key - the key of the item\r\n\t * @param value - the value of the item\r\n\t * @param options - optional, the specified meta-data\r\n\t *\r\n\t * @throws if the item is too big which exceeds the limit of single item size\r\n\t * @throws if the key is invalid\r\n\t */\r\n\tpublic setItem(\r\n\t\tkey: string,\r\n\t\tvalue: object | string | number | boolean,\r\n\t\toptions?: CacheItemOptions\r\n\t): void {\r\n\t\tconst prefixedKey: string = this.config.keyPrefix + key;\r\n\t\t// invalid keys\r\n\t\tif (\r\n\t\t\tprefixedKey === this.config.keyPrefix ||\r\n\t\t\tprefixedKey === this.cacheCurSizeKey\r\n\t\t) {\r\n\t\t\tlogger.warn(`Invalid key: should not be empty or 'CurSize'`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (typeof value === 'undefined') {\r\n\t\t\tlogger.warn(`The value of item should not be undefined!`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst cacheItemOptions: CacheItemOptions = {\r\n\t\t\tpriority:\r\n\t\t\t\toptions && options.priority !== undefined\r\n\t\t\t\t\t? options.priority\r\n\t\t\t\t\t: this.config.defaultPriority,\r\n\t\t\texpires:\r\n\t\t\t\toptions && options.expires !== undefined\r\n\t\t\t\t\t? options.expires\r\n\t\t\t\t\t: this.config.defaultTTL + getCurrTime(),\r\n\t\t};\r\n\r\n\t\tif (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\r\n\t\t\tlogger.warn(\r\n\t\t\t\t`Invalid parameter: priority due to out or range. It should be within 1 and 5.`\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst item: CacheItem = this.fillCacheItem(\r\n\t\t\tprefixedKey,\r\n\t\t\tvalue,\r\n\t\t\tcacheItemOptions\r\n\t\t);\r\n\r\n\t\t// check wether this item is too big;\r\n\t\tif (item.byteSize > this.config.itemMaxSize) {\r\n\t\t\tlogger.warn(\r\n\t\t\t\t`Item with key: ${key} you are trying to put into is too big!`\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// if key already in the cache, then delete it.\r\n\t\tconst presentKeyPrio: number = this.containsKey(key);\r\n\t\tif (presentKeyPrio !== -1) {\r\n\t\t\tthis._removeItem(prefixedKey, presentKeyPrio - 1);\r\n\t\t}\r\n\r\n\t\t// pop out items in the cache when cache is full based on LRU\r\n\t\t// first start from lowest priority cache list\r\n\t\tlet cacheListIdx = this.maxPriority - 1;\r\n\t\twhile (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\r\n\t\t\tif (!this.cacheList[cacheListIdx].isEmpty()) {\r\n\t\t\t\tconst popedItemKey = this.cacheList[cacheListIdx].getLastItem();\r\n\t\t\t\tthis._removeItem(popedItemKey, cacheListIdx);\r\n\t\t\t} else {\r\n\t\t\t\tcacheListIdx -= 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._setItem(prefixedKey, item, Number(item.priority) - 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\r\n\t * If you specified callback function in the options,\r\n\t * then the function will be executed if no such item in the cache\r\n\t * and finally put the return value into cache.\r\n\t * Please make sure the callback function will return the value you want to put into the cache.\r\n\t * The cache will abort output a warning:\r\n\t * If the key is invalid\r\n\t *\r\n\t * @param key - the key of the item\r\n\t * @param options - the options of callback function\r\n\t */\r\n\tpublic getItem(key: string, options?: CacheItemOptions): any {\r\n\t\tlet ret: string | null = null;\r\n\t\tconst prefixedKey: string = this.config.keyPrefix + key;\r\n\r\n\t\tif (\r\n\t\t\tprefixedKey === this.config.keyPrefix ||\r\n\t\t\tprefixedKey === this.cacheCurSizeKey\r\n\t\t) {\r\n\t\t\tlogger.warn(`Invalid key: should not be empty or 'CurSize'`);\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// check whether it's in the cachelist\r\n\t\tconst presentKeyPrio: number = this.containsKey(key);\r\n\t\tif (presentKeyPrio !== -1) {\r\n\t\t\tif (this._isExpired(prefixedKey)) {\r\n\t\t\t\t// if expired, remove that item and return null\r\n\t\t\t\tthis._removeItem(prefixedKey, presentKeyPrio - 1);\r\n\t\t\t} else {\r\n\t\t\t\t// if not expired, great, return the value and refresh it\r\n\t\t\t\tret = CacheObject.getItem(prefixedKey);\r\n\t\t\t\tconst item: CacheItem = JSON.parse(ret);\r\n\t\t\t\tthis.cacheList[item.priority - 1].refresh(prefixedKey);\r\n\t\t\t\treturn item.data;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (options && options.callback !== undefined) {\r\n\t\t\tconst val: object | string | number | boolean = options.callback();\r\n\t\t\tif (val !== null) {\r\n\t\t\t\tthis.setItem(key, val, options);\r\n\t\t\t}\r\n\t\t\treturn val;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * remove item from the cache\r\n\t *\r\n\t * @param key - the key of the item\r\n\t */\r\n\tpublic removeItem(key: string): void {\r\n\t\tconst prefixedKey: string = this.config.keyPrefix + key;\r\n\r\n\t\t// check if the key is in the cache\r\n\t\tconst presentKeyPrio: number = this.containsKey(key);\r\n\t\tif (presentKeyPrio !== -1) {\r\n\t\t\tthis._removeItem(prefixedKey, presentKeyPrio - 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * clear the entire cache\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tfor (let i = 0; i < this.maxPriority; i += 1) {\r\n\t\t\tfor (const key of this.cacheList[i].getKeys()) {\r\n\t\t\t\tthis._removeItem(key, i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return all the keys in the cache.\r\n\t */\r\n\tpublic getAllKeys(): string[] {\r\n\t\tconst keys: string[] = [];\r\n\t\tfor (let i = 0; i < this.maxPriority; i += 1) {\r\n\t\t\tfor (const key of this.cacheList[i].getKeys()) {\r\n\t\t\t\tkeys.push(key.substring(this.config.keyPrefix.length));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn keys;\r\n\t}\r\n\r\n\t/**\r\n\t * return the current size of the cache\r\n\t *\r\n\t * @return the current size of the cache\r\n\t */\r\n\tpublic getCacheCurSize(): number {\r\n\t\treturn this.curSizeInBytes;\r\n\t}\r\n\r\n\t/**\r\n\t * Return a new instance of cache with customized configuration.\r\n\t * @param config - the customized configuration\r\n\t */\r\n\tpublic createInstance(config: CacheConfig): ICache {\r\n\t\treturn new InMemoryCacheClass(config);\r\n\t}\r\n}\r\n\r\nexport const InMemoryCache: ICache = new InMemoryCacheClass();\r\n/**\r\n * @deprecated use named import\r\n */\r\nexport default InMemoryCache;\r\n"]},"metadata":{},"sourceType":"module"}