{"ast":null,"code":"/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeServiceClient, PostTextCommand, PostContentCommand } from '@aws-sdk/client-lex-runtime-service';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/convert';\nvar logger = new Logger('AWSLexProvider');\n\nvar AWSLexProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSLexProvider, _super);\n\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n\n  AWSLexProvider.prototype.reportBotStatus = function (data, botname) {\n    var _this = this; // Check if state is fulfilled to resolve onFullfilment promise\n\n\n    logger.debug('postContent state', data.dialogState);\n\n    if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](null, {\n            slots: data.slots\n          });\n        }, 0);\n      }\n\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, {\n            slots: data.slots\n          });\n        }, 0);\n      }\n    }\n\n    if (data.dialogState === 'Failed') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname]('Bot conversation failed');\n        }, 0);\n      }\n\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete('Bot conversation failed');\n        }, 0);\n      }\n    }\n  };\n\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, params, postTextCommand, data, err_1, content, messageType, postContentCommand, data, audioArray, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._config[botname]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _a.sent();\n\n            if (!credentials) {\n              return [2\n              /*return*/\n              , Promise.reject('No credentials')];\n            }\n\n            this.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            if (!(typeof message === 'string')) return [3\n            /*break*/\n            , 6];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              inputText: message,\n              userId: credentials.identityId\n            };\n            logger.debug('postText to lex', message);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            postTextCommand = new PostTextCommand(params);\n            return [4\n            /*yield*/\n            , this.lexRuntimeServiceClient.send(postTextCommand)];\n\n          case 3:\n            data = _a.sent();\n            this.reportBotStatus(data, botname);\n            return [2\n            /*return*/\n            , data];\n\n          case 4:\n            err_1 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 5:\n            return [3\n            /*break*/\n            , 11];\n\n          case 6:\n            content = message.content, messageType = message.options.messageType;\n\n            if (messageType === 'voice') {\n              params = {\n                botAlias: this._config[botname].alias,\n                botName: botname,\n                contentType: 'audio/x-l16; sample-rate=16000',\n                inputStream: content,\n                userId: credentials.identityId,\n                accept: 'audio/mpeg'\n              };\n            } else {\n              params = {\n                botAlias: this._config[botname].alias,\n                botName: botname,\n                contentType: 'text/plain; charset=utf-8',\n                inputStream: content,\n                userId: credentials.identityId,\n                accept: 'audio/mpeg'\n              };\n            }\n\n            logger.debug('postContent to lex', message);\n            _a.label = 7;\n\n          case 7:\n            _a.trys.push([7, 10,, 11]);\n\n            postContentCommand = new PostContentCommand(params);\n            return [4\n            /*yield*/\n            , this.lexRuntimeServiceClient.send(postContentCommand)];\n\n          case 8:\n            data = _a.sent();\n            return [4\n            /*yield*/\n            , convert(data.audioStream)];\n\n          case 9:\n            audioArray = _a.sent();\n            this.reportBotStatus(data, botname);\n            return [2\n            /*return*/\n            , __assign(__assign({}, data), {\n              audioStream: audioArray\n            })];\n\n          case 10:\n            err_2 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_2)];\n\n          case 11:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    if (!this._config[botname]) {\n      throw new ErrorEvent('Bot ' + botname + ' does not exist');\n    }\n\n    this._botsCompleteCallback[botname] = callback;\n  };\n\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\n\nexport { AWSLexProvider };","map":{"version":3,"mappings":"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","names":["AbstractInteractionsProvider","LexRuntimeServiceClient","PostTextCommand","PostContentCommand","ConsoleLogger","Logger","Credentials","getAmplifyUserAgent","convert","logger","__extends","options","_super","_this","_botsCompleteCallback","AWSLexProvider","data","botname","debug","dialogState","setTimeout","slots","_config","onComplete","message","Promise","reject","get","credentials","_a","lexRuntimeServiceClient","region","customUserAgent","params","botAlias","alias","botName","inputText","userId","identityId","postTextCommand","send","reportBotStatus","err_1","content","messageType","contentType","inputStream","accept","postContentCommand","audioStream","audioArray","err_2","callback","ErrorEvent"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/interactions/src/Providers/AWSLexProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport {\n\tInteractionsOptions,\n\tInteractionsResponse,\n\tInteractionsMessage,\n} from '../types';\nimport {\n\tLexRuntimeServiceClient,\n\tPostTextCommand,\n\tPostContentCommand,\n} from '@aws-sdk/client-lex-runtime-service';\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/convert';\n\nconst logger = new Logger('AWSLexProvider');\n\nexport class AWSLexProvider extends AbstractInteractionsProvider {\n\tprivate lexRuntimeServiceClient: LexRuntimeServiceClient;\n\tprivate _botsCompleteCallback: object;\n\n\tconstructor(options: InteractionsOptions = {}) {\n\t\tsuper(options);\n\t\tthis._botsCompleteCallback = {};\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AWSLexProvider';\n\t}\n\n\treportBotStatus(data, botname) {\n\t\t// Check if state is fulfilled to resolve onFullfilment promise\n\t\tlogger.debug('postContent state', data.dialogState);\n\t\tif (\n\t\t\tdata.dialogState === 'ReadyForFulfillment' ||\n\t\t\tdata.dialogState === 'Fulfilled'\n\t\t) {\n\t\t\tif (typeof this._botsCompleteCallback[botname] === 'function') {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() =>\n\t\t\t\t\t\tthis._botsCompleteCallback[botname](null, { slots: data.slots }),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis._config &&\n\t\t\t\ttypeof this._config[botname].onComplete === 'function'\n\t\t\t) {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._config[botname].onComplete(null, { slots: data.slots }),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (data.dialogState === 'Failed') {\n\t\t\tif (typeof this._botsCompleteCallback[botname] === 'function') {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._botsCompleteCallback[botname]('Bot conversation failed'),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis._config &&\n\t\t\t\ttypeof this._config[botname].onComplete === 'function'\n\t\t\t) {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._config[botname].onComplete('Bot conversation failed'),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync sendMessage(\n\t\tbotname: string,\n\t\tmessage: string | InteractionsMessage\n\t): Promise<InteractionsResponse> {\n\t\tif (!this._config[botname]) {\n\t\t\treturn Promise.reject('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tthis.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n\t\t\tregion: this._config[botname].region,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet params;\n\t\tif (typeof message === 'string') {\n\t\t\tparams = {\n\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\tbotName: botname,\n\t\t\t\tinputText: message,\n\t\t\t\tuserId: credentials.identityId,\n\t\t\t};\n\n\t\t\tlogger.debug('postText to lex', message);\n\n\t\t\ttry {\n\t\t\t\tconst postTextCommand = new PostTextCommand(params);\n\t\t\t\tconst data = await this.lexRuntimeServiceClient.send(postTextCommand);\n\t\t\t\tthis.reportBotStatus(data, botname);\n\t\t\t\treturn data;\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t} else {\n\t\t\tconst {\n\t\t\t\tcontent,\n\t\t\t\toptions: { messageType },\n\t\t\t} = message;\n\t\t\tif (messageType === 'voice') {\n\t\t\t\tparams = {\n\t\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\t\tbotName: botname,\n\t\t\t\t\tcontentType: 'audio/x-l16; sample-rate=16000',\n\t\t\t\t\tinputStream: content,\n\t\t\t\t\tuserId: credentials.identityId,\n\t\t\t\t\taccept: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tparams = {\n\t\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\t\tbotName: botname,\n\t\t\t\t\tcontentType: 'text/plain; charset=utf-8',\n\t\t\t\t\tinputStream: content,\n\t\t\t\t\tuserId: credentials.identityId,\n\t\t\t\t\taccept: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t}\n\t\t\tlogger.debug('postContent to lex', message);\n\t\t\ttry {\n\t\t\t\tconst postContentCommand = new PostContentCommand(params);\n\t\t\t\tconst data = await this.lexRuntimeServiceClient.send(\n\t\t\t\t\tpostContentCommand\n\t\t\t\t);\n\t\t\t\tconst audioArray = await convert(data.audioStream);\n\t\t\t\tthis.reportBotStatus(data, botname);\n\t\t\t\treturn { ...data, ...{ audioStream: audioArray } };\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t}\n\t}\n\n\tonComplete(botname: string, callback) {\n\t\tif (!this._config[botname]) {\n\t\t\tthrow new ErrorEvent('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tthis._botsCompleteCallback[botname] = callback;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}