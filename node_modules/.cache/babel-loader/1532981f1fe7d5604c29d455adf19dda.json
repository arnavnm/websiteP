{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { HttpResponse } from \"@aws-sdk/protocol-http\";\n/**\n * In case of an internal error/terminated connection, S3 operations may return 200 errors. CopyObject, UploadPartCopy,\n * CompleteMultipartUpload may return empty payload or payload with only xml Preamble.\n * @internal\n */\n\nexport var throw200ExceptionsMiddleware = function (config) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var result, response, statusCode, body, bodyBytes, bodyString, err;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , next(args)];\n\n            case 1:\n              result = _a.sent();\n              response = result.response;\n              if (!HttpResponse.isInstance(response)) return [2\n              /*return*/\n              , result];\n              statusCode = response.statusCode, body = response.body;\n              if (statusCode < 200 && statusCode >= 300) return [2\n              /*return*/\n              , result];\n              return [4\n              /*yield*/\n              , collectBody(body, config)];\n\n            case 2:\n              bodyBytes = _a.sent();\n              return [4\n              /*yield*/\n              , collectBodyString(bodyBytes, config)];\n\n            case 3:\n              bodyString = _a.sent();\n\n              if (bodyBytes.length === 0) {\n                err = new Error(\"S3 aborted request\");\n                err.name = \"InternalError\";\n                throw err;\n              }\n\n              if (bodyString && bodyString.match(\"<Error>\")) {\n                // Set the error code to 4XX so that error deserializer can parse them\n                response.statusCode = 400;\n              } // Body stream is consumed and paused at this point. So replace the response.body to the collected bytes.\n              // So that the deserializer can consume the body as normal.\n\n\n              response.body = bodyBytes;\n              return [2\n              /*return*/\n              , result];\n          }\n        });\n      });\n    };\n  };\n}; // Collect low-level response body stream to Uint8Array.\n\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n}; // Encode Uint8Array data into string with utf-8.\n\n\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\n/**\n * @internal\n */\n\n\nexport var throw200ExceptionsMiddlewareOptions = {\n  relation: \"after\",\n  toMiddleware: \"deserializerMiddleware\",\n  tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n  name: \"throw200ExceptionsMiddleware\",\n  override: true\n};\n/**\n *\n * @internal\n */\n\nexport var getThrow200ExceptionsPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","throw200ExceptionsMiddleware","config","next","args","result","_a","response","isInstance","statusCode","body","collectBody","bodyBytes","collectBodyString","bodyString","length","err","Error","name","match","streamBody","context","Uint8Array","Promise","resolve","streamCollector","then","utf8Encoder","throw200ExceptionsMiddlewareOptions","relation","toMiddleware","tags","override","getThrow200ExceptionsPlugin","applyToStack","clientStack","addRelativeTo"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-sdk/middleware-sdk-s3/src/throw-200-exceptions.ts"],"sourcesContent":["import { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { DeserializeMiddleware, Encoder, Pluggable, RelativeMiddlewareOptions, StreamCollector } from \"@aws-sdk/types\";\n\ntype PreviouslyResolved = {\n  streamCollector: StreamCollector;\n  utf8Encoder: Encoder;\n};\n\n/**\n * In case of an internal error/terminated connection, S3 operations may return 200 errors. CopyObject, UploadPartCopy,\n * CompleteMultipartUpload may return empty payload or payload with only xml Preamble.\n * @internal\n */\nexport const throw200ExceptionsMiddleware = (config: PreviouslyResolved): DeserializeMiddleware<any, any> => (\n  next\n) => async (args) => {\n  const result = await next(args);\n  const { response } = result;\n  if (!HttpResponse.isInstance(response)) return result;\n  const { statusCode, body } = response;\n  if (statusCode < 200 && statusCode >= 300) return result;\n\n  // Throw 2XX response that's either an error or has empty body.\n  const bodyBytes = await collectBody(body, config);\n  const bodyString = await collectBodyString(bodyBytes, config);\n  if (bodyBytes.length === 0) {\n    const err = new Error(\"S3 aborted request\");\n    err.name = \"InternalError\";\n    throw err;\n  }\n  if (bodyString && bodyString.match(\"<Error>\")) {\n    // Set the error code to 4XX so that error deserializer can parse them\n    response.statusCode = 400;\n  }\n\n  // Body stream is consumed and paused at this point. So replace the response.body to the collected bytes.\n  // So that the deserializer can consume the body as normal.\n  response.body = bodyBytes;\n  return result;\n};\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: PreviouslyResolved): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: PreviouslyResolved): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\n/**\n * @internal\n */\nexport const throw200ExceptionsMiddlewareOptions: RelativeMiddlewareOptions = {\n  relation: \"after\",\n  toMiddleware: \"deserializerMiddleware\",\n  tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n  name: \"throw200ExceptionsMiddleware\",\n  override: true,\n};\n\n/**\n *\n * @internal\n */\nexport const getThrow200ExceptionsPlugin = (config: PreviouslyResolved): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}