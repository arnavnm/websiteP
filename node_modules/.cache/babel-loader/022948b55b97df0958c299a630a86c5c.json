{"ast":null,"code":"var __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { makeCamelCaseArray, makeCamelCase } from './Utils';\n\nfunction getBoundingBox(geometry) {\n  if (!geometry) return undefined;\n  return makeCamelCase(geometry.BoundingBox);\n}\n\nfunction getPolygon(geometry) {\n  if (!geometry) return undefined;\n  return makeCamelCaseArray(Array.from(geometry.Polygon));\n}\n/**\n * Organizes blocks from Rekognition API to each of the categories and and structures\n * their data accordingly.\n * @param {BlockList} source - Array containing blocks returned from Textract API.\n * @return {IdentifyTextOutput} -  Object that categorizes each block and its information.\n */\n\n\nexport function categorizeRekognitionBlocks(blocks) {\n  // Skeleton IdentifyText API response. We will populate it as we iterate through blocks.\n  var response = {\n    text: {\n      fullText: '',\n      words: [],\n      lines: [],\n      linesDetailed: []\n    }\n  }; // We categorize each block by running a forEach loop through them.\n\n  blocks.forEach(function (block) {\n    switch (block.Type) {\n      case 'LINE':\n        response.text.lines.push(block.DetectedText);\n        response.text.linesDetailed.push({\n          text: block.DetectedText,\n          polygon: getPolygon(block.Geometry),\n          boundingBox: getBoundingBox(block.Geometry),\n          page: null\n        });\n        break;\n\n      case 'WORD':\n        response.text.fullText += block.DetectedText + ' ';\n        response.text.words.push({\n          text: block.DetectedText,\n          polygon: getPolygon(block.Geometry),\n          boundingBox: getBoundingBox(block.Geometry)\n        });\n        break;\n    }\n  }); // remove trailing space of fullText\n\n  response.text.fullText = response.text.fullText.substr(0, response.text.fullText.length - 1);\n  return response;\n}\n/**\n * Organizes blocks from Textract API to each of the categories and and structures\n * their data accordingly.\n * @param {BlockList} source - Array containing blocks returned from Textract API.\n * @return {IdentifyTextOutput} -  Object that categorizes each block and its information.\n */\n\nexport function categorizeTextractBlocks(blocks) {\n  // Skeleton IdentifyText API response. We will populate it as we iterate through blocks.\n  var response = {\n    text: {\n      fullText: '',\n      words: [],\n      lines: [],\n      linesDetailed: []\n    }\n  }; // if blocks is an empty array, ie. textract did not detect anything, return empty response.\n\n  if (blocks.length === 0) return response;\n  /**\n   * We categorize each of the blocks by running a forEach loop through them.\n   *\n   * For complex structures such as Tables and KeyValue, we need to trasverse through their children. To do so,\n   * we will post-process them after the for each loop. We do this by storing table and keyvalues in arrays and\n   * mapping other blocks in `blockMap` (id to block) so we can reference them easily later.\n   *\n   * Note that we do not map `WORD` and `TABLE` in `blockMap` because they will not be referenced by any other\n   * block except the Page block.\n   */\n\n  var tableBlocks = Array();\n  var keyValueBlocks = Array();\n  var blockMap = {};\n  blocks.forEach(function (block) {\n    switch (block.BlockType) {\n      case 'LINE':\n        response.text.lines.push(block.Text);\n        response.text.linesDetailed.push({\n          text: block.Text,\n          polygon: getPolygon(block.Geometry),\n          boundingBox: getBoundingBox(block.Geometry),\n          page: block.Page\n        });\n        break;\n\n      case 'WORD':\n        response.text.fullText += block.Text + ' ';\n        response.text.words.push({\n          text: block.Text,\n          polygon: getPolygon(block.Geometry),\n          boundingBox: getBoundingBox(block.Geometry)\n        });\n        blockMap[block.Id] = block;\n        break;\n\n      case 'SELECTION_ELEMENT':\n        var selectionStatus = block.SelectionStatus === 'SELECTED' ? true : false;\n        if (!response.text.selections) response.text.selections = [];\n        response.text.selections.push({\n          selected: selectionStatus,\n          polygon: getPolygon(block.Geometry),\n          boundingBox: getBoundingBox(block.Geometry)\n        });\n        blockMap[block.Id] = block;\n        break;\n\n      case 'TABLE':\n        tableBlocks.push(block);\n        break;\n\n      case 'KEY_VALUE_SET':\n        keyValueBlocks.push(block);\n        blockMap[block.Id] = block;\n        break;\n\n      default:\n        blockMap[block.Id] = block;\n    }\n  }); // remove trailing space in fullText\n\n  response.text.fullText = response.text.fullText.substr(0, response.text.fullText.length - 1); // Post-process complex structures if they exist.\n\n  if (tableBlocks.length !== 0) {\n    var tableResponse_1 = Array();\n    tableBlocks.forEach(function (table) {\n      tableResponse_1.push(constructTable(table, blockMap));\n    });\n    response.text.tables = tableResponse_1;\n  }\n\n  if (keyValueBlocks.length !== 0) {\n    var keyValueResponse_1 = Array();\n    keyValueBlocks.forEach(function (keyValue) {\n      // We need the KeyValue blocks of EntityType = `KEY`, which has both key and value references.\n      var entityTypes = Array.from(keyValue.EntityTypes);\n\n      if (entityTypes.indexOf('KEY') !== -1) {\n        keyValueResponse_1.push(constructKeyValue(keyValue, blockMap));\n      }\n    });\n    response.text.keyValues = keyValueResponse_1;\n  }\n\n  return response;\n}\n/**\n * Constructs a table object using data from its children cells.\n * @param {Block} table - Table block that has references (`Relationships`) to its cells\n * @param {[id: string]: Block} blockMap - Maps block Ids to blocks.\n */\n\nexport function constructTable(table, blockMap) {\n  var e_1, _a, e_2, _b;\n\n  var tableMatrix;\n  tableMatrix = [];\n\n  try {\n    // visit each of the cell associated with the table's relationship.\n    for (var _c = __values(table.Relationships), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var tableRelation = _d.value;\n\n      try {\n        for (var _e = (e_2 = void 0, __values(tableRelation.Ids)), _f = _e.next(); !_f.done; _f = _e.next()) {\n          var cellId = _f.value;\n          var cellBlock = blockMap[cellId];\n          var row = cellBlock.RowIndex - 1; // textract starts indexing at 1, so subtract it by 1.\n\n          var col = cellBlock.ColumnIndex - 1; // textract starts indexing at 1, so subtract it by 1.\n          // extract data contained inside the cell.\n\n          var content = extractContentsFromBlock(cellBlock, blockMap);\n          var cell = {\n            text: content.text,\n            boundingBox: getBoundingBox(cellBlock.Geometry),\n            polygon: getPolygon(cellBlock.Geometry),\n            selected: content.selected,\n            rowSpan: cellBlock.RowSpan,\n            columnSpan: cellBlock.ColumnSpan\n          };\n          if (!tableMatrix[row]) tableMatrix[row] = [];\n          tableMatrix[row][col] = cell;\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  var rowSize = tableMatrix.length;\n  var columnSize = tableMatrix[0].length; // Note that we leave spanned cells undefined for distinction\n\n  return {\n    size: {\n      rows: rowSize,\n      columns: columnSize\n    },\n    table: tableMatrix,\n    boundingBox: getBoundingBox(table.Geometry),\n    polygon: getPolygon(table.Geometry)\n  };\n}\n/**\n * Constructs a key value object from its children key and value blocks.\n * @param {Block} KeyValue - KeyValue block that has references (`Relationships`) to its children.\n * @param {[id: string]: Block} blockMap - Maps block Ids to blocks.\n */\n\nexport function constructKeyValue(keyBlock, blockMap) {\n  var e_3, _a, e_4, _b;\n\n  var keyText = '';\n  var valueText = '';\n  var valueSelected;\n\n  try {\n    for (var _c = __values(keyBlock.Relationships), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var keyValueRelation = _d.value;\n\n      if (keyValueRelation.Type === 'CHILD') {\n        // relation refers to key\n        var contents = extractContentsFromBlock(keyBlock, blockMap);\n        keyText = contents.text;\n      } else if (keyValueRelation.Type === 'VALUE') {\n        try {\n          // relation refers to value\n          for (var _e = (e_4 = void 0, __values(keyValueRelation.Ids)), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var valueId = _f.value;\n            var valueBlock = blockMap[valueId];\n            var contents = extractContentsFromBlock(valueBlock, blockMap);\n            valueText = contents.text;\n            if (contents.selected != null) valueSelected = contents.selected;\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n      }\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n\n  return {\n    key: keyText,\n    value: {\n      text: valueText,\n      selected: valueSelected\n    },\n    polygon: getPolygon(keyBlock.Geometry),\n    boundingBox: getBoundingBox(keyBlock.Geometry)\n  };\n}\n/**\n * Extracts text and selection from input block's children.\n * @param {Block}} block - Block that we want to extract contents from.\n * @param {[id: string]: Block} blockMap - Maps block Ids to blocks.\n */\n\nexport function extractContentsFromBlock(block, blockMap) {\n  var e_5, _a, e_6, _b;\n\n  var words = '';\n  var isSelected;\n\n  if (!block.Relationships) {\n    // some block might have no content\n    return {\n      text: '',\n      selected: undefined\n    };\n  }\n\n  try {\n    for (var _c = __values(block.Relationships), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var relation = _d.value;\n\n      try {\n        for (var _e = (e_6 = void 0, __values(relation.Ids)), _f = _e.next(); !_f.done; _f = _e.next()) {\n          var contentId = _f.value;\n          var contentBlock = blockMap[contentId];\n\n          if (contentBlock.BlockType === 'WORD') {\n            words += contentBlock.Text + ' ';\n          } else if (contentBlock.BlockType === 'SELECTION_ELEMENT') {\n            isSelected = contentBlock.SelectionStatus === 'SELECTED' ? true : false;\n          }\n        }\n      } catch (e_6_1) {\n        e_6 = {\n          error: e_6_1\n        };\n      } finally {\n        try {\n          if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n        } finally {\n          if (e_6) throw e_6.error;\n        }\n      }\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n\n  words = words.substr(0, words.length - 1); // remove trailing space.\n\n  return {\n    text: words,\n    selected: isSelected\n  };\n}","map":{"version":3,"mappings":"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","names":["makeCamelCaseArray","makeCamelCase","getBoundingBox","geometry","undefined","BoundingBox","getPolygon","Array","from","Polygon","categorizeRekognitionBlocks","blocks","response","text","fullText","words","lines","linesDetailed","forEach","block","Type","push","DetectedText","polygon","Geometry","boundingBox","page","substr","length","categorizeTextractBlocks","tableBlocks","keyValueBlocks","blockMap","BlockType","Text","Page","Id","selectionStatus","SelectionStatus","selections","selected","tableResponse_1","constructTable","table","tables","keyValueResponse_1","entityTypes","keyValue","EntityTypes","indexOf","constructKeyValue","keyValues","tableMatrix","Relationships","_d","tableRelation","Ids","_f","cellId","cellBlock","row","RowIndex","col","ColumnIndex","content","extractContentsFromBlock","cell","rowSpan","RowSpan","columnSpan","ColumnSpan","rowSize","columnSize","size","rows","columns","keyBlock","keyText","valueText","valueSelected","keyValueRelation","contents","valueId","valueBlock","key","value","isSelected","relation","contentId","contentBlock"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/predictions/src/Providers/IdentifyTextUtils.ts"],"sourcesContent":["import {\n\tIdentifyTextOutput,\n\tTable,\n\tKeyValue,\n\tTableCell,\n\tContent,\n\tBoundingBox,\n\tPolygon,\n\tGeometry,\n} from '../types';\nimport { Block, BlockList, TextDetectionList } from '../types/AWSTypes';\nimport { makeCamelCaseArray, makeCamelCase } from './Utils';\n\nfunction getBoundingBox(geometry: Geometry): BoundingBox {\n\tif (!geometry) return undefined;\n\treturn makeCamelCase(geometry.BoundingBox);\n}\n\nfunction getPolygon(geometry: Geometry): Polygon {\n\tif (!geometry) return undefined;\n\treturn makeCamelCaseArray(Array.from(geometry.Polygon));\n}\n\n/**\n * Organizes blocks from Rekognition API to each of the categories and and structures\n * their data accordingly.\n * @param {BlockList} source - Array containing blocks returned from Textract API.\n * @return {IdentifyTextOutput} -  Object that categorizes each block and its information.\n */\nexport function categorizeRekognitionBlocks(\n\tblocks: TextDetectionList\n): IdentifyTextOutput {\n\t// Skeleton IdentifyText API response. We will populate it as we iterate through blocks.\n\tconst response: IdentifyTextOutput = {\n\t\ttext: {\n\t\t\tfullText: '',\n\t\t\twords: [],\n\t\t\tlines: [],\n\t\t\tlinesDetailed: [],\n\t\t},\n\t};\n\t// We categorize each block by running a forEach loop through them.\n\tblocks.forEach(block => {\n\t\tswitch (block.Type) {\n\t\t\tcase 'LINE':\n\t\t\t\tresponse.text.lines.push(block.DetectedText);\n\t\t\t\tresponse.text.linesDetailed.push({\n\t\t\t\t\ttext: block.DetectedText,\n\t\t\t\t\tpolygon: getPolygon(block.Geometry),\n\t\t\t\t\tboundingBox: getBoundingBox(block.Geometry),\n\t\t\t\t\tpage: null, // rekognition doesn't have this info\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'WORD':\n\t\t\t\tresponse.text.fullText += block.DetectedText + ' ';\n\t\t\t\tresponse.text.words.push({\n\t\t\t\t\ttext: block.DetectedText,\n\t\t\t\t\tpolygon: getPolygon(block.Geometry),\n\t\t\t\t\tboundingBox: getBoundingBox(block.Geometry),\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t}\n\t});\n\t// remove trailing space of fullText\n\tresponse.text.fullText = response.text.fullText.substr(\n\t\t0,\n\t\tresponse.text.fullText.length - 1\n\t);\n\treturn response;\n}\n\n/**\n * Organizes blocks from Textract API to each of the categories and and structures\n * their data accordingly.\n * @param {BlockList} source - Array containing blocks returned from Textract API.\n * @return {IdentifyTextOutput} -  Object that categorizes each block and its information.\n */\nexport function categorizeTextractBlocks(\n\tblocks: BlockList\n): IdentifyTextOutput {\n\t// Skeleton IdentifyText API response. We will populate it as we iterate through blocks.\n\tconst response: IdentifyTextOutput = {\n\t\ttext: {\n\t\t\tfullText: '',\n\t\t\twords: [],\n\t\t\tlines: [],\n\t\t\tlinesDetailed: [],\n\t\t},\n\t};\n\t// if blocks is an empty array, ie. textract did not detect anything, return empty response.\n\tif (blocks.length === 0) return response;\n\t/**\n\t * We categorize each of the blocks by running a forEach loop through them.\n\t *\n\t * For complex structures such as Tables and KeyValue, we need to trasverse through their children. To do so,\n\t * we will post-process them after the for each loop. We do this by storing table and keyvalues in arrays and\n\t * mapping other blocks in `blockMap` (id to block) so we can reference them easily later.\n\t *\n\t * Note that we do not map `WORD` and `TABLE` in `blockMap` because they will not be referenced by any other\n\t * block except the Page block.\n\t */\n\tconst tableBlocks: BlockList = Array();\n\tconst keyValueBlocks: BlockList = Array();\n\tconst blockMap: { [id: string]: Block } = {};\n\n\tblocks.forEach(block => {\n\t\tswitch (block.BlockType) {\n\t\t\tcase 'LINE':\n\t\t\t\tresponse.text.lines.push(block.Text);\n\t\t\t\tresponse.text.linesDetailed.push({\n\t\t\t\t\ttext: block.Text,\n\t\t\t\t\tpolygon: getPolygon(block.Geometry),\n\t\t\t\t\tboundingBox: getBoundingBox(block.Geometry),\n\t\t\t\t\tpage: block.Page,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'WORD':\n\t\t\t\tresponse.text.fullText += block.Text + ' ';\n\t\t\t\tresponse.text.words.push({\n\t\t\t\t\ttext: block.Text,\n\t\t\t\t\tpolygon: getPolygon(block.Geometry),\n\t\t\t\t\tboundingBox: getBoundingBox(block.Geometry),\n\t\t\t\t});\n\t\t\t\tblockMap[block.Id] = block;\n\t\t\t\tbreak;\n\t\t\tcase 'SELECTION_ELEMENT':\n\t\t\t\tconst selectionStatus =\n\t\t\t\t\tblock.SelectionStatus === 'SELECTED' ? true : false;\n\t\t\t\tif (!response.text.selections) response.text.selections = [];\n\t\t\t\tresponse.text.selections.push({\n\t\t\t\t\tselected: selectionStatus,\n\t\t\t\t\tpolygon: getPolygon(block.Geometry),\n\t\t\t\t\tboundingBox: getBoundingBox(block.Geometry),\n\t\t\t\t});\n\t\t\t\tblockMap[block.Id] = block;\n\t\t\t\tbreak;\n\t\t\tcase 'TABLE':\n\t\t\t\ttableBlocks.push(block);\n\t\t\t\tbreak;\n\t\t\tcase 'KEY_VALUE_SET':\n\t\t\t\tkeyValueBlocks.push(block);\n\t\t\t\tblockMap[block.Id] = block;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tblockMap[block.Id] = block;\n\t\t}\n\t});\n\t// remove trailing space in fullText\n\tresponse.text.fullText = response.text.fullText.substr(\n\t\t0,\n\t\tresponse.text.fullText.length - 1\n\t);\n\n\t// Post-process complex structures if they exist.\n\tif (tableBlocks.length !== 0) {\n\t\tconst tableResponse: Table[] = Array();\n\t\ttableBlocks.forEach(table => {\n\t\t\ttableResponse.push(constructTable(table, blockMap));\n\t\t});\n\t\tresponse.text.tables = tableResponse;\n\t}\n\tif (keyValueBlocks.length !== 0) {\n\t\tconst keyValueResponse: KeyValue[] = Array();\n\t\tkeyValueBlocks.forEach(keyValue => {\n\t\t\t// We need the KeyValue blocks of EntityType = `KEY`, which has both key and value references.\n\t\t\tconst entityTypes = Array.from(keyValue.EntityTypes);\n\t\t\tif (entityTypes.indexOf('KEY') !== -1) {\n\t\t\t\tkeyValueResponse.push(constructKeyValue(keyValue, blockMap));\n\t\t\t}\n\t\t});\n\t\tresponse.text.keyValues = keyValueResponse;\n\t}\n\treturn response;\n}\n\n/**\n * Constructs a table object using data from its children cells.\n * @param {Block} table - Table block that has references (`Relationships`) to its cells\n * @param {[id: string]: Block} blockMap - Maps block Ids to blocks.\n */\nexport function constructTable(\n\ttable: Block,\n\tblockMap: { [key: string]: Block }\n): Table {\n\tlet tableMatrix: TableCell[][];\n\ttableMatrix = [];\n\t// visit each of the cell associated with the table's relationship.\n\tfor (const tableRelation of table.Relationships) {\n\t\tfor (const cellId of tableRelation.Ids) {\n\t\t\tconst cellBlock: Block = blockMap[cellId];\n\t\t\tconst row = cellBlock.RowIndex - 1; // textract starts indexing at 1, so subtract it by 1.\n\t\t\tconst col = cellBlock.ColumnIndex - 1; // textract starts indexing at 1, so subtract it by 1.\n\t\t\t// extract data contained inside the cell.\n\t\t\tconst content = extractContentsFromBlock(cellBlock, blockMap);\n\t\t\tconst cell: TableCell = {\n\t\t\t\ttext: content.text,\n\t\t\t\tboundingBox: getBoundingBox(cellBlock.Geometry),\n\t\t\t\tpolygon: getPolygon(cellBlock.Geometry),\n\t\t\t\tselected: content.selected,\n\t\t\t\trowSpan: cellBlock.RowSpan,\n\t\t\t\tcolumnSpan: cellBlock.ColumnSpan,\n\t\t\t};\n\t\t\tif (!tableMatrix[row]) tableMatrix[row] = [];\n\t\t\ttableMatrix[row][col] = cell;\n\t\t}\n\t}\n\tconst rowSize = tableMatrix.length;\n\tconst columnSize = tableMatrix[0].length;\n\t// Note that we leave spanned cells undefined for distinction\n\treturn {\n\t\tsize: { rows: rowSize, columns: columnSize },\n\t\ttable: tableMatrix,\n\t\tboundingBox: getBoundingBox(table.Geometry),\n\t\tpolygon: getPolygon(table.Geometry),\n\t};\n}\n\n/**\n * Constructs a key value object from its children key and value blocks.\n * @param {Block} KeyValue - KeyValue block that has references (`Relationships`) to its children.\n * @param {[id: string]: Block} blockMap - Maps block Ids to blocks.\n */\nexport function constructKeyValue(\n\tkeyBlock: Block,\n\tblockMap: { [key: string]: Block }\n): KeyValue {\n\tlet keyText: string = '';\n\tlet valueText: string = '';\n\tlet valueSelected: boolean;\n\tfor (const keyValueRelation of keyBlock.Relationships) {\n\t\tif (keyValueRelation.Type === 'CHILD') {\n\t\t\t// relation refers to key\n\t\t\tconst contents = extractContentsFromBlock(keyBlock, blockMap);\n\t\t\tkeyText = contents.text;\n\t\t} else if (keyValueRelation.Type === 'VALUE') {\n\t\t\t// relation refers to value\n\t\t\tfor (const valueId of keyValueRelation.Ids) {\n\t\t\t\tconst valueBlock = blockMap[valueId];\n\t\t\t\tconst contents = extractContentsFromBlock(valueBlock, blockMap);\n\t\t\t\tvalueText = contents.text;\n\t\t\t\tif (contents.selected != null) valueSelected = contents.selected;\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tkey: keyText,\n\t\tvalue: { text: valueText, selected: valueSelected },\n\t\tpolygon: getPolygon(keyBlock.Geometry),\n\t\tboundingBox: getBoundingBox(keyBlock.Geometry),\n\t};\n}\n\n/**\n * Extracts text and selection from input block's children.\n * @param {Block}} block - Block that we want to extract contents from.\n * @param {[id: string]: Block} blockMap - Maps block Ids to blocks.\n */\nexport function extractContentsFromBlock(\n\tblock: Block,\n\tblockMap: { [id: string]: Block }\n): Content {\n\tlet words: string = '';\n\tlet isSelected: boolean;\n\n\tif (!block.Relationships) {\n\t\t// some block might have no content\n\t\treturn { text: '', selected: undefined };\n\t}\n\tfor (const relation of block.Relationships) {\n\t\tfor (const contentId of relation.Ids) {\n\t\t\tconst contentBlock = blockMap[contentId];\n\t\t\tif (contentBlock.BlockType === 'WORD') {\n\t\t\t\twords += contentBlock.Text + ' ';\n\t\t\t} else if (contentBlock.BlockType === 'SELECTION_ELEMENT') {\n\t\t\t\tisSelected = contentBlock.SelectionStatus === 'SELECTED' ? true : false;\n\t\t\t}\n\t\t}\n\t}\n\n\twords = words.substr(0, words.length - 1); // remove trailing space.\n\treturn { text: words, selected: isSelected };\n}\n"]},"metadata":{},"sourceType":"module"}