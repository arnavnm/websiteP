{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CompareFacesRequest, CompareFacesResponse } from \"../models/models_0\";\nimport { deserializeAws_json1_1CompareFacesCommand, serializeAws_json1_1CompareFacesCommand } from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Compares a face in the <i>source</i> input image with\n *       each of the 100 largest faces detected in the <i>target</i> input image.\n *     </p>\n *          <note>\n *             <p> If the source image contains multiple faces, the service detects the largest face\n *         and compares it with each face detected in the target image. </p>\n *          </note>\n *\n *\n *          <p>You pass the input and target images either as base64-encoded image bytes or as\n *       references to images in an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes isn't\n *       supported. The image must be formatted as a PNG or JPEG file. </p>\n *          <p>In response, the operation returns an array of face matches ordered by similarity score\n *       in descending order. For each face match, the response provides a bounding box of the face,\n *       facial landmarks, pose details (pitch, role, and yaw), quality (brightness and sharpness), and\n *       confidence value (indicating the level of confidence that the bounding box contains a face).\n *       The response also provides a similarity score, which indicates how closely the faces match. </p>\n *\n *          <note>\n *             <p>By default, only faces with a similarity score of greater than or equal to 80% are\n *         returned in the response. You can change this value by specifying the\n *           <code>SimilarityThreshold</code> parameter.</p>\n *          </note>\n *\n *          <p>\n *             <code>CompareFaces</code> also returns an array of faces that don't match the source image.\n *       For each face, it returns a bounding box, confidence value, landmarks, pose details, and quality.\n *     The response also returns information about the face in the source image, including the bounding box\n *       of the face and confidence value.</p>\n *\n *          <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces\n *       that donâ€™t meet a required quality bar. The quality bar is based on a\n *       variety of common use cases.  Use <code>QualityFilter</code> to set the quality bar\n *       by specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>.\n *       If you do not want to filter detected faces, specify <code>NONE</code>. The default value is <code>NONE</code>. </p>\n *\n *          <p>If the image doesn't contain Exif metadata, <code>CompareFaces</code> returns orientation information for the\n *         source and target images. Use these values to display the images with the correct image orientation.</p>\n *          <p>If no faces are detected in the source or target images, <code>CompareFaces</code> returns an\n *     <code>InvalidParameterException</code> error. </p>\n *\n *\n *          <note>\n *             <p> This is a stateless API operation. That is, data returned by this operation doesn't persist.</p>\n *          </note>\n *\n *\n *          <p>For an example, see Comparing Faces in Images in the Amazon Rekognition Developer Guide.</p>\n *          <p>This operation requires permissions to perform the <code>rekognition:CompareFaces</code>\n *       action.</p>\n */\n\nvar CompareFacesCommand =\n/** @class */\nfunction (_super) {\n  __extends(CompareFacesCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function CompareFacesCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  CompareFacesCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"RekognitionClient\";\n    var commandName = \"CompareFacesCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: CompareFacesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CompareFacesResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  CompareFacesCommand.prototype.serialize = function (input, context) {\n    return serializeAws_json1_1CompareFacesCommand(input, context);\n  };\n\n  CompareFacesCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_json1_1CompareFacesCommand(output, context);\n  };\n\n  return CompareFacesCommand;\n}($Command);\n\nexport { CompareFacesCommand };","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,QAA0D,oBAA1D;AACA,SAASC,yCAAT,EAAoDC,uCAApD,QAAoG,0BAApG;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,mBAAmB;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACvDT,SAAS,CAACQ,mBAAD,EAAsBC,MAAtB,CAAT,CADuD,CAEvD;EACA;;;EACA,SAASD,mBAAT,CAA6BE,KAA7B,EAAoC;IAChC,IAAIC,KAAK,GACT;IACAF,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;IAGAD,KAAK,CAACD,KAAN,GAAcA,KAAd;IACA,OAAOC,KAAP,CALgC,CAMhC;EACH;EACD;AACJ;AACA;;;EACIH,mBAAmB,CAACK,SAApB,CAA8BC,iBAA9B,GAAkD,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;IAC7F,KAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,IAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;IACA,IAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;IACA,IAAIC,UAAU,GAAG,mBAAjB;IACA,IAAIC,WAAW,GAAG,qBAAlB;IACA,IAAIC,uBAAuB,GAAG;MAC1BH,MAAM,EAAEA,MADkB;MAE1BC,UAAU,EAAEA,UAFc;MAG1BC,WAAW,EAAEA,WAHa;MAI1BE,uBAAuB,EAAE3B,mBAAmB,CAAC4B,kBAJnB;MAK1BC,wBAAwB,EAAE5B,oBAAoB,CAAC2B;IALrB,CAA9B;IAOA,IAAIE,cAAc,GAAGf,aAAa,CAACe,cAAnC;IACA,OAAOT,KAAK,CAACU,OAAN,CAAc,UAAUC,OAAV,EAAmB;MACpC,OAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuChB,OAAO,IAAI,EAAlD,CAAP;IACH,CAFM,EAEJU,uBAFI,CAAP;EAGH,CAjBD;;EAkBAnB,mBAAmB,CAACK,SAApB,CAA8BO,SAA9B,GAA0C,UAAUV,KAAV,EAAiByB,OAAjB,EAA0B;IAChE,OAAO/B,uCAAuC,CAACM,KAAD,EAAQyB,OAAR,CAA9C;EACH,CAFD;;EAGA3B,mBAAmB,CAACK,SAApB,CAA8BQ,WAA9B,GAA4C,UAAUe,MAAV,EAAkBD,OAAlB,EAA2B;IACnE,OAAOhC,yCAAyC,CAACiC,MAAD,EAASD,OAAT,CAAhD;EACH,CAFD;;EAGA,OAAO3B,mBAAP;AACH,CAxCwC,CAwCvCD,QAxCuC,CAAzC;;AAyCA,SAASC,mBAAT","names":["CompareFacesRequest","CompareFacesResponse","deserializeAws_json1_1CompareFacesCommand","serializeAws_json1_1CompareFacesCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","CompareFacesCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/client-rekognition/commands/CompareFacesCommand.ts"],"sourcesContent":["import { RekognitionClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../RekognitionClient\";\nimport { CompareFacesRequest, CompareFacesResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_json1_1CompareFacesCommand,\n  serializeAws_json1_1CompareFacesCommand,\n} from \"../protocols/Aws_json1_1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type CompareFacesCommandInput = CompareFacesRequest;\nexport type CompareFacesCommandOutput = CompareFacesResponse & __MetadataBearer;\n\n/**\n * <p>Compares a face in the <i>source</i> input image with\n *       each of the 100 largest faces detected in the <i>target</i> input image.\n *     </p>\n *          <note>\n *             <p> If the source image contains multiple faces, the service detects the largest face\n *         and compares it with each face detected in the target image. </p>\n *          </note>\n *\n *\n *          <p>You pass the input and target images either as base64-encoded image bytes or as\n *       references to images in an Amazon S3 bucket. If you use the\n *       AWS\n *       CLI to call Amazon Rekognition operations, passing image bytes isn't\n *       supported. The image must be formatted as a PNG or JPEG file. </p>\n *          <p>In response, the operation returns an array of face matches ordered by similarity score\n *       in descending order. For each face match, the response provides a bounding box of the face,\n *       facial landmarks, pose details (pitch, role, and yaw), quality (brightness and sharpness), and\n *       confidence value (indicating the level of confidence that the bounding box contains a face).\n *       The response also provides a similarity score, which indicates how closely the faces match. </p>\n *\n *          <note>\n *             <p>By default, only faces with a similarity score of greater than or equal to 80% are\n *         returned in the response. You can change this value by specifying the\n *           <code>SimilarityThreshold</code> parameter.</p>\n *          </note>\n *\n *          <p>\n *             <code>CompareFaces</code> also returns an array of faces that don't match the source image.\n *       For each face, it returns a bounding box, confidence value, landmarks, pose details, and quality.\n *     The response also returns information about the face in the source image, including the bounding box\n *       of the face and confidence value.</p>\n *\n *          <p>The <code>QualityFilter</code> input parameter allows you to filter out detected faces\n *       that donâ€™t meet a required quality bar. The quality bar is based on a\n *       variety of common use cases.  Use <code>QualityFilter</code> to set the quality bar\n *       by specifying <code>LOW</code>, <code>MEDIUM</code>, or <code>HIGH</code>.\n *       If you do not want to filter detected faces, specify <code>NONE</code>. The default value is <code>NONE</code>. </p>\n *\n *          <p>If the image doesn't contain Exif metadata, <code>CompareFaces</code> returns orientation information for the\n *         source and target images. Use these values to display the images with the correct image orientation.</p>\n *          <p>If no faces are detected in the source or target images, <code>CompareFaces</code> returns an\n *     <code>InvalidParameterException</code> error. </p>\n *\n *\n *          <note>\n *             <p> This is a stateless API operation. That is, data returned by this operation doesn't persist.</p>\n *          </note>\n *\n *\n *          <p>For an example, see Comparing Faces in Images in the Amazon Rekognition Developer Guide.</p>\n *          <p>This operation requires permissions to perform the <code>rekognition:CompareFaces</code>\n *       action.</p>\n */\nexport class CompareFacesCommand extends $Command<\n  CompareFacesCommandInput,\n  CompareFacesCommandOutput,\n  RekognitionClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: CompareFacesCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: RekognitionClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<CompareFacesCommandInput, CompareFacesCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"RekognitionClient\";\n    const commandName = \"CompareFacesCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: CompareFacesRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: CompareFacesResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: CompareFacesCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_json1_1CompareFacesCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<CompareFacesCommandOutput> {\n    return deserializeAws_json1_1CompareFacesCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}