{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { Storage as StorageClass } from './Storage';\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Storage');\nvar _instance = null;\n\nvar getInstance = function getInstance() {\n  if (_instance) {\n    return _instance;\n  }\n\n  logger.debug('Create Storage Instance, debug');\n  _instance = new StorageClass();\n  _instance.vault = new StorageClass();\n  var old_configure = _instance.configure;\n\n  _instance.configure = function (options) {\n    logger.debug('storage configure called');\n\n    var vaultConfig = __assign({}, old_configure.call(_instance, options)); // set level private for each provider for the vault\n\n\n    Object.keys(vaultConfig).forEach(function (providerName) {\n      if (typeof vaultConfig[providerName] !== 'string') {\n        vaultConfig[providerName] = __assign(__assign({}, vaultConfig[providerName]), {\n          level: 'private'\n        });\n      }\n    });\n    logger.debug('storage vault configure called');\n\n    _instance.vault.configure(vaultConfig);\n  };\n\n  return _instance;\n};\n\nexport var Storage = getInstance();\nAmplify.register(Storage);\n/**\n * @deprecated use named import\n */\n\nexport default Storage;\nexport { StorageClass };\nexport * from './providers';","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;IACpC,KAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;MACA,KAAK,IAAII,CAAT,IAAcL,CAAd;QAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;MADJ;IAEH;;IACD,OAAON,CAAP;EACH,CAPD;;EAQA,OAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,SAASO,OAAO,IAAIC,YAApB,QAAwC,WAAxC;AACA,SAASC,OAAT,EAAkBC,aAAa,IAAIC,MAAnC,QAAiD,mBAAjD;AACA,IAAIC,MAAM,GAAG,IAAID,MAAJ,CAAW,SAAX,CAAb;AACA,IAAIE,SAAS,GAAG,IAAhB;;AACA,IAAIC,WAAW,GAAG,SAAdA,WAAc,GAAY;EAC1B,IAAID,SAAJ,EAAe;IACX,OAAOA,SAAP;EACH;;EACDD,MAAM,CAACG,KAAP,CAAa,gCAAb;EACAF,SAAS,GAAG,IAAIL,YAAJ,EAAZ;EACAK,SAAS,CAACG,KAAV,GAAkB,IAAIR,YAAJ,EAAlB;EACA,IAAIS,aAAa,GAAGJ,SAAS,CAACK,SAA9B;;EACAL,SAAS,CAACK,SAAV,GAAsB,UAAUC,OAAV,EAAmB;IACrCP,MAAM,CAACG,KAAP,CAAa,0BAAb;;IACA,IAAIK,WAAW,GAAG3B,QAAQ,CAAC,EAAD,EAAKwB,aAAa,CAACZ,IAAd,CAAmBQ,SAAnB,EAA8BM,OAA9B,CAAL,CAA1B,CAFqC,CAGrC;;;IACAzB,MAAM,CAAC2B,IAAP,CAAYD,WAAZ,EAAyBE,OAAzB,CAAiC,UAAUC,YAAV,EAAwB;MACrD,IAAI,OAAOH,WAAW,CAACG,YAAD,CAAlB,KAAqC,QAAzC,EAAmD;QAC/CH,WAAW,CAACG,YAAD,CAAX,GAA4B9B,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK2B,WAAW,CAACG,YAAD,CAAhB,CAAT,EAA0C;UAAEC,KAAK,EAAE;QAAT,CAA1C,CAApC;MACH;IACJ,CAJD;IAKAZ,MAAM,CAACG,KAAP,CAAa,gCAAb;;IACAF,SAAS,CAACG,KAAV,CAAgBE,SAAhB,CAA0BE,WAA1B;EACH,CAXD;;EAYA,OAAOP,SAAP;AACH,CArBD;;AAsBA,OAAO,IAAIN,OAAO,GAAGO,WAAW,EAAzB;AACPL,OAAO,CAACgB,QAAR,CAAiBlB,OAAjB;AACA;AACA;AACA;;AACA,eAAeA,OAAf;AACA,SAASC,YAAT;AACA,cAAc,aAAd","names":["Storage","StorageClass","Amplify","ConsoleLogger","Logger","logger","_instance","getInstance","debug","vault","old_configure","configure","vaultConfig","call","options","Object","keys","forEach","providerName","__assign","level","register"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/storage/src/index.ts"],"sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { Storage as StorageClass } from './Storage';\n\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\n\nconst logger = new Logger('Storage');\n\nlet _instance: StorageClass = null;\n\nconst getInstance = () => {\n\tif (_instance) {\n\t\treturn _instance;\n\t}\n\tlogger.debug('Create Storage Instance, debug');\n\t_instance = new StorageClass();\n\t_instance.vault = new StorageClass();\n\n\tconst old_configure = _instance.configure;\n\t_instance.configure = options => {\n\t\tlogger.debug('storage configure called');\n\t\tconst vaultConfig = { ...old_configure.call(_instance, options) };\n\n\t\t// set level private for each provider for the vault\n\t\tObject.keys(vaultConfig).forEach(providerName => {\n\t\t\tif (typeof vaultConfig[providerName] !== 'string') {\n\t\t\t\tvaultConfig[providerName] = {\n\t\t\t\t\t...vaultConfig[providerName],\n\t\t\t\t\tlevel: 'private',\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\tlogger.debug('storage vault configure called');\n\t\t_instance.vault.configure(vaultConfig);\n\t};\n\treturn _instance;\n};\n\nexport const Storage: StorageClass = getInstance();\nAmplify.register(Storage);\n\n/**\n * @deprecated use named import\n */\nexport default Storage;\n\nexport { StorageClass };\nexport * from './providers';\nexport * from './types';\n"]},"metadata":{},"sourceType":"module"}