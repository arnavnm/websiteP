{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSKinesisProvider } from './AWSKinesisProvider';\nimport { PutRecordBatchCommand, FirehoseClient } from '@aws-sdk/client-firehose';\nimport { fromUtf8 } from '@aws-sdk/util-utf8-browser';\nvar logger = new Logger('AWSKineisFirehoseProvider');\n\nvar AWSKinesisFirehoseProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSKinesisFirehoseProvider, _super);\n\n  function AWSKinesisFirehoseProvider(config) {\n    return _super.call(this, config) || this;\n  }\n  /**\n   * get provider name of the plugin\n   */\n\n\n  AWSKinesisFirehoseProvider.prototype.getProviderName = function () {\n    return 'AWSKinesisFirehose';\n  };\n\n  AWSKinesisFirehoseProvider.prototype._sendEvents = function (group) {\n    var _this = this;\n\n    if (group.length === 0) {\n      return;\n    }\n\n    var _a = group[0],\n        config = _a.config,\n        credentials = _a.credentials;\n\n    var initClients = this._init(config, credentials);\n\n    if (!initClients) return false;\n    var records = {};\n    group.map(function (params) {\n      // split by streamName\n      var evt = params.event;\n      var streamName = evt.streamName,\n          data = evt.data;\n\n      if (records[streamName] === undefined) {\n        records[streamName] = [];\n      }\n\n      var bufferData = data && typeof data !== 'string' ? JSON.stringify(data) : data;\n      var Data = fromUtf8(bufferData);\n      var record = {\n        Data: Data\n      };\n      records[streamName].push(record);\n    });\n    Object.keys(records).map(function (streamName) {\n      logger.debug('putting records to kinesis', streamName, 'with records', records[streamName]);\n\n      _this._kinesisFirehose.send(new PutRecordBatchCommand({\n        Records: records[streamName],\n        DeliveryStreamName: streamName\n      })).then(function (res) {\n        return logger.debug('Upload records to stream', streamName);\n      }).catch(function (err) {\n        return logger.debug('Failed to upload records to Kinesis', err);\n      });\n    });\n  };\n\n  AWSKinesisFirehoseProvider.prototype._init = function (config, credentials) {\n    logger.debug('init clients');\n\n    if (this._kinesisFirehose && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n      logger.debug('no change for analytics config, directly return from init');\n      return true;\n    }\n\n    this._config.credentials = credentials;\n    var region = config.region;\n    return this._initFirehose(region, credentials);\n  };\n\n  AWSKinesisFirehoseProvider.prototype._initFirehose = function (region, credentials) {\n    logger.debug('initialize kinesis firehose with credentials', credentials);\n    this._kinesisFirehose = new FirehoseClient({\n      apiVersion: '2015-08-04',\n      region: region,\n      credentials: credentials\n    });\n    return true;\n  };\n\n  return AWSKinesisFirehoseProvider;\n}(AWSKinesisProvider);\n\nexport { AWSKinesisFirehoseProvider };\n/**\n * @deprecated use named import\n */\n\nexport default AWSKinesisFirehoseProvider;","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;EACrD,IAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;MAAEC,SAAS,EAAE;IAAb,aAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;MAAED,CAAC,CAACI,SAAF,GAAcH,CAAd;IAAkB,CAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;MAAE,KAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IAAc,CAF9E;;IAGA,OAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;EACH,CALD;;EAMA,OAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;IACnBF,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;IACA,SAASO,EAAT,GAAc;MAAE,KAAKC,WAAL,GAAmBT,CAAnB;IAAuB;;IACvCA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;EACH,CAJD;AAKH,CAZ2C,EAA5C;;AAaA,SAASI,aAAa,IAAIC,MAA1B,QAAwC,mBAAxC;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,qBAAT,EAAgCC,cAAhC,QAAuD,0BAAvD;AACA,SAASC,QAAT,QAAyB,4BAAzB;AACA,IAAIC,MAAM,GAAG,IAAIL,MAAJ,CAAW,2BAAX,CAAb;;AACA,IAAIM,0BAA0B;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC9DtB,SAAS,CAACqB,0BAAD,EAA6BC,MAA7B,CAAT;;EACA,SAASD,0BAAT,CAAoCE,MAApC,EAA4C;IACxC,OAAOD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBD,MAAlB,KAA6B,IAApC;EACH;EACD;AACJ;AACA;;;EACIF,0BAA0B,CAACT,SAA3B,CAAqCa,eAArC,GAAuD,YAAY;IAC/D,OAAO,oBAAP;EACH,CAFD;;EAGAJ,0BAA0B,CAACT,SAA3B,CAAqCc,WAArC,GAAmD,UAAUC,KAAV,EAAiB;IAChE,IAAIC,KAAK,GAAG,IAAZ;;IACA,IAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;MACpB;IACH;;IACD,IAAIC,EAAE,GAAGH,KAAK,CAAC,CAAD,CAAd;IAAA,IAAmBJ,MAAM,GAAGO,EAAE,CAACP,MAA/B;IAAA,IAAuCQ,WAAW,GAAGD,EAAE,CAACC,WAAxD;;IACA,IAAIC,WAAW,GAAG,KAAKC,KAAL,CAAWV,MAAX,EAAmBQ,WAAnB,CAAlB;;IACA,IAAI,CAACC,WAAL,EACI,OAAO,KAAP;IACJ,IAAIE,OAAO,GAAG,EAAd;IACAP,KAAK,CAACQ,GAAN,CAAU,UAAUC,MAAV,EAAkB;MACxB;MACA,IAAIC,GAAG,GAAGD,MAAM,CAACE,KAAjB;MACA,IAAIC,UAAU,GAAGF,GAAG,CAACE,UAArB;MAAA,IAAiCC,IAAI,GAAGH,GAAG,CAACG,IAA5C;;MACA,IAAIN,OAAO,CAACK,UAAD,CAAP,KAAwBE,SAA5B,EAAuC;QACnCP,OAAO,CAACK,UAAD,CAAP,GAAsB,EAAtB;MACH;;MACD,IAAIG,UAAU,GAAGF,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAxB,GAAmCG,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAnC,GAA0DA,IAA3E;MACA,IAAIK,IAAI,GAAG1B,QAAQ,CAACuB,UAAD,CAAnB;MACA,IAAII,MAAM,GAAG;QAAED,IAAI,EAAEA;MAAR,CAAb;MACAX,OAAO,CAACK,UAAD,CAAP,CAAoBQ,IAApB,CAAyBD,MAAzB;IACH,CAXD;IAYA1C,MAAM,CAAC4C,IAAP,CAAYd,OAAZ,EAAqBC,GAArB,CAAyB,UAAUI,UAAV,EAAsB;MAC3CnB,MAAM,CAAC6B,KAAP,CAAa,4BAAb,EAA2CV,UAA3C,EAAuD,cAAvD,EAAuEL,OAAO,CAACK,UAAD,CAA9E;;MACAX,KAAK,CAACsB,gBAAN,CACKC,IADL,CACU,IAAIlC,qBAAJ,CAA0B;QAChCmC,OAAO,EAAElB,OAAO,CAACK,UAAD,CADgB;QAEhCc,kBAAkB,EAAEd;MAFY,CAA1B,CADV,EAKKe,IALL,CAKU,UAAUC,GAAV,EAAe;QAAE,OAAOnC,MAAM,CAAC6B,KAAP,CAAa,0BAAb,EAAyCV,UAAzC,CAAP;MAA8D,CALzF,EAMKiB,KANL,CAMW,UAAUC,GAAV,EAAe;QAAE,OAAOrC,MAAM,CAAC6B,KAAP,CAAa,qCAAb,EAAoDQ,GAApD,CAAP;MAAkE,CAN9F;IAOH,CATD;EAUH,CAhCD;;EAiCApC,0BAA0B,CAACT,SAA3B,CAAqCqB,KAArC,GAA6C,UAAUV,MAAV,EAAkBQ,WAAlB,EAA+B;IACxEX,MAAM,CAAC6B,KAAP,CAAa,cAAb;;IACA,IAAI,KAAKC,gBAAL,IACA,KAAKQ,OAAL,CAAa3B,WADb,IAEA,KAAK2B,OAAL,CAAa3B,WAAb,CAAyB4B,YAAzB,KAA0C5B,WAAW,CAAC4B,YAFtD,IAGA,KAAKD,OAAL,CAAa3B,WAAb,CAAyB6B,UAAzB,KAAwC7B,WAAW,CAAC6B,UAHxD,EAGoE;MAChExC,MAAM,CAAC6B,KAAP,CAAa,2DAAb;MACA,OAAO,IAAP;IACH;;IACD,KAAKS,OAAL,CAAa3B,WAAb,GAA2BA,WAA3B;IACA,IAAI8B,MAAM,GAAGtC,MAAM,CAACsC,MAApB;IACA,OAAO,KAAKC,aAAL,CAAmBD,MAAnB,EAA2B9B,WAA3B,CAAP;EACH,CAZD;;EAaAV,0BAA0B,CAACT,SAA3B,CAAqCkD,aAArC,GAAqD,UAAUD,MAAV,EAAkB9B,WAAlB,EAA+B;IAChFX,MAAM,CAAC6B,KAAP,CAAa,8CAAb,EAA6DlB,WAA7D;IACA,KAAKmB,gBAAL,GAAwB,IAAIhC,cAAJ,CAAmB;MACvC6C,UAAU,EAAE,YAD2B;MAEvCF,MAAM,EAAEA,MAF+B;MAGvC9B,WAAW,EAAEA;IAH0B,CAAnB,CAAxB;IAKA,OAAO,IAAP;EACH,CARD;;EASA,OAAOV,0BAAP;AACH,CAnE+C,CAmE9CL,kBAnE8C,CAAhD;;AAoEA,SAASK,0BAAT;AACA;AACA;AACA;;AACA,eAAeA,0BAAf","names":["ConsoleLogger","Logger","AWSKinesisProvider","PutRecordBatchCommand","FirehoseClient","fromUtf8","logger","__extends","config","_super","AWSKinesisFirehoseProvider","group","length","credentials","initClients","_init","records","map","evt","params","event","data","streamName","undefined","bufferData","JSON","stringify","Data","record","push","Object","keys","debug","_this","_kinesisFirehose","send","Records","DeliveryStreamName","then","catch","err","_config","sessionToken","identityId","_initFirehose","region","apiVersion"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/analytics/src/Providers/AWSKinesisFirehoseProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSKinesisProvider } from './AWSKinesisProvider';\nimport {\n\tPutRecordBatchCommand,\n\tFirehoseClient,\n} from '@aws-sdk/client-firehose';\nimport { fromUtf8 } from '@aws-sdk/util-utf8-browser';\n\nconst logger = new Logger('AWSKineisFirehoseProvider');\n\nexport class AWSKinesisFirehoseProvider extends AWSKinesisProvider {\n\tprivate _kinesisFirehose: FirehoseClient;\n\n\tconstructor(config?) {\n\t\tsuper(config);\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tpublic getProviderName(): string {\n\t\treturn 'AWSKinesisFirehose';\n\t}\n\n\tprotected _sendEvents(group) {\n\t\tif (group.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { config, credentials } = group[0];\n\n\t\tconst initClients = this._init(config, credentials);\n\t\tif (!initClients) return false;\n\n\t\tconst records = {};\n\n\t\tgroup.map(params => {\n\t\t\t// split by streamName\n\t\t\tconst evt = params.event;\n\t\t\tconst { streamName, data } = evt;\n\t\t\tif (records[streamName] === undefined) {\n\t\t\t\trecords[streamName] = [];\n\t\t\t}\n\n\t\t\tconst bufferData =\n\t\t\t\tdata && typeof data !== 'string' ? JSON.stringify(data) : data;\n\t\t\tconst Data = fromUtf8(bufferData);\n\t\t\tconst record = { Data };\n\t\t\trecords[streamName].push(record);\n\t\t});\n\n\t\tObject.keys(records).map(streamName => {\n\t\t\tlogger.debug(\n\t\t\t\t'putting records to kinesis',\n\t\t\t\tstreamName,\n\t\t\t\t'with records',\n\t\t\t\trecords[streamName]\n\t\t\t);\n\n\t\t\tthis._kinesisFirehose\n\t\t\t\t.send(\n\t\t\t\t\tnew PutRecordBatchCommand({\n\t\t\t\t\t\tRecords: records[streamName],\n\t\t\t\t\t\tDeliveryStreamName: streamName,\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.then(res => logger.debug('Upload records to stream', streamName))\n\t\t\t\t.catch(err => logger.debug('Failed to upload records to Kinesis', err));\n\t\t});\n\t}\n\n\tprotected _init(config, credentials) {\n\t\tlogger.debug('init clients');\n\n\t\tif (\n\t\t\tthis._kinesisFirehose &&\n\t\t\tthis._config.credentials &&\n\t\t\tthis._config.credentials.sessionToken === credentials.sessionToken &&\n\t\t\tthis._config.credentials.identityId === credentials.identityId\n\t\t) {\n\t\t\tlogger.debug('no change for analytics config, directly return from init');\n\t\t\treturn true;\n\t\t}\n\n\t\tthis._config.credentials = credentials;\n\t\tconst { region } = config;\n\n\t\treturn this._initFirehose(region, credentials);\n\t}\n\n\tprivate _initFirehose(region, credentials) {\n\t\tlogger.debug('initialize kinesis firehose with credentials', credentials);\n\t\tthis._kinesisFirehose = new FirehoseClient({\n\t\t\tapiVersion: '2015-08-04',\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t});\n\t\treturn true;\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default AWSKinesisFirehoseProvider;\n"]},"metadata":{},"sourceType":"module"}