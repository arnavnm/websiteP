{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { parse as parseArn, validate as validateArn } from \"@aws-sdk/util-arn-parser\";\nimport { bucketHostname } from \"./bucketHostname\";\nimport { getPseudoRegion } from \"./bucketHostnameUtils\";\nexport var bucketEndpointMiddleware = function bucketEndpointMiddleware(options) {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var bucketName, replaceBucketInPath, request, bucketArn, clientRegion, _a, _b, partition, _c, signingRegion, useArnRegion, _d, hostname, bucketEndpoint, modifiedSigningRegion, signingService, clientRegion, _e, _f, hostname, bucketEndpoint;\n\n        return __generator(this, function (_g) {\n          switch (_g.label) {\n            case 0:\n              bucketName = args.input.Bucket;\n              replaceBucketInPath = options.bucketEndpoint;\n              request = args.request;\n              if (!HttpRequest.isInstance(request)) return [3\n              /*break*/\n              , 8];\n              if (!options.bucketEndpoint) return [3\n              /*break*/\n              , 1];\n              request.hostname = bucketName;\n              return [3\n              /*break*/\n              , 7];\n\n            case 1:\n              if (!validateArn(bucketName)) return [3\n              /*break*/\n              , 5];\n              bucketArn = parseArn(bucketName);\n              _a = getPseudoRegion;\n              return [4\n              /*yield*/\n              , options.region()];\n\n            case 2:\n              clientRegion = _a.apply(void 0, [_g.sent()]);\n              return [4\n              /*yield*/\n              , options.regionInfoProvider(clientRegion)];\n\n            case 3:\n              _b = _g.sent() || {}, partition = _b.partition, _c = _b.signingRegion, signingRegion = _c === void 0 ? clientRegion : _c;\n              return [4\n              /*yield*/\n              , options.useArnRegion()];\n\n            case 4:\n              useArnRegion = _g.sent();\n              _d = bucketHostname({\n                bucketName: bucketArn,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: options.useDualstackEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                useArnRegion: useArnRegion,\n                clientPartition: partition,\n                clientSigningRegion: signingRegion,\n                clientRegion: clientRegion,\n                isCustomEndpoint: options.isCustomEndpoint\n              }), hostname = _d.hostname, bucketEndpoint = _d.bucketEndpoint, modifiedSigningRegion = _d.signingRegion, signingService = _d.signingService; // If the request needs to use a region or service name inferred from ARN that different from client region, we\n              // need to set them in the handler context so the signer will use them\n\n              if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n                context[\"signing_region\"] = modifiedSigningRegion;\n              }\n\n              if (signingService && signingService !== \"s3\") {\n                context[\"signing_service\"] = signingService;\n              }\n\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n              return [3\n              /*break*/\n              , 7];\n\n            case 5:\n              _e = getPseudoRegion;\n              return [4\n              /*yield*/\n              , options.region()];\n\n            case 6:\n              clientRegion = _e.apply(void 0, [_g.sent()]);\n              _f = bucketHostname({\n                bucketName: bucketName,\n                clientRegion: clientRegion,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: options.useDualstackEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                isCustomEndpoint: options.isCustomEndpoint\n              }), hostname = _f.hostname, bucketEndpoint = _f.bucketEndpoint;\n              request.hostname = hostname;\n              replaceBucketInPath = bucketEndpoint;\n              _g.label = 7;\n\n            case 7:\n              if (replaceBucketInPath) {\n                request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n\n                if (request.path === \"\") {\n                  request.path = \"/\";\n                }\n              }\n\n              _g.label = 8;\n\n            case 8:\n              return [2\n              /*return*/\n              , next(__assign(__assign({}, args), {\n                request: request\n              }))];\n          }\n        });\n      });\n    };\n  };\n};\nexport var bucketEndpointMiddlewareOptions = {\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\",\n  override: true\n};\nexport var getBucketEndpointPlugin = function getBucketEndpointPlugin(options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":"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","names":["HttpRequest","parse","parseArn","validate","validateArn","bucketHostname","getPseudoRegion","bucketEndpointMiddleware","options","next","context","args","bucketName","input","Bucket","replaceBucketInPath","bucketEndpoint","request","isInstance","hostname","bucketArn","_a","region","clientRegion","_g","regionInfoProvider","_b","partition","_c","signingRegion","useArnRegion","_d","baseHostname","accelerateEndpoint","useAccelerateEndpoint","dualstackEndpoint","useDualstackEndpoint","pathStyleEndpoint","forcePathStyle","tlsCompatible","protocol","clientPartition","clientSigningRegion","isCustomEndpoint","modifiedSigningRegion","signingService","_e","_f","path","replace","bucketEndpointMiddlewareOptions","tags","name","relation","toMiddleware","override","getBucketEndpointPlugin","applyToStack","clientStack","addRelativeTo"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/middleware-bucket-endpoint/src/bucketEndpointMiddleware.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  HandlerExecutionContext,\n  MetadataBearer,\n  Pluggable,\n  RelativeMiddlewareOptions,\n} from \"@aws-sdk/types\";\nimport { parse as parseArn, validate as validateArn } from \"@aws-sdk/util-arn-parser\";\n\nimport { bucketHostname } from \"./bucketHostname\";\nimport { getPseudoRegion } from \"./bucketHostnameUtils\";\nimport { BucketEndpointResolvedConfig } from \"./configurations\";\n\nexport const bucketEndpointMiddleware = (options: BucketEndpointResolvedConfig): BuildMiddleware<any, any> => <\n  Output extends MetadataBearer\n>(\n  next: BuildHandler<any, Output>,\n  context: HandlerExecutionContext\n): BuildHandler<any, Output> => async (args: BuildHandlerArguments<any>): Promise<BuildHandlerOutput<Output>> => {\n  const { Bucket: bucketName } = args.input as { Bucket: string };\n  let replaceBucketInPath = options.bucketEndpoint;\n  const request = args.request;\n  if (HttpRequest.isInstance(request)) {\n    if (options.bucketEndpoint) {\n      request.hostname = bucketName;\n    } else if (validateArn(bucketName)) {\n      const bucketArn = parseArn(bucketName);\n      const clientRegion = getPseudoRegion(await options.region());\n      const { partition, signingRegion = clientRegion } = (await options.regionInfoProvider(clientRegion)) || {};\n      const useArnRegion = await options.useArnRegion();\n      const { hostname, bucketEndpoint, signingRegion: modifiedSigningRegion, signingService } = bucketHostname({\n        bucketName: bucketArn,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint: options.useDualstackEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n        useArnRegion,\n        clientPartition: partition,\n        clientSigningRegion: signingRegion,\n        clientRegion: clientRegion,\n        isCustomEndpoint: options.isCustomEndpoint,\n      });\n\n      // If the request needs to use a region or service name inferred from ARN that different from client region, we\n      // need to set them in the handler context so the signer will use them\n      if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n        context[\"signing_region\"] = modifiedSigningRegion;\n      }\n      if (signingService && signingService !== \"s3\") {\n        context[\"signing_service\"] = signingService;\n      }\n\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    } else {\n      const clientRegion = getPseudoRegion(await options.region());\n      const { hostname, bucketEndpoint } = bucketHostname({\n        bucketName,\n        clientRegion,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint: options.useDualstackEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n        isCustomEndpoint: options.isCustomEndpoint,\n      });\n\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    }\n\n    if (replaceBucketInPath) {\n      request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n      if (request.path === \"\") {\n        request.path = \"/\";\n      }\n    }\n  }\n\n  return next({ ...args, request });\n};\n\nexport const bucketEndpointMiddlewareOptions: RelativeMiddlewareOptions = {\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\",\n  override: true,\n};\n\nexport const getBucketEndpointPlugin = (options: BucketEndpointResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}