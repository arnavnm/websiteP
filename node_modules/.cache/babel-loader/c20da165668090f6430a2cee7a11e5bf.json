{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { getCurrTime, getByteLength, defaultConfig, isInteger } from './Utils';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('StorageCache');\n/**\n * Initialization of the cache\n *\n */\n\nvar StorageCache =\n/** @class */\nfunction () {\n  /**\n   * Initialize the cache\n   * @param config - the configuration of the cache\n   */\n  function StorageCache(config) {\n    this.config = Object.assign({}, config);\n    this.cacheCurSizeKey = this.config.keyPrefix + 'CurSize';\n    this.checkConfig();\n  }\n\n  StorageCache.prototype.getModuleName = function () {\n    return 'Cache';\n  };\n\n  StorageCache.prototype.checkConfig = function () {\n    // check configuration\n    if (!isInteger(this.config.capacityInBytes)) {\n      logger.error('Invalid parameter: capacityInBytes. It should be an Integer. Setting back to default.');\n      this.config.capacityInBytes = defaultConfig.capacityInBytes;\n    }\n\n    if (!isInteger(this.config.itemMaxSize)) {\n      logger.error('Invalid parameter: itemMaxSize. It should be an Integer. Setting back to default.');\n      this.config.itemMaxSize = defaultConfig.itemMaxSize;\n    }\n\n    if (!isInteger(this.config.defaultTTL)) {\n      logger.error('Invalid parameter: defaultTTL. It should be an Integer. Setting back to default.');\n      this.config.defaultTTL = defaultConfig.defaultTTL;\n    }\n\n    if (!isInteger(this.config.defaultPriority)) {\n      logger.error('Invalid parameter: defaultPriority. It should be an Integer. Setting back to default.');\n      this.config.defaultPriority = defaultConfig.defaultPriority;\n    }\n\n    if (this.config.itemMaxSize > this.config.capacityInBytes) {\n      logger.error('Invalid parameter: itemMaxSize. It should be smaller than capacityInBytes. Setting back to default.');\n      this.config.itemMaxSize = defaultConfig.itemMaxSize;\n    }\n\n    if (this.config.defaultPriority > 5 || this.config.defaultPriority < 1) {\n      logger.error('Invalid parameter: defaultPriority. It should be between 1 and 5. Setting back to default.');\n      this.config.defaultPriority = defaultConfig.defaultPriority;\n    }\n\n    if (Number(this.config.warningThreshold) > 1 || Number(this.config.warningThreshold) < 0) {\n      logger.error('Invalid parameter: warningThreshold. It should be between 0 and 1. Setting back to default.');\n      this.config.warningThreshold = defaultConfig.warningThreshold;\n    } // set 5MB limit\n\n\n    var cacheLimit = 5 * 1024 * 1024;\n\n    if (this.config.capacityInBytes > cacheLimit) {\n      logger.error('Cache Capacity should be less than 5MB. Setting back to default. Setting back to default.');\n      this.config.capacityInBytes = defaultConfig.capacityInBytes;\n    }\n  };\n  /**\n   * produce a JSON object with meta-data and data value\n   * @param value - the value of the item\n   * @param options - optional, the specified meta-data\n   *\n   * @return - the item which has the meta-data and the value\n   */\n\n\n  StorageCache.prototype.fillCacheItem = function (key, value, options) {\n    var ret = {\n      key: key,\n      data: value,\n      timestamp: getCurrTime(),\n      visitedTime: getCurrTime(),\n      priority: options.priority,\n      expires: options.expires,\n      type: typeof value,\n      byteSize: 0\n    };\n    ret.byteSize = getByteLength(JSON.stringify(ret)); // for accurate size\n\n    ret.byteSize = getByteLength(JSON.stringify(ret));\n    return ret;\n  };\n  /**\n   * set cache with customized configuration\n   * @param config - customized configuration\n   *\n   * @return - the current configuration\n   */\n\n\n  StorageCache.prototype.configure = function (config) {\n    if (!config) {\n      return this.config;\n    }\n\n    if (config.keyPrefix) {\n      logger.warn(\"Don't try to configure keyPrefix!\");\n    }\n\n    this.config = Object.assign({}, this.config, config, config.Cache);\n    this.checkConfig();\n    return this.config;\n  };\n\n  return StorageCache;\n}();\n\nexport { StorageCache };\n/**\n * @deprecated use named import\n */\n\nexport default StorageCache;","map":{"version":3,"mappings":"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","names":["getCurrTime","getByteLength","defaultConfig","isInteger","ConsoleLogger","Logger","logger","config","Object","assign","cacheCurSizeKey","keyPrefix","checkConfig","StorageCache","capacityInBytes","error","itemMaxSize","defaultTTL","defaultPriority","Number","warningThreshold","cacheLimit","key","value","options","ret","data","timestamp","visitedTime","priority","expires","type","byteSize","JSON","stringify","warn","Cache"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/cache/src/StorageCache.ts"],"sourcesContent":["/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\n\r\nimport { getCurrTime, getByteLength, defaultConfig, isInteger } from './Utils';\r\n\r\nimport { CacheConfig, CacheItem, CacheItemOptions } from './types';\r\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\r\n\r\nconst logger = new Logger('StorageCache');\r\n\r\n/**\r\n * Initialization of the cache\r\n *\r\n */\r\nexport class StorageCache {\r\n\tprotected cacheCurSizeKey: string;\r\n\tprotected config: CacheConfig;\r\n\r\n\t/**\r\n\t * Initialize the cache\r\n\t * @param config - the configuration of the cache\r\n\t */\r\n\tconstructor(config: CacheConfig) {\r\n\t\tthis.config = Object.assign({}, config);\r\n\t\tthis.cacheCurSizeKey = this.config.keyPrefix + 'CurSize';\r\n\t\tthis.checkConfig();\r\n\t}\r\n\r\n\tpublic getModuleName() {\r\n\t\treturn 'Cache';\r\n\t}\r\n\r\n\tprivate checkConfig(): void {\r\n\t\t// check configuration\r\n\t\tif (!isInteger(this.config.capacityInBytes)) {\r\n\t\t\tlogger.error(\r\n\t\t\t\t'Invalid parameter: capacityInBytes. It should be an Integer. Setting back to default.'\r\n\t\t\t);\r\n\t\t\tthis.config.capacityInBytes = defaultConfig.capacityInBytes;\r\n\t\t}\r\n\r\n\t\tif (!isInteger(this.config.itemMaxSize)) {\r\n\t\t\tlogger.error(\r\n\t\t\t\t'Invalid parameter: itemMaxSize. It should be an Integer. Setting back to default.'\r\n\t\t\t);\r\n\t\t\tthis.config.itemMaxSize = defaultConfig.itemMaxSize;\r\n\t\t}\r\n\r\n\t\tif (!isInteger(this.config.defaultTTL)) {\r\n\t\t\tlogger.error(\r\n\t\t\t\t'Invalid parameter: defaultTTL. It should be an Integer. Setting back to default.'\r\n\t\t\t);\r\n\t\t\tthis.config.defaultTTL = defaultConfig.defaultTTL;\r\n\t\t}\r\n\r\n\t\tif (!isInteger(this.config.defaultPriority)) {\r\n\t\t\tlogger.error(\r\n\t\t\t\t'Invalid parameter: defaultPriority. It should be an Integer. Setting back to default.'\r\n\t\t\t);\r\n\t\t\tthis.config.defaultPriority = defaultConfig.defaultPriority;\r\n\t\t}\r\n\r\n\t\tif (this.config.itemMaxSize > this.config.capacityInBytes) {\r\n\t\t\tlogger.error(\r\n\t\t\t\t'Invalid parameter: itemMaxSize. It should be smaller than capacityInBytes. Setting back to default.'\r\n\t\t\t);\r\n\t\t\tthis.config.itemMaxSize = defaultConfig.itemMaxSize;\r\n\t\t}\r\n\r\n\t\tif (this.config.defaultPriority > 5 || this.config.defaultPriority < 1) {\r\n\t\t\tlogger.error(\r\n\t\t\t\t'Invalid parameter: defaultPriority. It should be between 1 and 5. Setting back to default.'\r\n\t\t\t);\r\n\t\t\tthis.config.defaultPriority = defaultConfig.defaultPriority;\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tNumber(this.config.warningThreshold) > 1 ||\r\n\t\t\tNumber(this.config.warningThreshold) < 0\r\n\t\t) {\r\n\t\t\tlogger.error(\r\n\t\t\t\t'Invalid parameter: warningThreshold. It should be between 0 and 1. Setting back to default.'\r\n\t\t\t);\r\n\t\t\tthis.config.warningThreshold = defaultConfig.warningThreshold;\r\n\t\t}\r\n\t\t// set 5MB limit\r\n\t\tconst cacheLimit: number = 5 * 1024 * 1024;\r\n\t\tif (this.config.capacityInBytes > cacheLimit) {\r\n\t\t\tlogger.error(\r\n\t\t\t\t'Cache Capacity should be less than 5MB. Setting back to default. Setting back to default.'\r\n\t\t\t);\r\n\t\t\tthis.config.capacityInBytes = defaultConfig.capacityInBytes;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * produce a JSON object with meta-data and data value\r\n\t * @param value - the value of the item\r\n\t * @param options - optional, the specified meta-data\r\n\t *\r\n\t * @return - the item which has the meta-data and the value\r\n\t */\r\n\tprotected fillCacheItem(\r\n\t\tkey: string,\r\n\t\tvalue: object | number | string | boolean,\r\n\t\toptions: CacheItemOptions\r\n\t): CacheItem {\r\n\t\tconst ret: CacheItem = {\r\n\t\t\tkey,\r\n\t\t\tdata: value,\r\n\t\t\ttimestamp: getCurrTime(),\r\n\t\t\tvisitedTime: getCurrTime(),\r\n\t\t\tpriority: options.priority,\r\n\t\t\texpires: options.expires,\r\n\t\t\ttype: typeof value,\r\n\t\t\tbyteSize: 0,\r\n\t\t};\r\n\r\n\t\tret.byteSize = getByteLength(JSON.stringify(ret));\r\n\r\n\t\t// for accurate size\r\n\t\tret.byteSize = getByteLength(JSON.stringify(ret));\r\n\t\treturn ret;\r\n\t}\r\n\r\n\t/**\r\n\t * set cache with customized configuration\r\n\t * @param config - customized configuration\r\n\t *\r\n\t * @return - the current configuration\r\n\t */\r\n\tpublic configure(config?: CacheConfig): CacheConfig {\r\n\t\tif (!config) {\r\n\t\t\treturn this.config;\r\n\t\t}\r\n\t\tif (config.keyPrefix) {\r\n\t\t\tlogger.warn(`Don't try to configure keyPrefix!`);\r\n\t\t}\r\n\r\n\t\tthis.config = Object.assign({}, this.config, config, config.Cache);\r\n\t\tthis.checkConfig();\r\n\t\treturn this.config;\r\n\t}\r\n}\r\n\r\n/**\r\n * @deprecated use named import\r\n */\r\nexport default StorageCache;\r\n"]},"metadata":{},"sourceType":"module"}