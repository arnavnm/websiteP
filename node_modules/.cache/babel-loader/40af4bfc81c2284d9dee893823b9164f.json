{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { ConsoleLogger as Logger } from './Logger';\nimport { StorageHelper } from './StorageHelper';\nimport { makeQuerablePromise } from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { jitteredExponentialRetry } from './Util';\nimport { getAmplifyUserAgent } from './Platform';\nimport { Amplify } from './Amplify';\nimport { fromCognitoIdentity, fromCognitoIdentityPool } from '@aws-sdk/credential-provider-cognito-identity';\nimport { CognitoIdentityClient, GetIdCommand, GetCredentialsForIdentityCommand } from '@aws-sdk/client-cognito-identity';\nvar logger = new Logger('Credentials');\nvar CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\n\nvar COGNITO_IDENTITY_KEY_PREFIX = 'CognitoIdentityId-';\n\nvar CredentialsClass =\n/** @class */\nfunction () {\n  function CredentialsClass(config) {\n    this._gettingCredPromise = null;\n    this._refreshHandlers = {}; // Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials\n\n    this.Auth = undefined;\n    this.configure(config);\n    this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n    this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n  }\n\n  CredentialsClass.prototype.getModuleName = function () {\n    return 'Credentials';\n  };\n\n  CredentialsClass.prototype.getCredSource = function () {\n    return this._credentials_source;\n  };\n\n  CredentialsClass.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    this._config = Object.assign({}, this._config, config);\n    var refreshHandlers = this._config.refreshHandlers; // If the developer has provided an object of refresh handlers,\n    // then we can merge the provided handlers with the current handlers.\n\n    if (refreshHandlers) {\n      this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n    }\n\n    this._storage = this._config.storage;\n\n    if (!this._storage) {\n      this._storage = new StorageHelper().getStorage();\n    }\n\n    this._storageSync = Promise.resolve();\n\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n\n    return this._config;\n  };\n\n  CredentialsClass.prototype.get = function () {\n    logger.debug('getting credentials');\n    return this._pickupCredentials();\n  }; // currently we only store the guest identity in local storage\n\n\n  CredentialsClass.prototype._getCognitoIdentityIdStorageKey = function (identityPoolId) {\n    return \"\" + COGNITO_IDENTITY_KEY_PREFIX + identityPoolId;\n  };\n\n  CredentialsClass.prototype._pickupCredentials = function () {\n    logger.debug('picking up credentials');\n\n    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n      logger.debug('getting new cred promise');\n      this._gettingCredPromise = makeQuerablePromise(this._keepAlive());\n    } else {\n      logger.debug('getting old cred promise');\n    }\n\n    return this._gettingCredPromise;\n  };\n\n  CredentialsClass.prototype._keepAlive = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('checking if credentials exists and not expired');\n            cred = this._credentials;\n\n            if (cred && !this._isExpired(cred) && !this._isPastTTL()) {\n              logger.debug('credentials not changed and not expired, directly return');\n              return [2\n              /*return*/\n              , Promise.resolve(cred)];\n            }\n\n            logger.debug('need to get a new credential or refresh the existing one');\n            _a = this.Auth, Auth = _a === void 0 ? Amplify.Auth : _a;\n\n            if (!Auth || typeof Auth.currentUserCredentials !== 'function') {\n              return [2\n              /*return*/\n              , Promise.reject('No Auth module registered in Amplify')];\n            }\n\n            if (!(!this._isExpired(cred) && this._isPastTTL())) return [3\n            /*break*/\n            , 6];\n            logger.debug('ttl has passed but token is not yet expired');\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , Auth.currentUserPoolUser()];\n\n          case 2:\n            user_1 = _b.sent();\n            return [4\n            /*yield*/\n            , Auth.currentSession()];\n\n          case 3:\n            session = _b.sent();\n            refreshToken_1 = session.refreshToken;\n            refreshRequest = new Promise(function (res, rej) {\n              user_1.refreshSession(refreshToken_1, function (err, data) {\n                return err ? rej(err) : res(data);\n              });\n            });\n            return [4\n            /*yield*/\n            , refreshRequest];\n\n          case 4:\n            _b.sent(); // note that rejections will be caught and handled in the catch block.\n\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            err_1 = _b.sent(); // should not throw because user might just be on guest access or is authenticated through federation\n\n            logger.debug('Error attempting to refreshing the session', err_1);\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            return [2\n            /*return*/\n            , Auth.currentUserCredentials()];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype.refreshFederatedToken = function (federatedInfo) {\n    logger.debug('Getting federated credentials');\n    var provider = federatedInfo.provider,\n        user = federatedInfo.user,\n        token = federatedInfo.token,\n        identity_id = federatedInfo.identity_id;\n    var expires_at = federatedInfo.expires_at; // Make sure expires_at is in millis\n\n    expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1000 : expires_at;\n    var that = this;\n    logger.debug('checking if federated jwt token expired');\n\n    if (expires_at > new Date().getTime()) {\n      // if not expired\n      logger.debug('token not expired');\n      return this._setCredentialsFromFederation({\n        provider: provider,\n        token: token,\n        user: user,\n        identity_id: identity_id,\n        expires_at: expires_at\n      });\n    } else {\n      // if refresh handler exists\n      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === 'function') {\n        logger.debug('getting refreshed jwt token from federation provider');\n        return this._providerRefreshWithRetry({\n          refreshHandler: that._refreshHandlers[provider],\n          provider: provider,\n          user: user\n        });\n      } else {\n        logger.debug('no refresh handler for provider:', provider);\n        this.clear();\n        return Promise.reject('no refresh handler for provider');\n      }\n    }\n  };\n\n  CredentialsClass.prototype._providerRefreshWithRetry = function (_a) {\n    var _this = this;\n\n    var refreshHandler = _a.refreshHandler,\n        provider = _a.provider,\n        user = _a.user;\n    var MAX_DELAY_MS = 10 * 1000; // refreshHandler will retry network errors, otherwise it will\n    // return NonRetryableError to break out of jitteredExponentialRetry\n\n    return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS).then(function (data) {\n      logger.debug('refresh federated token sucessfully', data);\n      return _this._setCredentialsFromFederation({\n        provider: provider,\n        token: data.token,\n        user: user,\n        identity_id: data.identity_id,\n        expires_at: data.expires_at\n      });\n    }).catch(function (e) {\n      var isNetworkError = typeof e === 'string' && e.toLowerCase().lastIndexOf('network error', e.length) === 0;\n\n      if (!isNetworkError) {\n        _this.clear();\n      }\n\n      logger.debug('refresh federated token failed', e);\n      return Promise.reject('refreshing federation token failed: ' + e);\n    });\n  };\n\n  CredentialsClass.prototype._isExpired = function (credentials) {\n    if (!credentials) {\n      logger.debug('no credentials for expiration check');\n      return true;\n    }\n\n    logger.debug('are these credentials expired?', credentials);\n    var ts = Date.now();\n    /* returns date object.\n        https://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n    */\n\n    var expiration = credentials.expiration;\n    return expiration.getTime() <= ts;\n  };\n\n  CredentialsClass.prototype._isPastTTL = function () {\n    return this._nextCredentialsRefresh <= Date.now();\n  };\n\n  CredentialsClass.prototype._setCredentialsForGuest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, identityPoolId, region, mandatorySignIn, identityId, _b, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            logger.debug('setting credentials for guest');\n            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;\n\n            if (mandatorySignIn) {\n              return [2\n              /*return*/\n              , Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n            }\n\n            if (!identityPoolId) {\n              logger.debug('No Cognito Identity pool provided for unauthenticated access');\n              return [2\n              /*return*/\n              , Promise.reject('No Cognito Identity pool provided for unauthenticated access')];\n            }\n\n            if (!region) {\n              logger.debug('region is not configured for getting the credentials');\n              return [2\n              /*return*/\n              , Promise.reject('region is not configured for getting the credentials')];\n            }\n\n            _b = this;\n            return [4\n            /*yield*/\n            , this._getGuestIdentityId()];\n\n          case 1:\n            identityId = _b._identityId = _c.sent();\n            cognitoClient = new CognitoIdentityClient({\n              region: region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            credentials = undefined;\n\n            if (identityId) {\n              cognitoIdentityParams = {\n                identityId: identityId,\n                client: cognitoClient\n              };\n              credentials = fromCognitoIdentity(cognitoIdentityParams)();\n            } else {\n              credentialsProvider = function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        return [4\n                        /*yield*/\n                        , cognitoClient.send(new GetIdCommand({\n                          IdentityPoolId: identityPoolId\n                        }))];\n\n                      case 1:\n                        IdentityId = _a.sent().IdentityId;\n                        this._identityId = IdentityId;\n                        cognitoIdentityParams = {\n                          client: cognitoClient,\n                          identityId: IdentityId\n                        };\n                        credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                        return [2\n                        /*return*/\n                        , credentialsFromCognitoIdentity()];\n                    }\n                  });\n                });\n              };\n\n              credentials = credentialsProvider().catch(function (err) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  return __generator(this, function (_a) {\n                    throw err;\n                  });\n                });\n              });\n            }\n\n            return [2\n            /*return*/\n            , this._loadCredentials(credentials, 'guest', false, null).then(function (res) {\n              return res;\n            }).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var credentialsProvider;\n\n                var _this = this;\n\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!(e.name === 'ResourceNotFoundException' && e.message === \"Identity '\" + identityId + \"' not found.\")) return [3\n                      /*break*/\n                      , 2];\n                      logger.debug('Failed to load guest credentials');\n                      return [4\n                      /*yield*/\n                      , this._removeGuestIdentityId()];\n\n                    case 1:\n                      _a.sent();\n\n                      credentialsProvider = function () {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                return [4\n                                /*yield*/\n                                , cognitoClient.send(new GetIdCommand({\n                                  IdentityPoolId: identityPoolId\n                                }))];\n\n                              case 1:\n                                IdentityId = _a.sent().IdentityId;\n                                this._identityId = IdentityId;\n                                cognitoIdentityParams = {\n                                  client: cognitoClient,\n                                  identityId: IdentityId\n                                };\n                                credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                                return [2\n                                /*return*/\n                                , credentialsFromCognitoIdentity()];\n                            }\n                          });\n                        });\n                      };\n\n                      credentials = credentialsProvider().catch(function (err) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          return __generator(this, function (_a) {\n                            throw err;\n                          });\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      , this._loadCredentials(credentials, 'guest', false, null)];\n\n                    case 2:\n                      return [2\n                      /*return*/\n                      , e];\n                  }\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._setCredentialsFromFederation = function (params) {\n    var provider = params.provider,\n        token = params.token,\n        identity_id = params.identity_id;\n    var domains = {\n      google: 'accounts.google.com',\n      facebook: 'graph.facebook.com',\n      amazon: 'www.amazon.com',\n      developer: 'cognito-identity.amazonaws.com'\n    }; // Use custom provider url instead of the predefined ones\n\n    var domain = domains[provider] || provider;\n\n    if (!domain) {\n      return Promise.reject('You must specify a federated provider');\n    }\n\n    var logins = {};\n    logins[domain] = token;\n    var _a = this._config,\n        identityPoolId = _a.identityPoolId,\n        region = _a.region;\n\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n\n    var cognitoClient = new CognitoIdentityClient({\n      region: region,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    var credentials = undefined;\n\n    if (identity_id) {\n      var cognitoIdentityParams = {\n        identityId: identity_id,\n        logins: logins,\n        client: cognitoClient\n      };\n      credentials = fromCognitoIdentity(cognitoIdentityParams)();\n    } else {\n      var cognitoIdentityParams = {\n        logins: logins,\n        identityPoolId: identityPoolId,\n        client: cognitoClient\n      };\n      credentials = fromCognitoIdentityPool(cognitoIdentityParams)();\n    }\n\n    return this._loadCredentials(credentials, 'federated', true, params);\n  };\n\n  CredentialsClass.prototype._setCredentialsFromSession = function (session) {\n    var _this = this;\n\n    logger.debug('set credentials from session');\n    var idToken = session.getIdToken().getJwtToken();\n    var _a = this._config,\n        region = _a.region,\n        userPoolId = _a.userPoolId,\n        identityPoolId = _a.identityPoolId;\n\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n\n    var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n    var logins = {};\n    logins[key] = idToken;\n    var cognitoClient = new CognitoIdentityClient({\n      region: region,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    /*\n        Retreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n        https://git.io/JeDxU\n         Note: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n    */\n\n    var credentialsProvider = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this._getGuestIdentityId()];\n\n            case 1:\n              guestIdentityId = _c.sent();\n              if (!!guestIdentityId) return [3\n              /*break*/\n              , 3];\n              return [4\n              /*yield*/\n              , cognitoClient.send(new GetIdCommand({\n                IdentityPoolId: identityPoolId,\n                Logins: logins\n              }))];\n\n            case 2:\n              IdentityId = _c.sent().IdentityId;\n              generatedOrRetrievedIdentityId = IdentityId;\n              _c.label = 3;\n\n            case 3:\n              return [4\n              /*yield*/\n              , cognitoClient.send(new GetCredentialsForIdentityCommand({\n                IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,\n                Logins: logins\n              }))];\n\n            case 4:\n              _a = _c.sent(), _b = _a.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a.IdentityId;\n              this._identityId = primaryIdentityId;\n              if (!guestIdentityId) return [3\n              /*break*/\n              , 6]; // if guestIdentity is found and used by GetCredentialsForIdentity\n              // it will be linked to the logins provided, and disqualified as an unauth identity\n\n              logger.debug(\"The guest identity \" + guestIdentityId + \" has been successfully linked to the logins\");\n\n              if (guestIdentityId === primaryIdentityId) {\n                logger.debug(\"The guest identity \" + guestIdentityId + \" has become the primary identity\");\n              } // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n\n\n              return [4\n              /*yield*/\n              , this._removeGuestIdentityId()];\n\n            case 5:\n              // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n              _c.sent();\n\n              _c.label = 6;\n\n            case 6:\n              // https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40\n              return [2\n              /*return*/\n              , {\n                accessKeyId: AccessKeyId,\n                secretAccessKey: SecretKey,\n                sessionToken: SessionToken,\n                expiration: Expiration,\n                identityId: primaryIdentityId\n              }];\n          }\n        });\n      });\n    };\n\n    var credentials = credentialsProvider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          throw err;\n        });\n      });\n    });\n    return this._loadCredentials(credentials, 'userPool', true, null);\n  };\n\n  CredentialsClass.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n    var _this = this;\n\n    var that = this;\n    return new Promise(function (res, rej) {\n      credentials.then(function (credentials) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, provider, token, expires_at, identity_id;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.debug('Load credentials successfully', credentials);\n\n                if (this._identityId && !credentials.identityId) {\n                  credentials['identityId'] = this._identityId;\n                }\n\n                that._credentials = credentials;\n                that._credentials.authenticated = authenticated;\n                that._credentials_source = source;\n                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n\n                if (source === 'federated') {\n                  user = Object.assign({\n                    id: this._credentials.identityId\n                  }, info.user);\n                  provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n\n                  try {\n                    this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                      provider: provider,\n                      token: token,\n                      user: user,\n                      expires_at: expires_at,\n                      identity_id: identity_id\n                    }));\n                  } catch (e) {\n                    logger.debug('Failed to put federated info into auth storage', e);\n                  }\n                }\n\n                if (!(source === 'guest')) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , this._setGuestIdentityId(credentials.identityId)];\n\n              case 1:\n                _a.sent();\n\n                _a.label = 2;\n\n              case 2:\n                res(that._credentials);\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      }).catch(function (err) {\n        if (err) {\n          logger.debug('Failed to load credentials', credentials);\n          logger.debug('Error loading credentials', err);\n          rej(err);\n          return;\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype.set = function (params, source) {\n    if (source === 'session') {\n      return this._setCredentialsFromSession(params);\n    } else if (source === 'federation') {\n      return this._setCredentialsFromFederation(params);\n    } else if (source === 'guest') {\n      return this._setCredentialsForGuest();\n    } else {\n      logger.debug('no source specified for setting credentials');\n      return Promise.reject('invalid source');\n    }\n  };\n\n  CredentialsClass.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this._credentials = null;\n        this._credentials_source = null;\n        logger.debug('removing aws-amplify-federatedInfo from storage');\n\n        this._storage.removeItem('aws-amplify-federatedInfo');\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /* operations on local stored guest identity */\n\n\n  CredentialsClass.prototype._getGuestIdentityId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            identityPoolId = this._config.identityPoolId;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))];\n\n          case 3:\n            e_1 = _a.sent();\n            logger.debug('Failed to get the cached guest identityId', e_1);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._setGuestIdentityId = function (identityId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            identityPoolId = this._config.identityPoolId;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 2:\n            _a.sent();\n\n            this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_2 = _a.sent();\n            logger.debug('Failed to cache guest identityId', e_2);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._removeGuestIdentityId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityPoolId;\n      return __generator(this, function (_a) {\n        identityPoolId = this._config.identityPoolId;\n        logger.debug(\"removing \" + this._getCognitoIdentityIdStorageKey(identityPoolId) + \" from storage\");\n\n        this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n\n\n  CredentialsClass.prototype.shear = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n\n  return CredentialsClass;\n}();\n\nexport { CredentialsClass };\nexport var Credentials = new CredentialsClass(null);\nAmplify.register(Credentials);\n/**\n * @deprecated use named import\n */\n\nexport default Credentials;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","StorageHelper","makeQuerablePromise","FacebookOAuth","GoogleOAuth","jitteredExponentialRetry","getAmplifyUserAgent","Amplify","fromCognitoIdentity","fromCognitoIdentityPool","CognitoIdentityClient","GetIdCommand","GetCredentialsForIdentityCommand","logger","CREDENTIALS_TTL","COGNITO_IDENTITY_KEY_PREFIX","config","undefined","configure","_refreshHandlers","refreshGoogleToken","refreshFacebookToken","CredentialsClass","_credentials_source","_config","Object","assign","refreshHandlers","__assign","_storage","storage","getStorage","_storageSync","Promise","resolve","debug","_pickupCredentials","identityPoolId","_gettingCredPromise","isPending","_keepAlive","cred","_credentials","_isExpired","_isPastTTL","_a","Auth","currentUserCredentials","reject","currentUserPoolUser","user_1","_b","currentSession","session","refreshToken_1","refreshToken","refreshRequest","res","rej","refreshSession","err","data","err_1","federatedInfo","user","token","identity_id","expires_at","Date","getFullYear","that","getTime","_setCredentialsFromFederation","provider","_providerRefreshWithRetry","refreshHandler","clear","MAX_DELAY_MS","then","_this","catch","isNetworkError","e","toLowerCase","lastIndexOf","length","credentials","ts","now","expiration","_nextCredentialsRefresh","region","mandatorySignIn","_getGuestIdentityId","identityId","_identityId","_c","cognitoClient","customUserAgent","cognitoIdentityParams","client","credentialsProvider","send","IdentityPoolId","IdentityId","credentialsFromCognitoIdentity","_loadCredentials","name","message","_removeGuestIdentityId","params","domains","google","facebook","amazon","developer","domain","logins","idToken","getIdToken","getJwtToken","userPoolId","key","guestIdentityId","Logins","generatedOrRetrievedIdentityId","AccessKeyId","Expiration","SecretKey","SessionToken","primaryIdentityId","accessKeyId","secretAccessKey","sessionToken","source","authenticated","info","id","setItem","JSON","stringify","_setGuestIdentityId","_setCredentialsFromSession","_setCredentialsForGuest","removeItem","getItem","_getCognitoIdentityIdStorageKey","e_1","e_2","Credentials","register"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/core/src/Credentials.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from './Logger';\nimport { StorageHelper } from './StorageHelper';\nimport { makeQuerablePromise } from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { jitteredExponentialRetry } from './Util';\nimport { ICredentials } from './types';\nimport { getAmplifyUserAgent } from './Platform';\nimport { Amplify } from './Amplify';\nimport {\n\tfromCognitoIdentity,\n\tFromCognitoIdentityParameters,\n\tfromCognitoIdentityPool,\n\tFromCognitoIdentityPoolParameters,\n} from '@aws-sdk/credential-provider-cognito-identity';\nimport {\n\tCognitoIdentityClient,\n\tGetIdCommand,\n\tGetCredentialsForIdentityCommand,\n} from '@aws-sdk/client-cognito-identity';\nimport { CredentialProvider } from '@aws-sdk/types';\n\nconst logger = new Logger('Credentials');\n\nconst CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\n\nconst COGNITO_IDENTITY_KEY_PREFIX = 'CognitoIdentityId-';\n\nexport class CredentialsClass {\n\tprivate _config;\n\tprivate _credentials;\n\tprivate _credentials_source;\n\tprivate _gettingCredPromise = null;\n\tprivate _refreshHandlers = {};\n\tprivate _storage;\n\tprivate _storageSync;\n\tprivate _identityId;\n\tprivate _nextCredentialsRefresh: Number;\n\n\t// Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials\n\tAuth = undefined;\n\n\tconstructor(config) {\n\t\tthis.configure(config);\n\t\tthis._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n\t\tthis._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Credentials';\n\t}\n\n\tpublic getCredSource() {\n\t\treturn this._credentials_source;\n\t}\n\n\tpublic configure(config) {\n\t\tif (!config) return this._config || {};\n\n\t\tthis._config = Object.assign({}, this._config, config);\n\t\tconst { refreshHandlers } = this._config;\n\t\t// If the developer has provided an object of refresh handlers,\n\t\t// then we can merge the provided handlers with the current handlers.\n\t\tif (refreshHandlers) {\n\t\t\tthis._refreshHandlers = {\n\t\t\t\t...this._refreshHandlers,\n\t\t\t\t...refreshHandlers,\n\t\t\t};\n\t\t}\n\n\t\tthis._storage = this._config.storage;\n\n\t\tif (!this._storage) {\n\t\t\tthis._storage = new StorageHelper().getStorage();\n\t\t}\n\n\t\tthis._storageSync = Promise.resolve();\n\t\tif (typeof this._storage['sync'] === 'function') {\n\t\t\tthis._storageSync = this._storage['sync']();\n\t\t}\n\n\t\treturn this._config;\n\t}\n\n\tpublic get() {\n\t\tlogger.debug('getting credentials');\n\t\treturn this._pickupCredentials();\n\t}\n\n\t// currently we only store the guest identity in local storage\n\tprivate _getCognitoIdentityIdStorageKey(identityPoolId: string) {\n\t\treturn `${COGNITO_IDENTITY_KEY_PREFIX}${identityPoolId}`;\n\t}\n\n\tprivate _pickupCredentials() {\n\t\tlogger.debug('picking up credentials');\n\t\tif (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n\t\t\tlogger.debug('getting new cred promise');\n\t\t\tthis._gettingCredPromise = makeQuerablePromise(this._keepAlive());\n\t\t} else {\n\t\t\tlogger.debug('getting old cred promise');\n\t\t}\n\t\treturn this._gettingCredPromise;\n\t}\n\n\tprivate async _keepAlive() {\n\t\tlogger.debug('checking if credentials exists and not expired');\n\t\tconst cred = this._credentials;\n\t\tif (cred && !this._isExpired(cred) && !this._isPastTTL()) {\n\t\t\tlogger.debug('credentials not changed and not expired, directly return');\n\t\t\treturn Promise.resolve(cred);\n\t\t}\n\n\t\tlogger.debug('need to get a new credential or refresh the existing one');\n\n\t\t// Some use-cases don't require Auth for signing in, but use Credentials for guest users (e.g. Analytics)\n\t\t// Prefer locally scoped `Auth`, but fallback to registered `Amplify.Auth` global otherwise.\n\t\tconst { Auth = Amplify.Auth } = this;\n\n\t\tif (!Auth || typeof Auth.currentUserCredentials !== 'function') {\n\t\t\treturn Promise.reject('No Auth module registered in Amplify');\n\t\t}\n\n\t\tif (!this._isExpired(cred) && this._isPastTTL()) {\n\t\t\tlogger.debug('ttl has passed but token is not yet expired');\n\t\t\ttry {\n\t\t\t\tconst user = await Auth.currentUserPoolUser();\n\t\t\t\tconst session = await Auth.currentSession();\n\t\t\t\tconst refreshToken = session.refreshToken;\n\t\t\t\tconst refreshRequest = new Promise((res, rej) => {\n\t\t\t\t\tuser.refreshSession(refreshToken, (err, data) => {\n\t\t\t\t\t\treturn err ? rej(err) : res(data);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tawait refreshRequest; // note that rejections will be caught and handled in the catch block.\n\t\t\t} catch (err) {\n\t\t\t\t// should not throw because user might just be on guest access or is authenticated through federation\n\t\t\t\tlogger.debug('Error attempting to refreshing the session', err);\n\t\t\t}\n\t\t}\n\t\treturn Auth.currentUserCredentials();\n\t}\n\n\tpublic refreshFederatedToken(federatedInfo) {\n\t\tlogger.debug('Getting federated credentials');\n\t\tconst { provider, user, token, identity_id } = federatedInfo;\n\t\tlet { expires_at } = federatedInfo;\n\n\t\t// Make sure expires_at is in millis\n\t\texpires_at =\n\t\t\tnew Date(expires_at).getFullYear() === 1970\n\t\t\t\t? expires_at * 1000\n\t\t\t\t: expires_at;\n\n\t\tconst that = this;\n\t\tlogger.debug('checking if federated jwt token expired');\n\t\tif (expires_at > new Date().getTime()) {\n\t\t\t// if not expired\n\t\t\tlogger.debug('token not expired');\n\t\t\treturn this._setCredentialsFromFederation({\n\t\t\t\tprovider,\n\t\t\t\ttoken,\n\t\t\t\tuser,\n\t\t\t\tidentity_id,\n\t\t\t\texpires_at,\n\t\t\t});\n\t\t} else {\n\t\t\t// if refresh handler exists\n\t\t\tif (\n\t\t\t\tthat._refreshHandlers[provider] &&\n\t\t\t\ttypeof that._refreshHandlers[provider] === 'function'\n\t\t\t) {\n\t\t\t\tlogger.debug('getting refreshed jwt token from federation provider');\n\t\t\t\treturn this._providerRefreshWithRetry({\n\t\t\t\t\trefreshHandler: that._refreshHandlers[provider],\n\t\t\t\t\tprovider,\n\t\t\t\t\tuser,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlogger.debug('no refresh handler for provider:', provider);\n\t\t\t\tthis.clear();\n\t\t\t\treturn Promise.reject('no refresh handler for provider');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _providerRefreshWithRetry({ refreshHandler, provider, user }) {\n\t\tconst MAX_DELAY_MS = 10 * 1000;\n\t\t// refreshHandler will retry network errors, otherwise it will\n\t\t// return NonRetryableError to break out of jitteredExponentialRetry\n\t\treturn jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS)\n\t\t\t.then(data => {\n\t\t\t\tlogger.debug('refresh federated token sucessfully', data);\n\t\t\t\treturn this._setCredentialsFromFederation({\n\t\t\t\t\tprovider,\n\t\t\t\t\ttoken: data.token,\n\t\t\t\t\tuser,\n\t\t\t\t\tidentity_id: data.identity_id,\n\t\t\t\t\texpires_at: data.expires_at,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tconst isNetworkError =\n\t\t\t\t\ttypeof e === 'string' &&\n\t\t\t\t\te.toLowerCase().lastIndexOf('network error', e.length) === 0;\n\n\t\t\t\tif (!isNetworkError) {\n\t\t\t\t\tthis.clear();\n\t\t\t\t}\n\n\t\t\t\tlogger.debug('refresh federated token failed', e);\n\t\t\t\treturn Promise.reject('refreshing federation token failed: ' + e);\n\t\t\t});\n\t}\n\n\tprivate _isExpired(credentials): boolean {\n\t\tif (!credentials) {\n\t\t\tlogger.debug('no credentials for expiration check');\n\t\t\treturn true;\n\t\t}\n\t\tlogger.debug('are these credentials expired?', credentials);\n\t\tconst ts = Date.now();\n\n\t\t/* returns date object.\n\t\t\thttps://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n\t\t*/\n\t\tconst { expiration } = credentials;\n\t\treturn expiration.getTime() <= ts;\n\t}\n\n\tprivate _isPastTTL(): boolean {\n\t\treturn this._nextCredentialsRefresh <= Date.now();\n\t}\n\n\tprivate async _setCredentialsForGuest() {\n\t\tlogger.debug('setting credentials for guest');\n\t\tconst { identityPoolId, region, mandatorySignIn } = this._config;\n\t\tif (mandatorySignIn) {\n\t\t\treturn Promise.reject(\n\t\t\t\t'cannot get guest credentials when mandatory signin enabled'\n\t\t\t);\n\t\t}\n\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug(\n\t\t\t\t'No Cognito Identity pool provided for unauthenticated access'\n\t\t\t);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No Cognito Identity pool provided for unauthenticated access'\n\t\t\t);\n\t\t}\n\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\n\t\tconst identityId = this._identityId = await this._getGuestIdentityId();\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet credentials = undefined;\n\t\tif (identityId) {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\tidentityId,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentity(cognitoIdentityParams)();\n\t\t} else {\n\t\t\t/*\n\t\t\tRetreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n\t\t\thttps://git.io/JeDxU\n\n\t\t\tNote: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n\t\t\t*/\n\t\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tthis._identityId = IdentityId;\n\t\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\t\tclient: cognitoClient,\n\t\t\t\t\tidentityId: IdentityId,\n\t\t\t\t};\n\n\t\t\t\tconst credentialsFromCognitoIdentity = fromCognitoIdentity(\n\t\t\t\t\tcognitoIdentityParams\n\t\t\t\t);\n\n\t\t\t\treturn credentialsFromCognitoIdentity();\n\t\t\t};\n\n\t\t\tcredentials = credentialsProvider().catch(async err => {\n\t\t\t\tthrow err;\n\t\t\t});\n\t\t}\n\n\t\treturn this._loadCredentials(credentials, 'guest', false, null)\n\t\t\t.then(res => {\n\t\t\t\treturn res;\n\t\t\t})\n\t\t\t.catch(async e => {\n\t\t\t\t// If identity id is deleted in the console, we make one attempt to recreate it\n\t\t\t\t// and remove existing id from cache.\n\t\t\t\tif (\n\t\t\t\t\te.name === 'ResourceNotFoundException' &&\n\t\t\t\t\te.message === `Identity '${identityId}' not found.`\n\t\t\t\t) {\n\t\t\t\t\tlogger.debug('Failed to load guest credentials');\n\t\t\t\t\tawait this._removeGuestIdentityId();\n\n\t\t\t\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._identityId = IdentityId;\n\t\t\t\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\t\t\t\tclient: cognitoClient,\n\t\t\t\t\t\t\tidentityId: IdentityId,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst credentialsFromCognitoIdentity = fromCognitoIdentity(\n\t\t\t\t\t\t\tcognitoIdentityParams\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn credentialsFromCognitoIdentity();\n\t\t\t\t\t};\n\n\t\t\t\t\tcredentials = credentialsProvider().catch(async err => {\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t});\n\n\t\t\t\t\treturn this._loadCredentials(credentials, 'guest', false, null);\n\t\t\t\t} else {\n\t\t\t\t\treturn e;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate _setCredentialsFromFederation(params) {\n\t\tconst { provider, token, identity_id } = params;\n\t\tconst domains = {\n\t\t\tgoogle: 'accounts.google.com',\n\t\t\tfacebook: 'graph.facebook.com',\n\t\t\tamazon: 'www.amazon.com',\n\t\t\tdeveloper: 'cognito-identity.amazonaws.com',\n\t\t};\n\n\t\t// Use custom provider url instead of the predefined ones\n\t\tconst domain = domains[provider] || provider;\n\t\tif (!domain) {\n\t\t\treturn Promise.reject('You must specify a federated provider');\n\t\t}\n\n\t\tconst logins = {};\n\t\tlogins[domain] = token;\n\n\t\tconst { identityPoolId, region } = this._config;\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug('No Cognito Federated Identity pool provided');\n\t\t\treturn Promise.reject('No Cognito Federated Identity pool provided');\n\t\t}\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet credentials = undefined;\n\t\tif (identity_id) {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\tidentityId: identity_id,\n\t\t\t\tlogins,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentity(cognitoIdentityParams)();\n\t\t} else {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityPoolParameters = {\n\t\t\t\tlogins,\n\t\t\t\tidentityPoolId,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentityPool(cognitoIdentityParams)();\n\t\t}\n\t\treturn this._loadCredentials(credentials, 'federated', true, params);\n\t}\n\n\tprivate _setCredentialsFromSession(session): Promise<ICredentials> {\n\t\tlogger.debug('set credentials from session');\n\t\tconst idToken = session.getIdToken().getJwtToken();\n\t\tconst { region, userPoolId, identityPoolId } = this._config;\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug('No Cognito Federated Identity pool provided');\n\t\t\treturn Promise.reject('No Cognito Federated Identity pool provided');\n\t\t}\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\t\tconst key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n\t\tconst logins = {};\n\t\tlogins[key] = idToken;\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\t/* \n\t\t\tRetreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n\t\t\thttps://git.io/JeDxU\n\n\t\t\tNote: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n\t\t*/\n\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t// try to fetch the local stored guest identity, if found, we will associate it with the logins\n\t\t\tconst guestIdentityId = await this._getGuestIdentityId();\n\n\t\t\tlet generatedOrRetrievedIdentityId;\n\t\t\tif (!guestIdentityId) {\n\t\t\t\t// for a first-time user, this will return a brand new identity\n\t\t\t\t// for a returning user, this will retrieve the previous identity assocaited with the logins\n\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t\tLogins: logins,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tgeneratedOrRetrievedIdentityId = IdentityId;\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\tCredentials: {\n\t\t\t\t\tAccessKeyId,\n\t\t\t\t\tExpiration,\n\t\t\t\t\tSecretKey,\n\t\t\t\t\tSessionToken,\n\t\t\t\t},\n\t\t\t\t// single source of truth for the primary identity associated with the logins\n\t\t\t\t// only if a guest identity is used for a first-time user, that guest identity will become its primary identity\n\t\t\t\tIdentityId: primaryIdentityId,\n\t\t\t} = await cognitoClient.send(\n\t\t\t\tnew GetCredentialsForIdentityCommand({\n\t\t\t\t  IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,\n\t\t\t\t  Logins: logins,\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tthis._identityId = primaryIdentityId;\n\t\t\tif (guestIdentityId) {\n\t\t\t\t// if guestIdentity is found and used by GetCredentialsForIdentity\n\t\t\t\t// it will be linked to the logins provided, and disqualified as an unauth identity\n\t\t\t\tlogger.debug(`The guest identity ${guestIdentityId} has been successfully linked to the logins`);\n\t\t\t\tif (guestIdentityId === primaryIdentityId) {\n\t\t\t\t\tlogger.debug(`The guest identity ${guestIdentityId} has become the primary identity`);\n\t\t\t\t}\n\t\t\t\t// remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest\n\t\t\t\tawait this._removeGuestIdentityId();\n\t\t\t}\n\n\t\t\t// https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40\n\t\t\treturn {\n\t\t\t\taccessKeyId: AccessKeyId,\n\t\t\t\tsecretAccessKey: SecretKey,\n\t\t\t\tsessionToken: SessionToken,\n\t\t\t\texpiration: Expiration,\n\t\t\t\tidentityId: primaryIdentityId,\n\t\t\t  };\n\t\t};\n\n\t\tconst credentials = credentialsProvider().catch(async err => {\n\t\t\tthrow err;\n\t\t});\n\n\t\treturn this._loadCredentials(credentials, 'userPool', true, null);\n\t}\n\n\tprivate _loadCredentials(\n\t\tcredentials,\n\t\tsource,\n\t\tauthenticated,\n\t\tinfo\n\t): Promise<ICredentials> {\n\t\tconst that = this;\n\t\treturn new Promise((res, rej) => {\n\t\t\tcredentials\n\t\t\t\t.then(async credentials => {\n\t\t\t\t\tlogger.debug('Load credentials successfully', credentials);\n\t\t\t\t\tif (this._identityId && !credentials.identityId) {\n\t\t\t\t\t\tcredentials['identityId'] = this._identityId;\n\t\t\t\t\t}\n\n\t\t\t\t\tthat._credentials = credentials;\n\t\t\t\t\tthat._credentials.authenticated = authenticated;\n\t\t\t\t\tthat._credentials_source = source;\n\t\t\t\t\tthat._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n\t\t\t\t\tif (source === 'federated') {\n\t\t\t\t\t\tconst user = Object.assign(\n\t\t\t\t\t\t\t{ id: this._credentials.identityId },\n\t\t\t\t\t\t\tinfo.user\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst { provider, token, expires_at, identity_id } = info;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis._storage.setItem(\n\t\t\t\t\t\t\t\t'aws-amplify-federatedInfo',\n\t\t\t\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\t\t\t\tprovider,\n\t\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t\texpires_at,\n\t\t\t\t\t\t\t\t\tidentity_id,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.debug('Failed to put federated info into auth storage', e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (source === 'guest') {\n\t\t\t\t\t\tawait this._setGuestIdentityId(credentials.identityId);\n\t\t\t\t\t}\n\t\t\t\t\tres(that._credentials);\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('Failed to load credentials', credentials);\n\t\t\t\t\t\tlogger.debug('Error loading credentials', err);\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\n\tpublic set(params, source): Promise<ICredentials> {\n\t\tif (source === 'session') {\n\t\t\treturn this._setCredentialsFromSession(params);\n\t\t} else if (source === 'federation') {\n\t\t\treturn this._setCredentialsFromFederation(params);\n\t\t} else if (source === 'guest') {\n\t\t\treturn this._setCredentialsForGuest();\n\t\t} else {\n\t\t\tlogger.debug('no source specified for setting credentials');\n\t\t\treturn Promise.reject('invalid source');\n\t\t}\n\t}\n\n\tpublic async clear() {\n\t\tthis._credentials = null;\n\t\tthis._credentials_source = null;\n\t\tlogger.debug('removing aws-amplify-federatedInfo from storage');\n\t\tthis._storage.removeItem('aws-amplify-federatedInfo');\n\t}\n\n\t/* operations on local stored guest identity */\n\tprivate async _getGuestIdentityId(): Promise<string> {\n\t\tconst { identityPoolId } = this._config;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t\treturn this._storage.getItem(\n\t\t\t\tthis._getCognitoIdentityIdStorageKey(identityPoolId)\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to get the cached guest identityId', e);\n\t\t}\n\t}\n\n\tprivate async _setGuestIdentityId(identityId: string) {\n\t\tconst { identityPoolId } = this._config;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t\tthis._storage.setItem(\n\t\t\t\tthis._getCognitoIdentityIdStorageKey(identityPoolId),\n\t\t\t\tidentityId,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to cache guest identityId', e);\n\t\t}\n\t}\n\n\tprivate async _removeGuestIdentityId() {\n\t\tconst { identityPoolId } = this._config;\n\t\tlogger.debug(\n\t\t\t`removing ${this._getCognitoIdentityIdStorageKey(\n\t\t\t\tidentityPoolId\n\t\t\t)} from storage`\n\t\t);\n\t\tthis._storage.removeItem(\n\t\t\tthis._getCognitoIdentityIdStorageKey(identityPoolId)\n\t\t);\n\t}\n\n\t/**\n\t * Compact version of credentials\n\t * @param {Object} credentials\n\t * @return {Object} - Credentials\n\t */\n\tpublic shear(credentials) {\n\t\treturn {\n\t\t\taccessKeyId: credentials.accessKeyId,\n\t\t\tsessionToken: credentials.sessionToken,\n\t\t\tsecretAccessKey: credentials.secretAccessKey,\n\t\t\tidentityId: credentials.identityId,\n\t\t\tauthenticated: credentials.authenticated,\n\t\t};\n\t}\n}\n\nexport const Credentials = new CredentialsClass(null);\n\nAmplify.register(Credentials);\n\n/**\n * @deprecated use named import\n */\nexport default Credentials;\n"]},"metadata":{},"sourceType":"module"}