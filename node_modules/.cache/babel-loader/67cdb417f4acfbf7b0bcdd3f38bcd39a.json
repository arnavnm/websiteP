{"ast":null,"code":"import _slicedToArray from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useContext, useEffect, useMemo, useState, useRef } from 'react';\nimport { MapContext } from './map';\nimport assert from '../utils/assert';\nimport { deepEqual } from '../utils/deep-equal';\n/* eslint-disable complexity, max-statements */\n\nfunction updateLayer(map, id, props, prevProps) {\n  assert(props.id === prevProps.id, 'layer id changed');\n  assert(props.type === prevProps.type, 'layer type changed');\n\n  if (props.type === 'custom' || prevProps.type === 'custom') {\n    return;\n  }\n\n  var _props$layout = props.layout,\n      layout = _props$layout === void 0 ? {} : _props$layout,\n      _props$paint = props.paint,\n      paint = _props$paint === void 0 ? {} : _props$paint,\n      filter = props.filter,\n      minzoom = props.minzoom,\n      maxzoom = props.maxzoom,\n      beforeId = props.beforeId;\n\n  if (beforeId !== prevProps.beforeId) {\n    map.moveLayer(id, beforeId);\n  }\n\n  if (layout !== prevProps.layout) {\n    var prevLayout = prevProps.layout || {};\n\n    for (var key in layout) {\n      if (!deepEqual(layout[key], prevLayout[key])) {\n        map.setLayoutProperty(id, key, layout[key]);\n      }\n    }\n\n    for (var _key in prevLayout) {\n      if (!layout.hasOwnProperty(_key)) {\n        map.setLayoutProperty(id, _key, undefined);\n      }\n    }\n  }\n\n  if (paint !== prevProps.paint) {\n    var prevPaint = prevProps.paint || {};\n\n    for (var _key2 in paint) {\n      if (!deepEqual(paint[_key2], prevPaint[_key2])) {\n        map.setPaintProperty(id, _key2, paint[_key2]);\n      }\n    }\n\n    for (var _key3 in prevPaint) {\n      if (!paint.hasOwnProperty(_key3)) {\n        map.setPaintProperty(id, _key3, undefined);\n      }\n    }\n  }\n\n  if (!deepEqual(filter, prevProps.filter)) {\n    map.setFilter(id, filter);\n  }\n\n  if (minzoom !== prevProps.minzoom || maxzoom !== prevProps.maxzoom) {\n    map.setLayerZoomRange(id, minzoom, maxzoom);\n  }\n}\n\nfunction createLayer(map, id, props) {\n  // @ts-ignore\n  if (map.style && map.style._loaded && (!('source' in props) || map.getSource(props.source))) {\n    var options = _objectSpread(_objectSpread({}, props), {}, {\n      id: id\n    });\n\n    delete options.beforeId; // @ts-ignore\n\n    map.addLayer(options, props.beforeId);\n  }\n}\n/* eslint-enable complexity, max-statements */\n\n\nvar layerCounter = 0;\n\nfunction Layer(props) {\n  var map = useContext(MapContext).map.getMap();\n  var propsRef = useRef(props);\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      setStyleLoaded = _useState2[1];\n\n  var id = useMemo(function () {\n    return props.id || \"jsx-layer-\".concat(layerCounter++);\n  }, []);\n  useEffect(function () {\n    if (map) {\n      var forceUpdate = function forceUpdate() {\n        return setStyleLoaded(function (version) {\n          return version + 1;\n        });\n      };\n\n      map.on('styledata', forceUpdate);\n      forceUpdate();\n      return function () {\n        map.off('styledata', forceUpdate); // @ts-ignore\n\n        if (map.style && map.style._loaded && map.getLayer(id)) {\n          map.removeLayer(id);\n        }\n      };\n    }\n\n    return undefined;\n  }, [map]); // @ts-ignore\n\n  var layer = map && map.style && map.getLayer(id);\n\n  if (layer) {\n    try {\n      updateLayer(map, id, props, propsRef.current);\n    } catch (error) {\n      console.warn(error); // eslint-disable-line\n    }\n  } else {\n    createLayer(map, id, props);\n  } // Store last rendered props\n\n\n  propsRef.current = props;\n  return null;\n}\n\nexport default Layer;","map":{"version":3,"mappings":";;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,OAAhC,EAAyCC,QAAzC,EAAmDC,MAAnD,QAAiE,OAAjE;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA;;AACA,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,EAA1B,EAA8BC,KAA9B,EAAqCC,SAArC,EAAgD;EAC5CN,MAAM,CAACK,KAAK,CAACD,EAAN,KAAaE,SAAS,CAACF,EAAxB,EAA4B,kBAA5B,CAAN;EACAJ,MAAM,CAACK,KAAK,CAACE,IAAN,KAAeD,SAAS,CAACC,IAA1B,EAAgC,oBAAhC,CAAN;;EACA,IAAIF,KAAK,CAACE,IAAN,KAAe,QAAf,IAA2BD,SAAS,CAACC,IAAV,KAAmB,QAAlD,EAA4D;IACxD;EACH;;EACD,oBAAwEF,KAAxE,CAAQG,MAAR;EAAA,IAAQA,MAAR,8BAAiB,EAAjB;EAAA,mBAAwEH,KAAxE,CAAqBI,KAArB;EAAA,IAAqBA,KAArB,6BAA6B,EAA7B;EAAA,IAAiCC,MAAjC,GAAwEL,KAAxE,CAAiCK,MAAjC;EAAA,IAAyCC,OAAzC,GAAwEN,KAAxE,CAAyCM,OAAzC;EAAA,IAAkDC,OAAlD,GAAwEP,KAAxE,CAAkDO,OAAlD;EAAA,IAA2DC,QAA3D,GAAwER,KAAxE,CAA2DQ,QAA3D;;EACA,IAAIA,QAAQ,KAAKP,SAAS,CAACO,QAA3B,EAAqC;IACjCV,GAAG,CAACW,SAAJ,CAAcV,EAAd,EAAkBS,QAAlB;EACH;;EACD,IAAIL,MAAM,KAAKF,SAAS,CAACE,MAAzB,EAAiC;IAC7B,IAAMO,UAAU,GAAGT,SAAS,CAACE,MAAV,IAAoB,EAAvC;;IACA,KAAK,IAAMQ,GAAX,IAAkBR,MAAlB,EAA0B;MACtB,IAAI,CAACP,SAAS,CAACO,MAAM,CAACQ,GAAD,CAAP,EAAcD,UAAU,CAACC,GAAD,CAAxB,CAAd,EAA8C;QAC1Cb,GAAG,CAACc,iBAAJ,CAAsBb,EAAtB,EAA0BY,GAA1B,EAA+BR,MAAM,CAACQ,GAAD,CAArC;MACH;IACJ;;IACD,KAAK,IAAMA,IAAX,IAAkBD,UAAlB,EAA8B;MAC1B,IAAI,CAACP,MAAM,CAACU,cAAP,CAAsBF,IAAtB,CAAL,EAAiC;QAC7Bb,GAAG,CAACc,iBAAJ,CAAsBb,EAAtB,EAA0BY,IAA1B,EAA+BG,SAA/B;MACH;IACJ;EACJ;;EACD,IAAIV,KAAK,KAAKH,SAAS,CAACG,KAAxB,EAA+B;IAC3B,IAAMW,SAAS,GAAGd,SAAS,CAACG,KAAV,IAAmB,EAArC;;IACA,KAAK,IAAMO,KAAX,IAAkBP,KAAlB,EAAyB;MACrB,IAAI,CAACR,SAAS,CAACQ,KAAK,CAACO,KAAD,CAAN,EAAaI,SAAS,CAACJ,KAAD,CAAtB,CAAd,EAA4C;QACxCb,GAAG,CAACkB,gBAAJ,CAAqBjB,EAArB,EAAyBY,KAAzB,EAA8BP,KAAK,CAACO,KAAD,CAAnC;MACH;IACJ;;IACD,KAAK,IAAMA,KAAX,IAAkBI,SAAlB,EAA6B;MACzB,IAAI,CAACX,KAAK,CAACS,cAAN,CAAqBF,KAArB,CAAL,EAAgC;QAC5Bb,GAAG,CAACkB,gBAAJ,CAAqBjB,EAArB,EAAyBY,KAAzB,EAA8BG,SAA9B;MACH;IACJ;EACJ;;EACD,IAAI,CAAClB,SAAS,CAACS,MAAD,EAASJ,SAAS,CAACI,MAAnB,CAAd,EAA0C;IACtCP,GAAG,CAACmB,SAAJ,CAAclB,EAAd,EAAkBM,MAAlB;EACH;;EACD,IAAIC,OAAO,KAAKL,SAAS,CAACK,OAAtB,IAAiCC,OAAO,KAAKN,SAAS,CAACM,OAA3D,EAAoE;IAChET,GAAG,CAACoB,iBAAJ,CAAsBnB,EAAtB,EAA0BO,OAA1B,EAAmCC,OAAnC;EACH;AACJ;;AACD,SAASY,WAAT,CAAqBrB,GAArB,EAA0BC,EAA1B,EAA8BC,KAA9B,EAAqC;EACjC;EACA,IAAIF,GAAG,CAACsB,KAAJ,IAAatB,GAAG,CAACsB,KAAJ,CAAUC,OAAvB,KAAmC,EAAE,YAAYrB,KAAd,KAAwBF,GAAG,CAACwB,SAAJ,CAActB,KAAK,CAACuB,MAApB,CAA3D,CAAJ,EAA6F;IACzF,IAAMC,OAAO,mCAAQxB,KAAR;MAAeD,EAAE,EAAFA;IAAf,EAAb;;IACA,OAAOyB,OAAO,CAAChB,QAAf,CAFyF,CAGzF;;IACAV,GAAG,CAAC2B,QAAJ,CAAaD,OAAb,EAAsBxB,KAAK,CAACQ,QAA5B;EACH;AACJ;AACD;;;AACA,IAAIkB,YAAY,GAAG,CAAnB;;AACA,SAASC,KAAT,CAAe3B,KAAf,EAAsB;EAClB,IAAMF,GAAG,GAAGT,UAAU,CAACK,UAAD,CAAV,CAAuBI,GAAvB,CAA2B8B,MAA3B,EAAZ;EACA,IAAMC,QAAQ,GAAGpC,MAAM,CAACO,KAAD,CAAvB;;EACA,gBAA2BR,QAAQ,CAAC,CAAD,CAAnC;EAAA;EAAA,IAASsC,cAAT;;EACA,IAAM/B,EAAE,GAAGR,OAAO,CAAC;IAAA,OAAMS,KAAK,CAACD,EAAN,wBAAyB2B,YAAY,EAArC,CAAN;EAAA,CAAD,EAAkD,EAAlD,CAAlB;EACApC,SAAS,CAAC,YAAM;IACZ,IAAIQ,GAAJ,EAAS;MACL,IAAMiC,WAAW,GAAG,SAAdA,WAAc;QAAA,OAAMD,cAAc,CAAC,UAAAE,OAAO;UAAA,OAAIA,OAAO,GAAG,CAAd;QAAA,CAAR,CAApB;MAAA,CAApB;;MACAlC,GAAG,CAACmC,EAAJ,CAAO,WAAP,EAAoBF,WAApB;MACAA,WAAW;MACX,OAAO,YAAM;QACTjC,GAAG,CAACoC,GAAJ,CAAQ,WAAR,EAAqBH,WAArB,EADS,CAET;;QACA,IAAIjC,GAAG,CAACsB,KAAJ,IAAatB,GAAG,CAACsB,KAAJ,CAAUC,OAAvB,IAAkCvB,GAAG,CAACqC,QAAJ,CAAapC,EAAb,CAAtC,EAAwD;UACpDD,GAAG,CAACsC,WAAJ,CAAgBrC,EAAhB;QACH;MACJ,CAND;IAOH;;IACD,OAAOe,SAAP;EACH,CAdQ,EAcN,CAAChB,GAAD,CAdM,CAAT,CALkB,CAoBlB;;EACA,IAAMuC,KAAK,GAAGvC,GAAG,IAAIA,GAAG,CAACsB,KAAX,IAAoBtB,GAAG,CAACqC,QAAJ,CAAapC,EAAb,CAAlC;;EACA,IAAIsC,KAAJ,EAAW;IACP,IAAI;MACAxC,WAAW,CAACC,GAAD,EAAMC,EAAN,EAAUC,KAAV,EAAiB6B,QAAQ,CAACS,OAA1B,CAAX;IACH,CAFD,CAGA,OAAOC,KAAP,EAAc;MACVC,OAAO,CAACC,IAAR,CAAaF,KAAb,EADU,CACW;IACxB;EACJ,CAPD,MAQK;IACDpB,WAAW,CAACrB,GAAD,EAAMC,EAAN,EAAUC,KAAV,CAAX;EACH,CAhCiB,CAiClB;;;EACA6B,QAAQ,CAACS,OAAT,GAAmBtC,KAAnB;EACA,OAAO,IAAP;AACH;;AACD,eAAe2B,KAAf","names":["useContext","useEffect","useMemo","useState","useRef","MapContext","assert","deepEqual","updateLayer","map","id","props","prevProps","type","layout","paint","filter","minzoom","maxzoom","beforeId","moveLayer","prevLayout","key","setLayoutProperty","hasOwnProperty","undefined","prevPaint","setPaintProperty","setFilter","setLayerZoomRange","createLayer","style","_loaded","getSource","source","options","addLayer","layerCounter","Layer","getMap","propsRef","setStyleLoaded","forceUpdate","version","on","off","getLayer","removeLayer","layer","current","error","console","warn"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/react-map-gl/src/components/layer.ts"],"sourcesContent":["import {useContext, useEffect, useMemo, useState, useRef} from 'react';\nimport {MapContext} from './map';\nimport assert from '../utils/assert';\nimport {deepEqual} from '../utils/deep-equal';\n\nimport type {MapboxMap, AnyLayer} from '../types';\n\nexport type LayerProps = AnyLayer & {\n  id?: string;\n  /** If set, the layer will be inserted before the specified layer */\n  beforeId?: string;\n};\n\n/* eslint-disable complexity, max-statements */\nfunction updateLayer(map: MapboxMap, id: string, props: LayerProps, prevProps: LayerProps) {\n  assert(props.id === prevProps.id, 'layer id changed');\n  assert(props.type === prevProps.type, 'layer type changed');\n\n  if (props.type === 'custom' || prevProps.type === 'custom') {\n    return;\n  }\n\n  const {layout = {}, paint = {}, filter, minzoom, maxzoom, beforeId} = props;\n\n  if (beforeId !== prevProps.beforeId) {\n    map.moveLayer(id, beforeId);\n  }\n  if (layout !== prevProps.layout) {\n    const prevLayout = prevProps.layout || {};\n    for (const key in layout) {\n      if (!deepEqual(layout[key], prevLayout[key])) {\n        map.setLayoutProperty(id, key, layout[key]);\n      }\n    }\n    for (const key in prevLayout) {\n      if (!layout.hasOwnProperty(key)) {\n        map.setLayoutProperty(id, key, undefined);\n      }\n    }\n  }\n  if (paint !== prevProps.paint) {\n    const prevPaint = prevProps.paint || {};\n    for (const key in paint) {\n      if (!deepEqual(paint[key], prevPaint[key])) {\n        map.setPaintProperty(id, key, paint[key]);\n      }\n    }\n    for (const key in prevPaint) {\n      if (!paint.hasOwnProperty(key)) {\n        map.setPaintProperty(id, key, undefined);\n      }\n    }\n  }\n  if (!deepEqual(filter, prevProps.filter)) {\n    map.setFilter(id, filter);\n  }\n  if (minzoom !== prevProps.minzoom || maxzoom !== prevProps.maxzoom) {\n    map.setLayerZoomRange(id, minzoom, maxzoom);\n  }\n}\n\nfunction createLayer(map: MapboxMap, id: string, props: LayerProps) {\n  // @ts-ignore\n  if (map.style && map.style._loaded && (!('source' in props) || map.getSource(props.source))) {\n    const options: LayerProps = {...props, id};\n    delete options.beforeId;\n\n    // @ts-ignore\n    map.addLayer(options, props.beforeId);\n  }\n}\n\n/* eslint-enable complexity, max-statements */\n\nlet layerCounter = 0;\n\nfunction Layer(props: LayerProps) {\n  const map: MapboxMap = useContext(MapContext).map.getMap();\n  const propsRef = useRef(props);\n  const [, setStyleLoaded] = useState(0);\n\n  const id = useMemo(() => props.id || `jsx-layer-${layerCounter++}`, []);\n\n  useEffect(() => {\n    if (map) {\n      const forceUpdate = () => setStyleLoaded(version => version + 1);\n      map.on('styledata', forceUpdate);\n      forceUpdate();\n\n      return () => {\n        map.off('styledata', forceUpdate);\n        // @ts-ignore\n        if (map.style && map.style._loaded && map.getLayer(id)) {\n          map.removeLayer(id);\n        }\n      };\n    }\n    return undefined;\n  }, [map]);\n\n  // @ts-ignore\n  const layer = map && map.style && map.getLayer(id);\n  if (layer) {\n    try {\n      updateLayer(map, id, props, propsRef.current);\n    } catch (error) {\n      console.warn(error); // eslint-disable-line\n    }\n  } else {\n    createLayer(map, id, props);\n  }\n\n  // Store last rendered props\n  propsRef.current = props;\n\n  return null;\n}\n\nexport default Layer;\n"]},"metadata":{},"sourceType":"module"}