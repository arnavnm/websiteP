{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { defaultConfig, getCurrTime } from './Utils';\nimport { StorageCache } from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Cache');\n/**\n * Customized storage based on the SessionStorage or LocalStorage with LRU implemented\n */\n\nvar BrowserStorageCacheClass =\n/** @class */\nfunction (_super) {\n  __extends(BrowserStorageCacheClass, _super);\n  /**\n   * initialize the cache\n   * @param config - the configuration of the cache\n   */\n\n\n  function BrowserStorageCacheClass(config) {\n    var _this = this;\n\n    var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\n    _this = _super.call(this, cacheConfig) || this;\n    _this.config.storage = cacheConfig.storage;\n    _this.getItem = _this.getItem.bind(_this);\n    _this.setItem = _this.setItem.bind(_this);\n    _this.removeItem = _this.removeItem.bind(_this);\n    return _this;\n  }\n  /**\n   * decrease current size of the cache\n   *\n   * @private\n   * @param amount - the amount of the cache size which needs to be decreased\n   */\n\n\n  BrowserStorageCacheClass.prototype._decreaseCurSizeInBytes = function (amount) {\n    var curSize = this.getCacheCurSize();\n    this.config.storage.setItem(this.cacheCurSizeKey, (curSize - amount).toString());\n  };\n  /**\n   * increase current size of the cache\n   *\n   * @private\n   * @param amount - the amount of the cache szie which need to be increased\n   */\n\n\n  BrowserStorageCacheClass.prototype._increaseCurSizeInBytes = function (amount) {\n    var curSize = this.getCacheCurSize();\n    this.config.storage.setItem(this.cacheCurSizeKey, (curSize + amount).toString());\n  };\n  /**\n   * update the visited time if item has been visited\n   *\n   * @private\n   * @param item - the item which need to be refreshed\n   * @param prefixedKey - the key of the item\n   *\n   * @return the refreshed item\n   */\n\n\n  BrowserStorageCacheClass.prototype._refreshItem = function (item, prefixedKey) {\n    item.visitedTime = getCurrTime();\n    this.config.storage.setItem(prefixedKey, JSON.stringify(item));\n    return item;\n  };\n  /**\n   * check wether item is expired\n   *\n   * @private\n   * @param key - the key of the item\n   *\n   * @return true if the item is expired.\n   */\n\n\n  BrowserStorageCacheClass.prototype._isExpired = function (key) {\n    var text = this.config.storage.getItem(key);\n    var item = JSON.parse(text);\n\n    if (getCurrTime() >= item.expires) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * delete item from cache\n   *\n   * @private\n   * @param prefixedKey - the key of the item\n   * @param size - optional, the byte size of the item\n   */\n\n\n  BrowserStorageCacheClass.prototype._removeItem = function (prefixedKey, size) {\n    var itemSize = size ? size : JSON.parse(this.config.storage.getItem(prefixedKey)).byteSize;\n\n    this._decreaseCurSizeInBytes(itemSize); // remove the cache item\n\n\n    this.config.storage.removeItem(prefixedKey);\n  };\n  /**\n   * put item into cache\n   *\n   * @private\n   * @param prefixedKey - the key of the item\n   * @param itemData - the value of the item\n   * @param itemSizeInBytes - the byte size of the item\n   */\n\n\n  BrowserStorageCacheClass.prototype._setItem = function (prefixedKey, item) {\n    // update the cache size\n    this._increaseCurSizeInBytes(item.byteSize);\n\n    try {\n      this.config.storage.setItem(prefixedKey, JSON.stringify(item));\n    } catch (setItemErr) {\n      // if failed, we need to rollback the cache size\n      this._decreaseCurSizeInBytes(item.byteSize);\n\n      logger.error(\"Failed to set item \" + setItemErr);\n    }\n  };\n  /**\n   * total space needed when poping out items\n   *\n   * @private\n   * @param itemSize\n   *\n   * @return total space needed\n   */\n\n\n  BrowserStorageCacheClass.prototype._sizeToPop = function (itemSize) {\n    var spaceItemNeed = this.getCacheCurSize() + itemSize - this.config.capacityInBytes;\n    var cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;\n    return spaceItemNeed > cacheThresholdSpace ? spaceItemNeed : cacheThresholdSpace;\n  };\n  /**\n   * see whether cache is full\n   *\n   * @private\n   * @param itemSize\n   *\n   * @return true if cache is full\n   */\n\n\n  BrowserStorageCacheClass.prototype._isCacheFull = function (itemSize) {\n    return itemSize + this.getCacheCurSize() > this.config.capacityInBytes;\n  };\n  /**\n   * scan the storage and find out all the keys owned by this cache\n   * also clean the expired keys while scanning\n   *\n   * @private\n   *\n   * @return array of keys\n   */\n\n\n  BrowserStorageCacheClass.prototype._findValidKeys = function () {\n    var keys = [];\n    var keyInCache = []; // get all keys in Storage\n\n    for (var i = 0; i < this.config.storage.length; i += 1) {\n      keyInCache.push(this.config.storage.key(i));\n    } // find those items which belong to our cache and also clean those expired items\n\n\n    for (var i = 0; i < keyInCache.length; i += 1) {\n      var key = keyInCache[i];\n\n      if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {\n        if (this._isExpired(key)) {\n          this._removeItem(key);\n        } else {\n          keys.push(key);\n        }\n      }\n    }\n\n    return keys;\n  };\n  /**\n   * get all the items we have, sort them by their priority,\n   * if priority is same, sort them by their last visited time\n   * pop out items from the low priority (5 is the lowest)\n   *\n   * @private\n   * @param keys - all the keys in this cache\n   * @param sizeToPop - the total size of the items which needed to be poped out\n   */\n\n\n  BrowserStorageCacheClass.prototype._popOutItems = function (keys, sizeToPop) {\n    var items = [];\n    var remainedSize = sizeToPop; // get the items from Storage\n\n    for (var i = 0; i < keys.length; i += 1) {\n      var val = this.config.storage.getItem(keys[i]);\n\n      if (val != null) {\n        var item = JSON.parse(val);\n        items.push(item);\n      }\n    } // first compare priority\n    // then compare visited time\n\n\n    items.sort(function (a, b) {\n      if (a.priority > b.priority) {\n        return -1;\n      } else if (a.priority < b.priority) {\n        return 1;\n      } else {\n        if (a.visitedTime < b.visitedTime) {\n          return -1;\n        } else return 1;\n      }\n    });\n\n    for (var i = 0; i < items.length; i += 1) {\n      // pop out items until we have enough room for new item\n      this._removeItem(items[i].key, items[i].byteSize);\n\n      remainedSize -= items[i].byteSize;\n\n      if (remainedSize <= 0) {\n        return;\n      }\n    }\n  };\n  /**\n   * Set item into cache. You can put number, string, boolean or object.\n   * The cache will first check whether has the same key.\n   * If it has, it will delete the old item and then put the new item in\n   * The cache will pop out items if it is full\n   * You can specify the cache item options. The cache will abort and output a warning:\n   * If the key is invalid\n   * If the size of the item exceeds itemMaxSize.\n   * If the value is undefined\n   * If incorrect cache item configuration\n   * If error happened with browser storage\n   *\n   * @param key - the key of the item\n   * @param value - the value of the item\n   * @param {Object} [options] - optional, the specified meta-data\n   */\n\n\n  BrowserStorageCacheClass.prototype.setItem = function (key, value, options) {\n    logger.log(\"Set item: key is \" + key + \", value is \" + value + \" with options: \" + options);\n    var prefixedKey = this.config.keyPrefix + key; // invalid keys\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return;\n    }\n\n    if (typeof value === 'undefined') {\n      logger.warn(\"The value of item should not be undefined!\");\n      return;\n    }\n\n    var cacheItemOptions = {\n      priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\n      expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + getCurrTime()\n    };\n\n    if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n      logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n      return;\n    }\n\n    var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions); // check wether this item is too big;\n\n    if (item.byteSize > this.config.itemMaxSize) {\n      logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n      return;\n    }\n\n    try {\n      // first look into the storage, if it exists, delete it.\n      var val = this.config.storage.getItem(prefixedKey);\n\n      if (val) {\n        this._removeItem(prefixedKey, JSON.parse(val).byteSize);\n      } // check whether the cache is full\n\n\n      if (this._isCacheFull(item.byteSize)) {\n        var validKeys = this._findValidKeys(); // check again and then pop out items\n\n\n        if (this._isCacheFull(item.byteSize)) {\n          var sizeToPop = this._sizeToPop(item.byteSize);\n\n          this._popOutItems(validKeys, sizeToPop);\n        }\n      } // put item in the cache\n      // may failed due to storage full\n\n\n      this._setItem(prefixedKey, item);\n    } catch (e) {\n      logger.warn(\"setItem failed! \" + e);\n    }\n  };\n  /**\n   * Get item from cache. It will return null if item doesn’t exist or it has been expired.\n   * If you specified callback function in the options,\n   * then the function will be executed if no such item in the cache\n   * and finally put the return value into cache.\n   * Please make sure the callback function will return the value you want to put into the cache.\n   * The cache will abort output a warning:\n   * If the key is invalid\n   * If error happened with browser storage\n   *\n   * @param key - the key of the item\n   * @param {Object} [options] - the options of callback function\n   *\n   * @return - return the value of the item\n   */\n\n\n  BrowserStorageCacheClass.prototype.getItem = function (key, options) {\n    logger.log(\"Get item: key is \" + key + \" with options \" + options);\n    var ret = null;\n    var prefixedKey = this.config.keyPrefix + key;\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return null;\n    }\n\n    try {\n      ret = this.config.storage.getItem(prefixedKey);\n\n      if (ret != null) {\n        if (this._isExpired(prefixedKey)) {\n          // if expired, remove that item and return null\n          this._removeItem(prefixedKey, JSON.parse(ret).byteSize);\n\n          ret = null;\n        } else {\n          // if not expired, great, return the value and refresh it\n          var item = JSON.parse(ret);\n          item = this._refreshItem(item, prefixedKey);\n          return item.data;\n        }\n      }\n\n      if (options && options.callback !== undefined) {\n        var val = options.callback();\n\n        if (val !== null) {\n          this.setItem(key, val, options);\n        }\n\n        return val;\n      }\n\n      return null;\n    } catch (e) {\n      logger.warn(\"getItem failed! \" + e);\n      return null;\n    }\n  };\n  /**\n   * remove item from the cache\n   * The cache will abort output a warning:\n   * If error happened with browser storage\n   * @param key - the key of the item\n   */\n\n\n  BrowserStorageCacheClass.prototype.removeItem = function (key) {\n    logger.log(\"Remove item: key is \" + key);\n    var prefixedKey = this.config.keyPrefix + key;\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      return;\n    }\n\n    try {\n      var val = this.config.storage.getItem(prefixedKey);\n\n      if (val) {\n        this._removeItem(prefixedKey, JSON.parse(val).byteSize);\n      }\n    } catch (e) {\n      logger.warn(\"removeItem failed! \" + e);\n    }\n  };\n  /**\n   * clear the entire cache\n   * The cache will abort output a warning:\n   * If error happened with browser storage\n   */\n\n\n  BrowserStorageCacheClass.prototype.clear = function () {\n    logger.log(\"Clear Cache\");\n    var keysToRemove = [];\n\n    for (var i = 0; i < this.config.storage.length; i += 1) {\n      var key = this.config.storage.key(i);\n\n      if (key.indexOf(this.config.keyPrefix) === 0) {\n        keysToRemove.push(key);\n      }\n    }\n\n    try {\n      for (var i = 0; i < keysToRemove.length; i += 1) {\n        this.config.storage.removeItem(keysToRemove[i]);\n      }\n    } catch (e) {\n      logger.warn(\"clear failed! \" + e);\n    }\n  };\n  /**\n   * Return all the keys in the cache.\n   *\n   * @return - all keys in the cache\n   */\n\n\n  BrowserStorageCacheClass.prototype.getAllKeys = function () {\n    var keys = [];\n\n    for (var i = 0; i < this.config.storage.length; i += 1) {\n      var key = this.config.storage.key(i);\n\n      if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {\n        keys.push(key.substring(this.config.keyPrefix.length));\n      }\n    }\n\n    return keys;\n  };\n  /**\n   * return the current size of the cache\n   *\n   * @return - current size of the cache\n   */\n\n\n  BrowserStorageCacheClass.prototype.getCacheCurSize = function () {\n    var ret = this.config.storage.getItem(this.cacheCurSizeKey);\n\n    if (!ret) {\n      this.config.storage.setItem(this.cacheCurSizeKey, '0');\n      ret = '0';\n    }\n\n    return Number(ret);\n  };\n  /**\n   * Return a new instance of cache with customized configuration.\n   * @param config - the customized configuration\n   *\n   * @return - new instance of Cache\n   */\n\n\n  BrowserStorageCacheClass.prototype.createInstance = function (config) {\n    if (!config.keyPrefix || config.keyPrefix === defaultConfig.keyPrefix) {\n      logger.error('invalid keyPrefix, setting keyPrefix with timeStamp');\n      config.keyPrefix = getCurrTime.toString();\n    }\n\n    return new BrowserStorageCacheClass(config);\n  };\n\n  return BrowserStorageCacheClass;\n}(StorageCache);\n\nexport { BrowserStorageCacheClass };\nexport var BrowserStorageCache = new BrowserStorageCacheClass();\n/**\n * @deprecated use named import\n */\n\nexport default BrowserStorageCache;","map":{"version":3,"mappings":"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","names":["defaultConfig","getCurrTime","StorageCache","ConsoleLogger","Logger","logger","__extends","config","cacheConfig","Object","assign","_this","storage","getItem","bind","setItem","removeItem","BrowserStorageCacheClass","amount","curSize","getCacheCurSize","cacheCurSizeKey","toString","item","prefixedKey","visitedTime","JSON","stringify","key","text","parse","expires","size","itemSize","byteSize","_decreaseCurSizeInBytes","_increaseCurSizeInBytes","setItemErr","error","spaceItemNeed","capacityInBytes","cacheThresholdSpace","warningThreshold","keys","keyInCache","i","length","push","indexOf","keyPrefix","_isExpired","_removeItem","sizeToPop","items","remainedSize","val","sort","a","b","priority","value","options","log","warn","cacheItemOptions","undefined","defaultPriority","defaultTTL","fillCacheItem","itemMaxSize","_isCacheFull","validKeys","_findValidKeys","_sizeToPop","_popOutItems","_setItem","e","ret","_refreshItem","data","callback","keysToRemove","substring","Number","BrowserStorageCache"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-amplify/cache/src/BrowserStorageCache.ts"],"sourcesContent":["/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\n\r\nimport { defaultConfig, getCurrTime } from './Utils';\r\n\r\nimport { StorageCache } from './StorageCache';\r\nimport { ICache, CacheConfig, CacheItem, CacheItemOptions } from './types';\r\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\r\n\r\nconst logger = new Logger('Cache');\r\n\r\n/**\r\n * Customized storage based on the SessionStorage or LocalStorage with LRU implemented\r\n */\r\nexport class BrowserStorageCacheClass extends StorageCache implements ICache {\r\n\t/**\r\n\t * initialize the cache\r\n\t * @param config - the configuration of the cache\r\n\t */\r\n\tconstructor(config?: CacheConfig) {\r\n\t\tconst cacheConfig = config\r\n\t\t\t? Object.assign({}, defaultConfig, config)\r\n\t\t\t: defaultConfig;\r\n\t\tsuper(cacheConfig);\r\n\t\tthis.config.storage = cacheConfig.storage;\r\n\t\tthis.getItem = this.getItem.bind(this);\r\n\t\tthis.setItem = this.setItem.bind(this);\r\n\t\tthis.removeItem = this.removeItem.bind(this);\r\n\t}\r\n\r\n\t/**\r\n\t * decrease current size of the cache\r\n\t *\r\n\t * @private\r\n\t * @param amount - the amount of the cache size which needs to be decreased\r\n\t */\r\n\tprivate _decreaseCurSizeInBytes(amount: number): void {\r\n\t\tconst curSize: number = this.getCacheCurSize();\r\n\t\tthis.config.storage.setItem(\r\n\t\t\tthis.cacheCurSizeKey,\r\n\t\t\t(curSize - amount).toString()\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * increase current size of the cache\r\n\t *\r\n\t * @private\r\n\t * @param amount - the amount of the cache szie which need to be increased\r\n\t */\r\n\tprivate _increaseCurSizeInBytes(amount: number): void {\r\n\t\tconst curSize: number = this.getCacheCurSize();\r\n\t\tthis.config.storage.setItem(\r\n\t\t\tthis.cacheCurSizeKey,\r\n\t\t\t(curSize + amount).toString()\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * update the visited time if item has been visited\r\n\t *\r\n\t * @private\r\n\t * @param item - the item which need to be refreshed\r\n\t * @param prefixedKey - the key of the item\r\n\t *\r\n\t * @return the refreshed item\r\n\t */\r\n\tprivate _refreshItem(item: CacheItem, prefixedKey: string): CacheItem {\r\n\t\titem.visitedTime = getCurrTime();\r\n\t\tthis.config.storage.setItem(prefixedKey, JSON.stringify(item));\r\n\t\treturn item;\r\n\t}\r\n\r\n\t/**\r\n\t * check wether item is expired\r\n\t *\r\n\t * @private\r\n\t * @param key - the key of the item\r\n\t *\r\n\t * @return true if the item is expired.\r\n\t */\r\n\tprivate _isExpired(key: string): boolean {\r\n\t\tconst text: string | null = this.config.storage.getItem(key);\r\n\t\tconst item: CacheItem = JSON.parse(text);\r\n\t\tif (getCurrTime() >= item.expires) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * delete item from cache\r\n\t *\r\n\t * @private\r\n\t * @param prefixedKey - the key of the item\r\n\t * @param size - optional, the byte size of the item\r\n\t */\r\n\tprivate _removeItem(prefixedKey: string, size?: number): void {\r\n\t\tconst itemSize: number = size\r\n\t\t\t? size\r\n\t\t\t: JSON.parse(this.config.storage.getItem(prefixedKey)).byteSize;\r\n\t\tthis._decreaseCurSizeInBytes(itemSize);\r\n\t\t// remove the cache item\r\n\t\tthis.config.storage.removeItem(prefixedKey);\r\n\t}\r\n\r\n\t/**\r\n\t * put item into cache\r\n\t *\r\n\t * @private\r\n\t * @param prefixedKey - the key of the item\r\n\t * @param itemData - the value of the item\r\n\t * @param itemSizeInBytes - the byte size of the item\r\n\t */\r\n\tprivate _setItem(prefixedKey: string, item: CacheItem): void {\r\n\t\t// update the cache size\r\n\t\tthis._increaseCurSizeInBytes(item.byteSize);\r\n\r\n\t\ttry {\r\n\t\t\tthis.config.storage.setItem(prefixedKey, JSON.stringify(item));\r\n\t\t} catch (setItemErr) {\r\n\t\t\t// if failed, we need to rollback the cache size\r\n\t\t\tthis._decreaseCurSizeInBytes(item.byteSize);\r\n\t\t\tlogger.error(`Failed to set item ${setItemErr}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * total space needed when poping out items\r\n\t *\r\n\t * @private\r\n\t * @param itemSize\r\n\t *\r\n\t * @return total space needed\r\n\t */\r\n\tprivate _sizeToPop(itemSize: number): number {\r\n\t\tconst spaceItemNeed =\r\n\t\t\tthis.getCacheCurSize() + itemSize - this.config.capacityInBytes;\r\n\t\tconst cacheThresholdSpace =\r\n\t\t\t(1 - this.config.warningThreshold) * this.config.capacityInBytes;\r\n\t\treturn spaceItemNeed > cacheThresholdSpace\r\n\t\t\t? spaceItemNeed\r\n\t\t\t: cacheThresholdSpace;\r\n\t}\r\n\r\n\t/**\r\n\t * see whether cache is full\r\n\t *\r\n\t * @private\r\n\t * @param itemSize\r\n\t *\r\n\t * @return true if cache is full\r\n\t */\r\n\tprivate _isCacheFull(itemSize: number): boolean {\r\n\t\treturn itemSize + this.getCacheCurSize() > this.config.capacityInBytes;\r\n\t}\r\n\r\n\t/**\r\n\t * scan the storage and find out all the keys owned by this cache\r\n\t * also clean the expired keys while scanning\r\n\t *\r\n\t * @private\r\n\t *\r\n\t * @return array of keys\r\n\t */\r\n\tprivate _findValidKeys(): string[] {\r\n\t\tconst keys: string[] = [];\r\n\t\tconst keyInCache: string[] = [];\r\n\t\t// get all keys in Storage\r\n\t\tfor (let i = 0; i < this.config.storage.length; i += 1) {\r\n\t\t\tkeyInCache.push(this.config.storage.key(i));\r\n\t\t}\r\n\r\n\t\t// find those items which belong to our cache and also clean those expired items\r\n\t\tfor (let i = 0; i < keyInCache.length; i += 1) {\r\n\t\t\tconst key: string = keyInCache[i];\r\n\t\t\tif (\r\n\t\t\t\tkey.indexOf(this.config.keyPrefix) === 0 &&\r\n\t\t\t\tkey !== this.cacheCurSizeKey\r\n\t\t\t) {\r\n\t\t\t\tif (this._isExpired(key)) {\r\n\t\t\t\t\tthis._removeItem(key);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tkeys.push(key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn keys;\r\n\t}\r\n\r\n\t/**\r\n\t * get all the items we have, sort them by their priority,\r\n\t * if priority is same, sort them by their last visited time\r\n\t * pop out items from the low priority (5 is the lowest)\r\n\t *\r\n\t * @private\r\n\t * @param keys - all the keys in this cache\r\n\t * @param sizeToPop - the total size of the items which needed to be poped out\r\n\t */\r\n\tprivate _popOutItems(keys: string[], sizeToPop: number): void {\r\n\t\tconst items: CacheItem[] = [];\r\n\t\tlet remainedSize: number = sizeToPop;\r\n\t\t// get the items from Storage\r\n\t\tfor (let i = 0; i < keys.length; i += 1) {\r\n\t\t\tconst val: string | null = this.config.storage.getItem(keys[i]);\r\n\t\t\tif (val != null) {\r\n\t\t\t\tconst item: CacheItem = JSON.parse(val);\r\n\t\t\t\titems.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// first compare priority\r\n\t\t// then compare visited time\r\n\t\titems.sort((a, b) => {\r\n\t\t\tif (a.priority > b.priority) {\r\n\t\t\t\treturn -1;\r\n\t\t\t} else if (a.priority < b.priority) {\r\n\t\t\t\treturn 1;\r\n\t\t\t} else {\r\n\t\t\t\tif (a.visitedTime < b.visitedTime) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t} else return 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tfor (let i = 0; i < items.length; i += 1) {\r\n\t\t\t// pop out items until we have enough room for new item\r\n\t\t\tthis._removeItem(items[i].key, items[i].byteSize);\r\n\t\t\tremainedSize -= items[i].byteSize;\r\n\t\t\tif (remainedSize <= 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set item into cache. You can put number, string, boolean or object.\r\n\t * The cache will first check whether has the same key.\r\n\t * If it has, it will delete the old item and then put the new item in\r\n\t * The cache will pop out items if it is full\r\n\t * You can specify the cache item options. The cache will abort and output a warning:\r\n\t * If the key is invalid\r\n\t * If the size of the item exceeds itemMaxSize.\r\n\t * If the value is undefined\r\n\t * If incorrect cache item configuration\r\n\t * If error happened with browser storage\r\n\t *\r\n\t * @param key - the key of the item\r\n\t * @param value - the value of the item\r\n\t * @param {Object} [options] - optional, the specified meta-data\r\n\t */\r\n\tpublic setItem(\r\n\t\tkey: string,\r\n\t\tvalue: object | number | string | boolean,\r\n\t\toptions?: CacheItemOptions\r\n\t): void {\r\n\t\tlogger.log(\r\n\t\t\t`Set item: key is ${key}, value is ${value} with options: ${options}`\r\n\t\t);\r\n\t\tconst prefixedKey: string = this.config.keyPrefix + key;\r\n\t\t// invalid keys\r\n\t\tif (\r\n\t\t\tprefixedKey === this.config.keyPrefix ||\r\n\t\t\tprefixedKey === this.cacheCurSizeKey\r\n\t\t) {\r\n\t\t\tlogger.warn(`Invalid key: should not be empty or 'CurSize'`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (typeof value === 'undefined') {\r\n\t\t\tlogger.warn(`The value of item should not be undefined!`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst cacheItemOptions: CacheItemOptions = {\r\n\t\t\tpriority:\r\n\t\t\t\toptions && options.priority !== undefined\r\n\t\t\t\t\t? options.priority\r\n\t\t\t\t\t: this.config.defaultPriority,\r\n\t\t\texpires:\r\n\t\t\t\toptions && options.expires !== undefined\r\n\t\t\t\t\t? options.expires\r\n\t\t\t\t\t: this.config.defaultTTL + getCurrTime(),\r\n\t\t};\r\n\r\n\t\tif (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\r\n\t\t\tlogger.warn(\r\n\t\t\t\t`Invalid parameter: priority due to out or range. It should be within 1 and 5.`\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst item: CacheItem = this.fillCacheItem(\r\n\t\t\tprefixedKey,\r\n\t\t\tvalue,\r\n\t\t\tcacheItemOptions\r\n\t\t);\r\n\r\n\t\t// check wether this item is too big;\r\n\t\tif (item.byteSize > this.config.itemMaxSize) {\r\n\t\t\tlogger.warn(\r\n\t\t\t\t`Item with key: ${key} you are trying to put into is too big!`\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t// first look into the storage, if it exists, delete it.\r\n\t\t\tconst val: string | null = this.config.storage.getItem(prefixedKey);\r\n\t\t\tif (val) {\r\n\t\t\t\tthis._removeItem(prefixedKey, JSON.parse(val).byteSize);\r\n\t\t\t}\r\n\r\n\t\t\t// check whether the cache is full\r\n\t\t\tif (this._isCacheFull(item.byteSize)) {\r\n\t\t\t\tconst validKeys: string[] = this._findValidKeys();\r\n\t\t\t\t// check again and then pop out items\r\n\t\t\t\tif (this._isCacheFull(item.byteSize)) {\r\n\t\t\t\t\tconst sizeToPop: number = this._sizeToPop(item.byteSize);\r\n\t\t\t\t\tthis._popOutItems(validKeys, sizeToPop);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// put item in the cache\r\n\t\t\t// may failed due to storage full\r\n\t\t\tthis._setItem(prefixedKey, item);\r\n\t\t} catch (e) {\r\n\t\t\tlogger.warn(`setItem failed! ${e}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get item from cache. It will return null if item doesn’t exist or it has been expired.\r\n\t * If you specified callback function in the options,\r\n\t * then the function will be executed if no such item in the cache\r\n\t * and finally put the return value into cache.\r\n\t * Please make sure the callback function will return the value you want to put into the cache.\r\n\t * The cache will abort output a warning:\r\n\t * If the key is invalid\r\n\t * If error happened with browser storage\r\n\t *\r\n\t * @param key - the key of the item\r\n\t * @param {Object} [options] - the options of callback function\r\n\t *\r\n\t * @return - return the value of the item\r\n\t */\r\n\tpublic getItem(key: string, options?: CacheItemOptions): any {\r\n\t\tlogger.log(`Get item: key is ${key} with options ${options}`);\r\n\t\tlet ret: string | null = null;\r\n\t\tconst prefixedKey: string = this.config.keyPrefix + key;\r\n\r\n\t\tif (\r\n\t\t\tprefixedKey === this.config.keyPrefix ||\r\n\t\t\tprefixedKey === this.cacheCurSizeKey\r\n\t\t) {\r\n\t\t\tlogger.warn(`Invalid key: should not be empty or 'CurSize'`);\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tret = this.config.storage.getItem(prefixedKey);\r\n\t\t\tif (ret != null) {\r\n\t\t\t\tif (this._isExpired(prefixedKey)) {\r\n\t\t\t\t\t// if expired, remove that item and return null\r\n\t\t\t\t\tthis._removeItem(prefixedKey, JSON.parse(ret).byteSize);\r\n\t\t\t\t\tret = null;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// if not expired, great, return the value and refresh it\r\n\t\t\t\t\tlet item: CacheItem = JSON.parse(ret);\r\n\t\t\t\t\titem = this._refreshItem(item, prefixedKey);\r\n\t\t\t\t\treturn item.data;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (options && options.callback !== undefined) {\r\n\t\t\t\tconst val: object | string | number | boolean = options.callback();\r\n\t\t\t\tif (val !== null) {\r\n\t\t\t\t\tthis.setItem(key, val, options);\r\n\t\t\t\t}\r\n\t\t\t\treturn val;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t} catch (e) {\r\n\t\t\tlogger.warn(`getItem failed! ${e}`);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * remove item from the cache\r\n\t * The cache will abort output a warning:\r\n\t * If error happened with browser storage\r\n\t * @param key - the key of the item\r\n\t */\r\n\tpublic removeItem(key: string): void {\r\n\t\tlogger.log(`Remove item: key is ${key}`);\r\n\t\tconst prefixedKey: string = this.config.keyPrefix + key;\r\n\r\n\t\tif (\r\n\t\t\tprefixedKey === this.config.keyPrefix ||\r\n\t\t\tprefixedKey === this.cacheCurSizeKey\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst val: string | null = this.config.storage.getItem(prefixedKey);\r\n\t\t\tif (val) {\r\n\t\t\t\tthis._removeItem(prefixedKey, JSON.parse(val).byteSize);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tlogger.warn(`removeItem failed! ${e}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * clear the entire cache\r\n\t * The cache will abort output a warning:\r\n\t * If error happened with browser storage\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tlogger.log(`Clear Cache`);\r\n\t\tconst keysToRemove: string[] = [];\r\n\r\n\t\tfor (let i = 0; i < this.config.storage.length; i += 1) {\r\n\t\t\tconst key = this.config.storage.key(i);\r\n\t\t\tif (key.indexOf(this.config.keyPrefix) === 0) {\r\n\t\t\t\tkeysToRemove.push(key);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tfor (let i = 0; i < keysToRemove.length; i += 1) {\r\n\t\t\t\tthis.config.storage.removeItem(keysToRemove[i]);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tlogger.warn(`clear failed! ${e}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return all the keys in the cache.\r\n\t *\r\n\t * @return - all keys in the cache\r\n\t */\r\n\tpublic getAllKeys(): string[] {\r\n\t\tconst keys: string[] = [];\r\n\t\tfor (let i = 0; i < this.config.storage.length; i += 1) {\r\n\t\t\tconst key = this.config.storage.key(i);\r\n\t\t\tif (\r\n\t\t\t\tkey.indexOf(this.config.keyPrefix) === 0 &&\r\n\t\t\t\tkey !== this.cacheCurSizeKey\r\n\t\t\t) {\r\n\t\t\t\tkeys.push(key.substring(this.config.keyPrefix.length));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn keys;\r\n\t}\r\n\r\n\t/**\r\n\t * return the current size of the cache\r\n\t *\r\n\t * @return - current size of the cache\r\n\t */\r\n\tpublic getCacheCurSize(): number {\r\n\t\tlet ret: string | null = this.config.storage.getItem(this.cacheCurSizeKey);\r\n\t\tif (!ret) {\r\n\t\t\tthis.config.storage.setItem(this.cacheCurSizeKey, '0');\r\n\t\t\tret = '0';\r\n\t\t}\r\n\t\treturn Number(ret);\r\n\t}\r\n\r\n\t/**\r\n\t * Return a new instance of cache with customized configuration.\r\n\t * @param config - the customized configuration\r\n\t *\r\n\t * @return - new instance of Cache\r\n\t */\r\n\tpublic createInstance(config: CacheConfig): ICache {\r\n\t\tif (!config.keyPrefix || config.keyPrefix === defaultConfig.keyPrefix) {\r\n\t\t\tlogger.error('invalid keyPrefix, setting keyPrefix with timeStamp');\r\n\t\t\tconfig.keyPrefix = getCurrTime.toString();\r\n\t\t}\r\n\r\n\t\treturn new BrowserStorageCacheClass(config);\r\n\t}\r\n}\r\n\r\nexport const BrowserStorageCache: ICache = new BrowserStorageCacheClass();\r\n\r\n/**\r\n * @deprecated use named import\r\n */\r\nexport default BrowserStorageCache;\r\n"]},"metadata":{},"sourceType":"module"}