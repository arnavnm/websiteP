{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { ConsoleLogger as Logger } from './Logger';\nvar logger = new Logger('Parser');\nexport var parseMobileHubConfig = function (config) {\n  var amplifyConfig = {}; // Analytics\n\n  if (config['aws_mobile_analytics_app_id']) {\n    var Analytics = {\n      AWSPinpoint: {\n        appId: config['aws_mobile_analytics_app_id'],\n        region: config['aws_mobile_analytics_app_region']\n      }\n    };\n    amplifyConfig.Analytics = Analytics;\n  } // Auth\n\n\n  if (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\n    amplifyConfig.Auth = {\n      userPoolId: config['aws_user_pools_id'],\n      userPoolWebClientId: config['aws_user_pools_web_client_id'],\n      region: config['aws_cognito_region'],\n      identityPoolId: config['aws_cognito_identity_pool_id'],\n      identityPoolRegion: config['aws_cognito_region'],\n      mandatorySignIn: config['aws_mandatory_sign_in'] === 'enable',\n      signUpVerificationMethod: config['aws_cognito_sign_up_verification_method'] || 'code'\n    };\n  } // Storage\n\n\n  var storageConfig;\n\n  if (config['aws_user_files_s3_bucket']) {\n    storageConfig = {\n      AWSS3: {\n        bucket: config['aws_user_files_s3_bucket'],\n        region: config['aws_user_files_s3_bucket_region'],\n        dangerouslyConnectToHttpEndpointForTesting: config['aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing']\n      }\n    };\n  } else {\n    storageConfig = config ? config.Storage || config : {};\n  } // Logging\n\n\n  if (config['Logging']) {\n    amplifyConfig.Logging = __assign(__assign({}, config['Logging']), {\n      region: config['aws_project_region']\n    });\n  } // Geo\n\n\n  if (config['geo']) {\n    amplifyConfig.Geo = Object.assign({}, config.geo);\n\n    if (config.geo['amazon_location_service']) {\n      amplifyConfig.Geo = {\n        AmazonLocationService: config.geo['amazon_location_service']\n      };\n    }\n  }\n\n  amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);\n  amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\n  amplifyConfig.Storage = Object.assign({}, storageConfig);\n  amplifyConfig.Logging = Object.assign({}, amplifyConfig.Logging, config.Logging);\n  logger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\n  return amplifyConfig;\n};\n/**\n * @deprecated use per-function export\n */\n\nvar Parser =\n/** @class */\nfunction () {\n  function Parser() {}\n\n  Parser.parseMobilehubConfig = parseMobileHubConfig;\n  return Parser;\n}();\n\nexport { Parser };\n/**\n * @deprecated use per-function export\n */\n\nexport default Parser;","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","logger","parseMobileHubConfig","config","amplifyConfig","Analytics","AWSPinpoint","appId","region","Auth","userPoolId","userPoolWebClientId","identityPoolId","identityPoolRegion","mandatorySignIn","signUpVerificationMethod","storageConfig","AWSS3","bucket","dangerouslyConnectToHttpEndpointForTesting","Storage","Logging","__assign","Geo","Object","assign","geo","AmazonLocationService","debug","Parser"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-amplify/core/src/Parser.ts"],"sourcesContent":["import { AmplifyConfig } from './types';\nimport { ConsoleLogger as Logger } from './Logger';\n\nconst logger = new Logger('Parser');\n\nexport const parseMobileHubConfig = (config): AmplifyConfig => {\n\tconst amplifyConfig: AmplifyConfig = {};\n\t// Analytics\n\tif (config['aws_mobile_analytics_app_id']) {\n\t\tconst Analytics = {\n\t\t\tAWSPinpoint: {\n\t\t\t\tappId: config['aws_mobile_analytics_app_id'],\n\t\t\t\tregion: config['aws_mobile_analytics_app_region'],\n\t\t\t},\n\t\t};\n\t\tamplifyConfig.Analytics = Analytics;\n\t}\n\n\t// Auth\n\tif (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\n\t\tamplifyConfig.Auth = {\n\t\t\tuserPoolId: config['aws_user_pools_id'],\n\t\t\tuserPoolWebClientId: config['aws_user_pools_web_client_id'],\n\t\t\tregion: config['aws_cognito_region'],\n\t\t\tidentityPoolId: config['aws_cognito_identity_pool_id'],\n\t\t\tidentityPoolRegion: config['aws_cognito_region'],\n\t\t\tmandatorySignIn: config['aws_mandatory_sign_in'] === 'enable',\n\t\t\tsignUpVerificationMethod:\n\t\t\t\tconfig['aws_cognito_sign_up_verification_method'] || 'code',\n\t\t};\n\t}\n\n\t// Storage\n\tlet storageConfig;\n\tif (config['aws_user_files_s3_bucket']) {\n\t\tstorageConfig = {\n\t\t\tAWSS3: {\n\t\t\t\tbucket: config['aws_user_files_s3_bucket'],\n\t\t\t\tregion: config['aws_user_files_s3_bucket_region'],\n\t\t\t\tdangerouslyConnectToHttpEndpointForTesting:\n\t\t\t\t\tconfig[\n\t\t\t\t\t\t'aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing'\n\t\t\t\t\t],\n\t\t\t},\n\t\t};\n\t} else {\n\t\tstorageConfig = config ? config.Storage || config : {};\n\t}\n\n\t// Logging\n\tif (config['Logging']) {\n\t\tamplifyConfig.Logging = {\n\t\t\t...config['Logging'],\n\t\t\tregion: config['aws_project_region'],\n\t\t};\n\t}\n\n\t// Geo\n\tif (config['geo']) {\n\t\tamplifyConfig.Geo = Object.assign({}, config.geo);\n\t\tif (config.geo['amazon_location_service']) {\n\t\t\tamplifyConfig.Geo = {\n\t\t\t\tAmazonLocationService: config.geo['amazon_location_service'],\n\t\t\t};\n\t\t}\n\t}\n\n\tamplifyConfig.Analytics = Object.assign(\n\t\t{},\n\t\tamplifyConfig.Analytics,\n\t\tconfig.Analytics\n\t);\n\tamplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\n\tamplifyConfig.Storage = Object.assign({}, storageConfig);\n\tamplifyConfig.Logging = Object.assign(\n\t\t{},\n\t\tamplifyConfig.Logging,\n\t\tconfig.Logging\n\t);\n\tlogger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\n\treturn amplifyConfig;\n};\n\n/**\n * @deprecated use per-function export\n */\nexport class Parser {\n\tstatic parseMobilehubConfig = parseMobileHubConfig;\n}\n\n/**\n * @deprecated use per-function export\n */\nexport default Parser;\n"]},"metadata":{},"sourceType":"module"}