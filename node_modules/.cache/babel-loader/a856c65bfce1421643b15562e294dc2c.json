{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\n\nvar util_1 = require(\"@aws-crypto/util\");\n\nvar constants_1 = require(\"./constants\");\n\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\n\nvar Sha256 =\n/** @class */\nfunction () {\n  function Sha256(secret) {\n    this.toHash = new Uint8Array(0);\n\n    if (secret !== void 0) {\n      this.key = new Promise(function (resolve, reject) {\n        (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey(\"raw\", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, [\"sign\"]).then(resolve, reject);\n      });\n      this.key.catch(function () {});\n    }\n  }\n\n  Sha256.prototype.update = function (data) {\n    if ((0, util_1.isEmptyData)(data)) {\n      return;\n    }\n\n    var update = (0, util_1.convertToBuffer)(data);\n    var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  };\n\n  Sha256.prototype.digest = function () {\n    var _this = this;\n\n    if (this.key) {\n      return this.key.then(function (key) {\n        return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function (data) {\n          return new Uint8Array(data);\n        });\n      });\n    }\n\n    if ((0, util_1.isEmptyData)(this.toHash)) {\n      return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);\n    }\n\n    return Promise.resolve().then(function () {\n      return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);\n    }).then(function (data) {\n      return Promise.resolve(new Uint8Array(data));\n    });\n  };\n\n  return Sha256;\n}();\n\nexports.Sha256 = Sha256;","map":{"version":3,"mappings":"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","names":["secret","Uint8Array","key","Promise","resolve","reject","crypto","subtle","importKey","constants_1","then","catch","Sha256","data","update","typedArray","toHash","byteLength","set","sign","_this","digest","exports"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-crypto/sha256-browser/src/webCryptoSha256.ts"],"sourcesContent":["import { Hash, SourceData } from \"@aws-sdk/types\";\nimport { isEmptyData, convertToBuffer } from \"@aws-crypto/util\";\nimport {\n  EMPTY_DATA_SHA_256,\n  SHA_256_HASH,\n  SHA_256_HMAC_ALGO,\n} from \"./constants\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha256 implements Hash {\n  private readonly key: Promise<CryptoKey> | undefined;\n  private toHash: Uint8Array = new Uint8Array(0);\n\n  constructor(secret?: SourceData) {\n    if (secret !== void 0) {\n      this.key = new Promise((resolve, reject) => {\n        locateWindow()\n          .crypto.subtle.importKey(\n            \"raw\",\n            convertToBuffer(secret),\n            SHA_256_HMAC_ALGO,\n            false,\n            [\"sign\"]\n          )\n          .then(resolve, reject);\n      });\n      this.key.catch(() => {});\n    }\n  }\n\n  update(data: SourceData): void {\n    if (isEmptyData(data)) {\n      return;\n    }\n\n    const update = convertToBuffer(data);\n    const typedArray = new Uint8Array(\n      this.toHash.byteLength + update.byteLength\n    );\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  }\n\n  digest(): Promise<Uint8Array> {\n    if (this.key) {\n      return this.key.then((key) =>\n        locateWindow()\n          .crypto.subtle.sign(SHA_256_HMAC_ALGO, key, this.toHash)\n          .then((data) => new Uint8Array(data))\n      );\n    }\n\n    if (isEmptyData(this.toHash)) {\n      return Promise.resolve(EMPTY_DATA_SHA_256);\n    }\n\n    return Promise.resolve()\n      .then(() =>\n        locateWindow().crypto.subtle.digest(SHA_256_HASH, this.toHash)\n      )\n      .then((data) => Promise.resolve(new Uint8Array(data)));\n  }\n}\n"]},"metadata":{},"sourceType":"script"}