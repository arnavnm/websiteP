{"ast":null,"code":"import { __awaiter, __generator, __values } from \"tslib\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\nvar signingKeyCache = {};\nvar cacheQueue = [];\n/**\n * Create a string describing the scope of credentials used to sign a request.\n *\n * @param shortDate The current calendar date in the form YYYYMMDD.\n * @param region    The AWS region in which the service resides.\n * @param service   The service to which the signed request is being sent.\n */\n\nexport function createScope(shortDate, region, service) {\n  return shortDate + \"/\" + region + \"/\" + service + \"/\" + KEY_TYPE_IDENTIFIER;\n}\n/**\n * Derive a signing key from its composite parts\n *\n * @param sha256Constructor A constructor function that can instantiate SHA-256\n *                          hash objects.\n * @param credentials       The credentials with which the request will be\n *                          signed.\n * @param shortDate         The current calendar date in the form YYYYMMDD.\n * @param region            The AWS region in which the service resides.\n * @param service           The service to which the signed request is being\n *                          sent.\n */\n\nexport var getSigningKey = function getSigningKey(sha256Constructor, credentials, shortDate, region, service) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var credsHash, cacheKey, key, _a, _b, signable, e_1_1;\n\n    var e_1, _c;\n\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)];\n\n        case 1:\n          credsHash = _d.sent();\n          cacheKey = shortDate + \":\" + region + \":\" + service + \":\" + toHex(credsHash) + \":\" + credentials.sessionToken;\n\n          if (cacheKey in signingKeyCache) {\n            return [2\n            /*return*/\n            , signingKeyCache[cacheKey]];\n          }\n\n          cacheQueue.push(cacheKey);\n\n          while (cacheQueue.length > MAX_CACHE_SIZE) {\n            delete signingKeyCache[cacheQueue.shift()];\n          }\n\n          key = \"AWS4\" + credentials.secretAccessKey;\n          _d.label = 2;\n\n        case 2:\n          _d.trys.push([2, 7, 8, 9]);\n\n          _a = __values([shortDate, region, service, KEY_TYPE_IDENTIFIER]), _b = _a.next();\n          _d.label = 3;\n\n        case 3:\n          if (!!_b.done) return [3\n          /*break*/\n          , 6];\n          signable = _b.value;\n          return [4\n          /*yield*/\n          , hmac(sha256Constructor, key, signable)];\n\n        case 4:\n          key = _d.sent();\n          _d.label = 5;\n\n        case 5:\n          _b = _a.next();\n          return [3\n          /*break*/\n          , 3];\n\n        case 6:\n          return [3\n          /*break*/\n          , 9];\n\n        case 7:\n          e_1_1 = _d.sent();\n          e_1 = {\n            error: e_1_1\n          };\n          return [3\n          /*break*/\n          , 9];\n\n        case 8:\n          try {\n            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n\n          return [7\n          /*endfinally*/\n          ];\n\n        case 9:\n          return [2\n          /*return*/\n          , signingKeyCache[cacheKey] = key];\n      }\n    });\n  });\n};\n/**\n * @internal\n */\n\nexport function clearCredentialCache() {\n  cacheQueue.length = 0;\n  Object.keys(signingKeyCache).forEach(function (cacheKey) {\n    delete signingKeyCache[cacheKey];\n  });\n}\n\nfunction hmac(ctor, secret, data) {\n  var hash = new ctor(secret);\n  hash.update(data);\n  return hash.digest();\n}","map":{"version":3,"mappings":"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","names":["toHex","KEY_TYPE_IDENTIFIER","MAX_CACHE_SIZE","signingKeyCache","cacheQueue","createScope","shortDate","region","service","getSigningKey","sha256Constructor","credentials","hmac","secretAccessKey","accessKeyId","credsHash","_d","cacheKey","sessionToken","push","length","shift","key","_a","_b","signable","clearCredentialCache","Object","keys","forEach","ctor","secret","data","hash","update","digest"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@aws-sdk/signature-v4/src/credentialDerivation.ts"],"sourcesContent":["import { Credentials, HashConstructor, SourceData } from \"@aws-sdk/types\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\n\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\n\nconst signingKeyCache: { [key: string]: Uint8Array } = {};\nconst cacheQueue: Array<string> = [];\n\n/**\n * Create a string describing the scope of credentials used to sign a request.\n *\n * @param shortDate The current calendar date in the form YYYYMMDD.\n * @param region    The AWS region in which the service resides.\n * @param service   The service to which the signed request is being sent.\n */\nexport function createScope(shortDate: string, region: string, service: string): string {\n  return `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;\n}\n\n/**\n * Derive a signing key from its composite parts\n *\n * @param sha256Constructor A constructor function that can instantiate SHA-256\n *                          hash objects.\n * @param credentials       The credentials with which the request will be\n *                          signed.\n * @param shortDate         The current calendar date in the form YYYYMMDD.\n * @param region            The AWS region in which the service resides.\n * @param service           The service to which the signed request is being\n *                          sent.\n */\nexport const getSigningKey = async (\n  sha256Constructor: HashConstructor,\n  credentials: Credentials,\n  shortDate: string,\n  region: string,\n  service: string\n): Promise<Uint8Array> => {\n  const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n  const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;\n  if (cacheKey in signingKeyCache) {\n    return signingKeyCache[cacheKey];\n  }\n\n  cacheQueue.push(cacheKey);\n  while (cacheQueue.length > MAX_CACHE_SIZE) {\n    delete signingKeyCache[cacheQueue.shift() as string];\n  }\n\n  let key: SourceData = `AWS4${credentials.secretAccessKey}`;\n  for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {\n    key = await hmac(sha256Constructor, key, signable);\n  }\n  return (signingKeyCache[cacheKey] = key as Uint8Array);\n};\n\n/**\n * @internal\n */\nexport function clearCredentialCache(): void {\n  cacheQueue.length = 0;\n  Object.keys(signingKeyCache).forEach((cacheKey) => {\n    delete signingKeyCache[cacheKey];\n  });\n}\n\nfunction hmac(ctor: HashConstructor, secret: SourceData, data: SourceData): Promise<Uint8Array> {\n  const hash = new ctor(secret);\n  hash.update(data);\n  return hash.digest();\n}\n"]},"metadata":{},"sourceType":"module"}