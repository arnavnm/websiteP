{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport camelcaseKeys from 'camelcase-keys';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { LocationClient, SearchPlaceIndexForTextCommand, SearchPlaceIndexForPositionCommand, BatchPutGeofenceCommand, GetGeofenceCommand, ListGeofencesCommand, BatchDeleteGeofenceCommand } from '@aws-sdk/client-location';\nimport { validateGeofenceId, validateGeofencesInput } from '../util';\nvar logger = new Logger('AmazonLocationServiceProvider');\n\nvar AmazonLocationServiceProvider =\n/** @class */\nfunction () {\n  /**\n   * Initialize Geo with AWS configurations\n   * @param {Object} config - Configuration object for Geo\n   */\n  function AmazonLocationServiceProvider(config) {\n    this._config = config ? config : {};\n    logger.debug('Geo Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   * @returns {string} name of the category\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getCategory = function () {\n    return AmazonLocationServiceProvider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getProviderName = function () {\n    return AmazonLocationServiceProvider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Geo part with aws configuration\n   * @param {Object} config - Configuration of the Geo\n   * @return {Object} - Current configuration\n   */\n\n\n  AmazonLocationServiceProvider.prototype.configure = function (config) {\n    logger.debug('configure Amazon Location Service Provider', config);\n    if (!config) return this._config;\n    this._config = Object.assign({}, this._config, config);\n    return this._config;\n  };\n  /**\n   * Get the map resources that are currently available through the provider\n   * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getAvailableMaps = function () {\n    this._verifyMapResources();\n\n    var mapStyles = [];\n    var availableMaps = this._config.maps.items;\n    var region = this._config.region;\n\n    for (var mapName in availableMaps) {\n      var style = availableMaps[mapName].style;\n      mapStyles.push({\n        mapName: mapName,\n        style: style,\n        region: region\n      });\n    }\n\n    return mapStyles;\n  };\n  /**\n   * Get the map resource set as default in amplify config\n   * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getDefaultMap = function () {\n    this._verifyMapResources();\n\n    var mapName = this._config.maps.default;\n    var style = this._config.maps.items[mapName].style;\n    var region = this._config.region;\n    return {\n      mapName: mapName,\n      style: style,\n      region: region\n    };\n  };\n  /**\n   * Search by text input with optional parameters\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchByText = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_1, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n\n            if (options) {\n              locationServiceInput.FilterCountries = options.countries;\n              locationServiceInput.MaxResults = options.maxResults;\n\n              if (options.searchIndexName) {\n                locationServiceInput.IndexName = options.searchIndexName;\n              }\n\n              if (options['biasPosition'] && options['searchAreaConstraints']) {\n                throw new Error('BiasPosition and SearchAreaConstraints are mutually exclusive, please remove one or the other from the options object');\n              }\n\n              if (options['biasPosition']) {\n                locationServiceInput.BiasPosition = options['biasPosition'];\n              }\n\n              if (options['searchAreaConstraints']) {\n                locationServiceInput.FilterBBox = options['searchAreaConstraints'];\n              }\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_1 = _a.sent();\n            logger.debug(error_1);\n            throw error_1;\n\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults, {\n              deep: true\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Reverse geocoding search via a coordinate point on the map\n   * @param coordinates - Coordinates array for the search input\n   * @param options - Options parameters for the search\n   * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchByCoordinates = function (coordinates, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_2, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Position: coordinates,\n              IndexName: this._config.search_indices.default\n            };\n\n            if (options) {\n              if (options.searchIndexName) {\n                locationServiceInput.IndexName = options.searchIndexName;\n              }\n\n              locationServiceInput.MaxResults = options.maxResults;\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new SearchPlaceIndexForPositionCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_2 = _a.sent();\n            logger.debug(error_2);\n            throw error_2;\n\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults[0], {\n              deep: true\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Create geofences inside of a geofence collection\n   * @param geofences - Array of geofence objects to create\n   * @param options? - Optional parameters for creating geofences\n   * @returns {Promise<AmazonLocationServiceSaveGeofencesResults>} - Promise that resolves to an object with:\n   *   successes: list of geofences successfully created\n   *   errors: list of geofences that failed to create\n   */\n\n\n  AmazonLocationServiceProvider.prototype.saveGeofences = function (geofences, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, PascalGeofences, results, geofenceBatches, apiLimit;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofences.length < 1) {\n              throw new Error('Geofence input array is empty');\n            }\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            } // Verify geofence collection exists in aws-config.js\n\n\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n\n            validateGeofencesInput(geofences);\n            PascalGeofences = geofences.map(function (_a) {\n              var geofenceId = _a.geofenceId,\n                  polygon = _a.geometry.polygon;\n              return {\n                GeofenceId: geofenceId,\n                Geometry: {\n                  Polygon: polygon\n                }\n              };\n            });\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceBatches = [];\n\n            while (PascalGeofences.length > 0) {\n              apiLimit = 10;\n              geofenceBatches.push(PascalGeofences.splice(0, apiLimit));\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(geofenceBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_3;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      _a.trys.push([0, 2,, 3]);\n\n                      return [4\n                      /*yield*/\n                      , this._AmazonLocationServiceBatchPutGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n\n                    case 1:\n                      response = _a.sent();\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 2:\n                      error_3 = _a.sent(); // If the API call fails, add the geofences to the errors array and move to next batch\n\n                      batch.forEach(function (geofence) {\n                        results.errors.push({\n                          geofenceId: geofence.GeofenceId,\n                          error: {\n                            code: 'APIConnectionError',\n                            message: error_3.message\n                          }\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      ];\n\n                    case 3:\n                      // Push all successes to results\n                      response.Successes.forEach(function (success) {\n                        var GeofenceId = success.GeofenceId,\n                            CreateTime = success.CreateTime,\n                            UpdateTime = success.UpdateTime;\n                        results.successes.push({\n                          geofenceId: GeofenceId,\n                          createTime: CreateTime,\n                          updateTime: UpdateTime\n                        });\n                      }); // Push all errors to results\n\n                      response.Errors.forEach(function (error) {\n                        var _a = error.Error,\n                            Code = _a.Code,\n                            Message = _a.Message,\n                            GeofenceId = error.GeofenceId;\n                        results.errors.push({\n                          error: {\n                            code: Code,\n                            message: Message\n                          },\n                          geofenceId: GeofenceId\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Get geofence from a geofence collection\n   * @param geofenceId:string\n   * @param options?: Optional parameters for getGeofence\n   * @returns {Promise<AmazonLocationServiceGeofence>} - Promise that resolves to a geofence object\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getGeofence = function (geofenceId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, commandInput, command, response, error_4, GeofenceId, CreateTime, UpdateTime, Status, Geometry, geofence;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            } // Verify geofence collection exists in aws-config.js\n\n\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n\n            validateGeofenceId(geofenceId);\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            commandInput = {\n              GeofenceId: geofenceId,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new GetGeofenceCommand(commandInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_4 = _a.sent();\n            logger.debug(error_4);\n            throw error_4;\n\n          case 5:\n            GeofenceId = response.GeofenceId, CreateTime = response.CreateTime, UpdateTime = response.UpdateTime, Status = response.Status, Geometry = response.Geometry;\n            geofence = {\n              createTime: CreateTime,\n              geofenceId: GeofenceId,\n              geometry: {\n                polygon: Geometry.Polygon\n              },\n              status: Status,\n              updateTime: UpdateTime\n            };\n            return [2\n            /*return*/\n            , geofence];\n        }\n      });\n    });\n  };\n  /**\n   * List geofences from a geofence collection\n   * @param  options?: ListGeofenceOptions\n   * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n   *   entries: list of geofences - 100 geofences are listed per page\n   *   nextToken: token for next page of geofences\n   */\n\n\n  AmazonLocationServiceProvider.prototype.listGeofences = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, listGeofencesInput, command, response, error_5, NextToken, Entries, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            } // Verify geofence collection exists in aws-config.js\n\n\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            listGeofencesInput = {\n              NextToken: options === null || options === void 0 ? void 0 : options.nextToken,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new ListGeofencesCommand(listGeofencesInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_5 = _a.sent();\n            logger.debug(error_5);\n            throw error_5;\n\n          case 5:\n            NextToken = response.NextToken, Entries = response.Entries;\n            results = {\n              entries: Entries.map(function (_a) {\n                var GeofenceId = _a.GeofenceId,\n                    CreateTime = _a.CreateTime,\n                    UpdateTime = _a.UpdateTime,\n                    Status = _a.Status,\n                    Polygon = _a.Geometry.Polygon;\n                return {\n                  geofenceId: GeofenceId,\n                  createTime: CreateTime,\n                  updateTime: UpdateTime,\n                  status: Status,\n                  geometry: {\n                    polygon: Polygon\n                  }\n                };\n              }),\n              nextToken: NextToken\n            };\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Delete geofences from a geofence collection\n   * @param geofenceIds: string|string[]\n   * @param options?: GeofenceOptions\n   * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n   *  successes: list of geofences successfully deleted\n   *  errors: list of geofences that failed to delete\n   */\n\n\n  AmazonLocationServiceProvider.prototype.deleteGeofences = function (geofenceIds, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, badGeofenceIds, results, geofenceIdBatches, count;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofenceIds.length < 1) {\n              throw new Error('GeofenceId input array is empty');\n            }\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n\n            badGeofenceIds = geofenceIds.filter(function (geofenceId) {\n              try {\n                validateGeofenceId(geofenceId);\n              } catch (error) {\n                return true;\n              }\n            });\n\n            if (badGeofenceIds.length > 0) {\n              throw new Error(\"Invalid geofence ids: \" + badGeofenceIds.join(', '));\n            }\n\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceIdBatches = [];\n            count = 0;\n\n            while (count < geofenceIds.length) {\n              geofenceIdBatches.push(geofenceIds.slice(count, count += 10));\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(geofenceIdBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_6, badGeofenceIds;\n\n                var _a;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _b.trys.push([0, 2,, 3]);\n\n                      return [4\n                      /*yield*/\n                      , this._AmazonLocationServiceBatchDeleteGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n\n                    case 1:\n                      response = _b.sent();\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 2:\n                      error_6 = _b.sent(); // If the API call fails, add the geofences to the errors array and move to next batch\n\n                      batch.forEach(function (geofenceId) {\n                        var errorObject = {\n                          geofenceId: geofenceId,\n                          error: {\n                            code: error_6.message,\n                            message: error_6.message\n                          }\n                        };\n                        results.errors.push(errorObject);\n                      });\n                      return [2\n                      /*return*/\n                      ];\n\n                    case 3:\n                      badGeofenceIds = response.Errors.map(function (_a) {\n                        var geofenceId = _a.geofenceId;\n                        return geofenceId;\n                      });\n\n                      (_a = results.successes).push.apply(_a, __spread(batch.filter(function (Id) {\n                        return !badGeofenceIds.includes(Id);\n                      })));\n\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  AmazonLocationServiceProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, cred, error_7;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2\n            /*return*/\n            , false];\n            cred = Credentials.shear(credentials);\n            logger.debug('Set credentials for storage. Credentials are:', cred);\n            this._config.credentials = cred;\n            return [2\n            /*return*/\n            , true];\n\n          case 2:\n            error_7 = _a.sent();\n            logger.debug('Ensure credentials error. Credentials are:', error_7);\n            return [2\n            /*return*/\n            , false];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyMapResources = function () {\n    if (!this._config.maps) {\n      var errorString = \"No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n\n    if (!this._config.maps.default) {\n      var errorString = \"No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._verifySearchIndex = function (optionalSearchIndex) {\n    if ((!this._config.search_indices || !this._config.search_indices.default) && !optionalSearchIndex) {\n      var errorString = 'No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyGeofenceCollections = function (optionalGeofenceCollectionName) {\n    if ((!this._config.geofenceCollections || !this._config.geofenceCollections.default) && !optionalGeofenceCollectionName) {\n      var errorString = 'No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchPutGeofenceCall = function (PascalGeofences, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var geofenceInput, client, command, response, error_8;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            geofenceInput = {\n              Entries: PascalGeofences,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new BatchPutGeofenceCommand(geofenceInput);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_8 = _a.sent();\n            throw error_8;\n\n          case 4:\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchDeleteGeofenceCall = function (geofenceIds, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteGeofencesInput, client, command, response, error_9;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            deleteGeofencesInput = {\n              GeofenceIds: geofenceIds,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_9 = _a.sent();\n            throw error_9;\n\n          case 4:\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.CATEGORY = 'Geo';\n  AmazonLocationServiceProvider.PROVIDER_NAME = 'AmazonLocationService';\n  return AmazonLocationServiceProvider;\n}();\n\nexport { AmazonLocationServiceProvider };","map":{"version":3,"mappings":"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","names":["camelcaseKeys","ConsoleLogger","Logger","Credentials","getAmplifyUserAgent","LocationClient","SearchPlaceIndexForTextCommand","SearchPlaceIndexForPositionCommand","BatchPutGeofenceCommand","GetGeofenceCommand","ListGeofencesCommand","BatchDeleteGeofenceCommand","validateGeofenceId","validateGeofencesInput","logger","config","_config","debug","AmazonLocationServiceProvider","CATEGORY","PROVIDER_NAME","Object","assign","_verifyMapResources","mapStyles","availableMaps","maps","items","region","mapName","style","push","default","text","options","_ensureCredentials","credentialsOK","_a","Error","_verifySearchIndex","searchIndexName","locationServiceInput","Text","IndexName","search_indices","FilterCountries","countries","MaxResults","maxResults","BiasPosition","FilterBBox","client","credentials","customUserAgent","command","send","response","error_1","PascalResults","Results","map","Place","results","deep","coordinates","Position","error_2","geofences","length","_verifyGeofenceCollections","collectionName","error","PascalGeofences","geofenceId","polygon","GeofenceId","Geometry","Polygon","successes","errors","geofenceBatches","apiLimit","splice","Promise","all","batch","_AmazonLocationServiceBatchPutGeofenceCall","geofenceCollections","forEach","geofence","code","message","error_3","Successes","CreateTime","UpdateTime","createTime","updateTime","Errors","Code","Message","commandInput","CollectionName","error_4","Status","geometry","status","listGeofencesInput","NextToken","nextToken","error_5","Entries","entries","geofenceIds","badGeofenceIds","filter","join","geofenceIdBatches","count","slice","_AmazonLocationServiceBatchDeleteGeofenceCall","_b","errorObject","error_6","apply","__spread","includes","Id","get","cred","shear","error_7","errorString","optionalSearchIndex","optionalGeofenceCollectionName","geofenceInput","error_8","deleteGeofencesInput","GeofenceIds","error_9"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-amplify/geo/src/Providers/AmazonLocationServiceProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport camelcaseKeys from 'camelcase-keys';\n\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport {\n\tPlace as PlaceResult,\n\tSearchPlaceIndexForTextCommandInput,\n\tLocationClient,\n\tSearchPlaceIndexForTextCommand,\n\tSearchPlaceIndexForPositionCommand,\n\tSearchPlaceIndexForPositionCommandInput,\n\tBatchPutGeofenceCommand,\n\tBatchPutGeofenceCommandInput,\n\tBatchPutGeofenceRequestEntry,\n\tBatchPutGeofenceCommandOutput,\n\tGetGeofenceCommand,\n\tGetGeofenceCommandInput,\n\tGetGeofenceCommandOutput,\n\tListGeofencesCommand,\n\tListGeofencesCommandInput,\n\tListGeofencesCommandOutput,\n\tBatchDeleteGeofenceCommand,\n\tBatchDeleteGeofenceCommandInput,\n\tBatchDeleteGeofenceCommandOutput,\n} from '@aws-sdk/client-location';\n\nimport { validateGeofenceId, validateGeofencesInput } from '../util';\n\nimport {\n\tGeoConfig,\n\tSearchByTextOptions,\n\tSearchByCoordinatesOptions,\n\tGeoProvider,\n\tPlace,\n\tAmazonLocationServiceMapStyle,\n\tCoordinates,\n\tGeofenceId,\n\tGeofenceInput,\n\tAmazonLocationServiceGeofenceOptions,\n\tAmazonLocationServiceListGeofenceOptions,\n\tListGeofenceResults,\n\tAmazonLocationServiceGeofenceStatus,\n\tSaveGeofencesResults,\n\tAmazonLocationServiceGeofence,\n\tGeofencePolygon,\n\tAmazonLocationServiceDeleteGeofencesResults,\n} from '../types';\n\nconst logger = new Logger('AmazonLocationServiceProvider');\n\nexport class AmazonLocationServiceProvider implements GeoProvider {\n\tstatic CATEGORY = 'Geo';\n\tstatic PROVIDER_NAME = 'AmazonLocationService';\n\n\t/**\n\t * @private\n\t */\n\tprivate _config;\n\n\t/**\n\t * Initialize Geo with AWS configurations\n\t * @param {Object} config - Configuration object for Geo\n\t */\n\tconstructor(config?: GeoConfig) {\n\t\tthis._config = config ? config : {};\n\t\tlogger.debug('Geo Options', this._config);\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t * @returns {string} name of the category\n\t */\n\tpublic getCategory(): string {\n\t\treturn AmazonLocationServiceProvider.CATEGORY;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t * @returns {string} name of the provider\n\t */\n\tpublic getProviderName(): string {\n\t\treturn AmazonLocationServiceProvider.PROVIDER_NAME;\n\t}\n\n\t/**\n\t * Configure Geo part with aws configuration\n\t * @param {Object} config - Configuration of the Geo\n\t * @return {Object} - Current configuration\n\t */\n\tpublic configure(config?): object {\n\t\tlogger.debug('configure Amazon Location Service Provider', config);\n\t\tif (!config) return this._config;\n\t\tthis._config = Object.assign({}, this._config, config);\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * Get the map resources that are currently available through the provider\n\t * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n\t */\n\tpublic getAvailableMaps(): AmazonLocationServiceMapStyle[] {\n\t\tthis._verifyMapResources();\n\n\t\tconst mapStyles: AmazonLocationServiceMapStyle[] = [];\n\t\tconst availableMaps = this._config.maps.items;\n\t\tconst region = this._config.region;\n\n\t\tfor (const mapName in availableMaps) {\n\t\t\tconst style = availableMaps[mapName].style;\n\t\t\tmapStyles.push({ mapName, style, region });\n\t\t}\n\n\t\treturn mapStyles;\n\t}\n\n\t/**\n\t * Get the map resource set as default in amplify config\n\t * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n\t */\n\tpublic getDefaultMap(): AmazonLocationServiceMapStyle {\n\t\tthis._verifyMapResources();\n\n\t\tconst mapName = this._config.maps.default;\n\t\tconst style = this._config.maps.items[mapName].style;\n\t\tconst region = this._config.region;\n\n\t\treturn { mapName, style, region };\n\t}\n\n\t/**\n\t * Search by text input with optional parameters\n\t * @param  {string} text - The text string that is to be searched for\n\t * @param  {SearchByTextOptions} options? - Optional parameters to the search\n\t * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n\t */\n\tpublic async searchByText(\n\t\ttext: string,\n\t\toptions?: SearchByTextOptions\n\t): Promise<Place[]> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifySearchIndex(options?.searchIndexName);\n\n\t\t/**\n\t\t * Setup the searchInput\n\t\t */\n\t\tconst locationServiceInput: SearchPlaceIndexForTextCommandInput = {\n\t\t\tText: text,\n\t\t\tIndexName: this._config.search_indices.default,\n\t\t};\n\n\t\t/**\n\t\t * Map search options to Amazon Location Service input object\n\t\t */\n\t\tif (options) {\n\t\t\tlocationServiceInput.FilterCountries = options.countries;\n\t\t\tlocationServiceInput.MaxResults = options.maxResults;\n\n\t\t\tif (options.searchIndexName) {\n\t\t\t\tlocationServiceInput.IndexName = options.searchIndexName;\n\t\t\t}\n\n\t\t\tif (options['biasPosition'] && options['searchAreaConstraints']) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'BiasPosition and SearchAreaConstraints are mutually exclusive, please remove one or the other from the options object'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (options['biasPosition']) {\n\t\t\t\tlocationServiceInput.BiasPosition = options['biasPosition'];\n\t\t\t}\n\t\t\tif (options['searchAreaConstraints']) {\n\t\t\t\tlocationServiceInput.FilterBBox = options['searchAreaConstraints'];\n\t\t\t}\n\t\t}\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t * The response from Amazon Location Service is a \"Results\" array of objects with a single `Place` item,\n\t\t * which are Place objects in PascalCase.\n\t\t * Here we want to flatten that to an array of results and change them to camelCase\n\t\t */\n\t\tconst PascalResults: PlaceResult[] = response.Results.map(\n\t\t\tresult => result.Place\n\t\t);\n\t\tconst results: Place[] = camelcaseKeys(PascalResults, {\n\t\t\tdeep: true,\n\t\t}) as undefined as Place[];\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Reverse geocoding search via a coordinate point on the map\n\t * @param coordinates - Coordinates array for the search input\n\t * @param options - Options parameters for the search\n\t * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n\t */\n\tpublic async searchByCoordinates(\n\t\tcoordinates: Coordinates,\n\t\toptions?: SearchByCoordinatesOptions\n\t): Promise<Place> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifySearchIndex(options?.searchIndexName);\n\n\t\tconst locationServiceInput: SearchPlaceIndexForPositionCommandInput = {\n\t\t\tPosition: coordinates,\n\t\t\tIndexName: this._config.search_indices.default,\n\t\t};\n\n\t\tif (options) {\n\t\t\tif (options.searchIndexName) {\n\t\t\t\tlocationServiceInput.IndexName = options.searchIndexName;\n\t\t\t}\n\t\t\tlocationServiceInput.MaxResults = options.maxResults;\n\t\t}\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst command = new SearchPlaceIndexForPositionCommand(\n\t\t\tlocationServiceInput\n\t\t);\n\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t/**\n\t\t * The response from Amazon Location Service is a \"Results\" array with a single `Place` object\n\t\t * which are Place objects in PascalCase.\n\t\t * Here we want to flatten that to an array of results and change them to camelCase\n\t\t */\n\t\tconst PascalResults = response.Results.map(result => result.Place);\n\t\tconst results: Place = camelcaseKeys(PascalResults[0], {\n\t\t\tdeep: true,\n\t\t}) as any as Place;\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Create geofences inside of a geofence collection\n\t * @param geofences - Array of geofence objects to create\n\t * @param options? - Optional parameters for creating geofences\n\t * @returns {Promise<AmazonLocationServiceSaveGeofencesResults>} - Promise that resolves to an object with:\n\t *   successes: list of geofences successfully created\n\t *   errors: list of geofences that failed to create\n\t */\n\tpublic async saveGeofences(\n\t\tgeofences: GeofenceInput[],\n\t\toptions?: AmazonLocationServiceGeofenceOptions\n\t): Promise<SaveGeofencesResults> {\n\t\tif (geofences.length < 1) {\n\t\t\tthrow new Error('Geofence input array is empty');\n\t\t}\n\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\t// Verify geofence collection exists in aws-config.js\n\t\ttry {\n\t\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\tvalidateGeofencesInput(geofences);\n\n\t\t// Convert geofences to PascalCase for Amazon Location Service format\n\t\tconst PascalGeofences: BatchPutGeofenceRequestEntry[] = geofences.map(\n\t\t\t({ geofenceId, geometry: { polygon } }) => {\n\t\t\t\treturn {\n\t\t\t\t\tGeofenceId: geofenceId,\n\t\t\t\t\tGeometry: {\n\t\t\t\t\t\tPolygon: polygon,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t);\n\t\tconst results: SaveGeofencesResults = {\n\t\t\tsuccesses: [],\n\t\t\terrors: [],\n\t\t};\n\n\t\tconst geofenceBatches: BatchPutGeofenceRequestEntry[][] = [];\n\n\t\twhile (PascalGeofences.length > 0) {\n\t\t\t// Splice off 10 geofences from input clone due to Amazon Location Service API limit\n\t\t\tconst apiLimit = 10;\n\t\t\tgeofenceBatches.push(PascalGeofences.splice(0, apiLimit));\n\t\t}\n\n\t\tawait Promise.all(\n\t\t\tgeofenceBatches.map(async batch => {\n\t\t\t\t// Make API call for the 10 geofences\n\t\t\t\tlet response: BatchPutGeofenceCommandOutput;\n\t\t\t\ttry {\n\t\t\t\t\tresponse = await this._AmazonLocationServiceBatchPutGeofenceCall(\n\t\t\t\t\t\tbatch,\n\t\t\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// If the API call fails, add the geofences to the errors array and move to next batch\n\t\t\t\t\tbatch.forEach(geofence => {\n\t\t\t\t\t\tresults.errors.push({\n\t\t\t\t\t\t\tgeofenceId: geofence.GeofenceId,\n\t\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\t\tcode: 'APIConnectionError',\n\t\t\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Push all successes to results\n\t\t\t\tresponse.Successes.forEach(success => {\n\t\t\t\t\tconst { GeofenceId, CreateTime, UpdateTime } = success;\n\t\t\t\t\tresults.successes.push({\n\t\t\t\t\t\tgeofenceId: GeofenceId,\n\t\t\t\t\t\tcreateTime: CreateTime,\n\t\t\t\t\t\tupdateTime: UpdateTime,\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t// Push all errors to results\n\t\t\t\tresponse.Errors.forEach(error => {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tError: { Code, Message },\n\t\t\t\t\t\tGeofenceId,\n\t\t\t\t\t} = error;\n\t\t\t\t\tresults.errors.push({\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tcode: Code,\n\t\t\t\t\t\t\tmessage: Message,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgeofenceId: GeofenceId,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Get geofence from a geofence collection\n\t * @param geofenceId:string\n\t * @param options?: Optional parameters for getGeofence\n\t * @returns {Promise<AmazonLocationServiceGeofence>} - Promise that resolves to a geofence object\n\t */\n\tpublic async getGeofence(\n\t\tgeofenceId: GeofenceId,\n\t\toptions?: AmazonLocationServiceGeofenceOptions\n\t): Promise<AmazonLocationServiceGeofence> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\t// Verify geofence collection exists in aws-config.js\n\t\ttry {\n\t\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\tvalidateGeofenceId(geofenceId);\n\n\t\t// Create Amazon Location Service Client\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\t// Create Amazon Location Service command\n\t\tconst commandInput: GetGeofenceCommandInput = {\n\t\t\tGeofenceId: geofenceId,\n\t\t\tCollectionName:\n\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default,\n\t\t};\n\t\tconst command = new GetGeofenceCommand(commandInput);\n\n\t\t// Make API call\n\t\tlet response: GetGeofenceCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Convert response to camelCase for return\n\t\tconst { GeofenceId, CreateTime, UpdateTime, Status, Geometry } = response;\n\t\tconst geofence: AmazonLocationServiceGeofence = {\n\t\t\tcreateTime: CreateTime,\n\t\t\tgeofenceId: GeofenceId,\n\t\t\tgeometry: {\n\t\t\t\tpolygon: Geometry.Polygon as GeofencePolygon,\n\t\t\t},\n\t\t\tstatus: Status as AmazonLocationServiceGeofenceStatus,\n\t\t\tupdateTime: UpdateTime,\n\t\t};\n\n\t\treturn geofence;\n\t}\n\n\t/**\n\t * List geofences from a geofence collection\n\t * @param  options?: ListGeofenceOptions\n\t * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n\t *   entries: list of geofences - 100 geofences are listed per page\n\t *   nextToken: token for next page of geofences\n\t */\n\tpublic async listGeofences(\n\t\toptions?: AmazonLocationServiceListGeofenceOptions\n\t): Promise<ListGeofenceResults> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\t// Verify geofence collection exists in aws-config.js\n\t\ttry {\n\t\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Create Amazon Location Service Client\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\t// Create Amazon Location Service input\n\t\tconst listGeofencesInput: ListGeofencesCommandInput = {\n\t\t\tNextToken: options?.nextToken,\n\t\t\tCollectionName:\n\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default,\n\t\t};\n\n\t\t// Create Amazon Location Service command\n\t\tconst command: ListGeofencesCommand = new ListGeofencesCommand(\n\t\t\tlistGeofencesInput\n\t\t);\n\n\t\t// Make API call\n\t\tlet response: ListGeofencesCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tlogger.debug(error);\n\t\t\tthrow error;\n\t\t}\n\n\t\t// Convert response to camelCase for return\n\t\tconst { NextToken, Entries } = response;\n\n\t\tconst results: ListGeofenceResults = {\n\t\t\tentries: Entries.map(\n\t\t\t\t({\n\t\t\t\t\tGeofenceId,\n\t\t\t\t\tCreateTime,\n\t\t\t\t\tUpdateTime,\n\t\t\t\t\tStatus,\n\t\t\t\t\tGeometry: { Polygon },\n\t\t\t\t}) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgeofenceId: GeofenceId,\n\t\t\t\t\t\tcreateTime: CreateTime,\n\t\t\t\t\t\tupdateTime: UpdateTime,\n\t\t\t\t\t\tstatus: Status,\n\t\t\t\t\t\tgeometry: {\n\t\t\t\t\t\t\tpolygon: Polygon as GeofencePolygon,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t),\n\t\t\tnextToken: NextToken,\n\t\t};\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Delete geofences from a geofence collection\n\t * @param geofenceIds: string|string[]\n\t * @param options?: GeofenceOptions\n\t * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n\t *  successes: list of geofences successfully deleted\n\t *  errors: list of geofences that failed to delete\n\t */\n\tpublic async deleteGeofences(\n\t\tgeofenceIds: string[],\n\t\toptions?: AmazonLocationServiceGeofenceOptions\n\t): Promise<AmazonLocationServiceDeleteGeofencesResults> {\n\t\tif (geofenceIds.length < 1) {\n\t\t\tthrow new Error('GeofenceId input array is empty');\n\t\t}\n\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\n\t\tthis._verifyGeofenceCollections(options?.collectionName);\n\n\t\t// Validate all geofenceIds are valid\n\t\tconst badGeofenceIds = geofenceIds.filter(geofenceId => {\n\t\t\ttry {\n\t\t\t\tvalidateGeofenceId(geofenceId);\n\t\t\t} catch (error) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tif (badGeofenceIds.length > 0) {\n\t\t\tthrow new Error(`Invalid geofence ids: ${badGeofenceIds.join(', ')}`);\n\t\t}\n\n\t\tconst results: AmazonLocationServiceDeleteGeofencesResults = {\n\t\t\tsuccesses: [],\n\t\t\terrors: [],\n\t\t};\n\n\t\tconst geofenceIdBatches: string[][] = [];\n\n\t\tlet count = 0;\n\t\twhile (count < geofenceIds.length) {\n\t\t\tgeofenceIdBatches.push(geofenceIds.slice(count, (count += 10)));\n\t\t}\n\n\t\tawait Promise.all(\n\t\t\tgeofenceIdBatches.map(async batch => {\n\t\t\t\tlet response;\n\t\t\t\ttry {\n\t\t\t\t\tresponse = await this._AmazonLocationServiceBatchDeleteGeofenceCall(\n\t\t\t\t\t\tbatch,\n\t\t\t\t\t\toptions?.collectionName || this._config.geofenceCollections.default\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// If the API call fails, add the geofences to the errors array and move to next batch\n\t\t\t\t\tbatch.forEach(geofenceId => {\n\t\t\t\t\t\tconst errorObject = {\n\t\t\t\t\t\t\tgeofenceId,\n\t\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\t\tcode: error.message,\n\t\t\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresults.errors.push(errorObject);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst badGeofenceIds = response.Errors.map(\n\t\t\t\t\t({ geofenceId }) => geofenceId\n\t\t\t\t);\n\t\t\t\tresults.successes.push(\n\t\t\t\t\t...batch.filter(Id => !badGeofenceIds.includes(Id))\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t\treturn results;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tprivate async _ensureCredentials(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return false;\n\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\tlogger.debug('Set credentials for storage. Credentials are:', cred);\n\t\t\tthis._config.credentials = cred;\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\tlogger.debug('Ensure credentials error. Credentials are:', error);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _verifyMapResources() {\n\t\tif (!this._config.maps) {\n\t\t\tconst errorString =\n\t\t\t\t\"No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t\tif (!this._config.maps.default) {\n\t\t\tconst errorString =\n\t\t\t\t\"No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n\n\tprivate _verifySearchIndex(optionalSearchIndex?: string) {\n\t\tif (\n\t\t\t(!this._config.search_indices || !this._config.search_indices.default) &&\n\t\t\t!optionalSearchIndex\n\t\t) {\n\t\t\tconst errorString =\n\t\t\t\t'No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.';\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n\n\tprivate _verifyGeofenceCollections(optionalGeofenceCollectionName?: string) {\n\t\tif (\n\t\t\t(!this._config.geofenceCollections ||\n\t\t\t\t!this._config.geofenceCollections.default) &&\n\t\t\t!optionalGeofenceCollectionName\n\t\t) {\n\t\t\tconst errorString =\n\t\t\t\t'No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.';\n\t\t\tlogger.debug(errorString);\n\t\t\tthrow new Error(errorString);\n\t\t}\n\t}\n\n\tprivate async _AmazonLocationServiceBatchPutGeofenceCall(\n\t\tPascalGeofences: BatchPutGeofenceRequestEntry[],\n\t\tcollectionName?: string\n\t) {\n\t\t// Create the BatchPutGeofence input\n\t\tconst geofenceInput: BatchPutGeofenceCommandInput = {\n\t\t\tEntries: PascalGeofences,\n\t\t\tCollectionName:\n\t\t\t\tcollectionName || this._config.geofenceCollections.default,\n\t\t};\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst command = new BatchPutGeofenceCommand(geofenceInput);\n\n\t\tlet response: BatchPutGeofenceCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t\treturn response;\n\t}\n\n\tprivate async _AmazonLocationServiceBatchDeleteGeofenceCall(\n\t\tgeofenceIds: string[],\n\t\tcollectionName?: string\n\t): Promise<BatchDeleteGeofenceCommandOutput> {\n\t\t// Create the BatchDeleteGeofence input\n\t\tconst deleteGeofencesInput: BatchDeleteGeofenceCommandInput = {\n\t\t\tGeofenceIds: geofenceIds,\n\t\t\tCollectionName:\n\t\t\t\tcollectionName || this._config.geofenceCollections.default,\n\t\t};\n\n\t\tconst client = new LocationClient({\n\t\t\tcredentials: this._config.credentials,\n\t\t\tregion: this._config.region,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\tconst command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);\n\n\t\tlet response: BatchDeleteGeofenceCommandOutput;\n\t\ttry {\n\t\t\tresponse = await client.send(command);\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t\treturn response;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}