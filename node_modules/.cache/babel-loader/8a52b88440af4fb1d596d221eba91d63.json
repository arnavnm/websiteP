{"ast":null,"code":"import * as e from \"react\";\nexport function createContext(t, n) {\n  const o = /*#__PURE__*/e.createContext(n);\n\n  function r(t) {\n    const {\n      children: n,\n      ...r\n    } = t,\n          c = e.useMemo(() => r, Object.values(r));\n    /*#__PURE__*/\n\n    return e.createElement(o.Provider, {\n      value: c\n    }, n);\n  }\n\n  return r.displayName = t + \"Provider\", [r, function (r) {\n    const c = e.useContext(o);\n    if (c) return c;\n    if (void 0 !== n) return n;\n    throw new Error(`\\`${r}\\` must be used within \\`${t}\\``);\n  }];\n}\nexport function createContextScope(n) {\n  let o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let r = [];\n\n  const c = () => {\n    const t = r.map(t => /*#__PURE__*/e.createContext(t));\n    return function (o) {\n      const r = (null == o ? void 0 : o[n]) || t;\n      return e.useMemo(() => ({\n        [`__scope${n}`]: { ...o,\n          [n]: r\n        }\n      }), [o, r]);\n    };\n  };\n\n  return c.scopeName = n, [function (t, o) {\n    const c = /*#__PURE__*/e.createContext(o),\n          u = r.length;\n\n    function s(t) {\n      const {\n        scope: o,\n        children: r,\n        ...s\n      } = t,\n            i = (null == o ? void 0 : o[n][u]) || c,\n            a = e.useMemo(() => s, Object.values(s));\n      /*#__PURE__*/\n\n      return e.createElement(i.Provider, {\n        value: a\n      }, r);\n    }\n\n    return r = [...r, o], s.displayName = t + \"Provider\", [s, function (r, s) {\n      const i = (null == s ? void 0 : s[n][u]) || c,\n            a = e.useContext(i);\n      if (a) return a;\n      if (void 0 !== o) return o;\n      throw new Error(`\\`${r}\\` must be used within \\`${t}\\``);\n    }];\n  }, t(c, ...o)];\n}\n\nfunction t() {\n  for (var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++) {\n    t[_key] = arguments[_key];\n  }\n\n  const n = t[0];\n  if (1 === t.length) return n;\n\n  const o = () => {\n    const o = t.map(e => ({\n      useScope: e(),\n      scopeName: e.scopeName\n    }));\n    return function (t) {\n      const r = o.reduce((e, _ref) => {\n        let {\n          useScope: n,\n          scopeName: o\n        } = _ref;\n        return { ...e,\n          ...n(t)[`__scope${o}`]\n        };\n      }, {});\n      return e.useMemo(() => ({\n        [`__scope${n.scopeName}`]: r\n      }), [r]);\n    };\n  };\n\n  return o.scopeName = n.scopeName, o;\n}","map":{"version":3,"mappings":"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","names":["createContext","rootComponentName","defaultContext","Context","React","Provider","props","children","context","value","useMemo","Object","values","_react","displayName","consumerName","useContext","undefined","Error","createContextScope","scopeName","createContextScopeDeps","defaultContexts","createScope","scopeContexts","map","scope","contexts","BaseContext","index","length","composeContextScopes","scopes","baseScope","scopeHooks","useScope","overrideScopes","nextScopes","reduce"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@radix-ui/react-context/dist/packages/react/context/src/createContext.tsx"],"sourcesContent":["import * as React from 'react';\n\nfunction createContext<ContextValueType extends object | null>(\n  rootComponentName: string,\n  defaultContext?: ContextValueType\n) {\n  const Context = React.createContext<ContextValueType | undefined>(defaultContext);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...context } = props;\n    // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext;\n    // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\n\ntype Scope<C = any> = { [scopeName: string]: React.Context<C>[] } | undefined;\ntype ScopeHook = (scope: Scope) => { [__scopeProp: string]: Scope };\ninterface CreateScope {\n  scopeName: string;\n  (): ScopeHook;\n}\n\nfunction createContextScope(scopeName: string, createContextScopeDeps: CreateScope[] = []) {\n  let defaultContexts: any[] = [];\n\n  /* -----------------------------------------------------------------------------------------------\n   * createContext\n   * ---------------------------------------------------------------------------------------------*/\n\n  function createContext<ContextValueType extends object | null>(\n    rootComponentName: string,\n    defaultContext?: ContextValueType\n  ) {\n    const BaseContext = React.createContext<ContextValueType | undefined>(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n\n    function Provider(\n      props: ContextValueType & { scope: Scope<ContextValueType>; children: React.ReactNode }\n    ) {\n      const { scope, children, ...context } = props;\n      const Context = scope?.[scopeName][index] || BaseContext;\n      // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n      return <Context.Provider value={value}>{children}</Context.Provider>;\n    }\n\n    function useContext(consumerName: string, scope: Scope<ContextValueType | undefined>) {\n      const Context = scope?.[scopeName][index] || BaseContext;\n      const context = React.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext;\n      // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext] as const;\n  }\n\n  /* -----------------------------------------------------------------------------------------------\n   * createScope\n   * ---------------------------------------------------------------------------------------------*/\n\n  const createScope: CreateScope = () => {\n    const scopeContexts = defaultContexts.map((defaultContext) => {\n      return React.createContext(defaultContext);\n    });\n    return function useScope(scope: Scope) {\n      const contexts = scope?.[scopeName] || scopeContexts;\n      return React.useMemo(\n        () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),\n        [scope, contexts]\n      );\n    };\n  };\n\n  createScope.scopeName = scopeName;\n  return [createContext, composeContextScopes(createScope, ...createContextScopeDeps)] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\n\nfunction composeContextScopes(...scopes: CreateScope[]) {\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n\n  const createScope: CreateScope = () => {\n    const scopeHooks = scopes.map((createScope) => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName,\n    }));\n\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return { ...nextScopes, ...currentScope };\n      }, {});\n\n      return React.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);\n    };\n  };\n\n  createScope.scopeName = baseScope.scopeName;\n  return createScope;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nexport { createContext, createContextScope };\nexport type { CreateScope, Scope };\n"]},"metadata":{},"sourceType":"module"}