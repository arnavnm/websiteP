{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\n/**\n * @internal\n */\n\nexport var useRegionalEndpointMiddleware = function (config) {\n  return function (next) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var request, _a;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              request = args.request;\n              if (!HttpRequest.isInstance(request) || config.isCustomEndpoint) return [2\n              /*return*/\n              , next(__assign({}, args))];\n              if (!(request.hostname === \"s3.amazonaws.com\")) return [3\n              /*break*/\n              , 1];\n              request.hostname = \"s3.us-east-1.amazonaws.com\";\n              return [3\n              /*break*/\n              , 3];\n\n            case 1:\n              _a = \"aws-global\";\n              return [4\n              /*yield*/\n              , config.region()];\n\n            case 2:\n              if (_a === _b.sent()) {\n                request.hostname = \"s3.amazonaws.com\";\n              }\n\n              _b.label = 3;\n\n            case 3:\n              return [2\n              /*return*/\n              , next(__assign({}, args))];\n          }\n        });\n      });\n    };\n  };\n};\n/**\n * @internal\n */\n\nexport var useRegionalEndpointMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"USE_REGIONAL_ENDPOINT\", \"S3\"],\n  name: \"useRegionalEndpointMiddleware\",\n  override: true\n};\n/**\n * @internal\n */\n\nexport var getUseRegionalEndpointPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(useRegionalEndpointMiddleware(config), useRegionalEndpointMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA;AACA;AACA;;AACA,OAAO,IAAIC,6BAA6B,GAAG,UAAUC,MAAV,EAAkB;EAAE,OAAO,UAAUC,IAAV,EAAgB;IAAE,OAAO,UAAUC,IAAV,EAAgB;MAAE,OAAON,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,YAAY;QAClK,IAAIO,OAAJ,EAAaC,EAAb;;QACA,OAAOP,WAAW,CAAC,IAAD,EAAO,UAAUQ,EAAV,EAAc;UACnC,QAAQA,EAAE,CAACC,KAAX;YACI,KAAK,CAAL;cACIH,OAAO,GAAGD,IAAI,CAACC,OAAf;cACA,IAAI,CAACL,WAAW,CAACS,UAAZ,CAAuBJ,OAAvB,CAAD,IAAoCH,MAAM,CAACQ,gBAA/C,EACI,OAAO,CAAC;cAAE;cAAH,EAAeP,IAAI,CAACN,QAAQ,CAAC,EAAD,EAAKO,IAAL,CAAT,CAAnB,CAAP;cACJ,IAAI,EAAEC,OAAO,CAACM,QAAR,KAAqB,kBAAvB,CAAJ,EAAgD,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;cAChDN,OAAO,CAACM,QAAR,GAAmB,4BAAnB;cACA,OAAO,CAAC;cAAE;cAAH,EAAc,CAAd,CAAP;;YACJ,KAAK,CAAL;cACIL,EAAE,GAAG,YAAL;cACA,OAAO,CAAC;cAAE;cAAH,EAAcJ,MAAM,CAACU,MAAP,EAAd,CAAP;;YACJ,KAAK,CAAL;cACI,IAAIN,EAAE,KAAMC,EAAE,CAACM,IAAH,EAAZ,EAAwB;gBACpBR,OAAO,CAACM,QAAR,GAAmB,kBAAnB;cACH;;cACDJ,EAAE,CAACC,KAAH,GAAW,CAAX;;YACJ,KAAK,CAAL;cAAQ,OAAO,CAAC;cAAE;cAAH,EAAeL,IAAI,CAACN,QAAQ,CAAC,EAAD,EAAKO,IAAL,CAAT,CAAnB,CAAP;UAhBZ;QAkBH,CAnBiB,CAAlB;MAoBH,CAtBgI,CAAhB;IAsB5G,CAtBmF;EAsBhF,CAtBuD;AAsBpD,CAtBJ;AAuBP;AACA;AACA;;AACA,OAAO,IAAIU,oCAAoC,GAAG;EAC9CC,IAAI,EAAE,OADwC;EAE9CC,IAAI,EAAE,CAAC,uBAAD,EAA0B,IAA1B,CAFwC;EAG9CC,IAAI,EAAE,+BAHwC;EAI9CC,QAAQ,EAAE;AAJoC,CAA3C;AAMP;AACA;AACA;;AACA,OAAO,IAAIC,4BAA4B,GAAG,UAAUjB,MAAV,EAAkB;EAAE,OAAQ;IAClEkB,YAAY,EAAE,UAAUC,WAAV,EAAuB;MACjCA,WAAW,CAACC,GAAZ,CAAgBrB,6BAA6B,CAACC,MAAD,CAA7C,EAAuDY,oCAAvD;IACH;EAHiE,CAAR;AAIzD,CAJE","names":["HttpRequest","useRegionalEndpointMiddleware","config","next","args","request","isInstance","isCustomEndpoint","hostname","_a","region","_b","useRegionalEndpointMiddlewareOptions","step","tags","name","override","getUseRegionalEndpointPlugin","applyToStack","clientStack","add"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-sdk/middleware-sdk-s3/src/use-regional-endpoint.ts"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport {\n  BuildHandler,\n  BuildHandlerArguments,\n  BuildHandlerOptions,\n  BuildHandlerOutput,\n  BuildMiddleware,\n  MetadataBearer,\n  Pluggable,\n  Provider,\n} from \"@aws-sdk/types\";\n\ntype PreviouslyResolved = {\n  region: Provider<string>;\n  isCustomEndpoint: boolean;\n};\n\n/**\n * @internal\n */\nexport const useRegionalEndpointMiddleware = (config: PreviouslyResolved): BuildMiddleware<any, any> => <\n  Output extends MetadataBearer\n>(\n  next: BuildHandler<any, Output>\n): BuildHandler<any, Output> => async (args: BuildHandlerArguments<any>): Promise<BuildHandlerOutput<Output>> => {\n  const { request } = args;\n  if (!HttpRequest.isInstance(request) || config.isCustomEndpoint) return next({ ...args });\n  if (request.hostname === \"s3.amazonaws.com\") {\n    request.hostname = \"s3.us-east-1.amazonaws.com\";\n  } else if (\"aws-global\" === (await config.region())) {\n    request.hostname = \"s3.amazonaws.com\";\n  }\n  return next({ ...args });\n};\n\n/**\n * @internal\n */\nexport const useRegionalEndpointMiddlewareOptions: BuildHandlerOptions = {\n  step: \"build\",\n  tags: [\"USE_REGIONAL_ENDPOINT\", \"S3\"],\n  name: \"useRegionalEndpointMiddleware\",\n  override: true,\n};\n\n/**\n * @internal\n */\nexport const getUseRegionalEndpointPlugin = (config: PreviouslyResolved): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(useRegionalEndpointMiddleware(config), useRegionalEndpointMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}