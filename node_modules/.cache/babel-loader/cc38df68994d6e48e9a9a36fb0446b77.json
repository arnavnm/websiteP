{"ast":null,"code":"/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\n\n/**\n * Gets all attributes of an element as a plain JavaScriot object.\n * @param {Element} element The element whose attributes to get.\n * @return {!Object} An object whose keys are the attribute keys and whose\n *     values are the attribute values. If no attributes exist, an empty\n *     object is returned.\n */\nexport function getAttributes(element) {\n  var attrs = {}; // Validate input.\n\n  if (!(element && element.nodeType === 1)) return attrs; // Return an empty object if there are no attributes.\n\n  var map = element.attributes;\n  if (map.length === 0) return {};\n\n  for (var i = 0, attr = void 0; attr = map[i]; i++) {\n    attrs[attr.name] = attr.value;\n  }\n\n  return attrs;\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,OAAvB,EAAgC;EACnC,IAAIC,KAAK,GAAG,EAAZ,CADmC,CAEnC;;EACA,IAAI,EAAED,OAAO,IAAIA,OAAO,CAACE,QAAR,KAAqB,CAAlC,CAAJ,EACI,OAAOD,KAAP,CAJ+B,CAKnC;;EACA,IAAIE,GAAG,GAAGH,OAAO,CAACI,UAAlB;EACA,IAAID,GAAG,CAACE,MAAJ,KAAe,CAAnB,EACI,OAAO,EAAP;;EACJ,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAG,KAAK,CAA5B,EAAgCA,IAAI,GAAGJ,GAAG,CAACG,CAAD,CAA1C,EAAgDA,CAAC,EAAjD,EAAqD;IACjDL,KAAK,CAACM,IAAI,CAACC,IAAN,CAAL,GAAmBD,IAAI,CAACE,KAAxB;EACH;;EACD,OAAOR,KAAP;AACH","names":["getAttributes","element","attrs","nodeType","map","attributes","length","i","attr","name","value"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-amplify/analytics/src/vendor/dom-utils/get-attributes.ts"],"sourcesContent":["/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\n\n/**\n * Gets all attributes of an element as a plain JavaScriot object.\n * @param {Element} element The element whose attributes to get.\n * @return {!Object} An object whose keys are the attribute keys and whose\n *     values are the attribute values. If no attributes exist, an empty\n *     object is returned.\n */\nexport function getAttributes(element) {\n\tconst attrs = {};\n\n\t// Validate input.\n\tif (!(element && element.nodeType === 1)) return attrs;\n\n\t// Return an empty object if there are no attributes.\n\tconst map = element.attributes;\n\tif (map.length === 0) return {};\n\n\tfor (let i = 0, attr; (attr = map[i]); i++) {\n\t\tattrs[attr.name] = attr.value;\n\t}\n\treturn attrs;\n}\n"]},"metadata":{},"sourceType":"module"}