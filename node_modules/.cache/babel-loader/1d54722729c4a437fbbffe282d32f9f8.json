{"ast":null,"code":"import { observeElementRect as t } from \"@radix-ui/rect\";\nimport * as r from \"react\";\nexport function useRect(e) {\n  const [o, c] = r.useState();\n  return r.useEffect(() => {\n    if (e) {\n      const r = t(e, c);\n      return () => {\n        c(void 0), r();\n      };\n    }\n  }, [e]), o;\n}","map":{"version":3,"mappings":"AAAA,SAAOA,kBAAkB,IAAIC,CAA7B,QAAmC,gBAAnC;AAAoD,OAAM,KAAIC,CAAV,MAAgB,OAAhB;AAAwB,OAAO,SAASC,OAAT,CAAiBC,CAAjB,EAAmB;EAAC,MAAK,CAACC,CAAD,EAAGC,CAAH,IAAMJ,CAAC,CAACK,QAAF,EAAX;EAAwB,OAAOL,CAAC,CAACM,SAAF,CAAa,MAAI;IAAC,IAAGJ,CAAH,EAAK;MAAC,MAAMF,CAAC,GAACD,CAAC,CAACG,CAAD,EAAGE,CAAH,CAAT;MAAe,OAAM,MAAI;QAACA,CAAC,CAAC,KAAK,CAAN,CAAD,EAAUJ,CAAC,EAAX;MAAc,CAAzB;IAA0B;EAAC,CAAlE,EAAoE,CAACE,CAAD,CAApE,GAAyEC,CAAhF;AAAkF","names":["useRect","measurable","rect","setRect","React","useState","useEffect","unobserve","observeElementRect","undefined"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@radix-ui/react-use-rect/dist/packages/react/use-rect/src/useRect.tsx"],"sourcesContent":["import * as React from 'react';\nimport { observeElementRect } from '@radix-ui/rect';\n\nimport type { Measurable } from '@radix-ui/rect';\n\n/**\n * Use this custom hook to get access to an element's rect (getBoundingClientRect)\n * and observe it along time.\n */\nfunction useRect(measurable: Measurable | null) {\n  const [rect, setRect] = React.useState<ClientRect>();\n  React.useEffect(() => {\n    if (measurable) {\n      const unobserve = observeElementRect(measurable, setRect);\n      return () => {\n        setRect(undefined);\n        unobserve();\n      };\n    }\n    return;\n  }, [measurable]);\n  return rect;\n}\n\nexport { useRect };\n"]},"metadata":{},"sourceType":"module"}