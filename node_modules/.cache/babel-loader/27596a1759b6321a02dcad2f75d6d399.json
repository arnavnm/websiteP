{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GetBucketNotificationConfigurationRequest, NotificationConfiguration } from \"../models/models_0\";\nimport { deserializeAws_restXmlGetBucketNotificationConfigurationCommand, serializeAws_restXmlGetBucketNotificationConfigurationCommand } from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Returns the notification configuration of a bucket.</p>\n *          <p>If notifications are not enabled on the bucket, the operation returns an empty\n *             <code>NotificationConfiguration</code> element.</p>\n *\n *          <p>By default, you must be the bucket owner to read the notification configuration of a\n *          bucket. However, the bucket owner can use a bucket policy to grant permission to other\n *          users to read this configuration with the <code>s3:GetBucketNotification</code>\n *          permission.</p>\n *\n *          <p>For more information about setting and reading the notification configuration on a\n *          bucket, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Setting Up Notification of\n *             Bucket Events</a>. For more information about bucket policies, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html\">Using Bucket Policies</a>.</p>\n *\n *          <p>The following operation is related to <code>GetBucketNotification</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketNotification.html\">PutBucketNotification</a>\n *                </p>\n *             </li>\n *          </ul>\n */\n\nvar GetBucketNotificationConfigurationCommand =\n/** @class */\nfunction (_super) {\n  __extends(GetBucketNotificationConfigurationCommand, _super); // Start section: command_properties\n  // End section: command_properties\n\n\n  function GetBucketNotificationConfigurationCommand(input) {\n    var _this = // Start section: command_constructor\n    _super.call(this) || this;\n\n    _this.input = input;\n    return _this; // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n\n\n  GetBucketNotificationConfigurationCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"S3Client\";\n    var commandName = \"GetBucketNotificationConfigurationCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: GetBucketNotificationConfigurationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: NotificationConfiguration.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  GetBucketNotificationConfigurationCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restXmlGetBucketNotificationConfigurationCommand(input, context);\n  };\n\n  GetBucketNotificationConfigurationCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restXmlGetBucketNotificationConfigurationCommand(output, context);\n  };\n\n  return GetBucketNotificationConfigurationCommand;\n}($Command);\n\nexport { GetBucketNotificationConfigurationCommand };","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,yCAAT,EAAoDC,yBAApD,QAAqF,oBAArF;AACA,SAASC,+DAAT,EAA0EC,6DAA1E,QAAgJ,0BAAhJ;AACA,SAASC,uBAAT,QAAwC,qCAAxC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,yCAAyC;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC7EV,SAAS,CAACS,yCAAD,EAA4CC,MAA5C,CAAT,CAD6E,CAE7E;EACA;;;EACA,SAASD,yCAAT,CAAmDE,KAAnD,EAA0D;IACtD,IAAIC,KAAK,GACT;IACAF,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAFrB;;IAGAD,KAAK,CAACD,KAAN,GAAcA,KAAd;IACA,OAAOC,KAAP,CALsD,CAMtD;EACH;EACD;AACJ;AACA;;;EACIH,yCAAyC,CAACK,SAA1C,CAAoDC,iBAApD,GAAwE,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;IACnH,KAAKC,eAAL,CAAqBC,GAArB,CAAyBd,cAAc,CAACW,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,KAAKH,eAAL,CAAqBC,GAArB,CAAyBf,uBAAuB,CAACY,aAAD,CAAhD;IACA,IAAIM,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;IACA,IAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;IACA,IAAIC,UAAU,GAAG,UAAjB;IACA,IAAIC,WAAW,GAAG,2CAAlB;IACA,IAAIC,uBAAuB,GAAG;MAC1BH,MAAM,EAAEA,MADkB;MAE1BC,UAAU,EAAEA,UAFc;MAG1BC,WAAW,EAAEA,WAHa;MAI1BE,uBAAuB,EAAE5B,yCAAyC,CAAC6B,kBAJzC;MAK1BC,wBAAwB,EAAE7B,yBAAyB,CAAC4B;IAL1B,CAA9B;IAOA,IAAIE,cAAc,GAAGf,aAAa,CAACe,cAAnC;IACA,OAAOT,KAAK,CAACU,OAAN,CAAc,UAAUC,OAAV,EAAmB;MACpC,OAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuChB,OAAO,IAAI,EAAlD,CAAP;IACH,CAFM,EAEJU,uBAFI,CAAP;EAGH,CAlBD;;EAmBAnB,yCAAyC,CAACK,SAA1C,CAAoDO,SAApD,GAAgE,UAAUV,KAAV,EAAiByB,OAAjB,EAA0B;IACtF,OAAOhC,6DAA6D,CAACO,KAAD,EAAQyB,OAAR,CAApE;EACH,CAFD;;EAGA3B,yCAAyC,CAACK,SAA1C,CAAoDQ,WAApD,GAAkE,UAAUe,MAAV,EAAkBD,OAAlB,EAA2B;IACzF,OAAOjC,+DAA+D,CAACkC,MAAD,EAASD,OAAT,CAAtE;EACH,CAFD;;EAGA,OAAO3B,yCAAP;AACH,CAzC8D,CAyC7DD,QAzC6D,CAA/D;;AA0CA,SAASC,yCAAT","names":["GetBucketNotificationConfigurationRequest","NotificationConfiguration","deserializeAws_restXmlGetBucketNotificationConfigurationCommand","serializeAws_restXmlGetBucketNotificationConfigurationCommand","getBucketEndpointPlugin","getSerdePlugin","Command","$Command","__extends","input","_super","_this","GetBucketNotificationConfigurationCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-sdk/client-s3/commands/GetBucketNotificationConfigurationCommand.ts"],"sourcesContent":["import { S3ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from \"../S3Client\";\nimport { GetBucketNotificationConfigurationRequest, NotificationConfiguration } from \"../models/models_0\";\nimport {\n  deserializeAws_restXmlGetBucketNotificationConfigurationCommand,\n  serializeAws_restXmlGetBucketNotificationConfigurationCommand,\n} from \"../protocols/Aws_restXml\";\nimport { getBucketEndpointPlugin } from \"@aws-sdk/middleware-bucket-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type GetBucketNotificationConfigurationCommandInput = GetBucketNotificationConfigurationRequest;\nexport type GetBucketNotificationConfigurationCommandOutput = NotificationConfiguration & __MetadataBearer;\n\n/**\n * <p>Returns the notification configuration of a bucket.</p>\n *          <p>If notifications are not enabled on the bucket, the operation returns an empty\n *             <code>NotificationConfiguration</code> element.</p>\n *\n *          <p>By default, you must be the bucket owner to read the notification configuration of a\n *          bucket. However, the bucket owner can use a bucket policy to grant permission to other\n *          users to read this configuration with the <code>s3:GetBucketNotification</code>\n *          permission.</p>\n *\n *          <p>For more information about setting and reading the notification configuration on a\n *          bucket, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html\">Setting Up Notification of\n *             Bucket Events</a>. For more information about bucket policies, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html\">Using Bucket Policies</a>.</p>\n *\n *          <p>The following operation is related to <code>GetBucketNotification</code>:</p>\n *          <ul>\n *             <li>\n *                <p>\n *                   <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketNotification.html\">PutBucketNotification</a>\n *                </p>\n *             </li>\n *          </ul>\n */\nexport class GetBucketNotificationConfigurationCommand extends $Command<\n  GetBucketNotificationConfigurationCommandInput,\n  GetBucketNotificationConfigurationCommandOutput,\n  S3ClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: GetBucketNotificationConfigurationCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: S3ClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<GetBucketNotificationConfigurationCommandInput, GetBucketNotificationConfigurationCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getBucketEndpointPlugin(configuration));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"S3Client\";\n    const commandName = \"GetBucketNotificationConfigurationCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetBucketNotificationConfigurationRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: NotificationConfiguration.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(\n    input: GetBucketNotificationConfigurationCommandInput,\n    context: __SerdeContext\n  ): Promise<__HttpRequest> {\n    return serializeAws_restXmlGetBucketNotificationConfigurationCommand(input, context);\n  }\n\n  private deserialize(\n    output: __HttpResponse,\n    context: __SerdeContext\n  ): Promise<GetBucketNotificationConfigurationCommandOutput> {\n    return deserializeAws_restXmlGetBucketNotificationConfigurationCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"]},"metadata":{},"sourceType":"module"}