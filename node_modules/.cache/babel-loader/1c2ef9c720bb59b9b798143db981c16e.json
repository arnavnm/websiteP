{"ast":null,"code":"export function observeElementRect(n, o) {\n  const i = e.get(n);\n  return void 0 === i ? (e.set(n, {\n    rect: {},\n    callbacks: [o]\n  }), 1 === e.size && (t = requestAnimationFrame(c))) : (i.callbacks.push(o), o(n.getBoundingClientRect())), () => {\n    const c = e.get(n);\n    if (void 0 === c) return;\n    const i = c.callbacks.indexOf(o);\n    i > -1 && c.callbacks.splice(i, 1), 0 === c.callbacks.length && (e.delete(n), 0 === e.size && cancelAnimationFrame(t));\n  };\n}\nlet t;\nconst e = new Map();\n\nfunction c() {\n  const n = [];\n  e.forEach((t, e) => {\n    const c = e.getBoundingClientRect();\n    var o, i;\n    o = t.rect, i = c, (o.width !== i.width || o.height !== i.height || o.top !== i.top || o.right !== i.right || o.bottom !== i.bottom || o.left !== i.left) && (t.rect = c, n.push(t));\n  }), n.forEach(t => {\n    t.callbacks.forEach(e => e(t.rect));\n  }), t = requestAnimationFrame(c);\n}","map":{"version":3,"mappings":"AAAA,OAAO,SAASA,kBAAT,CAA4BC,CAA5B,EAA8BC,CAA9B,EAAgC;EAAC,MAAMC,CAAC,GAACC,CAAC,CAACC,GAAF,CAAMJ,CAAN,CAAR;EAAiB,OAAO,KAAK,CAAL,KAASE,CAAT,IAAYC,CAAC,CAACE,GAAF,CAAML,CAAN,EAAQ;IAACM,IAAI,EAAC,EAAN;IAASC,SAAS,EAAC,CAACN,CAAD;EAAnB,CAAR,GAAiC,MAAIE,CAAC,CAACK,IAAN,KAAaC,CAAC,GAACC,qBAAqB,CAACC,CAAD,CAApC,CAA7C,KAAwFT,CAAC,CAACK,SAAF,CAAYK,IAAZ,CAAiBX,CAAjB,GAAoBA,CAAC,CAACD,CAAC,CAACa,qBAAF,EAAD,CAA7G,GAA0I,MAAI;IAAC,MAAMF,CAAC,GAACR,CAAC,CAACC,GAAF,CAAMJ,CAAN,CAAR;IAAiB,IAAG,KAAK,CAAL,KAASW,CAAZ,EAAc;IAAO,MAAMT,CAAC,GAACS,CAAC,CAACJ,SAAF,CAAYO,OAAZ,CAAoBb,CAApB,CAAR;IAA+BC,CAAC,GAAC,CAAC,CAAH,IAAMS,CAAC,CAACJ,SAAF,CAAYQ,MAAZ,CAAmBb,CAAnB,EAAqB,CAArB,CAAN,EAA8B,MAAIS,CAAC,CAACJ,SAAF,CAAYS,MAAhB,KAAyBb,CAAC,CAACc,MAAF,CAASjB,CAAT,GAAY,MAAIG,CAAC,CAACK,IAAN,IAAYU,oBAAoB,CAACT,CAAD,CAArE,CAA9B;EAAwG,CAAnU;AAAoU;AAAA,IAAIA,CAAJ;AAAM,MAAMN,CAAC,GAAC,IAAIgB,GAAJ,EAAR;;AAAgB,SAASR,CAAT,GAAY;EAAC,MAAMX,CAAC,GAAC,EAAR;EAAWG,CAAC,CAACiB,OAAF,CAAW,CAACX,CAAD,EAAGN,CAAH,KAAO;IAAC,MAAMQ,CAAC,GAACR,CAAC,CAACU,qBAAF,EAAR;IAAkC,IAAIZ,CAAJ,EAAMC,CAAN;IAAQD,CAAC,GAACQ,CAAC,CAACH,IAAJ,EAASJ,CAAC,GAACS,CAAX,EAAa,CAACV,CAAC,CAACoB,KAAF,KAAUnB,CAAC,CAACmB,KAAZ,IAAmBpB,CAAC,CAACqB,MAAF,KAAWpB,CAAC,CAACoB,MAAhC,IAAwCrB,CAAC,CAACsB,GAAF,KAAQrB,CAAC,CAACqB,GAAlD,IAAuDtB,CAAC,CAACuB,KAAF,KAAUtB,CAAC,CAACsB,KAAnE,IAA0EvB,CAAC,CAACwB,MAAF,KAAWvB,CAAC,CAACuB,MAAvF,IAA+FxB,CAAC,CAACyB,IAAF,KAASxB,CAAC,CAACwB,IAA3G,MAAmHjB,CAAC,CAACH,IAAF,GAAOK,CAAP,EAASX,CAAC,CAACY,IAAF,CAAOH,CAAP,CAA5H,CAAb;EAAoJ,CAAjN,GAAoNT,CAAC,CAACoB,OAAF,CAAWX,CAAC,IAAE;IAACA,CAAC,CAACF,SAAF,CAAYa,OAAZ,CAAqBjB,CAAC,IAAEA,CAAC,CAACM,CAAC,CAACH,IAAH,CAAzB;EAAoC,CAAnD,CAApN,EAA0QG,CAAC,GAACC,qBAAqB,CAACC,CAAD,CAAjS;AAAqS","names":["observeElementRect","elementToObserve","callback","observedData","observedElements","get","undefined","set","rect","callbacks","size","rafId","requestAnimationFrame","runLoop","push","getBoundingClientRect","index","indexOf","splice","length","delete","cancelAnimationFrame","Map","changedRectsData","forEach","data","element","newRect","rect1","rect2","width","height","top","right","bottom","left"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/Portfolio/node_modules/@radix-ui/rect/dist/packages/core/rect/src/observeElementRect.ts"],"sourcesContent":["type Measurable = { getBoundingClientRect(): ClientRect };\n\n/**\n * Observes an element's rectangle on screen (getBoundingClientRect)\n * This is useful to track elements on the screen and attach other elements\n * that might be in different layers, etc.\n */\nfunction observeElementRect(\n  /** The element whose rect to observe */\n  elementToObserve: Measurable,\n  /** The callback which will be called when the rect changes */\n  callback: CallbackFn\n) {\n  const observedData = observedElements.get(elementToObserve);\n\n  if (observedData === undefined) {\n    // add the element to the map of observed elements with its first callback\n    // because this is the first time this element is observed\n    observedElements.set(elementToObserve, { rect: {} as ClientRect, callbacks: [callback] });\n\n    if (observedElements.size === 1) {\n      // start the internal loop once at least 1 element is observed\n      rafId = requestAnimationFrame(runLoop);\n    }\n  } else {\n    // only add a callback for this element as it's already observed\n    observedData.callbacks.push(callback);\n    callback(elementToObserve.getBoundingClientRect());\n  }\n\n  return () => {\n    const observedData = observedElements.get(elementToObserve);\n    if (observedData === undefined) return;\n\n    // start by removing the callback\n    const index = observedData.callbacks.indexOf(callback);\n    if (index > -1) {\n      observedData.callbacks.splice(index, 1);\n    }\n\n    if (observedData.callbacks.length === 0) {\n      // stop observing this element because there are no\n      // callbacks registered for it anymore\n      observedElements.delete(elementToObserve);\n\n      if (observedElements.size === 0) {\n        // stop the internal loop once no elements are observed anymore\n        cancelAnimationFrame(rafId);\n      }\n    }\n  };\n}\n\n// ========================================================================\n// module internals\n\ntype CallbackFn = (rect: ClientRect) => void;\n\ntype ObservedData = {\n  rect: ClientRect;\n  callbacks: Array<CallbackFn>;\n};\n\nlet rafId: number;\nconst observedElements: Map<Measurable, ObservedData> = new Map();\n\nfunction runLoop() {\n  const changedRectsData: Array<ObservedData> = [];\n\n  // process all DOM reads first (getBoundingClientRect)\n  observedElements.forEach((data, element) => {\n    const newRect = element.getBoundingClientRect();\n\n    // gather all the data for elements whose rects have changed\n    if (!rectEquals(data.rect, newRect)) {\n      data.rect = newRect;\n      changedRectsData.push(data);\n    }\n  });\n\n  // group DOM writes here after the DOM reads (getBoundingClientRect)\n  // as DOM writes will most likely happen with the callbacks\n  changedRectsData.forEach((data) => {\n    data.callbacks.forEach((callback) => callback(data.rect));\n  });\n\n  rafId = requestAnimationFrame(runLoop);\n}\n// ========================================================================\n\n/**\n * Returns whether 2 rects are equal in values\n */\nfunction rectEquals(rect1: ClientRect, rect2: ClientRect) {\n  return (\n    rect1.width === rect2.width &&\n    rect1.height === rect2.height &&\n    rect1.top === rect2.top &&\n    rect1.right === rect2.right &&\n    rect1.bottom === rect2.bottom &&\n    rect1.left === rect2.left\n  );\n}\n\nexport { observeElementRect };\nexport type { Measurable };\n"]},"metadata":{},"sourceType":"module"}