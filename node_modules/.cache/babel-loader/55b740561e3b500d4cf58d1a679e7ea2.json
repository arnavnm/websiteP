{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\n/**\n * This middleware modifies the input on S3 CreateBucket requests.  If the LocationConstraint has not been set, this\n * middleware will set a LocationConstraint to match the configured region.  The CreateBucketConfiguration will be\n * removed entirely on requests to the us-east-1 region.\n */\n\nexport function locationConstraintMiddleware(options) {\n  var _this = this;\n\n  return function (next) {\n    return function (args) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var CreateBucketConfiguration, region;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              CreateBucketConfiguration = args.input.CreateBucketConfiguration;\n              return [4\n              /*yield*/\n              , options.region()];\n\n            case 1:\n              region = _a.sent();\n\n              if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {\n                args = __assign(__assign({}, args), {\n                  input: __assign(__assign({}, args.input), {\n                    CreateBucketConfiguration: region === \"us-east-1\" ? undefined : {\n                      LocationConstraint: region\n                    }\n                  })\n                });\n              }\n\n              return [2\n              /*return*/\n              , next(args)];\n          }\n        });\n      });\n    };\n  };\n}\nexport var locationConstraintMiddlewareOptions = {\n  step: \"initialize\",\n  tags: [\"LOCATION_CONSTRAINT\", \"CREATE_BUCKET_CONFIGURATION\"],\n  name: \"locationConstraintMiddleware\",\n  override: true\n};\nexport var getLocationConstraintPlugin = function (config) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,4BAAT,CAAsCC,OAAtC,EAA+C;EAClD,IAAIC,KAAK,GAAG,IAAZ;;EACA,OAAO,UAAUC,IAAV,EAAgB;IAAE,OAAO,UAAUC,IAAV,EAAgB;MAAE,OAAON,SAAS,CAACI,KAAD,EAAQ,KAAK,CAAb,EAAgB,KAAK,CAArB,EAAwB,YAAY;QAClG,IAAIG,yBAAJ,EAA+BC,MAA/B;QACA,OAAOP,WAAW,CAAC,IAAD,EAAO,UAAUQ,EAAV,EAAc;UACnC,QAAQA,EAAE,CAACC,KAAX;YACI,KAAK,CAAL;cACIH,yBAAyB,GAAGD,IAAI,CAACK,KAAL,CAAWJ,yBAAvC;cACA,OAAO,CAAC;cAAE;cAAH,EAAcJ,OAAO,CAACK,MAAR,EAAd,CAAP;;YACJ,KAAK,CAAL;cACIA,MAAM,GAAGC,EAAE,CAACG,IAAH,EAAT;;cACA,IAAI,CAACL,yBAAD,IAA8B,CAACA,yBAAyB,CAACM,kBAA7D,EAAiF;gBAC7EP,IAAI,GAAGP,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKO,IAAL,CAAT,EAAqB;kBAAEK,KAAK,EAAEZ,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKO,IAAI,CAACK,KAAV,CAAT,EAA2B;oBAAEJ,yBAAyB,EAAEC,MAAM,KAAK,WAAX,GAAyBM,SAAzB,GAAqC;sBAAED,kBAAkB,EAAEL;oBAAtB;kBAAlE,CAA3B;gBAAjB,CAArB,CAAf;cACH;;cACD,OAAO,CAAC;cAAE;cAAH,EAAeH,IAAI,CAACC,IAAD,CAAnB,CAAP;UATR;QAWH,CAZiB,CAAlB;MAaH,CAfiE,CAAhB;IAe7C,CAfoB;EAejB,CAfR;AAgBH;AACD,OAAO,IAAIS,mCAAmC,GAAG;EAC7CC,IAAI,EAAE,YADuC;EAE7CC,IAAI,EAAE,CAAC,qBAAD,EAAwB,6BAAxB,CAFuC;EAG7CC,IAAI,EAAE,8BAHuC;EAI7CC,QAAQ,EAAE;AAJmC,CAA1C;AAMP,OAAO,IAAIC,2BAA2B,GAAG,UAAUC,MAAV,EAAkB;EAAE,OAAQ;IACjEC,YAAY,EAAE,UAAUC,WAAV,EAAuB;MACjCA,WAAW,CAACC,GAAZ,CAAgBtB,4BAA4B,CAACmB,MAAD,CAA5C,EAAsDN,mCAAtD;IACH;EAHgE,CAAR;AAIxD,CAJE","names":["locationConstraintMiddleware","options","next","args","CreateBucketConfiguration","input","region","_a","LocationConstraint","undefined","locationConstraintMiddlewareOptions","step","tags","name","override","getLocationConstraintPlugin","config","applyToStack","clientStack","add"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-sdk/middleware-location-constraint/src/index.ts"],"sourcesContent":["import {\n  InitializeHandler,\n  InitializeHandlerArguments,\n  InitializeHandlerOptions,\n  InitializeHandlerOutput,\n  InitializeMiddleware,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nimport { LocationConstraintResolvedConfig } from \"./configuration\";\n\n/**\n * This middleware modifies the input on S3 CreateBucket requests.  If the LocationConstraint has not been set, this\n * middleware will set a LocationConstraint to match the configured region.  The CreateBucketConfiguration will be\n * removed entirely on requests to the us-east-1 region.\n */\n\nexport function locationConstraintMiddleware(\n  options: LocationConstraintResolvedConfig\n): InitializeMiddleware<any, any> {\n  return <Output extends MetadataBearer>(\n    next: InitializeHandler<any, Output>\n  ): InitializeHandler<any, Output> => async (\n    args: InitializeHandlerArguments<any>\n  ): Promise<InitializeHandlerOutput<Output>> => {\n    const { CreateBucketConfiguration } = args.input;\n    //After region config resolution, region is a Provider<string>\n    const region = await options.region();\n    if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {\n      args = {\n        ...args,\n        input: {\n          ...args.input,\n          CreateBucketConfiguration: region === \"us-east-1\" ? undefined : { LocationConstraint: region },\n        },\n      };\n    }\n\n    return next(args);\n  };\n}\n\nexport const locationConstraintMiddlewareOptions: InitializeHandlerOptions = {\n  step: \"initialize\",\n  tags: [\"LOCATION_CONSTRAINT\", \"CREATE_BUCKET_CONFIGURATION\"],\n  name: \"locationConstraintMiddleware\",\n  override: true,\n};\n\nexport const getLocationConstraintPlugin = (config: LocationConstraintResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);\n  },\n});\n"]},"metadata":{},"sourceType":"module"}