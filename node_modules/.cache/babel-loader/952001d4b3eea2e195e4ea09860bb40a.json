{"ast":null,"code":"/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { Reachability } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { ConnectionState } from '../index';\nexport var CONNECTION_CHANGE = {\n  KEEP_ALIVE_MISSED: {\n    keepAliveState: 'unhealthy'\n  },\n  KEEP_ALIVE: {\n    keepAliveState: 'healthy'\n  },\n  CONNECTION_ESTABLISHED: {\n    connectionState: 'connected'\n  },\n  CONNECTION_FAILED: {\n    intendedConnectionState: 'disconnected',\n    connectionState: 'disconnected'\n  },\n  CLOSING_CONNECTION: {\n    intendedConnectionState: 'disconnected'\n  },\n  OPENING_CONNECTION: {\n    intendedConnectionState: 'connected',\n    connectionState: 'connecting'\n  },\n  CLOSED: {\n    connectionState: 'disconnected'\n  },\n  ONLINE: {\n    networkState: 'connected'\n  },\n  OFFLINE: {\n    networkState: 'disconnected'\n  }\n};\n\nvar ConnectionStateMonitor =\n/** @class */\nfunction () {\n  function ConnectionStateMonitor() {\n    var _this = this;\n\n    this._networkMonitoringSubscription = undefined;\n    this._linkedConnectionState = {\n      networkState: 'connected',\n      connectionState: 'disconnected',\n      intendedConnectionState: 'disconnected',\n      keepAliveState: 'healthy'\n    };\n    this._linkedConnectionStateObservable = new Observable(function (connectionStateObserver) {\n      connectionStateObserver.next(_this._linkedConnectionState);\n      _this._linkedConnectionStateObserver = connectionStateObserver;\n    });\n  }\n  /**\n   * Turn network state monitoring on if it isn't on already\n   */\n\n\n  ConnectionStateMonitor.prototype.enableNetworkMonitoring = function () {\n    var _this = this; // Maintain the network state based on the reachability monitor\n\n\n    if (this._networkMonitoringSubscription === undefined) {\n      this._networkMonitoringSubscription = new Reachability().networkMonitor().subscribe(function (_a) {\n        var online = _a.online;\n\n        _this.record(online ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE);\n      });\n    }\n  };\n  /**\n   * Turn network state monitoring off if it isn't off already\n   */\n\n\n  ConnectionStateMonitor.prototype.disableNetworkMonitoring = function () {\n    var _a;\n\n    (_a = this._networkMonitoringSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    this._networkMonitoringSubscription = undefined;\n  };\n\n  Object.defineProperty(ConnectionStateMonitor.prototype, \"connectionStateObservable\", {\n    /**\n     * Get the observable that allows us to monitor the connection state\n     *\n     * @returns {Observable<ConnectionState>} - The observable that emits ConnectionState updates\n     */\n    get: function () {\n      var _this = this;\n\n      var previous; // The linked state aggregates state changes to any of the network, connection,\n      // intendedConnection and keepAliveHealth. Some states will change these independent\n      // states without changing the overall connection state.\n      // After translating from linked states to ConnectionState, then remove any duplicates\n\n      return this._linkedConnectionStateObservable.map(function (value) {\n        return _this.connectionStatesTranslator(value);\n      }).filter(function (current) {\n        var toInclude = current !== previous;\n        previous = current;\n        return toInclude;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /*\n   * Updates local connection state and emits the full state to the observer.\n   */\n\n  ConnectionStateMonitor.prototype.record = function (statusUpdates) {\n    // Maintain the network monitor\n    if (statusUpdates.intendedConnectionState === 'connected') {\n      this.enableNetworkMonitoring();\n    } else if (statusUpdates.intendedConnectionState === 'disconnected') {\n      this.disableNetworkMonitoring();\n    } // Maintain the socket state\n\n\n    var newSocketStatus = __assign(__assign({}, this._linkedConnectionState), statusUpdates);\n\n    this._linkedConnectionState = __assign({}, newSocketStatus);\n\n    this._linkedConnectionStateObserver.next(this._linkedConnectionState);\n  };\n  /*\n   * Translate the ConnectionState structure into a specific ConnectionState string literal union\n   */\n\n\n  ConnectionStateMonitor.prototype.connectionStatesTranslator = function (_a) {\n    var connectionState = _a.connectionState,\n        networkState = _a.networkState,\n        intendedConnectionState = _a.intendedConnectionState,\n        keepAliveState = _a.keepAliveState;\n    if (connectionState === 'connected' && networkState === 'disconnected') return ConnectionState.ConnectedPendingNetwork;\n    if (connectionState === 'connected' && intendedConnectionState === 'disconnected') return ConnectionState.ConnectedPendingDisconnect;\n    if (connectionState === 'disconnected' && intendedConnectionState === 'connected' && networkState === 'disconnected') return ConnectionState.ConnectionDisruptedPendingNetwork;\n    if (connectionState === 'disconnected' && intendedConnectionState === 'connected') return ConnectionState.ConnectionDisrupted;\n    if (connectionState === 'connected' && keepAliveState === 'unhealthy') return ConnectionState.ConnectedPendingKeepAlive; // All remaining states directly correspond to the connection state\n\n    if (connectionState === 'connecting') return ConnectionState.Connecting;\n    if (connectionState === 'disconnected') return ConnectionState.Disconnected;\n    return ConnectionState.Connected;\n  };\n\n  return ConnectionStateMonitor;\n}();\n\nexport { ConnectionStateMonitor };","map":{"version":3,"mappings":"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","names":["Reachability","Observable","ConnectionState","CONNECTION_CHANGE","KEEP_ALIVE_MISSED","keepAliveState","KEEP_ALIVE","CONNECTION_ESTABLISHED","connectionState","CONNECTION_FAILED","intendedConnectionState","CLOSING_CONNECTION","OPENING_CONNECTION","CLOSED","ONLINE","networkState","OFFLINE","_networkMonitoringSubscription","undefined","_linkedConnectionState","_linkedConnectionStateObservable","connectionStateObserver","next","_this","_linkedConnectionStateObserver","ConnectionStateMonitor","networkMonitor","subscribe","_a","online","record","unsubscribe","Object","previous","map","connectionStatesTranslator","value","filter","toInclude","current","statusUpdates","enableNetworkMonitoring","disableNetworkMonitoring","newSocketStatus","__assign","ConnectedPendingNetwork","ConnectedPendingDisconnect","ConnectionDisruptedPendingNetwork","ConnectionDisrupted","ConnectedPendingKeepAlive","Connecting","Disconnected","Connected"],"sources":["/Users/arnavmisra/Desktop/Portfolio-main/node_modules/@aws-amplify/pubsub/src/utils/ConnectionStateMonitor.ts"],"sourcesContent":["/*\n * Copyright 2017-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { Reachability } from '@aws-amplify/core';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { ConnectionState } from '../index';\n\n// Internal types for tracking different connection states\ntype LinkedConnectionState = 'connected' | 'disconnected';\ntype LinkedHealthState = 'healthy' | 'unhealthy';\ntype LinkedConnectionStates = {\n\tnetworkState: LinkedConnectionState;\n\tconnectionState: LinkedConnectionState | 'connecting';\n\tintendedConnectionState: LinkedConnectionState;\n\tkeepAliveState: LinkedHealthState;\n};\n\nexport const CONNECTION_CHANGE: {\n\t[key in\n\t\t| 'KEEP_ALIVE_MISSED'\n\t\t| 'KEEP_ALIVE'\n\t\t| 'CONNECTION_ESTABLISHED'\n\t\t| 'CONNECTION_FAILED'\n\t\t| 'CLOSING_CONNECTION'\n\t\t| 'OPENING_CONNECTION'\n\t\t| 'CLOSED'\n\t\t| 'ONLINE'\n\t\t| 'OFFLINE']: Partial<LinkedConnectionStates>;\n} = {\n\tKEEP_ALIVE_MISSED: { keepAliveState: 'unhealthy' },\n\tKEEP_ALIVE: { keepAliveState: 'healthy' },\n\tCONNECTION_ESTABLISHED: { connectionState: 'connected' },\n\tCONNECTION_FAILED: {\n\t\tintendedConnectionState: 'disconnected',\n\t\tconnectionState: 'disconnected',\n\t},\n\tCLOSING_CONNECTION: { intendedConnectionState: 'disconnected' },\n\tOPENING_CONNECTION: {\n\t\tintendedConnectionState: 'connected',\n\t\tconnectionState: 'connecting',\n\t},\n\tCLOSED: { connectionState: 'disconnected' },\n\tONLINE: { networkState: 'connected' },\n\tOFFLINE: { networkState: 'disconnected' },\n};\n\nexport class ConnectionStateMonitor {\n\t/**\n\t * @private\n\t */\n\tprivate _linkedConnectionState: LinkedConnectionStates;\n\tprivate _linkedConnectionStateObservable: Observable<LinkedConnectionStates>;\n\tprivate _linkedConnectionStateObserver: ZenObservable.SubscriptionObserver<LinkedConnectionStates>;\n\tprivate _networkMonitoringSubscription?: ZenObservable.Subscription;\n\n\tconstructor() {\n\t\tthis._networkMonitoringSubscription = undefined;\n\t\tthis._linkedConnectionState = {\n\t\t\tnetworkState: 'connected',\n\t\t\tconnectionState: 'disconnected',\n\t\t\tintendedConnectionState: 'disconnected',\n\t\t\tkeepAliveState: 'healthy',\n\t\t};\n\n\t\tthis._linkedConnectionStateObservable =\n\t\t\tnew Observable<LinkedConnectionStates>(connectionStateObserver => {\n\t\t\t\tconnectionStateObserver.next(this._linkedConnectionState);\n\t\t\t\tthis._linkedConnectionStateObserver = connectionStateObserver;\n\t\t\t});\n\t}\n\n\t/**\n\t * Turn network state monitoring on if it isn't on already\n\t */\n\tprivate enableNetworkMonitoring() {\n\t\t// Maintain the network state based on the reachability monitor\n\t\tif (this._networkMonitoringSubscription === undefined) {\n\t\t\tthis._networkMonitoringSubscription = new Reachability()\n\t\t\t\t.networkMonitor()\n\t\t\t\t.subscribe(({ online }) => {\n\t\t\t\t\tthis.record(\n\t\t\t\t\t\tonline ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Turn network state monitoring off if it isn't off already\n\t */\n\tprivate disableNetworkMonitoring() {\n\t\tthis._networkMonitoringSubscription?.unsubscribe();\n\t\tthis._networkMonitoringSubscription = undefined;\n\t}\n\n\t/**\n\t * Get the observable that allows us to monitor the connection state\n\t *\n\t * @returns {Observable<ConnectionState>} - The observable that emits ConnectionState updates\n\t */\n\tpublic get connectionStateObservable(): Observable<ConnectionState> {\n\t\tlet previous: ConnectionState;\n\n\t\t// The linked state aggregates state changes to any of the network, connection,\n\t\t// intendedConnection and keepAliveHealth. Some states will change these independent\n\t\t// states without changing the overall connection state.\n\n\t\t// After translating from linked states to ConnectionState, then remove any duplicates\n\t\treturn this._linkedConnectionStateObservable\n\t\t\t.map(value => {\n\t\t\t\treturn this.connectionStatesTranslator(value);\n\t\t\t})\n\t\t\t.filter(current => {\n\t\t\t\tconst toInclude = current !== previous;\n\t\t\t\tprevious = current;\n\t\t\t\treturn toInclude;\n\t\t\t});\n\t}\n\n\t/*\n\t * Updates local connection state and emits the full state to the observer.\n\t */\n\trecord(statusUpdates: Partial<LinkedConnectionStates>) {\n\t\t// Maintain the network monitor\n\t\tif (statusUpdates.intendedConnectionState === 'connected') {\n\t\t\tthis.enableNetworkMonitoring();\n\t\t} else if (statusUpdates.intendedConnectionState === 'disconnected') {\n\t\t\tthis.disableNetworkMonitoring();\n\t\t}\n\n\t\t// Maintain the socket state\n\t\tconst newSocketStatus = {\n\t\t\t...this._linkedConnectionState,\n\t\t\t...statusUpdates,\n\t\t};\n\n\t\tthis._linkedConnectionState = { ...newSocketStatus };\n\n\t\tthis._linkedConnectionStateObserver.next(this._linkedConnectionState);\n\t}\n\n\t/*\n\t * Translate the ConnectionState structure into a specific ConnectionState string literal union\n\t */\n\tprivate connectionStatesTranslator({\n\t\tconnectionState,\n\t\tnetworkState,\n\t\tintendedConnectionState,\n\t\tkeepAliveState,\n\t}: LinkedConnectionStates): ConnectionState {\n\t\tif (connectionState === 'connected' && networkState === 'disconnected')\n\t\t\treturn ConnectionState.ConnectedPendingNetwork;\n\n\t\tif (\n\t\t\tconnectionState === 'connected' &&\n\t\t\tintendedConnectionState === 'disconnected'\n\t\t)\n\t\t\treturn ConnectionState.ConnectedPendingDisconnect;\n\n\t\tif (\n\t\t\tconnectionState === 'disconnected' &&\n\t\t\tintendedConnectionState === 'connected' &&\n\t\t\tnetworkState === 'disconnected'\n\t\t)\n\t\t\treturn ConnectionState.ConnectionDisruptedPendingNetwork;\n\n\t\tif (\n\t\t\tconnectionState === 'disconnected' &&\n\t\t\tintendedConnectionState === 'connected'\n\t\t)\n\t\t\treturn ConnectionState.ConnectionDisrupted;\n\n\t\tif (connectionState === 'connected' && keepAliveState === 'unhealthy')\n\t\t\treturn ConnectionState.ConnectedPendingKeepAlive;\n\n\t\t// All remaining states directly correspond to the connection state\n\t\tif (connectionState === 'connecting') return ConnectionState.Connecting;\n\t\tif (connectionState === 'disconnected') return ConnectionState.Disconnected;\n\t\treturn ConnectionState.Connected;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}